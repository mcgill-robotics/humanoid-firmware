
devkit_servo_test_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017ae4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000031b8  08017d84  08017d84  00027d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801af3c  0801af3c  00030158  2**0
                  CONTENTS
  4 .ARM          00000008  0801af3c  0801af3c  0002af3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801af44  0801af44  00030158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801af44  0801af44  0002af44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801af48  0801af48  0002af48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  24000000  0801af4c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000098  0801afe4  00030098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000f8  0801b044  000300f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00015454  24000158  0801b0a4  00030158  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  240155ac  0801b0a4  000355ac  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00030158  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003ec37  00000000  00000000  00030186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000844c  00000000  00000000  0006edbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002b20  00000000  00000000  00077210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002970  00000000  00000000  00079d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0004b850  00000000  00000000  0007c6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00041fa7  00000000  00000000  000c7ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001af931  00000000  00000000  00109e97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  002b97c8  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000be50  00000000  00000000  002b9818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000158 	.word	0x24000158
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08017d6c 	.word	0x08017d6c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400015c 	.word	0x2400015c
 80002dc:	08017d6c 	.word	0x08017d6c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000688:	4b3d      	ldr	r3, [pc, #244]	; (8000780 <SystemInit+0xfc>)
 800068a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068e:	4a3c      	ldr	r2, [pc, #240]	; (8000780 <SystemInit+0xfc>)
 8000690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000698:	4b39      	ldr	r3, [pc, #228]	; (8000780 <SystemInit+0xfc>)
 800069a:	691b      	ldr	r3, [r3, #16]
 800069c:	4a38      	ldr	r2, [pc, #224]	; (8000780 <SystemInit+0xfc>)
 800069e:	f043 0310 	orr.w	r3, r3, #16
 80006a2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a4:	4b37      	ldr	r3, [pc, #220]	; (8000784 <SystemInit+0x100>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f003 030f 	and.w	r3, r3, #15
 80006ac:	2b06      	cmp	r3, #6
 80006ae:	d807      	bhi.n	80006c0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b0:	4b34      	ldr	r3, [pc, #208]	; (8000784 <SystemInit+0x100>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f023 030f 	bic.w	r3, r3, #15
 80006b8:	4a32      	ldr	r2, [pc, #200]	; (8000784 <SystemInit+0x100>)
 80006ba:	f043 0307 	orr.w	r3, r3, #7
 80006be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c0:	4b31      	ldr	r3, [pc, #196]	; (8000788 <SystemInit+0x104>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a30      	ldr	r2, [pc, #192]	; (8000788 <SystemInit+0x104>)
 80006c6:	f043 0301 	orr.w	r3, r3, #1
 80006ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006cc:	4b2e      	ldr	r3, [pc, #184]	; (8000788 <SystemInit+0x104>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006d2:	4b2d      	ldr	r3, [pc, #180]	; (8000788 <SystemInit+0x104>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	492c      	ldr	r1, [pc, #176]	; (8000788 <SystemInit+0x104>)
 80006d8:	4b2c      	ldr	r3, [pc, #176]	; (800078c <SystemInit+0x108>)
 80006da:	4013      	ands	r3, r2
 80006dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006de:	4b29      	ldr	r3, [pc, #164]	; (8000784 <SystemInit+0x100>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f003 0308 	and.w	r3, r3, #8
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d007      	beq.n	80006fa <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ea:	4b26      	ldr	r3, [pc, #152]	; (8000784 <SystemInit+0x100>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f023 030f 	bic.w	r3, r3, #15
 80006f2:	4a24      	ldr	r2, [pc, #144]	; (8000784 <SystemInit+0x100>)
 80006f4:	f043 0307 	orr.w	r3, r3, #7
 80006f8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <SystemInit+0x104>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <SystemInit+0x104>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <SystemInit+0x104>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <SystemInit+0x104>)
 800070e:	4a20      	ldr	r2, [pc, #128]	; (8000790 <SystemInit+0x10c>)
 8000710:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <SystemInit+0x104>)
 8000714:	4a1f      	ldr	r2, [pc, #124]	; (8000794 <SystemInit+0x110>)
 8000716:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <SystemInit+0x104>)
 800071a:	4a1f      	ldr	r2, [pc, #124]	; (8000798 <SystemInit+0x114>)
 800071c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <SystemInit+0x104>)
 8000720:	2200      	movs	r2, #0
 8000722:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000724:	4b18      	ldr	r3, [pc, #96]	; (8000788 <SystemInit+0x104>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <SystemInit+0x114>)
 8000728:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <SystemInit+0x104>)
 800072c:	2200      	movs	r2, #0
 800072e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <SystemInit+0x104>)
 8000732:	4a19      	ldr	r2, [pc, #100]	; (8000798 <SystemInit+0x114>)
 8000734:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <SystemInit+0x104>)
 8000738:	2200      	movs	r2, #0
 800073a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <SystemInit+0x104>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a11      	ldr	r2, [pc, #68]	; (8000788 <SystemInit+0x104>)
 8000742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000746:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <SystemInit+0x104>)
 800074a:	2200      	movs	r2, #0
 800074c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <SystemInit+0x118>)
 8000750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000752:	4a12      	ldr	r2, [pc, #72]	; (800079c <SystemInit+0x118>)
 8000754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000758:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <SystemInit+0x11c>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <SystemInit+0x120>)
 8000760:	4013      	ands	r3, r2
 8000762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000766:	d202      	bcs.n	800076e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <SystemInit+0x124>)
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <SystemInit+0x128>)
 8000770:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000774:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000ed00 	.word	0xe000ed00
 8000784:	52002000 	.word	0x52002000
 8000788:	58024400 	.word	0x58024400
 800078c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000790:	02020200 	.word	0x02020200
 8000794:	01ff0000 	.word	0x01ff0000
 8000798:	01010280 	.word	0x01010280
 800079c:	580000c0 	.word	0x580000c0
 80007a0:	5c001000 	.word	0x5c001000
 80007a4:	ffff0000 	.word	0xffff0000
 80007a8:	51008108 	.word	0x51008108
 80007ac:	52004000 	.word	0x52004000

080007b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80007b6:	4b4a      	ldr	r3, [pc, #296]	; (80008e0 <main+0x130>)
 80007b8:	695b      	ldr	r3, [r3, #20]
 80007ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d138      	bne.n	8000834 <main+0x84>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80007c2:	4b47      	ldr	r3, [pc, #284]	; (80008e0 <main+0x130>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007ca:	f3bf 8f4f 	dsb	sy
}
 80007ce:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80007d0:	4b43      	ldr	r3, [pc, #268]	; (80008e0 <main+0x130>)
 80007d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80007d6:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80007d8:	693b      	ldr	r3, [r7, #16]
 80007da:	0b5b      	lsrs	r3, r3, #13
 80007dc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80007e0:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80007e2:	693b      	ldr	r3, [r7, #16]
 80007e4:	08db      	lsrs	r3, r3, #3
 80007e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80007ea:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	015a      	lsls	r2, r3, #5
 80007f0:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80007f4:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80007f6:	68ba      	ldr	r2, [r7, #8]
 80007f8:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80007fa:	4939      	ldr	r1, [pc, #228]	; (80008e0 <main+0x130>)
 80007fc:	4313      	orrs	r3, r2
 80007fe:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000802:	68bb      	ldr	r3, [r7, #8]
 8000804:	1e5a      	subs	r2, r3, #1
 8000806:	60ba      	str	r2, [r7, #8]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d1ef      	bne.n	80007ec <main+0x3c>
    } while(sets-- != 0U);
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	1e5a      	subs	r2, r3, #1
 8000810:	60fa      	str	r2, [r7, #12]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d1e5      	bne.n	80007e2 <main+0x32>
  __ASM volatile ("dsb 0xF":::"memory");
 8000816:	f3bf 8f4f 	dsb	sy
}
 800081a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800081c:	4b30      	ldr	r3, [pc, #192]	; (80008e0 <main+0x130>)
 800081e:	695b      	ldr	r3, [r3, #20]
 8000820:	4a2f      	ldr	r2, [pc, #188]	; (80008e0 <main+0x130>)
 8000822:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000826:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000828:	f3bf 8f4f 	dsb	sy
}
 800082c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800082e:	f3bf 8f6f 	isb	sy
}
 8000832:	e000      	b.n	8000836 <main+0x86>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000834:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000836:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800083a:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800083c:	bf00      	nop
 800083e:	4b29      	ldr	r3, [pc, #164]	; (80008e4 <main+0x134>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000846:	2b00      	cmp	r3, #0
 8000848:	d004      	beq.n	8000854 <main+0xa4>
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	1e5a      	subs	r2, r3, #1
 800084e:	617a      	str	r2, [r7, #20]
 8000850:	2b00      	cmp	r3, #0
 8000852:	dcf4      	bgt.n	800083e <main+0x8e>
  if ( timeout < 0 )
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	2b00      	cmp	r3, #0
 8000858:	da01      	bge.n	800085e <main+0xae>
  {
  Error_Handler();
 800085a:	f000 f9cb 	bl	8000bf4 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800085e:	f000 fdb3 	bl	80013c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000862:	f000 f847 	bl	80008f4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000866:	4b1f      	ldr	r3, [pc, #124]	; (80008e4 <main+0x134>)
 8000868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800086c:	4a1d      	ldr	r2, [pc, #116]	; (80008e4 <main+0x134>)
 800086e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000872:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000876:	4b1b      	ldr	r3, [pc, #108]	; (80008e4 <main+0x134>)
 8000878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800087c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000884:	2000      	movs	r0, #0
 8000886:	f002 fcf5 	bl	8003274 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800088a:	2100      	movs	r1, #0
 800088c:	2000      	movs	r0, #0
 800088e:	f002 fd0b 	bl	80032a8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000892:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000896:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000898:	bf00      	nop
 800089a:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <main+0x134>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d104      	bne.n	80008b0 <main+0x100>
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	1e5a      	subs	r2, r3, #1
 80008aa:	617a      	str	r2, [r7, #20]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	dcf4      	bgt.n	800089a <main+0xea>
if ( timeout < 0 )
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	da01      	bge.n	80008ba <main+0x10a>
{
Error_Handler();
 80008b6:	f000 f99d 	bl	8000bf4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ba:	f000 f919 	bl	8000af0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80008be:	f000 f899 	bl	80009f4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80008c2:	f000 f8e3 	bl	8000a8c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80008c6:	f008 fa13 	bl	8008cf0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80008ca:	4a07      	ldr	r2, [pc, #28]	; (80008e8 <main+0x138>)
 80008cc:	2100      	movs	r1, #0
 80008ce:	4807      	ldr	r0, [pc, #28]	; (80008ec <main+0x13c>)
 80008d0:	f008 fa6d 	bl	8008dae <osThreadNew>
 80008d4:	4603      	mov	r3, r0
 80008d6:	4a06      	ldr	r2, [pc, #24]	; (80008f0 <main+0x140>)
 80008d8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80008da:	f008 fa2d 	bl	8008d38 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008de:	e7fe      	b.n	80008de <main+0x12e>
 80008e0:	e000ed00 	.word	0xe000ed00
 80008e4:	58024400 	.word	0x58024400
 80008e8:	0801ac78 	.word	0x0801ac78
 80008ec:	08000bbd 	.word	0x08000bbd
 80008f0:	24000714 	.word	0x24000714

080008f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b09c      	sub	sp, #112	; 0x70
 80008f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fe:	224c      	movs	r2, #76	; 0x4c
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f016 fa69 	bl	8016dda <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	2220      	movs	r2, #32
 800090c:	2100      	movs	r1, #0
 800090e:	4618      	mov	r0, r3
 8000910:	f016 fa63 	bl	8016dda <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000914:	2004      	movs	r0, #4
 8000916:	f002 fe23 	bl	8003560 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800091a:	2300      	movs	r3, #0
 800091c:	603b      	str	r3, [r7, #0]
 800091e:	4b33      	ldr	r3, [pc, #204]	; (80009ec <SystemClock_Config+0xf8>)
 8000920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000922:	4a32      	ldr	r2, [pc, #200]	; (80009ec <SystemClock_Config+0xf8>)
 8000924:	f023 0301 	bic.w	r3, r3, #1
 8000928:	62d3      	str	r3, [r2, #44]	; 0x2c
 800092a:	4b30      	ldr	r3, [pc, #192]	; (80009ec <SystemClock_Config+0xf8>)
 800092c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	603b      	str	r3, [r7, #0]
 8000934:	4b2e      	ldr	r3, [pc, #184]	; (80009f0 <SystemClock_Config+0xfc>)
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800093c:	4a2c      	ldr	r2, [pc, #176]	; (80009f0 <SystemClock_Config+0xfc>)
 800093e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000942:	6193      	str	r3, [r2, #24]
 8000944:	4b2a      	ldr	r3, [pc, #168]	; (80009f0 <SystemClock_Config+0xfc>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800094c:	603b      	str	r3, [r7, #0]
 800094e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000950:	bf00      	nop
 8000952:	4b27      	ldr	r3, [pc, #156]	; (80009f0 <SystemClock_Config+0xfc>)
 8000954:	699b      	ldr	r3, [r3, #24]
 8000956:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800095a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800095e:	d1f8      	bne.n	8000952 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000960:	2303      	movs	r3, #3
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000964:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000968:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800096a:	2301      	movs	r3, #1
 800096c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800096e:	2340      	movs	r3, #64	; 0x40
 8000970:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000972:	2302      	movs	r3, #2
 8000974:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000976:	2302      	movs	r3, #2
 8000978:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800097a:	2301      	movs	r3, #1
 800097c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800097e:	2318      	movs	r3, #24
 8000980:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000982:	2302      	movs	r3, #2
 8000984:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000986:	2304      	movs	r3, #4
 8000988:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800098a:	2302      	movs	r3, #2
 800098c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800098e:	230c      	movs	r3, #12
 8000990:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000992:	2300      	movs	r3, #0
 8000994:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800099a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099e:	4618      	mov	r0, r3
 80009a0:	f002 fe48 	bl	8003634 <HAL_RCC_OscConfig>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <SystemClock_Config+0xba>
  {
    Error_Handler();
 80009aa:	f000 f923 	bl	8000bf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ae:	233f      	movs	r3, #63	; 0x3f
 80009b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009b2:	2300      	movs	r3, #0
 80009b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009ba:	2300      	movs	r3, #0
 80009bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80009be:	2300      	movs	r3, #0
 80009c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80009ca:	2300      	movs	r3, #0
 80009cc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	2101      	movs	r1, #1
 80009d2:	4618      	mov	r0, r3
 80009d4:	f003 fa88 	bl	8003ee8 <HAL_RCC_ClockConfig>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <SystemClock_Config+0xee>
  {
    Error_Handler();
 80009de:	f000 f909 	bl	8000bf4 <Error_Handler>
  }
}
 80009e2:	bf00      	nop
 80009e4:	3770      	adds	r7, #112	; 0x70
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	58000400 	.word	0x58000400
 80009f0:	58024800 	.word	0x58024800

080009f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009f8:	4b22      	ldr	r3, [pc, #136]	; (8000a84 <MX_USART3_UART_Init+0x90>)
 80009fa:	4a23      	ldr	r2, [pc, #140]	; (8000a88 <MX_USART3_UART_Init+0x94>)
 80009fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009fe:	4b21      	ldr	r3, [pc, #132]	; (8000a84 <MX_USART3_UART_Init+0x90>)
 8000a00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a04:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a06:	4b1f      	ldr	r3, [pc, #124]	; (8000a84 <MX_USART3_UART_Init+0x90>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a0c:	4b1d      	ldr	r3, [pc, #116]	; (8000a84 <MX_USART3_UART_Init+0x90>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a12:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <MX_USART3_UART_Init+0x90>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a18:	4b1a      	ldr	r3, [pc, #104]	; (8000a84 <MX_USART3_UART_Init+0x90>)
 8000a1a:	220c      	movs	r2, #12
 8000a1c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1e:	4b19      	ldr	r3, [pc, #100]	; (8000a84 <MX_USART3_UART_Init+0x90>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a24:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <MX_USART3_UART_Init+0x90>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a2a:	4b16      	ldr	r3, [pc, #88]	; (8000a84 <MX_USART3_UART_Init+0x90>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a30:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <MX_USART3_UART_Init+0x90>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a36:	4b13      	ldr	r3, [pc, #76]	; (8000a84 <MX_USART3_UART_Init+0x90>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a3c:	4811      	ldr	r0, [pc, #68]	; (8000a84 <MX_USART3_UART_Init+0x90>)
 8000a3e:	f005 ff27 	bl	8006890 <HAL_UART_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a48:	f000 f8d4 	bl	8000bf4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	480d      	ldr	r0, [pc, #52]	; (8000a84 <MX_USART3_UART_Init+0x90>)
 8000a50:	f006 ff29 	bl	80078a6 <HAL_UARTEx_SetTxFifoThreshold>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a5a:	f000 f8cb 	bl	8000bf4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4808      	ldr	r0, [pc, #32]	; (8000a84 <MX_USART3_UART_Init+0x90>)
 8000a62:	f006 ff5e 	bl	8007922 <HAL_UARTEx_SetRxFifoThreshold>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a6c:	f000 f8c2 	bl	8000bf4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a70:	4804      	ldr	r0, [pc, #16]	; (8000a84 <MX_USART3_UART_Init+0x90>)
 8000a72:	f006 fedf 	bl	8007834 <HAL_UARTEx_DisableFifoMode>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a7c:	f000 f8ba 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	24000174 	.word	0x24000174
 8000a88:	40004800 	.word	0x40004800

08000a8c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a90:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a92:	4a16      	ldr	r2, [pc, #88]	; (8000aec <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000a94:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000a96:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a98:	2209      	movs	r2, #9
 8000a9a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a9e:	2202      	movs	r2, #2
 8000aa0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000aa2:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aaa:	2202      	movs	r2, #2
 8000aac:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000aae:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000aba:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000ac0:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ad2:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ad4:	f002 fbfc 	bl	80032d0 <HAL_PCD_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000ade:	f000 f889 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	24000208 	.word	0x24000208
 8000aec:	40080000 	.word	0x40080000

08000af0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b087      	sub	sp, #28
 8000af4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af6:	4b30      	ldr	r3, [pc, #192]	; (8000bb8 <MX_GPIO_Init+0xc8>)
 8000af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afc:	4a2e      	ldr	r2, [pc, #184]	; (8000bb8 <MX_GPIO_Init+0xc8>)
 8000afe:	f043 0304 	orr.w	r3, r3, #4
 8000b02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b06:	4b2c      	ldr	r3, [pc, #176]	; (8000bb8 <MX_GPIO_Init+0xc8>)
 8000b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b0c:	f003 0304 	and.w	r3, r3, #4
 8000b10:	617b      	str	r3, [r7, #20]
 8000b12:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b14:	4b28      	ldr	r3, [pc, #160]	; (8000bb8 <MX_GPIO_Init+0xc8>)
 8000b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1a:	4a27      	ldr	r2, [pc, #156]	; (8000bb8 <MX_GPIO_Init+0xc8>)
 8000b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b24:	4b24      	ldr	r3, [pc, #144]	; (8000bb8 <MX_GPIO_Init+0xc8>)
 8000b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b32:	4b21      	ldr	r3, [pc, #132]	; (8000bb8 <MX_GPIO_Init+0xc8>)
 8000b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b38:	4a1f      	ldr	r2, [pc, #124]	; (8000bb8 <MX_GPIO_Init+0xc8>)
 8000b3a:	f043 0301 	orr.w	r3, r3, #1
 8000b3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b42:	4b1d      	ldr	r3, [pc, #116]	; (8000bb8 <MX_GPIO_Init+0xc8>)
 8000b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b48:	f003 0301 	and.w	r3, r3, #1
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b50:	4b19      	ldr	r3, [pc, #100]	; (8000bb8 <MX_GPIO_Init+0xc8>)
 8000b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b56:	4a18      	ldr	r2, [pc, #96]	; (8000bb8 <MX_GPIO_Init+0xc8>)
 8000b58:	f043 0302 	orr.w	r3, r3, #2
 8000b5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b60:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <MX_GPIO_Init+0xc8>)
 8000b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b66:	f003 0302 	and.w	r3, r3, #2
 8000b6a:	60bb      	str	r3, [r7, #8]
 8000b6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b6e:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <MX_GPIO_Init+0xc8>)
 8000b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b74:	4a10      	ldr	r2, [pc, #64]	; (8000bb8 <MX_GPIO_Init+0xc8>)
 8000b76:	f043 0308 	orr.w	r3, r3, #8
 8000b7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <MX_GPIO_Init+0xc8>)
 8000b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b84:	f003 0308 	and.w	r3, r3, #8
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b8c:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <MX_GPIO_Init+0xc8>)
 8000b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b92:	4a09      	ldr	r2, [pc, #36]	; (8000bb8 <MX_GPIO_Init+0xc8>)
 8000b94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <MX_GPIO_Init+0xc8>)
 8000b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000baa:	bf00      	nop
 8000bac:	371c      	adds	r7, #28
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	58024400 	.word	0x58024400

08000bbc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000bc4:	f007 fa44 	bl	8008050 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f008 f983 	bl	8008ed4 <osDelay>
 8000bce:	e7fb      	b.n	8000bc8 <StartDefaultTask+0xc>

08000bd0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a04      	ldr	r2, [pc, #16]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d101      	bne.n	8000be6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000be2:	f000 fc2d 	bl	8001440 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40001000 	.word	0x40001000

08000bf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf8:	b672      	cpsid	i
}
 8000bfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <Error_Handler+0x8>
	...

08000c00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c06:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <HAL_MspInit+0x38>)
 8000c08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c0c:	4a0a      	ldr	r2, [pc, #40]	; (8000c38 <HAL_MspInit+0x38>)
 8000c0e:	f043 0302 	orr.w	r3, r3, #2
 8000c12:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c16:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <HAL_MspInit+0x38>)
 8000c18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c1c:	f003 0302 	and.w	r3, r3, #2
 8000c20:	607b      	str	r3, [r7, #4]
 8000c22:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c24:	2200      	movs	r2, #0
 8000c26:	210f      	movs	r1, #15
 8000c28:	f06f 0001 	mvn.w	r0, #1
 8000c2c:	f000 fd24 	bl	8001678 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c30:	bf00      	nop
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	58024400 	.word	0x58024400

08000c3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b0ba      	sub	sp, #232	; 0xe8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c54:	f107 0310 	add.w	r3, r7, #16
 8000c58:	22c0      	movs	r2, #192	; 0xc0
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f016 f8bc 	bl	8016dda <memset>
  if(huart->Instance==USART3)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a27      	ldr	r2, [pc, #156]	; (8000d04 <HAL_UART_MspInit+0xc8>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d146      	bne.n	8000cfa <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c6c:	f04f 0202 	mov.w	r2, #2
 8000c70:	f04f 0300 	mov.w	r3, #0
 8000c74:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c7e:	f107 0310 	add.w	r3, r7, #16
 8000c82:	4618      	mov	r0, r3
 8000c84:	f003 fcfe 	bl	8004684 <HAL_RCCEx_PeriphCLKConfig>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000c8e:	f7ff ffb1 	bl	8000bf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c92:	4b1d      	ldr	r3, [pc, #116]	; (8000d08 <HAL_UART_MspInit+0xcc>)
 8000c94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c98:	4a1b      	ldr	r2, [pc, #108]	; (8000d08 <HAL_UART_MspInit+0xcc>)
 8000c9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c9e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000ca2:	4b19      	ldr	r3, [pc, #100]	; (8000d08 <HAL_UART_MspInit+0xcc>)
 8000ca4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ca8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb0:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <HAL_UART_MspInit+0xcc>)
 8000cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb6:	4a14      	ldr	r2, [pc, #80]	; (8000d08 <HAL_UART_MspInit+0xcc>)
 8000cb8:	f043 0308 	orr.w	r3, r3, #8
 8000cbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cc0:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <HAL_UART_MspInit+0xcc>)
 8000cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc6:	f003 0308 	and.w	r3, r3, #8
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000cce:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ce8:	2307      	movs	r3, #7
 8000cea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cee:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4805      	ldr	r0, [pc, #20]	; (8000d0c <HAL_UART_MspInit+0xd0>)
 8000cf6:	f002 f90d 	bl	8002f14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cfa:	bf00      	nop
 8000cfc:	37e8      	adds	r7, #232	; 0xe8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40004800 	.word	0x40004800
 8000d08:	58024400 	.word	0x58024400
 8000d0c:	58020c00 	.word	0x58020c00

08000d10 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b0ba      	sub	sp, #232	; 0xe8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d28:	f107 0310 	add.w	r3, r7, #16
 8000d2c:	22c0      	movs	r2, #192	; 0xc0
 8000d2e:	2100      	movs	r1, #0
 8000d30:	4618      	mov	r0, r3
 8000d32:	f016 f852 	bl	8016dda <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a30      	ldr	r2, [pc, #192]	; (8000dfc <HAL_PCD_MspInit+0xec>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d159      	bne.n	8000df4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000d40:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000d4c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d54:	f107 0310 	add.w	r3, r7, #16
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f003 fc93 	bl	8004684 <HAL_RCCEx_PeriphCLKConfig>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8000d64:	f7ff ff46 	bl	8000bf4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000d68:	f002 fc54 	bl	8003614 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6c:	4b24      	ldr	r3, [pc, #144]	; (8000e00 <HAL_PCD_MspInit+0xf0>)
 8000d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d72:	4a23      	ldr	r2, [pc, #140]	; (8000e00 <HAL_PCD_MspInit+0xf0>)
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d7c:	4b20      	ldr	r3, [pc, #128]	; (8000e00 <HAL_PCD_MspInit+0xf0>)
 8000d7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000d8a:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000d8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000da4:	230a      	movs	r3, #10
 8000da6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000daa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000dae:	4619      	mov	r1, r3
 8000db0:	4814      	ldr	r0, [pc, #80]	; (8000e04 <HAL_PCD_MspInit+0xf4>)
 8000db2:	f002 f8af 	bl	8002f14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000db6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dca:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000dce:	4619      	mov	r1, r3
 8000dd0:	480c      	ldr	r0, [pc, #48]	; (8000e04 <HAL_PCD_MspInit+0xf4>)
 8000dd2:	f002 f89f 	bl	8002f14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000dd6:	4b0a      	ldr	r3, [pc, #40]	; (8000e00 <HAL_PCD_MspInit+0xf0>)
 8000dd8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ddc:	4a08      	ldr	r2, [pc, #32]	; (8000e00 <HAL_PCD_MspInit+0xf0>)
 8000dde:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000de2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <HAL_PCD_MspInit+0xf0>)
 8000de8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000df0:	60bb      	str	r3, [r7, #8]
 8000df2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000df4:	bf00      	nop
 8000df6:	37e8      	adds	r7, #232	; 0xe8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40080000 	.word	0x40080000
 8000e00:	58024400 	.word	0x58024400
 8000e04:	58020000 	.word	0x58020000

08000e08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b090      	sub	sp, #64	; 0x40
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2b0f      	cmp	r3, #15
 8000e14:	d827      	bhi.n	8000e66 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000e16:	2200      	movs	r2, #0
 8000e18:	6879      	ldr	r1, [r7, #4]
 8000e1a:	2036      	movs	r0, #54	; 0x36
 8000e1c:	f000 fc2c 	bl	8001678 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e20:	2036      	movs	r0, #54	; 0x36
 8000e22:	f000 fc43 	bl	80016ac <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000e26:	4a29      	ldr	r2, [pc, #164]	; (8000ecc <HAL_InitTick+0xc4>)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e2c:	4b28      	ldr	r3, [pc, #160]	; (8000ed0 <HAL_InitTick+0xc8>)
 8000e2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e32:	4a27      	ldr	r2, [pc, #156]	; (8000ed0 <HAL_InitTick+0xc8>)
 8000e34:	f043 0310 	orr.w	r3, r3, #16
 8000e38:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e3c:	4b24      	ldr	r3, [pc, #144]	; (8000ed0 <HAL_InitTick+0xc8>)
 8000e3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e42:	f003 0310 	and.w	r3, r3, #16
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e4a:	f107 0210 	add.w	r2, r7, #16
 8000e4e:	f107 0314 	add.w	r3, r7, #20
 8000e52:	4611      	mov	r1, r2
 8000e54:	4618      	mov	r0, r3
 8000e56:	f003 fbd3 	bl	8004600 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e5c:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d106      	bne.n	8000e72 <HAL_InitTick+0x6a>
 8000e64:	e001      	b.n	8000e6a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e02b      	b.n	8000ec2 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e6a:	f003 fb9d 	bl	80045a8 <HAL_RCC_GetPCLK1Freq>
 8000e6e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000e70:	e004      	b.n	8000e7c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e72:	f003 fb99 	bl	80045a8 <HAL_RCC_GetPCLK1Freq>
 8000e76:	4603      	mov	r3, r0
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e7e:	4a15      	ldr	r2, [pc, #84]	; (8000ed4 <HAL_InitTick+0xcc>)
 8000e80:	fba2 2303 	umull	r2, r3, r2, r3
 8000e84:	0c9b      	lsrs	r3, r3, #18
 8000e86:	3b01      	subs	r3, #1
 8000e88:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e8a:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <HAL_InitTick+0xd0>)
 8000e8c:	4a13      	ldr	r2, [pc, #76]	; (8000edc <HAL_InitTick+0xd4>)
 8000e8e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e90:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <HAL_InitTick+0xd0>)
 8000e92:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e96:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e98:	4a0f      	ldr	r2, [pc, #60]	; (8000ed8 <HAL_InitTick+0xd0>)
 8000e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e9c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <HAL_InitTick+0xd0>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <HAL_InitTick+0xd0>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000eaa:	480b      	ldr	r0, [pc, #44]	; (8000ed8 <HAL_InitTick+0xd0>)
 8000eac:	f005 fa16 	bl	80062dc <HAL_TIM_Base_Init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d104      	bne.n	8000ec0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000eb6:	4808      	ldr	r0, [pc, #32]	; (8000ed8 <HAL_InitTick+0xd0>)
 8000eb8:	f005 fa72 	bl	80063a0 <HAL_TIM_Base_Start_IT>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	e000      	b.n	8000ec2 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ec0:	2301      	movs	r3, #1
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3740      	adds	r7, #64	; 0x40
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	24000008 	.word	0x24000008
 8000ed0:	58024400 	.word	0x58024400
 8000ed4:	431bde83 	.word	0x431bde83
 8000ed8:	24000718 	.word	0x24000718
 8000edc:	40001000 	.word	0x40001000

08000ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <NMI_Handler+0x4>

08000ee6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eea:	e7fe      	b.n	8000eea <HardFault_Handler+0x4>

08000eec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <MemManage_Handler+0x4>

08000ef2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef6:	e7fe      	b.n	8000ef6 <BusFault_Handler+0x4>

08000ef8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000efc:	e7fe      	b.n	8000efc <UsageFault_Handler+0x4>

08000efe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f10:	4802      	ldr	r0, [pc, #8]	; (8000f1c <TIM6_DAC_IRQHandler+0x10>)
 8000f12:	f005 fabd 	bl	8006490 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	24000718 	.word	0x24000718

08000f20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return 1;
 8000f24:	2301      	movs	r3, #1
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <_kill>:

int _kill(int pid, int sig)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f3a:	4b05      	ldr	r3, [pc, #20]	; (8000f50 <_kill+0x20>)
 8000f3c:	2216      	movs	r2, #22
 8000f3e:	601a      	str	r2, [r3, #0]
  return -1;
 8000f40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	240155a8 	.word	0x240155a8

08000f54 <_exit>:

void _exit (int status)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f7ff ffe5 	bl	8000f30 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f66:	e7fe      	b.n	8000f66 <_exit+0x12>

08000f68 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
 8000f78:	e00a      	b.n	8000f90 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f7a:	f3af 8000 	nop.w
 8000f7e:	4601      	mov	r1, r0
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	1c5a      	adds	r2, r3, #1
 8000f84:	60ba      	str	r2, [r7, #8]
 8000f86:	b2ca      	uxtb	r2, r1
 8000f88:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	617b      	str	r3, [r7, #20]
 8000f90:	697a      	ldr	r2, [r7, #20]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	dbf0      	blt.n	8000f7a <_read+0x12>
  }

  return len;
 8000f98:	687b      	ldr	r3, [r7, #4]
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3718      	adds	r7, #24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b086      	sub	sp, #24
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	60f8      	str	r0, [r7, #12]
 8000faa:	60b9      	str	r1, [r7, #8]
 8000fac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]
 8000fb2:	e009      	b.n	8000fc8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	1c5a      	adds	r2, r3, #1
 8000fb8:	60ba      	str	r2, [r7, #8]
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	617b      	str	r3, [r7, #20]
 8000fc8:	697a      	ldr	r2, [r7, #20]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	dbf1      	blt.n	8000fb4 <_write+0x12>
  }
  return len;
 8000fd0:	687b      	ldr	r3, [r7, #4]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3718      	adds	r7, #24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <_close>:

int _close(int file)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	b083      	sub	sp, #12
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fe2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	b083      	sub	sp, #12
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
 8000ffa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001002:	605a      	str	r2, [r3, #4]
  return 0;
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <_isatty>:

int _isatty(int file)
{
 8001012:	b480      	push	{r7}
 8001014:	b083      	sub	sp, #12
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800101a:	2301      	movs	r3, #1
}
 800101c:	4618      	mov	r0, r3
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3714      	adds	r7, #20
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
	...

08001044 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001044:	b480      	push	{r7}
 8001046:	b087      	sub	sp, #28
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800104c:	4a14      	ldr	r2, [pc, #80]	; (80010a0 <_sbrk+0x5c>)
 800104e:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <_sbrk+0x60>)
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001058:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <_sbrk+0x64>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d102      	bne.n	8001066 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001060:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <_sbrk+0x64>)
 8001062:	4a12      	ldr	r2, [pc, #72]	; (80010ac <_sbrk+0x68>)
 8001064:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001066:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <_sbrk+0x64>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4413      	add	r3, r2
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	429a      	cmp	r2, r3
 8001072:	d205      	bcs.n	8001080 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001074:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <_sbrk+0x6c>)
 8001076:	220c      	movs	r2, #12
 8001078:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800107a:	f04f 33ff 	mov.w	r3, #4294967295
 800107e:	e009      	b.n	8001094 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001080:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <_sbrk+0x64>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001086:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <_sbrk+0x64>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4413      	add	r3, r2
 800108e:	4a06      	ldr	r2, [pc, #24]	; (80010a8 <_sbrk+0x64>)
 8001090:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001092:	68fb      	ldr	r3, [r7, #12]
}
 8001094:	4618      	mov	r0, r3
 8001096:	371c      	adds	r7, #28
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	24080000 	.word	0x24080000
 80010a4:	00000400 	.word	0x00000400
 80010a8:	24000764 	.word	0x24000764
 80010ac:	240155b0 	.word	0x240155b0
 80010b0:	240155a8 	.word	0x240155a8

080010b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80010b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010ec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010b8:	f7ff fae4 	bl	8000684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010bc:	480c      	ldr	r0, [pc, #48]	; (80010f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010be:	490d      	ldr	r1, [pc, #52]	; (80010f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010c0:	4a0d      	ldr	r2, [pc, #52]	; (80010f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c4:	e002      	b.n	80010cc <LoopCopyDataInit>

080010c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ca:	3304      	adds	r3, #4

080010cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d0:	d3f9      	bcc.n	80010c6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010d2:	4a0a      	ldr	r2, [pc, #40]	; (80010fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010d4:	4c0a      	ldr	r4, [pc, #40]	; (8001100 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d8:	e001      	b.n	80010de <LoopFillZerobss>

080010da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010dc:	3204      	adds	r2, #4

080010de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e0:	d3fb      	bcc.n	80010da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010e2:	f015 fe35 	bl	8016d50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010e6:	f7ff fb63 	bl	80007b0 <main>
  bx  lr
 80010ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010ec:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80010f0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80010f4:	24000098 	.word	0x24000098
  ldr r2, =_sidata
 80010f8:	0801af4c 	.word	0x0801af4c
  ldr r2, =_sbss
 80010fc:	24000158 	.word	0x24000158
  ldr r4, =_ebss
 8001100:	240155ac 	.word	0x240155ac

08001104 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001104:	e7fe      	b.n	8001104 <ADC3_IRQHandler>

08001106 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001106:	b480      	push	{r7}
 8001108:	b083      	sub	sp, #12
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
 800110e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d00b      	beq.n	800112e <LAN8742_RegisterBusIO+0x28>
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d007      	beq.n	800112e <LAN8742_RegisterBusIO+0x28>
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <LAN8742_RegisterBusIO+0x28>
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	691b      	ldr	r3, [r3, #16]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d102      	bne.n	8001134 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800112e:	f04f 33ff 	mov.w	r3, #4294967295
 8001132:	e014      	b.n	800115e <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685a      	ldr	r2, [r3, #4]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	68da      	ldr	r2, [r3, #12]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	689a      	ldr	r2, [r3, #8]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	691a      	ldr	r2, [r3, #16]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800116a:	b580      	push	{r7, lr}
 800116c:	b086      	sub	sp, #24
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	2300      	movs	r3, #0
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d17c      	bne.n	8001284 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d002      	beq.n	8001198 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2220      	movs	r2, #32
 800119c:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]
 80011a2:	e01c      	b.n	80011de <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	695b      	ldr	r3, [r3, #20]
 80011a8:	f107 0208 	add.w	r2, r7, #8
 80011ac:	2112      	movs	r1, #18
 80011ae:	6978      	ldr	r0, [r7, #20]
 80011b0:	4798      	blx	r3
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	da03      	bge.n	80011c0 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80011b8:	f06f 0304 	mvn.w	r3, #4
 80011bc:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80011be:	e00b      	b.n	80011d8 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	f003 031f 	and.w	r3, r3, #31
 80011c6:	697a      	ldr	r2, [r7, #20]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d105      	bne.n	80011d8 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	697a      	ldr	r2, [r7, #20]
 80011d0:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80011d2:	2300      	movs	r3, #0
 80011d4:	613b      	str	r3, [r7, #16]
         break;
 80011d6:	e005      	b.n	80011e4 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	3301      	adds	r3, #1
 80011dc:	617b      	str	r3, [r7, #20]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	2b1f      	cmp	r3, #31
 80011e2:	d9df      	bls.n	80011a4 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2b1f      	cmp	r3, #31
 80011ea:	d902      	bls.n	80011f2 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80011ec:	f06f 0302 	mvn.w	r3, #2
 80011f0:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d145      	bne.n	8001284 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	6810      	ldr	r0, [r2, #0]
 8001200:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001204:	2100      	movs	r1, #0
 8001206:	4798      	blx	r3
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	db37      	blt.n	800127e <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	6810      	ldr	r0, [r2, #0]
 8001216:	f107 0208 	add.w	r2, r7, #8
 800121a:	2100      	movs	r1, #0
 800121c:	4798      	blx	r3
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	db28      	blt.n	8001276 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	4798      	blx	r3
 800122a:	4603      	mov	r3, r0
 800122c:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800122e:	e01c      	b.n	800126a <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	4798      	blx	r3
 8001236:	4603      	mov	r3, r0
 8001238:	461a      	mov	r2, r3
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001242:	d80e      	bhi.n	8001262 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	695b      	ldr	r3, [r3, #20]
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	6810      	ldr	r0, [r2, #0]
 800124c:	f107 0208 	add.w	r2, r7, #8
 8001250:	2100      	movs	r1, #0
 8001252:	4798      	blx	r3
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	da07      	bge.n	800126a <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800125a:	f06f 0304 	mvn.w	r3, #4
 800125e:	613b      	str	r3, [r7, #16]
                 break;
 8001260:	e010      	b.n	8001284 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001262:	f06f 0301 	mvn.w	r3, #1
 8001266:	613b      	str	r3, [r7, #16]
               break;
 8001268:	e00c      	b.n	8001284 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1dd      	bne.n	8001230 <LAN8742_Init+0xc6>
 8001274:	e006      	b.n	8001284 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001276:	f06f 0304 	mvn.w	r3, #4
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	e002      	b.n	8001284 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800127e:	f06f 0303 	mvn.w	r3, #3
 8001282:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d112      	bne.n	80012b0 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	699b      	ldr	r3, [r3, #24]
 800128e:	4798      	blx	r3
 8001290:	4603      	mov	r3, r0
 8001292:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001294:	bf00      	nop
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	699b      	ldr	r3, [r3, #24]
 800129a:	4798      	blx	r3
 800129c:	4603      	mov	r3, r0
 800129e:	461a      	mov	r2, r3
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80012a8:	d9f5      	bls.n	8001296 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2201      	movs	r2, #1
 80012ae:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80012b0:	693b      	ldr	r3, [r7, #16]
 }
 80012b2:	4618      	mov	r0, r3
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b084      	sub	sp, #16
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	6810      	ldr	r0, [r2, #0]
 80012ce:	f107 020c 	add.w	r2, r7, #12
 80012d2:	2101      	movs	r1, #1
 80012d4:	4798      	blx	r3
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	da02      	bge.n	80012e2 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80012dc:	f06f 0304 	mvn.w	r3, #4
 80012e0:	e06e      	b.n	80013c0 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	6810      	ldr	r0, [r2, #0]
 80012ea:	f107 020c 	add.w	r2, r7, #12
 80012ee:	2101      	movs	r1, #1
 80012f0:	4798      	blx	r3
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	da02      	bge.n	80012fe <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80012f8:	f06f 0304 	mvn.w	r3, #4
 80012fc:	e060      	b.n	80013c0 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	f003 0304 	and.w	r3, r3, #4
 8001304:	2b00      	cmp	r3, #0
 8001306:	d101      	bne.n	800130c <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001308:	2301      	movs	r3, #1
 800130a:	e059      	b.n	80013c0 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	695b      	ldr	r3, [r3, #20]
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	6810      	ldr	r0, [r2, #0]
 8001314:	f107 020c 	add.w	r2, r7, #12
 8001318:	2100      	movs	r1, #0
 800131a:	4798      	blx	r3
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	da02      	bge.n	8001328 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001322:	f06f 0304 	mvn.w	r3, #4
 8001326:	e04b      	b.n	80013c0 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d11b      	bne.n	800136a <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d006      	beq.n	800134a <LAN8742_GetLinkState+0x90>
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001346:	2302      	movs	r3, #2
 8001348:	e03a      	b.n	80013c0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001354:	2303      	movs	r3, #3
 8001356:	e033      	b.n	80013c0 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001362:	2304      	movs	r3, #4
 8001364:	e02c      	b.n	80013c0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001366:	2305      	movs	r3, #5
 8001368:	e02a      	b.n	80013c0 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	6810      	ldr	r0, [r2, #0]
 8001372:	f107 020c 	add.w	r2, r7, #12
 8001376:	211f      	movs	r1, #31
 8001378:	4798      	blx	r3
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	da02      	bge.n	8001386 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001380:	f06f 0304 	mvn.w	r3, #4
 8001384:	e01c      	b.n	80013c0 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d101      	bne.n	8001394 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001390:	2306      	movs	r3, #6
 8001392:	e015      	b.n	80013c0 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f003 031c 	and.w	r3, r3, #28
 800139a:	2b18      	cmp	r3, #24
 800139c:	d101      	bne.n	80013a2 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800139e:	2302      	movs	r3, #2
 80013a0:	e00e      	b.n	80013c0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	f003 031c 	and.w	r3, r3, #28
 80013a8:	2b08      	cmp	r3, #8
 80013aa:	d101      	bne.n	80013b0 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e007      	b.n	80013c0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f003 031c 	and.w	r3, r3, #28
 80013b6:	2b14      	cmp	r3, #20
 80013b8:	d101      	bne.n	80013be <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80013ba:	2304      	movs	r3, #4
 80013bc:	e000      	b.n	80013c0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80013be:	2305      	movs	r3, #5
    }				
  }
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ce:	2003      	movs	r0, #3
 80013d0:	f000 f947 	bl	8001662 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80013d4:	f002 ff3e 	bl	8004254 <HAL_RCC_GetSysClockFreq>
 80013d8:	4602      	mov	r2, r0
 80013da:	4b15      	ldr	r3, [pc, #84]	; (8001430 <HAL_Init+0x68>)
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	0a1b      	lsrs	r3, r3, #8
 80013e0:	f003 030f 	and.w	r3, r3, #15
 80013e4:	4913      	ldr	r1, [pc, #76]	; (8001434 <HAL_Init+0x6c>)
 80013e6:	5ccb      	ldrb	r3, [r1, r3]
 80013e8:	f003 031f 	and.w	r3, r3, #31
 80013ec:	fa22 f303 	lsr.w	r3, r2, r3
 80013f0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013f2:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <HAL_Init+0x68>)
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	f003 030f 	and.w	r3, r3, #15
 80013fa:	4a0e      	ldr	r2, [pc, #56]	; (8001434 <HAL_Init+0x6c>)
 80013fc:	5cd3      	ldrb	r3, [r2, r3]
 80013fe:	f003 031f 	and.w	r3, r3, #31
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	fa22 f303 	lsr.w	r3, r2, r3
 8001408:	4a0b      	ldr	r2, [pc, #44]	; (8001438 <HAL_Init+0x70>)
 800140a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800140c:	4a0b      	ldr	r2, [pc, #44]	; (800143c <HAL_Init+0x74>)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001412:	200f      	movs	r0, #15
 8001414:	f7ff fcf8 	bl	8000e08 <HAL_InitTick>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e002      	b.n	8001428 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001422:	f7ff fbed 	bl	8000c00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	58024400 	.word	0x58024400
 8001434:	0801ac68 	.word	0x0801ac68
 8001438:	24000004 	.word	0x24000004
 800143c:	24000000 	.word	0x24000000

08001440 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <HAL_IncTick+0x20>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	461a      	mov	r2, r3
 800144a:	4b06      	ldr	r3, [pc, #24]	; (8001464 <HAL_IncTick+0x24>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4413      	add	r3, r2
 8001450:	4a04      	ldr	r2, [pc, #16]	; (8001464 <HAL_IncTick+0x24>)
 8001452:	6013      	str	r3, [r2, #0]
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	2400000c 	.word	0x2400000c
 8001464:	24000768 	.word	0x24000768

08001468 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return uwTick;
 800146c:	4b03      	ldr	r3, [pc, #12]	; (800147c <HAL_GetTick+0x14>)
 800146e:	681b      	ldr	r3, [r3, #0]
}
 8001470:	4618      	mov	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	24000768 	.word	0x24000768

08001480 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001488:	f7ff ffee 	bl	8001468 <HAL_GetTick>
 800148c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001498:	d005      	beq.n	80014a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800149a:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <HAL_Delay+0x44>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	461a      	mov	r2, r3
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	4413      	add	r3, r2
 80014a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014a6:	bf00      	nop
 80014a8:	f7ff ffde 	bl	8001468 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d8f7      	bhi.n	80014a8 <HAL_Delay+0x28>
  {
  }
}
 80014b8:	bf00      	nop
 80014ba:	bf00      	nop
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	2400000c 	.word	0x2400000c

080014c8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80014cc:	4b03      	ldr	r3, [pc, #12]	; (80014dc <HAL_GetREVID+0x14>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	0c1b      	lsrs	r3, r3, #16
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	5c001000 	.word	0x5c001000

080014e0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80014f0:	4904      	ldr	r1, [pc, #16]	; (8001504 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	604b      	str	r3, [r1, #4]
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	58000400 	.word	0x58000400

08001508 <__NVIC_SetPriorityGrouping>:
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001518:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <__NVIC_SetPriorityGrouping+0x40>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800151e:	68ba      	ldr	r2, [r7, #8]
 8001520:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001524:	4013      	ands	r3, r2
 8001526:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <__NVIC_SetPriorityGrouping+0x44>)
 8001532:	4313      	orrs	r3, r2
 8001534:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001536:	4a04      	ldr	r2, [pc, #16]	; (8001548 <__NVIC_SetPriorityGrouping+0x40>)
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	60d3      	str	r3, [r2, #12]
}
 800153c:	bf00      	nop
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	e000ed00 	.word	0xe000ed00
 800154c:	05fa0000 	.word	0x05fa0000

08001550 <__NVIC_GetPriorityGrouping>:
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001554:	4b04      	ldr	r3, [pc, #16]	; (8001568 <__NVIC_GetPriorityGrouping+0x18>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	0a1b      	lsrs	r3, r3, #8
 800155a:	f003 0307 	and.w	r3, r3, #7
}
 800155e:	4618      	mov	r0, r3
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <__NVIC_EnableIRQ>:
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001576:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800157a:	2b00      	cmp	r3, #0
 800157c:	db0b      	blt.n	8001596 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800157e:	88fb      	ldrh	r3, [r7, #6]
 8001580:	f003 021f 	and.w	r2, r3, #31
 8001584:	4907      	ldr	r1, [pc, #28]	; (80015a4 <__NVIC_EnableIRQ+0x38>)
 8001586:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800158a:	095b      	lsrs	r3, r3, #5
 800158c:	2001      	movs	r0, #1
 800158e:	fa00 f202 	lsl.w	r2, r0, r2
 8001592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	e000e100 	.word	0xe000e100

080015a8 <__NVIC_SetPriority>:
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	6039      	str	r1, [r7, #0]
 80015b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	db0a      	blt.n	80015d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	490c      	ldr	r1, [pc, #48]	; (80015f4 <__NVIC_SetPriority+0x4c>)
 80015c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015c6:	0112      	lsls	r2, r2, #4
 80015c8:	b2d2      	uxtb	r2, r2
 80015ca:	440b      	add	r3, r1
 80015cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80015d0:	e00a      	b.n	80015e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	4908      	ldr	r1, [pc, #32]	; (80015f8 <__NVIC_SetPriority+0x50>)
 80015d8:	88fb      	ldrh	r3, [r7, #6]
 80015da:	f003 030f 	and.w	r3, r3, #15
 80015de:	3b04      	subs	r3, #4
 80015e0:	0112      	lsls	r2, r2, #4
 80015e2:	b2d2      	uxtb	r2, r2
 80015e4:	440b      	add	r3, r1
 80015e6:	761a      	strb	r2, [r3, #24]
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	e000e100 	.word	0xe000e100
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <NVIC_EncodePriority>:
{
 80015fc:	b480      	push	{r7}
 80015fe:	b089      	sub	sp, #36	; 0x24
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	f1c3 0307 	rsb	r3, r3, #7
 8001616:	2b04      	cmp	r3, #4
 8001618:	bf28      	it	cs
 800161a:	2304      	movcs	r3, #4
 800161c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	3304      	adds	r3, #4
 8001622:	2b06      	cmp	r3, #6
 8001624:	d902      	bls.n	800162c <NVIC_EncodePriority+0x30>
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	3b03      	subs	r3, #3
 800162a:	e000      	b.n	800162e <NVIC_EncodePriority+0x32>
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001630:	f04f 32ff 	mov.w	r2, #4294967295
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43da      	mvns	r2, r3
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	401a      	ands	r2, r3
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001644:	f04f 31ff 	mov.w	r1, #4294967295
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	fa01 f303 	lsl.w	r3, r1, r3
 800164e:	43d9      	mvns	r1, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001654:	4313      	orrs	r3, r2
}
 8001656:	4618      	mov	r0, r3
 8001658:	3724      	adds	r7, #36	; 0x24
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b082      	sub	sp, #8
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7ff ff4c 	bl	8001508 <__NVIC_SetPriorityGrouping>
}
 8001670:	bf00      	nop
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
 8001684:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001686:	f7ff ff63 	bl	8001550 <__NVIC_GetPriorityGrouping>
 800168a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800168c:	687a      	ldr	r2, [r7, #4]
 800168e:	68b9      	ldr	r1, [r7, #8]
 8001690:	6978      	ldr	r0, [r7, #20]
 8001692:	f7ff ffb3 	bl	80015fc <NVIC_EncodePriority>
 8001696:	4602      	mov	r2, r0
 8001698:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800169c:	4611      	mov	r1, r2
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff ff82 	bl	80015a8 <__NVIC_SetPriority>
}
 80016a4:	bf00      	nop
 80016a6:	3718      	adds	r7, #24
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff ff56 	bl	800156c <__NVIC_EnableIRQ>
}
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d101      	bne.n	80016da <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e0cf      	b.n	800187a <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d106      	bne.n	80016f2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2223      	movs	r2, #35	; 0x23
 80016e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f007 f86d 	bl	80087cc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f2:	4b64      	ldr	r3, [pc, #400]	; (8001884 <HAL_ETH_Init+0x1bc>)
 80016f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016f8:	4a62      	ldr	r2, [pc, #392]	; (8001884 <HAL_ETH_Init+0x1bc>)
 80016fa:	f043 0302 	orr.w	r3, r3, #2
 80016fe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001702:	4b60      	ldr	r3, [pc, #384]	; (8001884 <HAL_ETH_Init+0x1bc>)
 8001704:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	60bb      	str	r3, [r7, #8]
 800170e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	7a1b      	ldrb	r3, [r3, #8]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d103      	bne.n	8001720 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001718:	2000      	movs	r0, #0
 800171a:	f7ff fee1 	bl	80014e0 <HAL_SYSCFG_ETHInterfaceSelect>
 800171e:	e003      	b.n	8001728 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001720:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001724:	f7ff fedc 	bl	80014e0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001728:	4b57      	ldr	r3, [pc, #348]	; (8001888 <HAL_ETH_Init+0x1c0>)
 800172a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	6812      	ldr	r2, [r2, #0]
 800173a:	f043 0301 	orr.w	r3, r3, #1
 800173e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001742:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001744:	f7ff fe90 	bl	8001468 <HAL_GetTick>
 8001748:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800174a:	e011      	b.n	8001770 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800174c:	f7ff fe8c 	bl	8001468 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800175a:	d909      	bls.n	8001770 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2204      	movs	r2, #4
 8001760:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	22e0      	movs	r2, #224	; 0xe0
 8001768:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e084      	b.n	800187a <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1e4      	bne.n	800174c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f000 fdfa 	bl	800237c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001788:	f002 fede 	bl	8004548 <HAL_RCC_GetHCLKFreq>
 800178c:	4603      	mov	r3, r0
 800178e:	4a3f      	ldr	r2, [pc, #252]	; (800188c <HAL_ETH_Init+0x1c4>)
 8001790:	fba2 2303 	umull	r2, r3, r2, r3
 8001794:	0c9a      	lsrs	r2, r3, #18
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	3a01      	subs	r2, #1
 800179c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f000 ffe5 	bl	8002770 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017ae:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80017b2:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	6812      	ldr	r2, [r2, #0]
 80017ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80017be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017c2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	f003 0303 	and.w	r3, r3, #3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d009      	beq.n	80017e6 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2201      	movs	r2, #1
 80017d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	22e0      	movs	r2, #224	; 0xe0
 80017de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e049      	b.n	800187a <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017ee:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80017f2:	4b27      	ldr	r3, [pc, #156]	; (8001890 <HAL_ETH_Init+0x1c8>)
 80017f4:	4013      	ands	r3, r2
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	6952      	ldr	r2, [r2, #20]
 80017fa:	0051      	lsls	r1, r2, #1
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	6812      	ldr	r2, [r2, #0]
 8001800:	430b      	orrs	r3, r1
 8001802:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001806:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f001 f84d 	bl	80028aa <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f001 f893 	bl	800293c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	3305      	adds	r3, #5
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	021a      	lsls	r2, r3, #8
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	3304      	adds	r3, #4
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	4619      	mov	r1, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	430a      	orrs	r2, r1
 8001830:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	3303      	adds	r3, #3
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	061a      	lsls	r2, r3, #24
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	3302      	adds	r3, #2
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	041b      	lsls	r3, r3, #16
 8001848:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	3301      	adds	r3, #1
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001854:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001862:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001864:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2210      	movs	r2, #16
 8001874:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	58024400 	.word	0x58024400
 8001888:	58000400 	.word	0x58000400
 800188c:	431bde83 	.word	0x431bde83
 8001890:	ffff8001 	.word	0xffff8001

08001894 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018a2:	2b10      	cmp	r3, #16
 80018a4:	d179      	bne.n	800199a <HAL_ETH_Start_IT+0x106>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2223      	movs	r2, #35	; 0x23
 80018aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2201      	movs	r2, #1
 80018b2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	4b38      	ldr	r3, [pc, #224]	; (80019a4 <HAL_ETH_Start_IT+0x110>)
 80018c2:	430b      	orrs	r3, r1
 80018c4:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
            ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	4b34      	ldr	r3, [pc, #208]	; (80019a8 <HAL_ETH_Start_IT+0x114>)
 80018d6:	430b      	orrs	r3, r1
 80018d8:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
            ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2204      	movs	r2, #4
 80018e0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 f9eb 	bl	8001cbe <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f042 0202 	orr.w	r2, r2, #2
 80018f6:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f042 0201 	orr.w	r2, r2, #1
 8001906:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f042 0201 	orr.w	r2, r2, #1
 8001918:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001924:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	6812      	ldr	r2, [r2, #0]
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001934:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001940:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	6812      	ldr	r2, [r2, #0]
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001950:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800195c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	6812      	ldr	r2, [r2, #0]
 8001964:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8001968:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800196c:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001978:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	f24d 03c1 	movw	r3, #53441	; 0xd0c1
 8001984:	430b      	orrs	r3, r1
 8001986:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800198a:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2223      	movs	r2, #35	; 0x23
 8001992:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8001996:	2300      	movs	r3, #0
 8001998:	e000      	b.n	800199c <HAL_ETH_Start_IT+0x108>
  }
  else
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
  }
}
 800199c:	4618      	mov	r0, r3
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	0c020060 	.word	0x0c020060
 80019a8:	0c20c000 	.word	0x0c20c000

080019ac <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019ba:	2b23      	cmp	r3, #35	; 0x23
 80019bc:	d165      	bne.n	8001a8a <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2223      	movs	r2, #35	; 0x23
 80019c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019ce:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	4b30      	ldr	r3, [pc, #192]	; (8001a98 <HAL_ETH_Stop_IT+0xec>)
 80019d8:	400b      	ands	r3, r1
 80019da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019de:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019ea:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	6812      	ldr	r2, [r2, #0]
 80019f2:	f023 0301 	bic.w	r3, r3, #1
 80019f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019fa:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a06:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	6812      	ldr	r2, [r2, #0]
 8001a0e:	f023 0301 	bic.w	r3, r3, #1
 8001a12:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a16:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f022 0201 	bic.w	r2, r2, #1
 8001a28:	601a      	str	r2, [r3, #0]
    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f042 0201 	orr.w	r2, r2, #1
 8001a3a:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 0202 	bic.w	r2, r2, #2
 8001a4c:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	e00e      	b.n	8001a72 <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	3212      	adds	r2, #18
 8001a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a5e:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2b03      	cmp	r3, #3
 8001a76:	d9ed      	bls.n	8001a54 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2210      	movs	r2, #16
 8001a82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001a86:	2300      	movs	r3, #0
 8001a88:	e000      	b.n	8001a8c <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
  }
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3714      	adds	r7, #20
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	ffff2f3e 	.word	0xffff2f3e

08001a9c <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d109      	bne.n	8001ac0 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ab2:	f043 0201 	orr.w	r2, r3, #1
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e03a      	b.n	8001b36 <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ac6:	2b23      	cmp	r3, #35	; 0x23
 8001ac8:	d134      	bne.n	8001b34 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	6839      	ldr	r1, [r7, #0]
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 ff8e 	bl	80029f8 <ETH_Prepare_Tx_Descriptors>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d009      	beq.n	8001af6 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ae8:	f043 0202 	orr.w	r2, r3, #2
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e01f      	b.n	8001b36 <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 8001af6:	f3bf 8f4f 	dsb	sy
}
 8001afa:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b00:	1c5a      	adds	r2, r3, #1
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	629a      	str	r2, [r3, #40]	; 0x28
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b0a:	2b03      	cmp	r3, #3
 8001b0c:	d904      	bls.n	8001b18 <HAL_ETH_Transmit_IT+0x7c>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b12:	1f1a      	subs	r2, r3, #4
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3106      	adds	r1, #6
 8001b24:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001b28:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b2c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    return HAL_OK;
 8001b30:	2300      	movs	r3, #0
 8001b32:	e000      	b.n	8001b36 <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
  }
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b088      	sub	sp, #32
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
 8001b46:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d109      	bne.n	8001b6a <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b5c:	f043 0201 	orr.w	r2, r3, #1
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e0a5      	b.n	8001cb6 <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b70:	2b23      	cmp	r3, #35	; 0x23
 8001b72:	d001      	beq.n	8001b78 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e09e      	b.n	8001cb6 <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b7c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	69fa      	ldr	r2, [r7, #28]
 8001b82:	3212      	adds	r2, #18
 8001b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b88:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b8e:	f1c3 0304 	rsb	r3, r3, #4
 8001b92:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001b94:	e067      	b.n	8001c66 <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d007      	beq.n	8001bb2 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	685a      	ldr	r2, [r3, #4]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d103      	bne.n	8001bc6 <HAL_ETH_ReadData+0x88>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d03d      	beq.n	8001c42 <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d005      	beq.n	8001bde <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d00d      	beq.n	8001c0c <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	68da      	ldr	r2, [r3, #12]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	f006 ffad 	bl	8008b80 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c2a:	1c5a      	adds	r2, r3, #1
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	441a      	add	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	3301      	adds	r3, #1
 8001c46:	61fb      	str	r3, [r7, #28]
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	2b03      	cmp	r3, #3
 8001c4c:	d902      	bls.n	8001c54 <HAL_ETH_ReadData+0x116>
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	3b04      	subs	r3, #4
 8001c52:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	69fa      	ldr	r2, [r7, #28]
 8001c58:	3212      	adds	r2, #18
 8001c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c5e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	3301      	adds	r3, #1
 8001c64:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	db06      	blt.n	8001c7c <HAL_ETH_ReadData+0x13e>
 8001c6e:	697a      	ldr	r2, [r7, #20]
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d202      	bcs.n	8001c7c <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 8001c76:	7bfb      	ldrb	r3, [r7, #15]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d08c      	beq.n	8001b96 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	441a      	add	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d002      	beq.n	8001c96 <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 f814 	bl	8001cbe <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	69fa      	ldr	r2, [r7, #28]
 8001c9a:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d108      	bne.n	8001cb4 <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	e000      	b.n	8001cb6 <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3720      	adds	r7, #32
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b088      	sub	sp, #32
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001cd2:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	69fa      	ldr	r2, [r7, #28]
 8001cd8:	3212      	adds	r2, #18
 8001cda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cde:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ce4:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001ce6:	e03b      	b.n	8001d60 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	691b      	ldr	r3, [r3, #16]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d112      	bne.n	8001d16 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001cf0:	f107 030c 	add.w	r3, r7, #12
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f006 ff13 	bl	8008b20 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d102      	bne.n	8001d06 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001d00:	2300      	movs	r3, #0
 8001d02:	74fb      	strb	r3, [r7, #19]
 8001d04:	e007      	b.n	8001d16 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	461a      	mov	r2, r3
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8001d16:	7cfb      	ldrb	r3, [r7, #19]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d021      	beq.n	8001d60 <ETH_UpdateDescriptor+0xa2>
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001d1c:	f3bf 8f5f 	dmb	sy
}
 8001d20:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d004      	beq.n	8001d34 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	e003      	b.n	8001d3c <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 8001d3a:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	61fb      	str	r3, [r7, #28]
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	2b03      	cmp	r3, #3
 8001d46:	d902      	bls.n	8001d4e <ETH_UpdateDescriptor+0x90>
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	3b04      	subs	r3, #4
 8001d4c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69fa      	ldr	r2, [r7, #28]
 8001d52:	3212      	adds	r2, #18
 8001d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d58:	617b      	str	r3, [r7, #20]
      desccount--;
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d002      	beq.n	8001d6c <ETH_UpdateDescriptor+0xae>
 8001d66:	7cfb      	ldrb	r3, [r7, #19]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1bd      	bne.n	8001ce8 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d00d      	beq.n	8001d92 <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d7e:	461a      	mov	r2, r3
 8001d80:	2300      	movs	r3, #0
 8001d82:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69fa      	ldr	r2, [r7, #28]
 8001d8a:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001d92:	bf00      	nop
 8001d94:	3720      	adds	r7, #32
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b086      	sub	sp, #24
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	3318      	adds	r3, #24
 8001da6:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dac:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db2:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001db4:	2301      	movs	r3, #1
 8001db6:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001db8:	e03f      	b.n	8001e3a <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001dc4:	68ba      	ldr	r2, [r7, #8]
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	3304      	adds	r3, #4
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4413      	add	r3, r2
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d106      	bne.n	8001de2 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	f003 0303 	and.w	r3, r3, #3
 8001ddc:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001de2:	7bbb      	ldrb	r3, [r7, #14]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d028      	beq.n	8001e3a <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	68d9      	ldr	r1, [r3, #12]
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	4613      	mov	r3, r2
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	4413      	add	r3, r2
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	440b      	add	r3, r1
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	db1b      	blt.n	8001e36 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001dfe:	68ba      	ldr	r2, [r7, #8]
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	3304      	adds	r3, #4
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f006 ff20 	bl	8008c50 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001e10:	68ba      	ldr	r2, [r7, #8]
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	3304      	adds	r3, #4
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	4413      	add	r3, r2
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	3301      	adds	r3, #1
 8001e22:	f003 0303 	and.w	r3, r3, #3
 8001e26:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e34:	e001      	b.n	8001e3a <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d002      	beq.n	8001e46 <HAL_ETH_ReleaseTxPacket+0xac>
 8001e40:	7bfb      	ldrb	r3, [r7, #15]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1b9      	bne.n	8001dba <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3718      	adds	r7, #24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
 8001e5c:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e03e      	b.n	8001ef0 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e7a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	055b      	lsls	r3, r3, #21
 8001e86:	4313      	orrs	r3, r2
 8001e88:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	041b      	lsls	r3, r3, #16
 8001e94:	4313      	orrs	r3, r2
 8001e96:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	f043 030c 	orr.w	r3, r3, #12
 8001e9e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	f043 0301 	orr.w	r3, r3, #1
 8001ea6:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	697a      	ldr	r2, [r7, #20]
 8001eae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8001eb2:	f7ff fad9 	bl	8001468 <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001eb8:	e009      	b.n	8001ece <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001eba:	f7ff fad5 	bl	8001468 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ec8:	d901      	bls.n	8001ece <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e010      	b.n	8001ef0 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1ed      	bne.n	8001eba <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	461a      	mov	r2, r3
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3718      	adds	r7, #24
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b086      	sub	sp, #24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
 8001f04:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e03c      	b.n	8001f94 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f22:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	055b      	lsls	r3, r3, #21
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	041b      	lsls	r3, r3, #16
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	f023 030c 	bic.w	r3, r3, #12
 8001f46:	f043 0304 	orr.w	r3, r3, #4
 8001f4a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	f043 0301 	orr.w	r3, r3, #1
 8001f52:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	4b10      	ldr	r3, [pc, #64]	; (8001f9c <HAL_ETH_WritePHYRegister+0xa4>)
 8001f5a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8001f5e:	4a0f      	ldr	r2, [pc, #60]	; (8001f9c <HAL_ETH_WritePHYRegister+0xa4>)
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8001f66:	f7ff fa7f 	bl	8001468 <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001f6c:	e009      	b.n	8001f82 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001f6e:	f7ff fa7b 	bl	8001468 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f7c:	d901      	bls.n	8001f82 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e008      	b.n	8001f94 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1ed      	bne.n	8001f6e <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3718      	adds	r7, #24
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40028000 	.word	0x40028000

08001fa0 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d101      	bne.n	8001fb4 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e1c3      	b.n	800233c <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 020c 	and.w	r2, r3, #12
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0310 	and.w	r3, r3, #16
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	bf14      	ite	ne
 8001fd0:	2301      	movne	r3, #1
 8001fd2:	2300      	moveq	r3, #0
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	bf0c      	ite	eq
 8001ffa:	2301      	moveq	r3, #1
 8001ffc:	2300      	movne	r3, #0
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	461a      	mov	r2, r3
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 8002012:	2b00      	cmp	r3, #0
 8002014:	bf14      	ite	ne
 8002016:	2301      	movne	r3, #1
 8002018:	2300      	moveq	r3, #0
 800201a:	b2db      	uxtb	r3, r3
 800201c:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800202c:	2b00      	cmp	r3, #0
 800202e:	bf0c      	ite	eq
 8002030:	2301      	moveq	r3, #1
 8002032:	2300      	movne	r3, #0
 8002034:	b2db      	uxtb	r3, r3
 8002036:	461a      	mov	r2, r3
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8002042:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002046:	2b00      	cmp	r3, #0
 8002048:	bf14      	ite	ne
 800204a:	2301      	movne	r3, #1
 800204c:	2300      	moveq	r3, #0
 800204e:	b2db      	uxtb	r3, r3
 8002050:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002060:	2b00      	cmp	r3, #0
 8002062:	bf14      	ite	ne
 8002064:	2301      	movne	r3, #1
 8002066:	2300      	moveq	r3, #0
 8002068:	b2db      	uxtb	r3, r3
 800206a:	461a      	mov	r2, r3
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002096:	2b00      	cmp	r3, #0
 8002098:	bf14      	ite	ne
 800209a:	2301      	movne	r3, #1
 800209c:	2300      	moveq	r3, #0
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	461a      	mov	r2, r3
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	bf0c      	ite	eq
 80020b4:	2301      	moveq	r3, #1
 80020b6:	2300      	movne	r3, #0
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	461a      	mov	r2, r3
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	bf0c      	ite	eq
 80020ce:	2301      	moveq	r3, #1
 80020d0:	2300      	movne	r3, #0
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	461a      	mov	r2, r3
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	bf14      	ite	ne
 80020e8:	2301      	movne	r3, #1
 80020ea:	2300      	moveq	r3, #0
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	461a      	mov	r2, r3
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	bf14      	ite	ne
 8002102:	2301      	movne	r3, #1
 8002104:	2300      	moveq	r3, #0
 8002106:	b2db      	uxtb	r3, r3
 8002108:	461a      	mov	r2, r3
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002118:	2b00      	cmp	r3, #0
 800211a:	bf14      	ite	ne
 800211c:	2301      	movne	r3, #1
 800211e:	2300      	moveq	r3, #0
 8002120:	b2db      	uxtb	r3, r3
 8002122:	461a      	mov	r2, r3
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 800212e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002132:	2b00      	cmp	r3, #0
 8002134:	bf14      	ite	ne
 8002136:	2301      	movne	r3, #1
 8002138:	2300      	moveq	r3, #0
 800213a:	b2db      	uxtb	r3, r3
 800213c:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800215a:	2b00      	cmp	r3, #0
 800215c:	bf14      	ite	ne
 800215e:	2301      	movne	r3, #1
 8002160:	2300      	moveq	r3, #0
 8002162:	b2db      	uxtb	r3, r3
 8002164:	461a      	mov	r2, r3
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002190:	2b00      	cmp	r3, #0
 8002192:	bf0c      	ite	eq
 8002194:	2301      	moveq	r3, #1
 8002196:	2300      	movne	r3, #0
 8002198:	b2db      	uxtb	r3, r3
 800219a:	461a      	mov	r2, r3
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	bf14      	ite	ne
 80021b0:	2301      	movne	r3, #1
 80021b2:	2300      	moveq	r3, #0
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	461a      	mov	r2, r3
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 80021c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	bf14      	ite	ne
 80021cc:	2301      	movne	r3, #1
 80021ce:	2300      	moveq	r3, #0
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	bf14      	ite	ne
 80021e8:	2301      	movne	r3, #1
 80021ea:	2300      	moveq	r3, #0
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	0e5b      	lsrs	r3, r3, #25
 80021fe:	f003 021f 	and.w	r2, r3, #31
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002210:	2b00      	cmp	r3, #0
 8002212:	bf14      	ite	ne
 8002214:	2301      	movne	r3, #1
 8002216:	2300      	moveq	r3, #0
 8002218:	b2db      	uxtb	r3, r3
 800221a:	461a      	mov	r2, r3
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	f003 020f 	and.w	r2, r3, #15
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	bf14      	ite	ne
 800223e:	2301      	movne	r3, #1
 8002240:	2300      	moveq	r3, #0
 8002242:	b2db      	uxtb	r3, r3
 8002244:	461a      	mov	r2, r3
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002256:	2b00      	cmp	r3, #0
 8002258:	bf0c      	ite	eq
 800225a:	2301      	moveq	r3, #1
 800225c:	2300      	movne	r3, #0
 800225e:	b2db      	uxtb	r3, r3
 8002260:	461a      	mov	r2, r3
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800226e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227c:	0c1b      	lsrs	r3, r3, #16
 800227e:	b29a      	uxth	r2, r3
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b00      	cmp	r3, #0
 8002292:	bf14      	ite	ne
 8002294:	2301      	movne	r3, #1
 8002296:	2300      	moveq	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	461a      	mov	r2, r3
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022aa:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	bf14      	ite	ne
 80022b2:	2301      	movne	r3, #1
 80022b4:	2300      	moveq	r3, #0
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80022c8:	f003 0272 	and.w	r2, r3, #114	; 0x72
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80022d8:	f003 0223 	and.w	r2, r3, #35	; 0x23
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 80022e8:	f003 0308 	and.w	r3, r3, #8
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	bf14      	ite	ne
 80022f0:	2301      	movne	r3, #1
 80022f2:	2300      	moveq	r3, #0
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002306:	f003 0310 	and.w	r3, r3, #16
 800230a:	2b00      	cmp	r3, #0
 800230c:	bf14      	ite	ne
 800230e:	2301      	movne	r3, #1
 8002310:	2300      	moveq	r3, #0
 8002312:	b2db      	uxtb	r3, r3
 8002314:	461a      	mov	r2, r3
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002328:	2b00      	cmp	r3, #0
 800232a:	bf0c      	ite	eq
 800232c:	2301      	moveq	r3, #1
 800232e:	2300      	movne	r3, #0
 8002330:	b2db      	uxtb	r3, r3
 8002332:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d101      	bne.n	800235c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e00b      	b.n	8002374 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002362:	2b10      	cmp	r3, #16
 8002364:	d105      	bne.n	8002372 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002366:	6839      	ldr	r1, [r7, #0]
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f000 f85f 	bl	800242c <ETH_SetMACConfig>

    return HAL_OK;
 800236e:	2300      	movs	r3, #0
 8002370:	e000      	b.n	8002374 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
  }
}
 8002374:	4618      	mov	r0, r3
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800238c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002394:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002396:	f002 f8d7 	bl	8004548 <HAL_RCC_GetHCLKFreq>
 800239a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	4a1e      	ldr	r2, [pc, #120]	; (8002418 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d908      	bls.n	80023b6 <HAL_ETH_SetMDIOClockRange+0x3a>
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	4a1d      	ldr	r2, [pc, #116]	; (800241c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d804      	bhi.n	80023b6 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	e027      	b.n	8002406 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	4a18      	ldr	r2, [pc, #96]	; (800241c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d908      	bls.n	80023d0 <HAL_ETH_SetMDIOClockRange+0x54>
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	4a17      	ldr	r2, [pc, #92]	; (8002420 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d204      	bcs.n	80023d0 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80023cc:	60fb      	str	r3, [r7, #12]
 80023ce:	e01a      	b.n	8002406 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	4a13      	ldr	r2, [pc, #76]	; (8002420 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d303      	bcc.n	80023e0 <HAL_ETH_SetMDIOClockRange+0x64>
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	4a12      	ldr	r2, [pc, #72]	; (8002424 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d911      	bls.n	8002404 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	4a10      	ldr	r2, [pc, #64]	; (8002424 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d908      	bls.n	80023fa <HAL_ETH_SetMDIOClockRange+0x7e>
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	4a0f      	ldr	r2, [pc, #60]	; (8002428 <HAL_ETH_SetMDIOClockRange+0xac>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d804      	bhi.n	80023fa <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	e005      	b.n	8002406 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002400:	60fb      	str	r3, [r7, #12]
 8002402:	e000      	b.n	8002406 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002404:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002410:	bf00      	nop
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	01312cff 	.word	0x01312cff
 800241c:	02160ebf 	.word	0x02160ebf
 8002420:	03938700 	.word	0x03938700
 8002424:	05f5e0ff 	.word	0x05f5e0ff
 8002428:	08f0d17f 	.word	0x08f0d17f

0800242c <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800243e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	791b      	ldrb	r3, [r3, #4]
 8002444:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002446:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	7b1b      	ldrb	r3, [r3, #12]
 800244c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800244e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	7b5b      	ldrb	r3, [r3, #13]
 8002454:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002456:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	7b9b      	ldrb	r3, [r3, #14]
 800245c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800245e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	7bdb      	ldrb	r3, [r3, #15]
 8002464:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002466:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	7c12      	ldrb	r2, [r2, #16]
 800246c:	2a00      	cmp	r2, #0
 800246e:	d102      	bne.n	8002476 <ETH_SetMACConfig+0x4a>
 8002470:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002474:	e000      	b.n	8002478 <ETH_SetMACConfig+0x4c>
 8002476:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002478:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	7c52      	ldrb	r2, [r2, #17]
 800247e:	2a00      	cmp	r2, #0
 8002480:	d102      	bne.n	8002488 <ETH_SetMACConfig+0x5c>
 8002482:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002486:	e000      	b.n	800248a <ETH_SetMACConfig+0x5e>
 8002488:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800248a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	7c9b      	ldrb	r3, [r3, #18]
 8002490:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002492:	431a      	orrs	r2, r3
               macconf->Speed |
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002498:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800249e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	7f1b      	ldrb	r3, [r3, #28]
 80024a4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80024a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	7f5b      	ldrb	r3, [r3, #29]
 80024ac:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80024ae:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	7f92      	ldrb	r2, [r2, #30]
 80024b4:	2a00      	cmp	r2, #0
 80024b6:	d102      	bne.n	80024be <ETH_SetMACConfig+0x92>
 80024b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024bc:	e000      	b.n	80024c0 <ETH_SetMACConfig+0x94>
 80024be:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80024c0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	7fdb      	ldrb	r3, [r3, #31]
 80024c6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80024c8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	f892 2020 	ldrb.w	r2, [r2, #32]
 80024d0:	2a00      	cmp	r2, #0
 80024d2:	d102      	bne.n	80024da <ETH_SetMACConfig+0xae>
 80024d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024d8:	e000      	b.n	80024dc <ETH_SetMACConfig+0xb0>
 80024da:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80024dc:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80024e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80024ea:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80024ec:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80024f2:	4313      	orrs	r3, r2
 80024f4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	4b56      	ldr	r3, [pc, #344]	; (8002658 <ETH_SetMACConfig+0x22c>)
 80024fe:	4013      	ands	r3, r2
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	6812      	ldr	r2, [r2, #0]
 8002504:	68f9      	ldr	r1, [r7, #12]
 8002506:	430b      	orrs	r3, r1
 8002508:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800250e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002516:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002518:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002520:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002522:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800252a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800252c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002534:	2a00      	cmp	r2, #0
 8002536:	d102      	bne.n	800253e <ETH_SetMACConfig+0x112>
 8002538:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800253c:	e000      	b.n	8002540 <ETH_SetMACConfig+0x114>
 800253e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002540:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002546:	4313      	orrs	r3, r2
 8002548:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	4b42      	ldr	r3, [pc, #264]	; (800265c <ETH_SetMACConfig+0x230>)
 8002552:	4013      	ands	r3, r2
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	6812      	ldr	r2, [r2, #0]
 8002558:	68f9      	ldr	r1, [r7, #12]
 800255a:	430b      	orrs	r3, r1
 800255c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002564:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800256a:	4313      	orrs	r3, r2
 800256c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68da      	ldr	r2, [r3, #12]
 8002574:	4b3a      	ldr	r3, [pc, #232]	; (8002660 <ETH_SetMACConfig+0x234>)
 8002576:	4013      	ands	r3, r2
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	6812      	ldr	r2, [r2, #0]
 800257c:	68f9      	ldr	r1, [r7, #12]
 800257e:	430b      	orrs	r3, r1
 8002580:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002588:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800258e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002596:	2a00      	cmp	r2, #0
 8002598:	d101      	bne.n	800259e <ETH_SetMACConfig+0x172>
 800259a:	2280      	movs	r2, #128	; 0x80
 800259c:	e000      	b.n	80025a0 <ETH_SetMACConfig+0x174>
 800259e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80025a0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025a6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80025a8:	4313      	orrs	r3, r2
 80025aa:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80025b2:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80025b6:	4013      	ands	r3, r2
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	6812      	ldr	r2, [r2, #0]
 80025bc:	68f9      	ldr	r1, [r7, #12]
 80025be:	430b      	orrs	r3, r1
 80025c0:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80025c8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80025d0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80025d2:	4313      	orrs	r3, r2
 80025d4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025de:	f023 0103 	bic.w	r1, r3, #3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	430a      	orrs	r2, r1
 80025ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80025f6:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002612:	2a00      	cmp	r2, #0
 8002614:	d101      	bne.n	800261a <ETH_SetMACConfig+0x1ee>
 8002616:	2240      	movs	r2, #64	; 0x40
 8002618:	e000      	b.n	800261c <ETH_SetMACConfig+0x1f0>
 800261a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800261c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002624:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002626:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800262e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002630:	4313      	orrs	r3, r2
 8002632:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800263c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	430a      	orrs	r2, r1
 8002648:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800264c:	bf00      	nop
 800264e:	3714      	adds	r7, #20
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	00048083 	.word	0x00048083
 800265c:	c0f88000 	.word	0xc0f88000
 8002660:	fffffef0 	.word	0xfffffef0

08002664 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	4b38      	ldr	r3, [pc, #224]	; (800275c <ETH_SetDMAConfig+0xf8>)
 800267a:	4013      	ands	r3, r2
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	6811      	ldr	r1, [r2, #0]
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	6812      	ldr	r2, [r2, #0]
 8002684:	430b      	orrs	r3, r1
 8002686:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800268a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	791b      	ldrb	r3, [r3, #4]
 8002690:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002696:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	7b1b      	ldrb	r3, [r3, #12]
 800269c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800269e:	4313      	orrs	r3, r2
 80026a0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	4b2c      	ldr	r3, [pc, #176]	; (8002760 <ETH_SetDMAConfig+0xfc>)
 80026ae:	4013      	ands	r3, r2
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	6812      	ldr	r2, [r2, #0]
 80026b4:	68f9      	ldr	r1, [r7, #12]
 80026b6:	430b      	orrs	r3, r1
 80026b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026bc:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	7b5b      	ldrb	r3, [r3, #13]
 80026c2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80026c8:	4313      	orrs	r3, r2
 80026ca:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026d4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80026d8:	4b22      	ldr	r3, [pc, #136]	; (8002764 <ETH_SetDMAConfig+0x100>)
 80026da:	4013      	ands	r3, r2
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6812      	ldr	r2, [r2, #0]
 80026e0:	68f9      	ldr	r1, [r7, #12]
 80026e2:	430b      	orrs	r3, r1
 80026e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026e8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	7d1b      	ldrb	r3, [r3, #20]
 80026f4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80026f6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	7f5b      	ldrb	r3, [r3, #29]
 80026fc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80026fe:	4313      	orrs	r3, r2
 8002700:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800270a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800270e:	4b16      	ldr	r3, [pc, #88]	; (8002768 <ETH_SetDMAConfig+0x104>)
 8002710:	4013      	ands	r3, r2
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	6812      	ldr	r2, [r2, #0]
 8002716:	68f9      	ldr	r1, [r7, #12]
 8002718:	430b      	orrs	r3, r1
 800271a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800271e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	7f1b      	ldrb	r3, [r3, #28]
 8002726:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800272c:	4313      	orrs	r3, r2
 800272e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002738:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800273c:	4b0b      	ldr	r3, [pc, #44]	; (800276c <ETH_SetDMAConfig+0x108>)
 800273e:	4013      	ands	r3, r2
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	6812      	ldr	r2, [r2, #0]
 8002744:	68f9      	ldr	r1, [r7, #12]
 8002746:	430b      	orrs	r3, r1
 8002748:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800274c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8002750:	bf00      	nop
 8002752:	3714      	adds	r7, #20
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	ffff87fd 	.word	0xffff87fd
 8002760:	ffff2ffe 	.word	0xffff2ffe
 8002764:	fffec000 	.word	0xfffec000
 8002768:	ffc0efef 	.word	0xffc0efef
 800276c:	7fc0ffff 	.word	0x7fc0ffff

08002770 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b0a4      	sub	sp, #144	; 0x90
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002778:	2301      	movs	r3, #1
 800277a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800277e:	2300      	movs	r3, #0
 8002780:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002782:	2300      	movs	r3, #0
 8002784:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002788:	2300      	movs	r3, #0
 800278a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800278e:	2301      	movs	r3, #1
 8002790:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002794:	2301      	movs	r3, #1
 8002796:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800279a:	2301      	movs	r3, #1
 800279c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80027a0:	2300      	movs	r3, #0
 80027a2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80027a6:	2301      	movs	r3, #1
 80027a8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80027ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027b0:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80027b2:	2300      	movs	r3, #0
 80027b4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80027b8:	2300      	movs	r3, #0
 80027ba:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80027bc:	2300      	movs	r3, #0
 80027be:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80027c2:	2300      	movs	r3, #0
 80027c4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80027c8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80027cc:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80027ce:	2300      	movs	r3, #0
 80027d0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80027d4:	2300      	movs	r3, #0
 80027d6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80027d8:	2301      	movs	r3, #1
 80027da:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80027de:	2300      	movs	r3, #0
 80027e0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80027e4:	2300      	movs	r3, #0
 80027e6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80027ea:	2300      	movs	r3, #0
 80027ec:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80027ee:	2300      	movs	r3, #0
 80027f0:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80027f2:	2300      	movs	r3, #0
 80027f4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80027f6:	2300      	movs	r3, #0
 80027f8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80027fc:	2300      	movs	r3, #0
 80027fe:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002802:	2301      	movs	r3, #1
 8002804:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002808:	2320      	movs	r3, #32
 800280a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800280e:	2301      	movs	r3, #1
 8002810:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002814:	2300      	movs	r3, #0
 8002816:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800281a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800281e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002820:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002824:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002826:	2300      	movs	r3, #0
 8002828:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800282c:	2302      	movs	r3, #2
 800282e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002832:	2300      	movs	r3, #0
 8002834:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002838:	2300      	movs	r3, #0
 800283a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800283e:	2300      	movs	r3, #0
 8002840:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002844:	2301      	movs	r3, #1
 8002846:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800284a:	2300      	movs	r3, #0
 800284c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800284e:	2301      	movs	r3, #1
 8002850:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002854:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002858:	4619      	mov	r1, r3
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7ff fde6 	bl	800242c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002860:	2301      	movs	r3, #1
 8002862:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002864:	2301      	movs	r3, #1
 8002866:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002868:	2300      	movs	r3, #0
 800286a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800286c:	2300      	movs	r3, #0
 800286e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002872:	2300      	movs	r3, #0
 8002874:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002876:	2300      	movs	r3, #0
 8002878:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800287a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800287e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002880:	2300      	movs	r3, #0
 8002882:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002884:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002888:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800288a:	2300      	movs	r3, #0
 800288c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002890:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002894:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002896:	f107 0308 	add.w	r3, r7, #8
 800289a:	4619      	mov	r1, r3
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f7ff fee1 	bl	8002664 <ETH_SetDMAConfig>
}
 80028a2:	bf00      	nop
 80028a4:	3790      	adds	r7, #144	; 0x90
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b085      	sub	sp, #20
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80028b2:	2300      	movs	r3, #0
 80028b4:	60fb      	str	r3, [r7, #12]
 80028b6:	e01d      	b.n	80028f4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	68d9      	ldr	r1, [r3, #12]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	4613      	mov	r3, r2
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	4413      	add	r3, r2
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	440b      	add	r3, r1
 80028c8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	2200      	movs	r2, #0
 80028d4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	2200      	movs	r2, #0
 80028da:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	2200      	movs	r2, #0
 80028e0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80028e2:	68b9      	ldr	r1, [r7, #8]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	3206      	adds	r2, #6
 80028ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	3301      	adds	r3, #1
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2b03      	cmp	r3, #3
 80028f8:	d9de      	bls.n	80028b8 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002908:	461a      	mov	r2, r3
 800290a:	2303      	movs	r3, #3
 800290c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68da      	ldr	r2, [r3, #12]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800291c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68da      	ldr	r2, [r3, #12]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800292c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8002930:	bf00      	nop
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002944:	2300      	movs	r3, #0
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	e023      	b.n	8002992 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6919      	ldr	r1, [r3, #16]
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	4613      	mov	r3, r2
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	4413      	add	r3, r2
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	440b      	add	r3, r1
 800295a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	2200      	movs	r2, #0
 8002960:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	2200      	movs	r2, #0
 8002966:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	2200      	movs	r2, #0
 800296c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	2200      	movs	r2, #0
 8002972:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	2200      	movs	r2, #0
 8002978:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	2200      	movs	r2, #0
 800297e:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002980:	68b9      	ldr	r1, [r7, #8]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	3212      	adds	r2, #18
 8002988:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	3301      	adds	r3, #1
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2b03      	cmp	r3, #3
 8002996:	d9d8      	bls.n	800294a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029be:	461a      	mov	r2, r3
 80029c0:	2303      	movs	r3, #3
 80029c2:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	691a      	ldr	r2, [r3, #16]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029d2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029e6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80029ea:	bf00      	nop
 80029ec:	3714      	adds	r7, #20
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
	...

080029f8 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b08d      	sub	sp, #52	; 0x34
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	3318      	adds	r3, #24
 8002a08:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002a16:	2300      	movs	r3, #0
 8002a18:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a22:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002a2e:	6a3b      	ldr	r3, [r7, #32]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a3a:	d007      	beq.n	8002a4c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a40:	3304      	adds	r3, #4
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	e259      	b.n	8002f04 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d044      	beq.n	8002ae6 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002a5c:	6a3b      	ldr	r3, [r7, #32]
 8002a5e:	68da      	ldr	r2, [r3, #12]
 8002a60:	4b75      	ldr	r3, [pc, #468]	; (8002c38 <ETH_Prepare_Tx_Descriptors+0x240>)
 8002a62:	4013      	ands	r3, r2
 8002a64:	68ba      	ldr	r2, [r7, #8]
 8002a66:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	6a3b      	ldr	r3, [r7, #32]
 8002a6c:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8002a6e:	6a3b      	ldr	r3, [r7, #32]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002a88:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0308 	and.w	r3, r3, #8
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d027      	beq.n	8002ae6 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002a96:	6a3b      	ldr	r3, [r7, #32]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa0:	041b      	lsls	r3, r3, #16
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
 8002aa6:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8002aa8:	6a3b      	ldr	r3, [r7, #32]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002ab0:	6a3b      	ldr	r3, [r7, #32]
 8002ab2:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002ab4:	6a3b      	ldr	r3, [r7, #32]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	6a3b      	ldr	r3, [r7, #32]
 8002ac4:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002ad4:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002ae4:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0310 	and.w	r3, r3, #16
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00e      	beq.n	8002b10 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8002af2:	6a3b      	ldr	r3, [r7, #32]
 8002af4:	689a      	ldr	r2, [r3, #8]
 8002af6:	4b51      	ldr	r3, [pc, #324]	; (8002c3c <ETH_Prepare_Tx_Descriptors+0x244>)
 8002af8:	4013      	ands	r3, r2
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	6992      	ldr	r2, [r2, #24]
 8002afe:	431a      	orrs	r2, r3
 8002b00:	6a3b      	ldr	r3, [r7, #32]
 8002b02:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8002b04:	6a3b      	ldr	r3, [r7, #32]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8002b0c:	6a3b      	ldr	r3, [r7, #32]
 8002b0e:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d105      	bne.n	8002b28 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0310 	and.w	r3, r3, #16
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d036      	beq.n	8002b96 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002b28:	6a3b      	ldr	r3, [r7, #32]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002b30:	6a3b      	ldr	r3, [r7, #32]
 8002b32:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002b34:	f3bf 8f5f 	dmb	sy
}
 8002b38:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002b3a:	6a3b      	ldr	r3, [r7, #32]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002b42:	6a3b      	ldr	r3, [r7, #32]
 8002b44:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b48:	3301      	adds	r3, #1
 8002b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b4e:	2b03      	cmp	r3, #3
 8002b50:	d902      	bls.n	8002b58 <ETH_Prepare_Tx_Descriptors+0x160>
 8002b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b54:	3b04      	subs	r3, #4
 8002b56:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b60:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8002b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b64:	3301      	adds	r3, #1
 8002b66:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002b68:	6a3b      	ldr	r3, [r7, #32]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b74:	d10f      	bne.n	8002b96 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b7e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 8002b80:	f3bf 8f5f 	dmb	sy
}
 8002b84:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002b86:	6a3b      	ldr	r3, [r7, #32]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b8e:	6a3b      	ldr	r3, [r7, #32]
 8002b90:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8002b92:	2302      	movs	r3, #2
 8002b94:	e1b6      	b.n	8002f04 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8002b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b98:	3301      	adds	r3, #1
 8002b9a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	6a3b      	ldr	r3, [r7, #32]
 8002ba4:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002ba6:	6a3b      	ldr	r3, [r7, #32]
 8002ba8:	689a      	ldr	r2, [r3, #8]
 8002baa:	4b24      	ldr	r3, [pc, #144]	; (8002c3c <ETH_Prepare_Tx_Descriptors+0x244>)
 8002bac:	4013      	ands	r3, r2
 8002bae:	69fa      	ldr	r2, [r7, #28]
 8002bb0:	6852      	ldr	r2, [r2, #4]
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	6a3b      	ldr	r3, [r7, #32]
 8002bb6:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d012      	beq.n	8002be6 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	461a      	mov	r2, r3
 8002bcc:	6a3b      	ldr	r3, [r7, #32]
 8002bce:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002bd0:	6a3b      	ldr	r3, [r7, #32]
 8002bd2:	689a      	ldr	r2, [r3, #8]
 8002bd4:	4b1a      	ldr	r3, [pc, #104]	; (8002c40 <ETH_Prepare_Tx_Descriptors+0x248>)
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	69fa      	ldr	r2, [r7, #28]
 8002bda:	6852      	ldr	r2, [r2, #4]
 8002bdc:	0412      	lsls	r2, r2, #16
 8002bde:	431a      	orrs	r2, r3
 8002be0:	6a3b      	ldr	r3, [r7, #32]
 8002be2:	609a      	str	r2, [r3, #8]
 8002be4:	e008      	b.n	8002bf8 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002be6:	6a3b      	ldr	r3, [r7, #32]
 8002be8:	2200      	movs	r2, #0
 8002bea:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002bec:	6a3b      	ldr	r3, [r7, #32]
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	4b13      	ldr	r3, [pc, #76]	; (8002c40 <ETH_Prepare_Tx_Descriptors+0x248>)
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	6a3a      	ldr	r2, [r7, #32]
 8002bf6:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0310 	and.w	r3, r3, #16
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d021      	beq.n	8002c48 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002c04:	6a3b      	ldr	r3, [r7, #32]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	04db      	lsls	r3, r3, #19
 8002c12:	431a      	orrs	r2, r3
 8002c14:	6a3b      	ldr	r3, [r7, #32]
 8002c16:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002c18:	6a3b      	ldr	r3, [r7, #32]
 8002c1a:	68da      	ldr	r2, [r3, #12]
 8002c1c:	4b09      	ldr	r3, [pc, #36]	; (8002c44 <ETH_Prepare_Tx_Descriptors+0x24c>)
 8002c1e:	4013      	ands	r3, r2
 8002c20:	68ba      	ldr	r2, [r7, #8]
 8002c22:	69d2      	ldr	r2, [r2, #28]
 8002c24:	431a      	orrs	r2, r3
 8002c26:	6a3b      	ldr	r3, [r7, #32]
 8002c28:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002c2a:	6a3b      	ldr	r3, [r7, #32]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c32:	6a3b      	ldr	r3, [r7, #32]
 8002c34:	60da      	str	r2, [r3, #12]
 8002c36:	e02e      	b.n	8002c96 <ETH_Prepare_Tx_Descriptors+0x29e>
 8002c38:	ffff0000 	.word	0xffff0000
 8002c3c:	ffffc000 	.word	0xffffc000
 8002c40:	c000ffff 	.word	0xc000ffff
 8002c44:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002c48:	6a3b      	ldr	r3, [r7, #32]
 8002c4a:	68da      	ldr	r2, [r3, #12]
 8002c4c:	4b7b      	ldr	r3, [pc, #492]	; (8002e3c <ETH_Prepare_Tx_Descriptors+0x444>)
 8002c4e:	4013      	ands	r3, r2
 8002c50:	68ba      	ldr	r2, [r7, #8]
 8002c52:	6852      	ldr	r2, [r2, #4]
 8002c54:	431a      	orrs	r2, r3
 8002c56:	6a3b      	ldr	r3, [r7, #32]
 8002c58:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d008      	beq.n	8002c78 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002c66:	6a3b      	ldr	r3, [r7, #32]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	431a      	orrs	r2, r3
 8002c74:	6a3b      	ldr	r3, [r7, #32]
 8002c76:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0320 	and.w	r3, r3, #32
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d008      	beq.n	8002c96 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002c84:	6a3b      	ldr	r3, [r7, #32]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	431a      	orrs	r2, r3
 8002c92:	6a3b      	ldr	r3, [r7, #32]
 8002c94:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0304 	and.w	r3, r3, #4
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d008      	beq.n	8002cb4 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8002ca2:	6a3b      	ldr	r3, [r7, #32]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	6a3b      	ldr	r3, [r7, #32]
 8002cb2:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002cb4:	6a3b      	ldr	r3, [r7, #32]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002cc0:	6a3b      	ldr	r3, [r7, #32]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002cc8:	6a3b      	ldr	r3, [r7, #32]
 8002cca:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002ccc:	f3bf 8f5f 	dmb	sy
}
 8002cd0:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002cd2:	6a3b      	ldr	r3, [r7, #32]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002cda:	6a3b      	ldr	r3, [r7, #32]
 8002cdc:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f000 80da 	beq.w	8002ea0 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8002cec:	6a3b      	ldr	r3, [r7, #32]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	6a3b      	ldr	r3, [r7, #32]
 8002cfc:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002cfe:	e0cf      	b.n	8002ea0 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002d00:	6a3b      	ldr	r3, [r7, #32]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002d08:	6a3b      	ldr	r3, [r7, #32]
 8002d0a:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d0e:	3301      	adds	r3, #1
 8002d10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d14:	2b03      	cmp	r3, #3
 8002d16:	d902      	bls.n	8002d1e <ETH_Prepare_Tx_Descriptors+0x326>
 8002d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d1a:	3b04      	subs	r3, #4
 8002d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d26:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002d28:	6a3b      	ldr	r3, [r7, #32]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002d30:	6a3b      	ldr	r3, [r7, #32]
 8002d32:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8002d34:	6a3b      	ldr	r3, [r7, #32]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d40:	d007      	beq.n	8002d52 <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d46:	3304      	adds	r3, #4
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4413      	add	r3, r2
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d029      	beq.n	8002da6 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d5e:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002d60:	2300      	movs	r3, #0
 8002d62:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d64:	e019      	b.n	8002d9a <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8002d66:	f3bf 8f5f 	dmb	sy
}
 8002d6a:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d74:	6a3b      	ldr	r3, [r7, #32]
 8002d76:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d80:	2b03      	cmp	r3, #3
 8002d82:	d902      	bls.n	8002d8a <ETH_Prepare_Tx_Descriptors+0x392>
 8002d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d86:	3b04      	subs	r3, #4
 8002d88:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d92:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d96:	3301      	adds	r3, #1
 8002d98:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d3e1      	bcc.n	8002d66 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8002da2:	2302      	movs	r3, #2
 8002da4:	e0ae      	b.n	8002f04 <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 8002da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da8:	3301      	adds	r3, #1
 8002daa:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	461a      	mov	r2, r3
 8002db8:	6a3b      	ldr	r3, [r7, #32]
 8002dba:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002dbc:	6a3b      	ldr	r3, [r7, #32]
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	4b1f      	ldr	r3, [pc, #124]	; (8002e40 <ETH_Prepare_Tx_Descriptors+0x448>)
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	69fa      	ldr	r2, [r7, #28]
 8002dc6:	6852      	ldr	r2, [r2, #4]
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	6a3b      	ldr	r3, [r7, #32]
 8002dcc:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d012      	beq.n	8002dfc <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	461a      	mov	r2, r3
 8002de2:	6a3b      	ldr	r3, [r7, #32]
 8002de4:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002de6:	6a3b      	ldr	r3, [r7, #32]
 8002de8:	689a      	ldr	r2, [r3, #8]
 8002dea:	4b16      	ldr	r3, [pc, #88]	; (8002e44 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002dec:	4013      	ands	r3, r2
 8002dee:	69fa      	ldr	r2, [r7, #28]
 8002df0:	6852      	ldr	r2, [r2, #4]
 8002df2:	0412      	lsls	r2, r2, #16
 8002df4:	431a      	orrs	r2, r3
 8002df6:	6a3b      	ldr	r3, [r7, #32]
 8002df8:	609a      	str	r2, [r3, #8]
 8002dfa:	e008      	b.n	8002e0e <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002dfc:	6a3b      	ldr	r3, [r7, #32]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002e02:	6a3b      	ldr	r3, [r7, #32]
 8002e04:	689a      	ldr	r2, [r3, #8]
 8002e06:	4b0f      	ldr	r3, [pc, #60]	; (8002e44 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002e08:	4013      	ands	r3, r2
 8002e0a:	6a3a      	ldr	r2, [r7, #32]
 8002e0c:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0310 	and.w	r3, r3, #16
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d018      	beq.n	8002e4c <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	68da      	ldr	r2, [r3, #12]
 8002e1e:	4b0a      	ldr	r3, [pc, #40]	; (8002e48 <ETH_Prepare_Tx_Descriptors+0x450>)
 8002e20:	4013      	ands	r3, r2
 8002e22:	68ba      	ldr	r2, [r7, #8]
 8002e24:	69d2      	ldr	r2, [r2, #28]
 8002e26:	431a      	orrs	r2, r3
 8002e28:	6a3b      	ldr	r3, [r7, #32]
 8002e2a:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e34:	6a3b      	ldr	r3, [r7, #32]
 8002e36:	60da      	str	r2, [r3, #12]
 8002e38:	e020      	b.n	8002e7c <ETH_Prepare_Tx_Descriptors+0x484>
 8002e3a:	bf00      	nop
 8002e3c:	ffff8000 	.word	0xffff8000
 8002e40:	ffffc000 	.word	0xffffc000
 8002e44:	c000ffff 	.word	0xc000ffff
 8002e48:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002e4c:	6a3b      	ldr	r3, [r7, #32]
 8002e4e:	68da      	ldr	r2, [r3, #12]
 8002e50:	4b2f      	ldr	r3, [pc, #188]	; (8002f10 <ETH_Prepare_Tx_Descriptors+0x518>)
 8002e52:	4013      	ands	r3, r2
 8002e54:	68ba      	ldr	r2, [r7, #8]
 8002e56:	6852      	ldr	r2, [r2, #4]
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	6a3b      	ldr	r3, [r7, #32]
 8002e5c:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d008      	beq.n	8002e7c <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002e6a:	6a3b      	ldr	r3, [r7, #32]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	431a      	orrs	r2, r3
 8002e78:	6a3b      	ldr	r3, [r7, #32]
 8002e7a:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	3301      	adds	r3, #1
 8002e80:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002e82:	f3bf 8f5f 	dmb	sy
}
 8002e86:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002e88:	6a3b      	ldr	r3, [r7, #32]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002e94:	6a3b      	ldr	r3, [r7, #32]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002e9c:	6a3b      	ldr	r3, [r7, #32]
 8002e9e:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f47f af2b 	bne.w	8002d00 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d006      	beq.n	8002ebe <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002eb0:	6a3b      	ldr	r3, [r7, #32]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
 8002eba:	609a      	str	r2, [r3, #8]
 8002ebc:	e005      	b.n	8002eca <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ec6:	6a3b      	ldr	r3, [r7, #32]
 8002ec8:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002eca:	6a3b      	ldr	r3, [r7, #32]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002ed2:	6a3b      	ldr	r3, [r7, #32]
 8002ed4:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eda:	6979      	ldr	r1, [r7, #20]
 8002edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ede:	3304      	adds	r3, #4
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	440b      	add	r3, r1
 8002ee4:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002eea:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002eec:	b672      	cpsid	i
}
 8002eee:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	1c5a      	adds	r2, r3, #1
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002efe:	b662      	cpsie	i
}
 8002f00:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3734      	adds	r7, #52	; 0x34
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr
 8002f10:	ffff8000 	.word	0xffff8000

08002f14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b089      	sub	sp, #36	; 0x24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002f22:	4b89      	ldr	r3, [pc, #548]	; (8003148 <HAL_GPIO_Init+0x234>)
 8002f24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002f26:	e194      	b.n	8003252 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	2101      	movs	r1, #1
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	fa01 f303 	lsl.w	r3, r1, r3
 8002f34:	4013      	ands	r3, r2
 8002f36:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f000 8186 	beq.w	800324c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f003 0303 	and.w	r3, r3, #3
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d005      	beq.n	8002f58 <HAL_GPIO_Init+0x44>
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f003 0303 	and.w	r3, r3, #3
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d130      	bne.n	8002fba <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	2203      	movs	r2, #3
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	68da      	ldr	r2, [r3, #12]
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f8e:	2201      	movs	r2, #1
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	fa02 f303 	lsl.w	r3, r2, r3
 8002f96:	43db      	mvns	r3, r3
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	091b      	lsrs	r3, r3, #4
 8002fa4:	f003 0201 	and.w	r2, r3, #1
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f003 0303 	and.w	r3, r3, #3
 8002fc2:	2b03      	cmp	r3, #3
 8002fc4:	d017      	beq.n	8002ff6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	2203      	movs	r2, #3
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f003 0303 	and.w	r3, r3, #3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d123      	bne.n	800304a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	08da      	lsrs	r2, r3, #3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	3208      	adds	r2, #8
 800300a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800300e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	f003 0307 	and.w	r3, r3, #7
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	220f      	movs	r2, #15
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	43db      	mvns	r3, r3
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	4013      	ands	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	691a      	ldr	r2, [r3, #16]
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	f003 0307 	and.w	r3, r3, #7
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	fa02 f303 	lsl.w	r3, r2, r3
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	4313      	orrs	r3, r2
 800303a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	08da      	lsrs	r2, r3, #3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	3208      	adds	r2, #8
 8003044:	69b9      	ldr	r1, [r7, #24]
 8003046:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	2203      	movs	r2, #3
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	43db      	mvns	r3, r3
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	4013      	ands	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f003 0203 	and.w	r2, r3, #3
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4313      	orrs	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003086:	2b00      	cmp	r3, #0
 8003088:	f000 80e0 	beq.w	800324c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800308c:	4b2f      	ldr	r3, [pc, #188]	; (800314c <HAL_GPIO_Init+0x238>)
 800308e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003092:	4a2e      	ldr	r2, [pc, #184]	; (800314c <HAL_GPIO_Init+0x238>)
 8003094:	f043 0302 	orr.w	r3, r3, #2
 8003098:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800309c:	4b2b      	ldr	r3, [pc, #172]	; (800314c <HAL_GPIO_Init+0x238>)
 800309e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	60fb      	str	r3, [r7, #12]
 80030a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030aa:	4a29      	ldr	r2, [pc, #164]	; (8003150 <HAL_GPIO_Init+0x23c>)
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	089b      	lsrs	r3, r3, #2
 80030b0:	3302      	adds	r3, #2
 80030b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	f003 0303 	and.w	r3, r3, #3
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	220f      	movs	r2, #15
 80030c2:	fa02 f303 	lsl.w	r3, r2, r3
 80030c6:	43db      	mvns	r3, r3
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	4013      	ands	r3, r2
 80030cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a20      	ldr	r2, [pc, #128]	; (8003154 <HAL_GPIO_Init+0x240>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d052      	beq.n	800317c <HAL_GPIO_Init+0x268>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a1f      	ldr	r2, [pc, #124]	; (8003158 <HAL_GPIO_Init+0x244>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d031      	beq.n	8003142 <HAL_GPIO_Init+0x22e>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a1e      	ldr	r2, [pc, #120]	; (800315c <HAL_GPIO_Init+0x248>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d02b      	beq.n	800313e <HAL_GPIO_Init+0x22a>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a1d      	ldr	r2, [pc, #116]	; (8003160 <HAL_GPIO_Init+0x24c>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d025      	beq.n	800313a <HAL_GPIO_Init+0x226>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a1c      	ldr	r2, [pc, #112]	; (8003164 <HAL_GPIO_Init+0x250>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d01f      	beq.n	8003136 <HAL_GPIO_Init+0x222>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a1b      	ldr	r2, [pc, #108]	; (8003168 <HAL_GPIO_Init+0x254>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d019      	beq.n	8003132 <HAL_GPIO_Init+0x21e>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a1a      	ldr	r2, [pc, #104]	; (800316c <HAL_GPIO_Init+0x258>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d013      	beq.n	800312e <HAL_GPIO_Init+0x21a>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a19      	ldr	r2, [pc, #100]	; (8003170 <HAL_GPIO_Init+0x25c>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d00d      	beq.n	800312a <HAL_GPIO_Init+0x216>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a18      	ldr	r2, [pc, #96]	; (8003174 <HAL_GPIO_Init+0x260>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d007      	beq.n	8003126 <HAL_GPIO_Init+0x212>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a17      	ldr	r2, [pc, #92]	; (8003178 <HAL_GPIO_Init+0x264>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d101      	bne.n	8003122 <HAL_GPIO_Init+0x20e>
 800311e:	2309      	movs	r3, #9
 8003120:	e02d      	b.n	800317e <HAL_GPIO_Init+0x26a>
 8003122:	230a      	movs	r3, #10
 8003124:	e02b      	b.n	800317e <HAL_GPIO_Init+0x26a>
 8003126:	2308      	movs	r3, #8
 8003128:	e029      	b.n	800317e <HAL_GPIO_Init+0x26a>
 800312a:	2307      	movs	r3, #7
 800312c:	e027      	b.n	800317e <HAL_GPIO_Init+0x26a>
 800312e:	2306      	movs	r3, #6
 8003130:	e025      	b.n	800317e <HAL_GPIO_Init+0x26a>
 8003132:	2305      	movs	r3, #5
 8003134:	e023      	b.n	800317e <HAL_GPIO_Init+0x26a>
 8003136:	2304      	movs	r3, #4
 8003138:	e021      	b.n	800317e <HAL_GPIO_Init+0x26a>
 800313a:	2303      	movs	r3, #3
 800313c:	e01f      	b.n	800317e <HAL_GPIO_Init+0x26a>
 800313e:	2302      	movs	r3, #2
 8003140:	e01d      	b.n	800317e <HAL_GPIO_Init+0x26a>
 8003142:	2301      	movs	r3, #1
 8003144:	e01b      	b.n	800317e <HAL_GPIO_Init+0x26a>
 8003146:	bf00      	nop
 8003148:	58000080 	.word	0x58000080
 800314c:	58024400 	.word	0x58024400
 8003150:	58000400 	.word	0x58000400
 8003154:	58020000 	.word	0x58020000
 8003158:	58020400 	.word	0x58020400
 800315c:	58020800 	.word	0x58020800
 8003160:	58020c00 	.word	0x58020c00
 8003164:	58021000 	.word	0x58021000
 8003168:	58021400 	.word	0x58021400
 800316c:	58021800 	.word	0x58021800
 8003170:	58021c00 	.word	0x58021c00
 8003174:	58022000 	.word	0x58022000
 8003178:	58022400 	.word	0x58022400
 800317c:	2300      	movs	r3, #0
 800317e:	69fa      	ldr	r2, [r7, #28]
 8003180:	f002 0203 	and.w	r2, r2, #3
 8003184:	0092      	lsls	r2, r2, #2
 8003186:	4093      	lsls	r3, r2
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	4313      	orrs	r3, r2
 800318c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800318e:	4938      	ldr	r1, [pc, #224]	; (8003270 <HAL_GPIO_Init+0x35c>)
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	089b      	lsrs	r3, r3, #2
 8003194:	3302      	adds	r3, #2
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800319c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	43db      	mvns	r3, r3
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	4013      	ands	r3, r2
 80031ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	4313      	orrs	r3, r2
 80031c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80031c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80031ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	43db      	mvns	r3, r3
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	4013      	ands	r3, r2
 80031da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d003      	beq.n	80031f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80031f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	43db      	mvns	r3, r3
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	4013      	ands	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d003      	beq.n	800321c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	4313      	orrs	r3, r2
 800321a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	43db      	mvns	r3, r3
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	4013      	ands	r3, r2
 8003230:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	4313      	orrs	r3, r2
 8003244:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	3301      	adds	r3, #1
 8003250:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	fa22 f303 	lsr.w	r3, r2, r3
 800325c:	2b00      	cmp	r3, #0
 800325e:	f47f ae63 	bne.w	8002f28 <HAL_GPIO_Init+0x14>
  }
}
 8003262:	bf00      	nop
 8003264:	bf00      	nop
 8003266:	3724      	adds	r7, #36	; 0x24
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	58000400 	.word	0x58000400

08003274 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800327c:	4a08      	ldr	r2, [pc, #32]	; (80032a0 <HAL_HSEM_FastTake+0x2c>)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	3320      	adds	r3, #32
 8003282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003286:	4a07      	ldr	r2, [pc, #28]	; (80032a4 <HAL_HSEM_FastTake+0x30>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d101      	bne.n	8003290 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800328c:	2300      	movs	r3, #0
 800328e:	e000      	b.n	8003292 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
}
 8003292:	4618      	mov	r0, r3
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	58026400 	.word	0x58026400
 80032a4:	80000300 	.word	0x80000300

080032a8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80032b2:	4906      	ldr	r1, [pc, #24]	; (80032cc <HAL_HSEM_Release+0x24>)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr
 80032cc:	58026400 	.word	0x58026400

080032d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80032d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032d2:	b08f      	sub	sp, #60	; 0x3c
 80032d4:	af0a      	add	r7, sp, #40	; 0x28
 80032d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e116      	b.n	8003510 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d106      	bne.n	8003302 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f7fd fd07 	bl	8000d10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2203      	movs	r2, #3
 8003306:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800330e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003312:	2b00      	cmp	r3, #0
 8003314:	d102      	bne.n	800331c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4618      	mov	r0, r3
 8003322:	f004 fbf9 	bl	8007b18 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	603b      	str	r3, [r7, #0]
 800332c:	687e      	ldr	r6, [r7, #4]
 800332e:	466d      	mov	r5, sp
 8003330:	f106 0410 	add.w	r4, r6, #16
 8003334:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003336:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003338:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800333a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800333c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003340:	e885 0003 	stmia.w	r5, {r0, r1}
 8003344:	1d33      	adds	r3, r6, #4
 8003346:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003348:	6838      	ldr	r0, [r7, #0]
 800334a:	f004 fb77 	bl	8007a3c <USB_CoreInit>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d005      	beq.n	8003360 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2202      	movs	r2, #2
 8003358:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e0d7      	b.n	8003510 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2100      	movs	r1, #0
 8003366:	4618      	mov	r0, r3
 8003368:	f004 fbe7 	bl	8007b3a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800336c:	2300      	movs	r3, #0
 800336e:	73fb      	strb	r3, [r7, #15]
 8003370:	e04a      	b.n	8003408 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003372:	7bfa      	ldrb	r2, [r7, #15]
 8003374:	6879      	ldr	r1, [r7, #4]
 8003376:	4613      	mov	r3, r2
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	4413      	add	r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	440b      	add	r3, r1
 8003380:	333d      	adds	r3, #61	; 0x3d
 8003382:	2201      	movs	r2, #1
 8003384:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003386:	7bfa      	ldrb	r2, [r7, #15]
 8003388:	6879      	ldr	r1, [r7, #4]
 800338a:	4613      	mov	r3, r2
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	4413      	add	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	440b      	add	r3, r1
 8003394:	333c      	adds	r3, #60	; 0x3c
 8003396:	7bfa      	ldrb	r2, [r7, #15]
 8003398:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800339a:	7bfa      	ldrb	r2, [r7, #15]
 800339c:	7bfb      	ldrb	r3, [r7, #15]
 800339e:	b298      	uxth	r0, r3
 80033a0:	6879      	ldr	r1, [r7, #4]
 80033a2:	4613      	mov	r3, r2
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	4413      	add	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	440b      	add	r3, r1
 80033ac:	3356      	adds	r3, #86	; 0x56
 80033ae:	4602      	mov	r2, r0
 80033b0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80033b2:	7bfa      	ldrb	r2, [r7, #15]
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	4613      	mov	r3, r2
 80033b8:	00db      	lsls	r3, r3, #3
 80033ba:	4413      	add	r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	440b      	add	r3, r1
 80033c0:	3340      	adds	r3, #64	; 0x40
 80033c2:	2200      	movs	r2, #0
 80033c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80033c6:	7bfa      	ldrb	r2, [r7, #15]
 80033c8:	6879      	ldr	r1, [r7, #4]
 80033ca:	4613      	mov	r3, r2
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	4413      	add	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	440b      	add	r3, r1
 80033d4:	3344      	adds	r3, #68	; 0x44
 80033d6:	2200      	movs	r2, #0
 80033d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80033da:	7bfa      	ldrb	r2, [r7, #15]
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	4613      	mov	r3, r2
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	4413      	add	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	440b      	add	r3, r1
 80033e8:	3348      	adds	r3, #72	; 0x48
 80033ea:	2200      	movs	r2, #0
 80033ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80033ee:	7bfa      	ldrb	r2, [r7, #15]
 80033f0:	6879      	ldr	r1, [r7, #4]
 80033f2:	4613      	mov	r3, r2
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	4413      	add	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	440b      	add	r3, r1
 80033fc:	334c      	adds	r3, #76	; 0x4c
 80033fe:	2200      	movs	r2, #0
 8003400:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003402:	7bfb      	ldrb	r3, [r7, #15]
 8003404:	3301      	adds	r3, #1
 8003406:	73fb      	strb	r3, [r7, #15]
 8003408:	7bfa      	ldrb	r2, [r7, #15]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	429a      	cmp	r2, r3
 8003410:	d3af      	bcc.n	8003372 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003412:	2300      	movs	r3, #0
 8003414:	73fb      	strb	r3, [r7, #15]
 8003416:	e044      	b.n	80034a2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003418:	7bfa      	ldrb	r2, [r7, #15]
 800341a:	6879      	ldr	r1, [r7, #4]
 800341c:	4613      	mov	r3, r2
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	4413      	add	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	440b      	add	r3, r1
 8003426:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800342a:	2200      	movs	r2, #0
 800342c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800342e:	7bfa      	ldrb	r2, [r7, #15]
 8003430:	6879      	ldr	r1, [r7, #4]
 8003432:	4613      	mov	r3, r2
 8003434:	00db      	lsls	r3, r3, #3
 8003436:	4413      	add	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	440b      	add	r3, r1
 800343c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003440:	7bfa      	ldrb	r2, [r7, #15]
 8003442:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003444:	7bfa      	ldrb	r2, [r7, #15]
 8003446:	6879      	ldr	r1, [r7, #4]
 8003448:	4613      	mov	r3, r2
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	4413      	add	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	440b      	add	r3, r1
 8003452:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003456:	2200      	movs	r2, #0
 8003458:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800345a:	7bfa      	ldrb	r2, [r7, #15]
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	4613      	mov	r3, r2
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	4413      	add	r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	440b      	add	r3, r1
 8003468:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800346c:	2200      	movs	r2, #0
 800346e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003470:	7bfa      	ldrb	r2, [r7, #15]
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	4613      	mov	r3, r2
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	4413      	add	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003482:	2200      	movs	r2, #0
 8003484:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003486:	7bfa      	ldrb	r2, [r7, #15]
 8003488:	6879      	ldr	r1, [r7, #4]
 800348a:	4613      	mov	r3, r2
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	4413      	add	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	440b      	add	r3, r1
 8003494:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800349c:	7bfb      	ldrb	r3, [r7, #15]
 800349e:	3301      	adds	r3, #1
 80034a0:	73fb      	strb	r3, [r7, #15]
 80034a2:	7bfa      	ldrb	r2, [r7, #15]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d3b5      	bcc.n	8003418 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	603b      	str	r3, [r7, #0]
 80034b2:	687e      	ldr	r6, [r7, #4]
 80034b4:	466d      	mov	r5, sp
 80034b6:	f106 0410 	add.w	r4, r6, #16
 80034ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80034ca:	1d33      	adds	r3, r6, #4
 80034cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034ce:	6838      	ldr	r0, [r7, #0]
 80034d0:	f004 fb80 	bl	8007bd4 <USB_DevInit>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d005      	beq.n	80034e6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2202      	movs	r2, #2
 80034de:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e014      	b.n	8003510 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d102      	bne.n	8003504 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f80a 	bl	8003518 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4618      	mov	r0, r3
 800350a:	f004 fd3e 	bl	8007f8a <USB_DevDisconnect>

  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3714      	adds	r7, #20
 8003514:	46bd      	mov	sp, r7
 8003516:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003518 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003518:	b480      	push	{r7}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003546:	4b05      	ldr	r3, [pc, #20]	; (800355c <HAL_PCDEx_ActivateLPM+0x44>)
 8003548:	4313      	orrs	r3, r2
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3714      	adds	r7, #20
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr
 800355c:	10000003 	.word	0x10000003

08003560 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003568:	4b29      	ldr	r3, [pc, #164]	; (8003610 <HAL_PWREx_ConfigSupply+0xb0>)
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	f003 0307 	and.w	r3, r3, #7
 8003570:	2b06      	cmp	r3, #6
 8003572:	d00a      	beq.n	800358a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003574:	4b26      	ldr	r3, [pc, #152]	; (8003610 <HAL_PWREx_ConfigSupply+0xb0>)
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	429a      	cmp	r2, r3
 8003580:	d001      	beq.n	8003586 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e040      	b.n	8003608 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003586:	2300      	movs	r3, #0
 8003588:	e03e      	b.n	8003608 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800358a:	4b21      	ldr	r3, [pc, #132]	; (8003610 <HAL_PWREx_ConfigSupply+0xb0>)
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003592:	491f      	ldr	r1, [pc, #124]	; (8003610 <HAL_PWREx_ConfigSupply+0xb0>)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4313      	orrs	r3, r2
 8003598:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800359a:	f7fd ff65 	bl	8001468 <HAL_GetTick>
 800359e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80035a0:	e009      	b.n	80035b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80035a2:	f7fd ff61 	bl	8001468 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035b0:	d901      	bls.n	80035b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e028      	b.n	8003608 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80035b6:	4b16      	ldr	r3, [pc, #88]	; (8003610 <HAL_PWREx_ConfigSupply+0xb0>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035c2:	d1ee      	bne.n	80035a2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b1e      	cmp	r3, #30
 80035c8:	d008      	beq.n	80035dc <HAL_PWREx_ConfigSupply+0x7c>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2b2e      	cmp	r3, #46	; 0x2e
 80035ce:	d005      	beq.n	80035dc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b1d      	cmp	r3, #29
 80035d4:	d002      	beq.n	80035dc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b2d      	cmp	r3, #45	; 0x2d
 80035da:	d114      	bne.n	8003606 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80035dc:	f7fd ff44 	bl	8001468 <HAL_GetTick>
 80035e0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80035e2:	e009      	b.n	80035f8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80035e4:	f7fd ff40 	bl	8001468 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035f2:	d901      	bls.n	80035f8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e007      	b.n	8003608 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80035f8:	4b05      	ldr	r3, [pc, #20]	; (8003610 <HAL_PWREx_ConfigSupply+0xb0>)
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003604:	d1ee      	bne.n	80035e4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	58024800 	.word	0x58024800

08003614 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003614:	b480      	push	{r7}
 8003616:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003618:	4b05      	ldr	r3, [pc, #20]	; (8003630 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	4a04      	ldr	r2, [pc, #16]	; (8003630 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800361e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003622:	60d3      	str	r3, [r2, #12]
}
 8003624:	bf00      	nop
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	58024800 	.word	0x58024800

08003634 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b08c      	sub	sp, #48	; 0x30
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d102      	bne.n	8003648 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	f000 bc48 	b.w	8003ed8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0301 	and.w	r3, r3, #1
 8003650:	2b00      	cmp	r3, #0
 8003652:	f000 8088 	beq.w	8003766 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003656:	4b99      	ldr	r3, [pc, #612]	; (80038bc <HAL_RCC_OscConfig+0x288>)
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800365e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003660:	4b96      	ldr	r3, [pc, #600]	; (80038bc <HAL_RCC_OscConfig+0x288>)
 8003662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003664:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003668:	2b10      	cmp	r3, #16
 800366a:	d007      	beq.n	800367c <HAL_RCC_OscConfig+0x48>
 800366c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800366e:	2b18      	cmp	r3, #24
 8003670:	d111      	bne.n	8003696 <HAL_RCC_OscConfig+0x62>
 8003672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003674:	f003 0303 	and.w	r3, r3, #3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d10c      	bne.n	8003696 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800367c:	4b8f      	ldr	r3, [pc, #572]	; (80038bc <HAL_RCC_OscConfig+0x288>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d06d      	beq.n	8003764 <HAL_RCC_OscConfig+0x130>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d169      	bne.n	8003764 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	f000 bc21 	b.w	8003ed8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800369e:	d106      	bne.n	80036ae <HAL_RCC_OscConfig+0x7a>
 80036a0:	4b86      	ldr	r3, [pc, #536]	; (80038bc <HAL_RCC_OscConfig+0x288>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a85      	ldr	r2, [pc, #532]	; (80038bc <HAL_RCC_OscConfig+0x288>)
 80036a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036aa:	6013      	str	r3, [r2, #0]
 80036ac:	e02e      	b.n	800370c <HAL_RCC_OscConfig+0xd8>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10c      	bne.n	80036d0 <HAL_RCC_OscConfig+0x9c>
 80036b6:	4b81      	ldr	r3, [pc, #516]	; (80038bc <HAL_RCC_OscConfig+0x288>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a80      	ldr	r2, [pc, #512]	; (80038bc <HAL_RCC_OscConfig+0x288>)
 80036bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036c0:	6013      	str	r3, [r2, #0]
 80036c2:	4b7e      	ldr	r3, [pc, #504]	; (80038bc <HAL_RCC_OscConfig+0x288>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a7d      	ldr	r2, [pc, #500]	; (80038bc <HAL_RCC_OscConfig+0x288>)
 80036c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036cc:	6013      	str	r3, [r2, #0]
 80036ce:	e01d      	b.n	800370c <HAL_RCC_OscConfig+0xd8>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036d8:	d10c      	bne.n	80036f4 <HAL_RCC_OscConfig+0xc0>
 80036da:	4b78      	ldr	r3, [pc, #480]	; (80038bc <HAL_RCC_OscConfig+0x288>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a77      	ldr	r2, [pc, #476]	; (80038bc <HAL_RCC_OscConfig+0x288>)
 80036e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036e4:	6013      	str	r3, [r2, #0]
 80036e6:	4b75      	ldr	r3, [pc, #468]	; (80038bc <HAL_RCC_OscConfig+0x288>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a74      	ldr	r2, [pc, #464]	; (80038bc <HAL_RCC_OscConfig+0x288>)
 80036ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036f0:	6013      	str	r3, [r2, #0]
 80036f2:	e00b      	b.n	800370c <HAL_RCC_OscConfig+0xd8>
 80036f4:	4b71      	ldr	r3, [pc, #452]	; (80038bc <HAL_RCC_OscConfig+0x288>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a70      	ldr	r2, [pc, #448]	; (80038bc <HAL_RCC_OscConfig+0x288>)
 80036fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036fe:	6013      	str	r3, [r2, #0]
 8003700:	4b6e      	ldr	r3, [pc, #440]	; (80038bc <HAL_RCC_OscConfig+0x288>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a6d      	ldr	r2, [pc, #436]	; (80038bc <HAL_RCC_OscConfig+0x288>)
 8003706:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800370a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d013      	beq.n	800373c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003714:	f7fd fea8 	bl	8001468 <HAL_GetTick>
 8003718:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800371c:	f7fd fea4 	bl	8001468 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b64      	cmp	r3, #100	; 0x64
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e3d4      	b.n	8003ed8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800372e:	4b63      	ldr	r3, [pc, #396]	; (80038bc <HAL_RCC_OscConfig+0x288>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d0f0      	beq.n	800371c <HAL_RCC_OscConfig+0xe8>
 800373a:	e014      	b.n	8003766 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800373c:	f7fd fe94 	bl	8001468 <HAL_GetTick>
 8003740:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003744:	f7fd fe90 	bl	8001468 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b64      	cmp	r3, #100	; 0x64
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e3c0      	b.n	8003ed8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003756:	4b59      	ldr	r3, [pc, #356]	; (80038bc <HAL_RCC_OscConfig+0x288>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1f0      	bne.n	8003744 <HAL_RCC_OscConfig+0x110>
 8003762:	e000      	b.n	8003766 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003764:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	f000 80ca 	beq.w	8003908 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003774:	4b51      	ldr	r3, [pc, #324]	; (80038bc <HAL_RCC_OscConfig+0x288>)
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800377c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800377e:	4b4f      	ldr	r3, [pc, #316]	; (80038bc <HAL_RCC_OscConfig+0x288>)
 8003780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003782:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003784:	6a3b      	ldr	r3, [r7, #32]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d007      	beq.n	800379a <HAL_RCC_OscConfig+0x166>
 800378a:	6a3b      	ldr	r3, [r7, #32]
 800378c:	2b18      	cmp	r3, #24
 800378e:	d156      	bne.n	800383e <HAL_RCC_OscConfig+0x20a>
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	f003 0303 	and.w	r3, r3, #3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d151      	bne.n	800383e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800379a:	4b48      	ldr	r3, [pc, #288]	; (80038bc <HAL_RCC_OscConfig+0x288>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0304 	and.w	r3, r3, #4
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d005      	beq.n	80037b2 <HAL_RCC_OscConfig+0x17e>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e392      	b.n	8003ed8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80037b2:	4b42      	ldr	r3, [pc, #264]	; (80038bc <HAL_RCC_OscConfig+0x288>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f023 0219 	bic.w	r2, r3, #25
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	493f      	ldr	r1, [pc, #252]	; (80038bc <HAL_RCC_OscConfig+0x288>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c4:	f7fd fe50 	bl	8001468 <HAL_GetTick>
 80037c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037cc:	f7fd fe4c 	bl	8001468 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e37c      	b.n	8003ed8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037de:	4b37      	ldr	r3, [pc, #220]	; (80038bc <HAL_RCC_OscConfig+0x288>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0304 	and.w	r3, r3, #4
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d0f0      	beq.n	80037cc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ea:	f7fd fe6d 	bl	80014c8 <HAL_GetREVID>
 80037ee:	4603      	mov	r3, r0
 80037f0:	f241 0203 	movw	r2, #4099	; 0x1003
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d817      	bhi.n	8003828 <HAL_RCC_OscConfig+0x1f4>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	2b40      	cmp	r3, #64	; 0x40
 80037fe:	d108      	bne.n	8003812 <HAL_RCC_OscConfig+0x1de>
 8003800:	4b2e      	ldr	r3, [pc, #184]	; (80038bc <HAL_RCC_OscConfig+0x288>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003808:	4a2c      	ldr	r2, [pc, #176]	; (80038bc <HAL_RCC_OscConfig+0x288>)
 800380a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800380e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003810:	e07a      	b.n	8003908 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003812:	4b2a      	ldr	r3, [pc, #168]	; (80038bc <HAL_RCC_OscConfig+0x288>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	031b      	lsls	r3, r3, #12
 8003820:	4926      	ldr	r1, [pc, #152]	; (80038bc <HAL_RCC_OscConfig+0x288>)
 8003822:	4313      	orrs	r3, r2
 8003824:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003826:	e06f      	b.n	8003908 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003828:	4b24      	ldr	r3, [pc, #144]	; (80038bc <HAL_RCC_OscConfig+0x288>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	061b      	lsls	r3, r3, #24
 8003836:	4921      	ldr	r1, [pc, #132]	; (80038bc <HAL_RCC_OscConfig+0x288>)
 8003838:	4313      	orrs	r3, r2
 800383a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800383c:	e064      	b.n	8003908 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d047      	beq.n	80038d6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003846:	4b1d      	ldr	r3, [pc, #116]	; (80038bc <HAL_RCC_OscConfig+0x288>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f023 0219 	bic.w	r2, r3, #25
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	491a      	ldr	r1, [pc, #104]	; (80038bc <HAL_RCC_OscConfig+0x288>)
 8003854:	4313      	orrs	r3, r2
 8003856:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003858:	f7fd fe06 	bl	8001468 <HAL_GetTick>
 800385c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800385e:	e008      	b.n	8003872 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003860:	f7fd fe02 	bl	8001468 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b02      	cmp	r3, #2
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e332      	b.n	8003ed8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003872:	4b12      	ldr	r3, [pc, #72]	; (80038bc <HAL_RCC_OscConfig+0x288>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0304 	and.w	r3, r3, #4
 800387a:	2b00      	cmp	r3, #0
 800387c:	d0f0      	beq.n	8003860 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800387e:	f7fd fe23 	bl	80014c8 <HAL_GetREVID>
 8003882:	4603      	mov	r3, r0
 8003884:	f241 0203 	movw	r2, #4099	; 0x1003
 8003888:	4293      	cmp	r3, r2
 800388a:	d819      	bhi.n	80038c0 <HAL_RCC_OscConfig+0x28c>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	2b40      	cmp	r3, #64	; 0x40
 8003892:	d108      	bne.n	80038a6 <HAL_RCC_OscConfig+0x272>
 8003894:	4b09      	ldr	r3, [pc, #36]	; (80038bc <HAL_RCC_OscConfig+0x288>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800389c:	4a07      	ldr	r2, [pc, #28]	; (80038bc <HAL_RCC_OscConfig+0x288>)
 800389e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038a2:	6053      	str	r3, [r2, #4]
 80038a4:	e030      	b.n	8003908 <HAL_RCC_OscConfig+0x2d4>
 80038a6:	4b05      	ldr	r3, [pc, #20]	; (80038bc <HAL_RCC_OscConfig+0x288>)
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	031b      	lsls	r3, r3, #12
 80038b4:	4901      	ldr	r1, [pc, #4]	; (80038bc <HAL_RCC_OscConfig+0x288>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	604b      	str	r3, [r1, #4]
 80038ba:	e025      	b.n	8003908 <HAL_RCC_OscConfig+0x2d4>
 80038bc:	58024400 	.word	0x58024400
 80038c0:	4b9a      	ldr	r3, [pc, #616]	; (8003b2c <HAL_RCC_OscConfig+0x4f8>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	061b      	lsls	r3, r3, #24
 80038ce:	4997      	ldr	r1, [pc, #604]	; (8003b2c <HAL_RCC_OscConfig+0x4f8>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	604b      	str	r3, [r1, #4]
 80038d4:	e018      	b.n	8003908 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038d6:	4b95      	ldr	r3, [pc, #596]	; (8003b2c <HAL_RCC_OscConfig+0x4f8>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a94      	ldr	r2, [pc, #592]	; (8003b2c <HAL_RCC_OscConfig+0x4f8>)
 80038dc:	f023 0301 	bic.w	r3, r3, #1
 80038e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e2:	f7fd fdc1 	bl	8001468 <HAL_GetTick>
 80038e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80038e8:	e008      	b.n	80038fc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038ea:	f7fd fdbd 	bl	8001468 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d901      	bls.n	80038fc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e2ed      	b.n	8003ed8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80038fc:	4b8b      	ldr	r3, [pc, #556]	; (8003b2c <HAL_RCC_OscConfig+0x4f8>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0304 	and.w	r3, r3, #4
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1f0      	bne.n	80038ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0310 	and.w	r3, r3, #16
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 80a9 	beq.w	8003a68 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003916:	4b85      	ldr	r3, [pc, #532]	; (8003b2c <HAL_RCC_OscConfig+0x4f8>)
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800391e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003920:	4b82      	ldr	r3, [pc, #520]	; (8003b2c <HAL_RCC_OscConfig+0x4f8>)
 8003922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003924:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	2b08      	cmp	r3, #8
 800392a:	d007      	beq.n	800393c <HAL_RCC_OscConfig+0x308>
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	2b18      	cmp	r3, #24
 8003930:	d13a      	bne.n	80039a8 <HAL_RCC_OscConfig+0x374>
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f003 0303 	and.w	r3, r3, #3
 8003938:	2b01      	cmp	r3, #1
 800393a:	d135      	bne.n	80039a8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800393c:	4b7b      	ldr	r3, [pc, #492]	; (8003b2c <HAL_RCC_OscConfig+0x4f8>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003944:	2b00      	cmp	r3, #0
 8003946:	d005      	beq.n	8003954 <HAL_RCC_OscConfig+0x320>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	69db      	ldr	r3, [r3, #28]
 800394c:	2b80      	cmp	r3, #128	; 0x80
 800394e:	d001      	beq.n	8003954 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e2c1      	b.n	8003ed8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003954:	f7fd fdb8 	bl	80014c8 <HAL_GetREVID>
 8003958:	4603      	mov	r3, r0
 800395a:	f241 0203 	movw	r2, #4099	; 0x1003
 800395e:	4293      	cmp	r3, r2
 8003960:	d817      	bhi.n	8003992 <HAL_RCC_OscConfig+0x35e>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	2b20      	cmp	r3, #32
 8003968:	d108      	bne.n	800397c <HAL_RCC_OscConfig+0x348>
 800396a:	4b70      	ldr	r3, [pc, #448]	; (8003b2c <HAL_RCC_OscConfig+0x4f8>)
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003972:	4a6e      	ldr	r2, [pc, #440]	; (8003b2c <HAL_RCC_OscConfig+0x4f8>)
 8003974:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003978:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800397a:	e075      	b.n	8003a68 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800397c:	4b6b      	ldr	r3, [pc, #428]	; (8003b2c <HAL_RCC_OscConfig+0x4f8>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a1b      	ldr	r3, [r3, #32]
 8003988:	069b      	lsls	r3, r3, #26
 800398a:	4968      	ldr	r1, [pc, #416]	; (8003b2c <HAL_RCC_OscConfig+0x4f8>)
 800398c:	4313      	orrs	r3, r2
 800398e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003990:	e06a      	b.n	8003a68 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003992:	4b66      	ldr	r3, [pc, #408]	; (8003b2c <HAL_RCC_OscConfig+0x4f8>)
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	061b      	lsls	r3, r3, #24
 80039a0:	4962      	ldr	r1, [pc, #392]	; (8003b2c <HAL_RCC_OscConfig+0x4f8>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039a6:	e05f      	b.n	8003a68 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	69db      	ldr	r3, [r3, #28]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d042      	beq.n	8003a36 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80039b0:	4b5e      	ldr	r3, [pc, #376]	; (8003b2c <HAL_RCC_OscConfig+0x4f8>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a5d      	ldr	r2, [pc, #372]	; (8003b2c <HAL_RCC_OscConfig+0x4f8>)
 80039b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039bc:	f7fd fd54 	bl	8001468 <HAL_GetTick>
 80039c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80039c2:	e008      	b.n	80039d6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80039c4:	f7fd fd50 	bl	8001468 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e280      	b.n	8003ed8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80039d6:	4b55      	ldr	r3, [pc, #340]	; (8003b2c <HAL_RCC_OscConfig+0x4f8>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d0f0      	beq.n	80039c4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039e2:	f7fd fd71 	bl	80014c8 <HAL_GetREVID>
 80039e6:	4603      	mov	r3, r0
 80039e8:	f241 0203 	movw	r2, #4099	; 0x1003
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d817      	bhi.n	8003a20 <HAL_RCC_OscConfig+0x3ec>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	2b20      	cmp	r3, #32
 80039f6:	d108      	bne.n	8003a0a <HAL_RCC_OscConfig+0x3d6>
 80039f8:	4b4c      	ldr	r3, [pc, #304]	; (8003b2c <HAL_RCC_OscConfig+0x4f8>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003a00:	4a4a      	ldr	r2, [pc, #296]	; (8003b2c <HAL_RCC_OscConfig+0x4f8>)
 8003a02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a06:	6053      	str	r3, [r2, #4]
 8003a08:	e02e      	b.n	8003a68 <HAL_RCC_OscConfig+0x434>
 8003a0a:	4b48      	ldr	r3, [pc, #288]	; (8003b2c <HAL_RCC_OscConfig+0x4f8>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	069b      	lsls	r3, r3, #26
 8003a18:	4944      	ldr	r1, [pc, #272]	; (8003b2c <HAL_RCC_OscConfig+0x4f8>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	604b      	str	r3, [r1, #4]
 8003a1e:	e023      	b.n	8003a68 <HAL_RCC_OscConfig+0x434>
 8003a20:	4b42      	ldr	r3, [pc, #264]	; (8003b2c <HAL_RCC_OscConfig+0x4f8>)
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	061b      	lsls	r3, r3, #24
 8003a2e:	493f      	ldr	r1, [pc, #252]	; (8003b2c <HAL_RCC_OscConfig+0x4f8>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	60cb      	str	r3, [r1, #12]
 8003a34:	e018      	b.n	8003a68 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003a36:	4b3d      	ldr	r3, [pc, #244]	; (8003b2c <HAL_RCC_OscConfig+0x4f8>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a3c      	ldr	r2, [pc, #240]	; (8003b2c <HAL_RCC_OscConfig+0x4f8>)
 8003a3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a42:	f7fd fd11 	bl	8001468 <HAL_GetTick>
 8003a46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003a48:	e008      	b.n	8003a5c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003a4a:	f7fd fd0d 	bl	8001468 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d901      	bls.n	8003a5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e23d      	b.n	8003ed8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003a5c:	4b33      	ldr	r3, [pc, #204]	; (8003b2c <HAL_RCC_OscConfig+0x4f8>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1f0      	bne.n	8003a4a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0308 	and.w	r3, r3, #8
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d036      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d019      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a7c:	4b2b      	ldr	r3, [pc, #172]	; (8003b2c <HAL_RCC_OscConfig+0x4f8>)
 8003a7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a80:	4a2a      	ldr	r2, [pc, #168]	; (8003b2c <HAL_RCC_OscConfig+0x4f8>)
 8003a82:	f043 0301 	orr.w	r3, r3, #1
 8003a86:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a88:	f7fd fcee 	bl	8001468 <HAL_GetTick>
 8003a8c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a8e:	e008      	b.n	8003aa2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a90:	f7fd fcea 	bl	8001468 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e21a      	b.n	8003ed8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003aa2:	4b22      	ldr	r3, [pc, #136]	; (8003b2c <HAL_RCC_OscConfig+0x4f8>)
 8003aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d0f0      	beq.n	8003a90 <HAL_RCC_OscConfig+0x45c>
 8003aae:	e018      	b.n	8003ae2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ab0:	4b1e      	ldr	r3, [pc, #120]	; (8003b2c <HAL_RCC_OscConfig+0x4f8>)
 8003ab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ab4:	4a1d      	ldr	r2, [pc, #116]	; (8003b2c <HAL_RCC_OscConfig+0x4f8>)
 8003ab6:	f023 0301 	bic.w	r3, r3, #1
 8003aba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003abc:	f7fd fcd4 	bl	8001468 <HAL_GetTick>
 8003ac0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ac4:	f7fd fcd0 	bl	8001468 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e200      	b.n	8003ed8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003ad6:	4b15      	ldr	r3, [pc, #84]	; (8003b2c <HAL_RCC_OscConfig+0x4f8>)
 8003ad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1f0      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0320 	and.w	r3, r3, #32
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d039      	beq.n	8003b62 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d01c      	beq.n	8003b30 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003af6:	4b0d      	ldr	r3, [pc, #52]	; (8003b2c <HAL_RCC_OscConfig+0x4f8>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a0c      	ldr	r2, [pc, #48]	; (8003b2c <HAL_RCC_OscConfig+0x4f8>)
 8003afc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b00:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b02:	f7fd fcb1 	bl	8001468 <HAL_GetTick>
 8003b06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b08:	e008      	b.n	8003b1c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b0a:	f7fd fcad 	bl	8001468 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d901      	bls.n	8003b1c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e1dd      	b.n	8003ed8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b1c:	4b03      	ldr	r3, [pc, #12]	; (8003b2c <HAL_RCC_OscConfig+0x4f8>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d0f0      	beq.n	8003b0a <HAL_RCC_OscConfig+0x4d6>
 8003b28:	e01b      	b.n	8003b62 <HAL_RCC_OscConfig+0x52e>
 8003b2a:	bf00      	nop
 8003b2c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b30:	4b9b      	ldr	r3, [pc, #620]	; (8003da0 <HAL_RCC_OscConfig+0x76c>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a9a      	ldr	r2, [pc, #616]	; (8003da0 <HAL_RCC_OscConfig+0x76c>)
 8003b36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b3a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b3c:	f7fd fc94 	bl	8001468 <HAL_GetTick>
 8003b40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b42:	e008      	b.n	8003b56 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b44:	f7fd fc90 	bl	8001468 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e1c0      	b.n	8003ed8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b56:	4b92      	ldr	r3, [pc, #584]	; (8003da0 <HAL_RCC_OscConfig+0x76c>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1f0      	bne.n	8003b44 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0304 	and.w	r3, r3, #4
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f000 8081 	beq.w	8003c72 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003b70:	4b8c      	ldr	r3, [pc, #560]	; (8003da4 <HAL_RCC_OscConfig+0x770>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a8b      	ldr	r2, [pc, #556]	; (8003da4 <HAL_RCC_OscConfig+0x770>)
 8003b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b7c:	f7fd fc74 	bl	8001468 <HAL_GetTick>
 8003b80:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b84:	f7fd fc70 	bl	8001468 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b64      	cmp	r3, #100	; 0x64
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e1a0      	b.n	8003ed8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b96:	4b83      	ldr	r3, [pc, #524]	; (8003da4 <HAL_RCC_OscConfig+0x770>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d0f0      	beq.n	8003b84 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d106      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x584>
 8003baa:	4b7d      	ldr	r3, [pc, #500]	; (8003da0 <HAL_RCC_OscConfig+0x76c>)
 8003bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bae:	4a7c      	ldr	r2, [pc, #496]	; (8003da0 <HAL_RCC_OscConfig+0x76c>)
 8003bb0:	f043 0301 	orr.w	r3, r3, #1
 8003bb4:	6713      	str	r3, [r2, #112]	; 0x70
 8003bb6:	e02d      	b.n	8003c14 <HAL_RCC_OscConfig+0x5e0>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10c      	bne.n	8003bda <HAL_RCC_OscConfig+0x5a6>
 8003bc0:	4b77      	ldr	r3, [pc, #476]	; (8003da0 <HAL_RCC_OscConfig+0x76c>)
 8003bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc4:	4a76      	ldr	r2, [pc, #472]	; (8003da0 <HAL_RCC_OscConfig+0x76c>)
 8003bc6:	f023 0301 	bic.w	r3, r3, #1
 8003bca:	6713      	str	r3, [r2, #112]	; 0x70
 8003bcc:	4b74      	ldr	r3, [pc, #464]	; (8003da0 <HAL_RCC_OscConfig+0x76c>)
 8003bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd0:	4a73      	ldr	r2, [pc, #460]	; (8003da0 <HAL_RCC_OscConfig+0x76c>)
 8003bd2:	f023 0304 	bic.w	r3, r3, #4
 8003bd6:	6713      	str	r3, [r2, #112]	; 0x70
 8003bd8:	e01c      	b.n	8003c14 <HAL_RCC_OscConfig+0x5e0>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	2b05      	cmp	r3, #5
 8003be0:	d10c      	bne.n	8003bfc <HAL_RCC_OscConfig+0x5c8>
 8003be2:	4b6f      	ldr	r3, [pc, #444]	; (8003da0 <HAL_RCC_OscConfig+0x76c>)
 8003be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be6:	4a6e      	ldr	r2, [pc, #440]	; (8003da0 <HAL_RCC_OscConfig+0x76c>)
 8003be8:	f043 0304 	orr.w	r3, r3, #4
 8003bec:	6713      	str	r3, [r2, #112]	; 0x70
 8003bee:	4b6c      	ldr	r3, [pc, #432]	; (8003da0 <HAL_RCC_OscConfig+0x76c>)
 8003bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf2:	4a6b      	ldr	r2, [pc, #428]	; (8003da0 <HAL_RCC_OscConfig+0x76c>)
 8003bf4:	f043 0301 	orr.w	r3, r3, #1
 8003bf8:	6713      	str	r3, [r2, #112]	; 0x70
 8003bfa:	e00b      	b.n	8003c14 <HAL_RCC_OscConfig+0x5e0>
 8003bfc:	4b68      	ldr	r3, [pc, #416]	; (8003da0 <HAL_RCC_OscConfig+0x76c>)
 8003bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c00:	4a67      	ldr	r2, [pc, #412]	; (8003da0 <HAL_RCC_OscConfig+0x76c>)
 8003c02:	f023 0301 	bic.w	r3, r3, #1
 8003c06:	6713      	str	r3, [r2, #112]	; 0x70
 8003c08:	4b65      	ldr	r3, [pc, #404]	; (8003da0 <HAL_RCC_OscConfig+0x76c>)
 8003c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0c:	4a64      	ldr	r2, [pc, #400]	; (8003da0 <HAL_RCC_OscConfig+0x76c>)
 8003c0e:	f023 0304 	bic.w	r3, r3, #4
 8003c12:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d015      	beq.n	8003c48 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c1c:	f7fd fc24 	bl	8001468 <HAL_GetTick>
 8003c20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c22:	e00a      	b.n	8003c3a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c24:	f7fd fc20 	bl	8001468 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e14e      	b.n	8003ed8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c3a:	4b59      	ldr	r3, [pc, #356]	; (8003da0 <HAL_RCC_OscConfig+0x76c>)
 8003c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d0ee      	beq.n	8003c24 <HAL_RCC_OscConfig+0x5f0>
 8003c46:	e014      	b.n	8003c72 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c48:	f7fd fc0e 	bl	8001468 <HAL_GetTick>
 8003c4c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c4e:	e00a      	b.n	8003c66 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c50:	f7fd fc0a 	bl	8001468 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e138      	b.n	8003ed8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003c66:	4b4e      	ldr	r3, [pc, #312]	; (8003da0 <HAL_RCC_OscConfig+0x76c>)
 8003c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1ee      	bne.n	8003c50 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f000 812d 	beq.w	8003ed6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003c7c:	4b48      	ldr	r3, [pc, #288]	; (8003da0 <HAL_RCC_OscConfig+0x76c>)
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c84:	2b18      	cmp	r3, #24
 8003c86:	f000 80bd 	beq.w	8003e04 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	f040 809e 	bne.w	8003dd0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c94:	4b42      	ldr	r3, [pc, #264]	; (8003da0 <HAL_RCC_OscConfig+0x76c>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a41      	ldr	r2, [pc, #260]	; (8003da0 <HAL_RCC_OscConfig+0x76c>)
 8003c9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca0:	f7fd fbe2 	bl	8001468 <HAL_GetTick>
 8003ca4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ca8:	f7fd fbde 	bl	8001468 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e10e      	b.n	8003ed8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cba:	4b39      	ldr	r3, [pc, #228]	; (8003da0 <HAL_RCC_OscConfig+0x76c>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1f0      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cc6:	4b36      	ldr	r3, [pc, #216]	; (8003da0 <HAL_RCC_OscConfig+0x76c>)
 8003cc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cca:	4b37      	ldr	r3, [pc, #220]	; (8003da8 <HAL_RCC_OscConfig+0x774>)
 8003ccc:	4013      	ands	r3, r2
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003cd6:	0112      	lsls	r2, r2, #4
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	4931      	ldr	r1, [pc, #196]	; (8003da0 <HAL_RCC_OscConfig+0x76c>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	628b      	str	r3, [r1, #40]	; 0x28
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	025b      	lsls	r3, r3, #9
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	041b      	lsls	r3, r3, #16
 8003cfe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d02:	431a      	orrs	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	061b      	lsls	r3, r3, #24
 8003d0c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d10:	4923      	ldr	r1, [pc, #140]	; (8003da0 <HAL_RCC_OscConfig+0x76c>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003d16:	4b22      	ldr	r3, [pc, #136]	; (8003da0 <HAL_RCC_OscConfig+0x76c>)
 8003d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1a:	4a21      	ldr	r2, [pc, #132]	; (8003da0 <HAL_RCC_OscConfig+0x76c>)
 8003d1c:	f023 0301 	bic.w	r3, r3, #1
 8003d20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003d22:	4b1f      	ldr	r3, [pc, #124]	; (8003da0 <HAL_RCC_OscConfig+0x76c>)
 8003d24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d26:	4b21      	ldr	r3, [pc, #132]	; (8003dac <HAL_RCC_OscConfig+0x778>)
 8003d28:	4013      	ands	r3, r2
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003d2e:	00d2      	lsls	r2, r2, #3
 8003d30:	491b      	ldr	r1, [pc, #108]	; (8003da0 <HAL_RCC_OscConfig+0x76c>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003d36:	4b1a      	ldr	r3, [pc, #104]	; (8003da0 <HAL_RCC_OscConfig+0x76c>)
 8003d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3a:	f023 020c 	bic.w	r2, r3, #12
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	4917      	ldr	r1, [pc, #92]	; (8003da0 <HAL_RCC_OscConfig+0x76c>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003d48:	4b15      	ldr	r3, [pc, #84]	; (8003da0 <HAL_RCC_OscConfig+0x76c>)
 8003d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4c:	f023 0202 	bic.w	r2, r3, #2
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d54:	4912      	ldr	r1, [pc, #72]	; (8003da0 <HAL_RCC_OscConfig+0x76c>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003d5a:	4b11      	ldr	r3, [pc, #68]	; (8003da0 <HAL_RCC_OscConfig+0x76c>)
 8003d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5e:	4a10      	ldr	r2, [pc, #64]	; (8003da0 <HAL_RCC_OscConfig+0x76c>)
 8003d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d66:	4b0e      	ldr	r3, [pc, #56]	; (8003da0 <HAL_RCC_OscConfig+0x76c>)
 8003d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6a:	4a0d      	ldr	r2, [pc, #52]	; (8003da0 <HAL_RCC_OscConfig+0x76c>)
 8003d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d70:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003d72:	4b0b      	ldr	r3, [pc, #44]	; (8003da0 <HAL_RCC_OscConfig+0x76c>)
 8003d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d76:	4a0a      	ldr	r2, [pc, #40]	; (8003da0 <HAL_RCC_OscConfig+0x76c>)
 8003d78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003d7e:	4b08      	ldr	r3, [pc, #32]	; (8003da0 <HAL_RCC_OscConfig+0x76c>)
 8003d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d82:	4a07      	ldr	r2, [pc, #28]	; (8003da0 <HAL_RCC_OscConfig+0x76c>)
 8003d84:	f043 0301 	orr.w	r3, r3, #1
 8003d88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d8a:	4b05      	ldr	r3, [pc, #20]	; (8003da0 <HAL_RCC_OscConfig+0x76c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a04      	ldr	r2, [pc, #16]	; (8003da0 <HAL_RCC_OscConfig+0x76c>)
 8003d90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d96:	f7fd fb67 	bl	8001468 <HAL_GetTick>
 8003d9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d9c:	e011      	b.n	8003dc2 <HAL_RCC_OscConfig+0x78e>
 8003d9e:	bf00      	nop
 8003da0:	58024400 	.word	0x58024400
 8003da4:	58024800 	.word	0x58024800
 8003da8:	fffffc0c 	.word	0xfffffc0c
 8003dac:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003db0:	f7fd fb5a 	bl	8001468 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e08a      	b.n	8003ed8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003dc2:	4b47      	ldr	r3, [pc, #284]	; (8003ee0 <HAL_RCC_OscConfig+0x8ac>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d0f0      	beq.n	8003db0 <HAL_RCC_OscConfig+0x77c>
 8003dce:	e082      	b.n	8003ed6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dd0:	4b43      	ldr	r3, [pc, #268]	; (8003ee0 <HAL_RCC_OscConfig+0x8ac>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a42      	ldr	r2, [pc, #264]	; (8003ee0 <HAL_RCC_OscConfig+0x8ac>)
 8003dd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ddc:	f7fd fb44 	bl	8001468 <HAL_GetTick>
 8003de0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003de4:	f7fd fb40 	bl	8001468 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e070      	b.n	8003ed8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003df6:	4b3a      	ldr	r3, [pc, #232]	; (8003ee0 <HAL_RCC_OscConfig+0x8ac>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1f0      	bne.n	8003de4 <HAL_RCC_OscConfig+0x7b0>
 8003e02:	e068      	b.n	8003ed6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003e04:	4b36      	ldr	r3, [pc, #216]	; (8003ee0 <HAL_RCC_OscConfig+0x8ac>)
 8003e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e08:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003e0a:	4b35      	ldr	r3, [pc, #212]	; (8003ee0 <HAL_RCC_OscConfig+0x8ac>)
 8003e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d031      	beq.n	8003e7c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	f003 0203 	and.w	r2, r3, #3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d12a      	bne.n	8003e7c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	091b      	lsrs	r3, r3, #4
 8003e2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d122      	bne.n	8003e7c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e40:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d11a      	bne.n	8003e7c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	0a5b      	lsrs	r3, r3, #9
 8003e4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e52:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d111      	bne.n	8003e7c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	0c1b      	lsrs	r3, r3, #16
 8003e5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e64:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d108      	bne.n	8003e7c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	0e1b      	lsrs	r3, r3, #24
 8003e6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e76:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d001      	beq.n	8003e80 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e02b      	b.n	8003ed8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003e80:	4b17      	ldr	r3, [pc, #92]	; (8003ee0 <HAL_RCC_OscConfig+0x8ac>)
 8003e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e84:	08db      	lsrs	r3, r3, #3
 8003e86:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e8a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d01f      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003e96:	4b12      	ldr	r3, [pc, #72]	; (8003ee0 <HAL_RCC_OscConfig+0x8ac>)
 8003e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9a:	4a11      	ldr	r2, [pc, #68]	; (8003ee0 <HAL_RCC_OscConfig+0x8ac>)
 8003e9c:	f023 0301 	bic.w	r3, r3, #1
 8003ea0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003ea2:	f7fd fae1 	bl	8001468 <HAL_GetTick>
 8003ea6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003ea8:	bf00      	nop
 8003eaa:	f7fd fadd 	bl	8001468 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d0f9      	beq.n	8003eaa <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003eb6:	4b0a      	ldr	r3, [pc, #40]	; (8003ee0 <HAL_RCC_OscConfig+0x8ac>)
 8003eb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eba:	4b0a      	ldr	r3, [pc, #40]	; (8003ee4 <HAL_RCC_OscConfig+0x8b0>)
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003ec2:	00d2      	lsls	r2, r2, #3
 8003ec4:	4906      	ldr	r1, [pc, #24]	; (8003ee0 <HAL_RCC_OscConfig+0x8ac>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003eca:	4b05      	ldr	r3, [pc, #20]	; (8003ee0 <HAL_RCC_OscConfig+0x8ac>)
 8003ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ece:	4a04      	ldr	r2, [pc, #16]	; (8003ee0 <HAL_RCC_OscConfig+0x8ac>)
 8003ed0:	f043 0301 	orr.w	r3, r3, #1
 8003ed4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3730      	adds	r7, #48	; 0x30
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	58024400 	.word	0x58024400
 8003ee4:	ffff0007 	.word	0xffff0007

08003ee8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b086      	sub	sp, #24
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d101      	bne.n	8003efc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e19c      	b.n	8004236 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003efc:	4b8a      	ldr	r3, [pc, #552]	; (8004128 <HAL_RCC_ClockConfig+0x240>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 030f 	and.w	r3, r3, #15
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d910      	bls.n	8003f2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f0a:	4b87      	ldr	r3, [pc, #540]	; (8004128 <HAL_RCC_ClockConfig+0x240>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f023 020f 	bic.w	r2, r3, #15
 8003f12:	4985      	ldr	r1, [pc, #532]	; (8004128 <HAL_RCC_ClockConfig+0x240>)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f1a:	4b83      	ldr	r3, [pc, #524]	; (8004128 <HAL_RCC_ClockConfig+0x240>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 030f 	and.w	r3, r3, #15
 8003f22:	683a      	ldr	r2, [r7, #0]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d001      	beq.n	8003f2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e184      	b.n	8004236 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0304 	and.w	r3, r3, #4
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d010      	beq.n	8003f5a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	691a      	ldr	r2, [r3, #16]
 8003f3c:	4b7b      	ldr	r3, [pc, #492]	; (800412c <HAL_RCC_ClockConfig+0x244>)
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d908      	bls.n	8003f5a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003f48:	4b78      	ldr	r3, [pc, #480]	; (800412c <HAL_RCC_ClockConfig+0x244>)
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	4975      	ldr	r1, [pc, #468]	; (800412c <HAL_RCC_ClockConfig+0x244>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0308 	and.w	r3, r3, #8
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d010      	beq.n	8003f88 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	695a      	ldr	r2, [r3, #20]
 8003f6a:	4b70      	ldr	r3, [pc, #448]	; (800412c <HAL_RCC_ClockConfig+0x244>)
 8003f6c:	69db      	ldr	r3, [r3, #28]
 8003f6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d908      	bls.n	8003f88 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003f76:	4b6d      	ldr	r3, [pc, #436]	; (800412c <HAL_RCC_ClockConfig+0x244>)
 8003f78:	69db      	ldr	r3, [r3, #28]
 8003f7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	496a      	ldr	r1, [pc, #424]	; (800412c <HAL_RCC_ClockConfig+0x244>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0310 	and.w	r3, r3, #16
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d010      	beq.n	8003fb6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	699a      	ldr	r2, [r3, #24]
 8003f98:	4b64      	ldr	r3, [pc, #400]	; (800412c <HAL_RCC_ClockConfig+0x244>)
 8003f9a:	69db      	ldr	r3, [r3, #28]
 8003f9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d908      	bls.n	8003fb6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003fa4:	4b61      	ldr	r3, [pc, #388]	; (800412c <HAL_RCC_ClockConfig+0x244>)
 8003fa6:	69db      	ldr	r3, [r3, #28]
 8003fa8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	495e      	ldr	r1, [pc, #376]	; (800412c <HAL_RCC_ClockConfig+0x244>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0320 	and.w	r3, r3, #32
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d010      	beq.n	8003fe4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	69da      	ldr	r2, [r3, #28]
 8003fc6:	4b59      	ldr	r3, [pc, #356]	; (800412c <HAL_RCC_ClockConfig+0x244>)
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d908      	bls.n	8003fe4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003fd2:	4b56      	ldr	r3, [pc, #344]	; (800412c <HAL_RCC_ClockConfig+0x244>)
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	69db      	ldr	r3, [r3, #28]
 8003fde:	4953      	ldr	r1, [pc, #332]	; (800412c <HAL_RCC_ClockConfig+0x244>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d010      	beq.n	8004012 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	68da      	ldr	r2, [r3, #12]
 8003ff4:	4b4d      	ldr	r3, [pc, #308]	; (800412c <HAL_RCC_ClockConfig+0x244>)
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	f003 030f 	and.w	r3, r3, #15
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d908      	bls.n	8004012 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004000:	4b4a      	ldr	r3, [pc, #296]	; (800412c <HAL_RCC_ClockConfig+0x244>)
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	f023 020f 	bic.w	r2, r3, #15
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	4947      	ldr	r1, [pc, #284]	; (800412c <HAL_RCC_ClockConfig+0x244>)
 800400e:	4313      	orrs	r3, r2
 8004010:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d055      	beq.n	80040ca <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800401e:	4b43      	ldr	r3, [pc, #268]	; (800412c <HAL_RCC_ClockConfig+0x244>)
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	4940      	ldr	r1, [pc, #256]	; (800412c <HAL_RCC_ClockConfig+0x244>)
 800402c:	4313      	orrs	r3, r2
 800402e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	2b02      	cmp	r3, #2
 8004036:	d107      	bne.n	8004048 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004038:	4b3c      	ldr	r3, [pc, #240]	; (800412c <HAL_RCC_ClockConfig+0x244>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d121      	bne.n	8004088 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e0f6      	b.n	8004236 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	2b03      	cmp	r3, #3
 800404e:	d107      	bne.n	8004060 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004050:	4b36      	ldr	r3, [pc, #216]	; (800412c <HAL_RCC_ClockConfig+0x244>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d115      	bne.n	8004088 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e0ea      	b.n	8004236 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d107      	bne.n	8004078 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004068:	4b30      	ldr	r3, [pc, #192]	; (800412c <HAL_RCC_ClockConfig+0x244>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004070:	2b00      	cmp	r3, #0
 8004072:	d109      	bne.n	8004088 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e0de      	b.n	8004236 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004078:	4b2c      	ldr	r3, [pc, #176]	; (800412c <HAL_RCC_ClockConfig+0x244>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0304 	and.w	r3, r3, #4
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e0d6      	b.n	8004236 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004088:	4b28      	ldr	r3, [pc, #160]	; (800412c <HAL_RCC_ClockConfig+0x244>)
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	f023 0207 	bic.w	r2, r3, #7
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	4925      	ldr	r1, [pc, #148]	; (800412c <HAL_RCC_ClockConfig+0x244>)
 8004096:	4313      	orrs	r3, r2
 8004098:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800409a:	f7fd f9e5 	bl	8001468 <HAL_GetTick>
 800409e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040a0:	e00a      	b.n	80040b8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040a2:	f7fd f9e1 	bl	8001468 <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d901      	bls.n	80040b8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e0be      	b.n	8004236 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040b8:	4b1c      	ldr	r3, [pc, #112]	; (800412c <HAL_RCC_ClockConfig+0x244>)
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	00db      	lsls	r3, r3, #3
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d1eb      	bne.n	80040a2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d010      	beq.n	80040f8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	68da      	ldr	r2, [r3, #12]
 80040da:	4b14      	ldr	r3, [pc, #80]	; (800412c <HAL_RCC_ClockConfig+0x244>)
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	f003 030f 	and.w	r3, r3, #15
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d208      	bcs.n	80040f8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040e6:	4b11      	ldr	r3, [pc, #68]	; (800412c <HAL_RCC_ClockConfig+0x244>)
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	f023 020f 	bic.w	r2, r3, #15
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	490e      	ldr	r1, [pc, #56]	; (800412c <HAL_RCC_ClockConfig+0x244>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040f8:	4b0b      	ldr	r3, [pc, #44]	; (8004128 <HAL_RCC_ClockConfig+0x240>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 030f 	and.w	r3, r3, #15
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	429a      	cmp	r2, r3
 8004104:	d214      	bcs.n	8004130 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004106:	4b08      	ldr	r3, [pc, #32]	; (8004128 <HAL_RCC_ClockConfig+0x240>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f023 020f 	bic.w	r2, r3, #15
 800410e:	4906      	ldr	r1, [pc, #24]	; (8004128 <HAL_RCC_ClockConfig+0x240>)
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	4313      	orrs	r3, r2
 8004114:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004116:	4b04      	ldr	r3, [pc, #16]	; (8004128 <HAL_RCC_ClockConfig+0x240>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 030f 	and.w	r3, r3, #15
 800411e:	683a      	ldr	r2, [r7, #0]
 8004120:	429a      	cmp	r2, r3
 8004122:	d005      	beq.n	8004130 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e086      	b.n	8004236 <HAL_RCC_ClockConfig+0x34e>
 8004128:	52002000 	.word	0x52002000
 800412c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0304 	and.w	r3, r3, #4
 8004138:	2b00      	cmp	r3, #0
 800413a:	d010      	beq.n	800415e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	691a      	ldr	r2, [r3, #16]
 8004140:	4b3f      	ldr	r3, [pc, #252]	; (8004240 <HAL_RCC_ClockConfig+0x358>)
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004148:	429a      	cmp	r2, r3
 800414a:	d208      	bcs.n	800415e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800414c:	4b3c      	ldr	r3, [pc, #240]	; (8004240 <HAL_RCC_ClockConfig+0x358>)
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	4939      	ldr	r1, [pc, #228]	; (8004240 <HAL_RCC_ClockConfig+0x358>)
 800415a:	4313      	orrs	r3, r2
 800415c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0308 	and.w	r3, r3, #8
 8004166:	2b00      	cmp	r3, #0
 8004168:	d010      	beq.n	800418c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	695a      	ldr	r2, [r3, #20]
 800416e:	4b34      	ldr	r3, [pc, #208]	; (8004240 <HAL_RCC_ClockConfig+0x358>)
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004176:	429a      	cmp	r2, r3
 8004178:	d208      	bcs.n	800418c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800417a:	4b31      	ldr	r3, [pc, #196]	; (8004240 <HAL_RCC_ClockConfig+0x358>)
 800417c:	69db      	ldr	r3, [r3, #28]
 800417e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	492e      	ldr	r1, [pc, #184]	; (8004240 <HAL_RCC_ClockConfig+0x358>)
 8004188:	4313      	orrs	r3, r2
 800418a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0310 	and.w	r3, r3, #16
 8004194:	2b00      	cmp	r3, #0
 8004196:	d010      	beq.n	80041ba <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	699a      	ldr	r2, [r3, #24]
 800419c:	4b28      	ldr	r3, [pc, #160]	; (8004240 <HAL_RCC_ClockConfig+0x358>)
 800419e:	69db      	ldr	r3, [r3, #28]
 80041a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d208      	bcs.n	80041ba <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80041a8:	4b25      	ldr	r3, [pc, #148]	; (8004240 <HAL_RCC_ClockConfig+0x358>)
 80041aa:	69db      	ldr	r3, [r3, #28]
 80041ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	4922      	ldr	r1, [pc, #136]	; (8004240 <HAL_RCC_ClockConfig+0x358>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0320 	and.w	r3, r3, #32
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d010      	beq.n	80041e8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	69da      	ldr	r2, [r3, #28]
 80041ca:	4b1d      	ldr	r3, [pc, #116]	; (8004240 <HAL_RCC_ClockConfig+0x358>)
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d208      	bcs.n	80041e8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80041d6:	4b1a      	ldr	r3, [pc, #104]	; (8004240 <HAL_RCC_ClockConfig+0x358>)
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	69db      	ldr	r3, [r3, #28]
 80041e2:	4917      	ldr	r1, [pc, #92]	; (8004240 <HAL_RCC_ClockConfig+0x358>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80041e8:	f000 f834 	bl	8004254 <HAL_RCC_GetSysClockFreq>
 80041ec:	4602      	mov	r2, r0
 80041ee:	4b14      	ldr	r3, [pc, #80]	; (8004240 <HAL_RCC_ClockConfig+0x358>)
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	0a1b      	lsrs	r3, r3, #8
 80041f4:	f003 030f 	and.w	r3, r3, #15
 80041f8:	4912      	ldr	r1, [pc, #72]	; (8004244 <HAL_RCC_ClockConfig+0x35c>)
 80041fa:	5ccb      	ldrb	r3, [r1, r3]
 80041fc:	f003 031f 	and.w	r3, r3, #31
 8004200:	fa22 f303 	lsr.w	r3, r2, r3
 8004204:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004206:	4b0e      	ldr	r3, [pc, #56]	; (8004240 <HAL_RCC_ClockConfig+0x358>)
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	f003 030f 	and.w	r3, r3, #15
 800420e:	4a0d      	ldr	r2, [pc, #52]	; (8004244 <HAL_RCC_ClockConfig+0x35c>)
 8004210:	5cd3      	ldrb	r3, [r2, r3]
 8004212:	f003 031f 	and.w	r3, r3, #31
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	fa22 f303 	lsr.w	r3, r2, r3
 800421c:	4a0a      	ldr	r2, [pc, #40]	; (8004248 <HAL_RCC_ClockConfig+0x360>)
 800421e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004220:	4a0a      	ldr	r2, [pc, #40]	; (800424c <HAL_RCC_ClockConfig+0x364>)
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004226:	4b0a      	ldr	r3, [pc, #40]	; (8004250 <HAL_RCC_ClockConfig+0x368>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4618      	mov	r0, r3
 800422c:	f7fc fdec 	bl	8000e08 <HAL_InitTick>
 8004230:	4603      	mov	r3, r0
 8004232:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004234:	7bfb      	ldrb	r3, [r7, #15]
}
 8004236:	4618      	mov	r0, r3
 8004238:	3718      	adds	r7, #24
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	58024400 	.word	0x58024400
 8004244:	0801ac68 	.word	0x0801ac68
 8004248:	24000004 	.word	0x24000004
 800424c:	24000000 	.word	0x24000000
 8004250:	24000008 	.word	0x24000008

08004254 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004254:	b480      	push	{r7}
 8004256:	b089      	sub	sp, #36	; 0x24
 8004258:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800425a:	4bb3      	ldr	r3, [pc, #716]	; (8004528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004262:	2b18      	cmp	r3, #24
 8004264:	f200 8155 	bhi.w	8004512 <HAL_RCC_GetSysClockFreq+0x2be>
 8004268:	a201      	add	r2, pc, #4	; (adr r2, 8004270 <HAL_RCC_GetSysClockFreq+0x1c>)
 800426a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426e:	bf00      	nop
 8004270:	080042d5 	.word	0x080042d5
 8004274:	08004513 	.word	0x08004513
 8004278:	08004513 	.word	0x08004513
 800427c:	08004513 	.word	0x08004513
 8004280:	08004513 	.word	0x08004513
 8004284:	08004513 	.word	0x08004513
 8004288:	08004513 	.word	0x08004513
 800428c:	08004513 	.word	0x08004513
 8004290:	080042fb 	.word	0x080042fb
 8004294:	08004513 	.word	0x08004513
 8004298:	08004513 	.word	0x08004513
 800429c:	08004513 	.word	0x08004513
 80042a0:	08004513 	.word	0x08004513
 80042a4:	08004513 	.word	0x08004513
 80042a8:	08004513 	.word	0x08004513
 80042ac:	08004513 	.word	0x08004513
 80042b0:	08004301 	.word	0x08004301
 80042b4:	08004513 	.word	0x08004513
 80042b8:	08004513 	.word	0x08004513
 80042bc:	08004513 	.word	0x08004513
 80042c0:	08004513 	.word	0x08004513
 80042c4:	08004513 	.word	0x08004513
 80042c8:	08004513 	.word	0x08004513
 80042cc:	08004513 	.word	0x08004513
 80042d0:	08004307 	.word	0x08004307
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042d4:	4b94      	ldr	r3, [pc, #592]	; (8004528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0320 	and.w	r3, r3, #32
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d009      	beq.n	80042f4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80042e0:	4b91      	ldr	r3, [pc, #580]	; (8004528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	08db      	lsrs	r3, r3, #3
 80042e6:	f003 0303 	and.w	r3, r3, #3
 80042ea:	4a90      	ldr	r2, [pc, #576]	; (800452c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80042ec:	fa22 f303 	lsr.w	r3, r2, r3
 80042f0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80042f2:	e111      	b.n	8004518 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80042f4:	4b8d      	ldr	r3, [pc, #564]	; (800452c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80042f6:	61bb      	str	r3, [r7, #24]
      break;
 80042f8:	e10e      	b.n	8004518 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80042fa:	4b8d      	ldr	r3, [pc, #564]	; (8004530 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80042fc:	61bb      	str	r3, [r7, #24]
      break;
 80042fe:	e10b      	b.n	8004518 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004300:	4b8c      	ldr	r3, [pc, #560]	; (8004534 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004302:	61bb      	str	r3, [r7, #24]
      break;
 8004304:	e108      	b.n	8004518 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004306:	4b88      	ldr	r3, [pc, #544]	; (8004528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430a:	f003 0303 	and.w	r3, r3, #3
 800430e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004310:	4b85      	ldr	r3, [pc, #532]	; (8004528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004314:	091b      	lsrs	r3, r3, #4
 8004316:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800431a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800431c:	4b82      	ldr	r3, [pc, #520]	; (8004528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800431e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004320:	f003 0301 	and.w	r3, r3, #1
 8004324:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004326:	4b80      	ldr	r3, [pc, #512]	; (8004528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800432a:	08db      	lsrs	r3, r3, #3
 800432c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	fb02 f303 	mul.w	r3, r2, r3
 8004336:	ee07 3a90 	vmov	s15, r3
 800433a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800433e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	2b00      	cmp	r3, #0
 8004346:	f000 80e1 	beq.w	800450c <HAL_RCC_GetSysClockFreq+0x2b8>
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	2b02      	cmp	r3, #2
 800434e:	f000 8083 	beq.w	8004458 <HAL_RCC_GetSysClockFreq+0x204>
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	2b02      	cmp	r3, #2
 8004356:	f200 80a1 	bhi.w	800449c <HAL_RCC_GetSysClockFreq+0x248>
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d003      	beq.n	8004368 <HAL_RCC_GetSysClockFreq+0x114>
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d056      	beq.n	8004414 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004366:	e099      	b.n	800449c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004368:	4b6f      	ldr	r3, [pc, #444]	; (8004528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0320 	and.w	r3, r3, #32
 8004370:	2b00      	cmp	r3, #0
 8004372:	d02d      	beq.n	80043d0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004374:	4b6c      	ldr	r3, [pc, #432]	; (8004528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	08db      	lsrs	r3, r3, #3
 800437a:	f003 0303 	and.w	r3, r3, #3
 800437e:	4a6b      	ldr	r2, [pc, #428]	; (800452c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004380:	fa22 f303 	lsr.w	r3, r2, r3
 8004384:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	ee07 3a90 	vmov	s15, r3
 800438c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	ee07 3a90 	vmov	s15, r3
 8004396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800439a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800439e:	4b62      	ldr	r3, [pc, #392]	; (8004528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043a6:	ee07 3a90 	vmov	s15, r3
 80043aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80043b2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004538 <HAL_RCC_GetSysClockFreq+0x2e4>
 80043b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ca:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80043ce:	e087      	b.n	80044e0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	ee07 3a90 	vmov	s15, r3
 80043d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043da:	eddf 6a58 	vldr	s13, [pc, #352]	; 800453c <HAL_RCC_GetSysClockFreq+0x2e8>
 80043de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043e2:	4b51      	ldr	r3, [pc, #324]	; (8004528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ea:	ee07 3a90 	vmov	s15, r3
 80043ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80043f6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004538 <HAL_RCC_GetSysClockFreq+0x2e4>
 80043fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004402:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800440a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800440e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004412:	e065      	b.n	80044e0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	ee07 3a90 	vmov	s15, r3
 800441a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800441e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004540 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004422:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004426:	4b40      	ldr	r3, [pc, #256]	; (8004528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800442e:	ee07 3a90 	vmov	s15, r3
 8004432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004436:	ed97 6a02 	vldr	s12, [r7, #8]
 800443a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004538 <HAL_RCC_GetSysClockFreq+0x2e4>
 800443e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004442:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004446:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800444a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800444e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004452:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004456:	e043      	b.n	80044e0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	ee07 3a90 	vmov	s15, r3
 800445e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004462:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004544 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800446a:	4b2f      	ldr	r3, [pc, #188]	; (8004528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800446c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004472:	ee07 3a90 	vmov	s15, r3
 8004476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800447a:	ed97 6a02 	vldr	s12, [r7, #8]
 800447e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004538 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004482:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004486:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800448a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800448e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004496:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800449a:	e021      	b.n	80044e0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	ee07 3a90 	vmov	s15, r3
 80044a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044a6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004540 <HAL_RCC_GetSysClockFreq+0x2ec>
 80044aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044ae:	4b1e      	ldr	r3, [pc, #120]	; (8004528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044b6:	ee07 3a90 	vmov	s15, r3
 80044ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044be:	ed97 6a02 	vldr	s12, [r7, #8]
 80044c2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004538 <HAL_RCC_GetSysClockFreq+0x2e4>
 80044c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80044de:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80044e0:	4b11      	ldr	r3, [pc, #68]	; (8004528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e4:	0a5b      	lsrs	r3, r3, #9
 80044e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044ea:	3301      	adds	r3, #1
 80044ec:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	ee07 3a90 	vmov	s15, r3
 80044f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80044f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80044fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004500:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004504:	ee17 3a90 	vmov	r3, s15
 8004508:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800450a:	e005      	b.n	8004518 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800450c:	2300      	movs	r3, #0
 800450e:	61bb      	str	r3, [r7, #24]
      break;
 8004510:	e002      	b.n	8004518 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004512:	4b07      	ldr	r3, [pc, #28]	; (8004530 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004514:	61bb      	str	r3, [r7, #24]
      break;
 8004516:	bf00      	nop
  }

  return sysclockfreq;
 8004518:	69bb      	ldr	r3, [r7, #24]
}
 800451a:	4618      	mov	r0, r3
 800451c:	3724      	adds	r7, #36	; 0x24
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	58024400 	.word	0x58024400
 800452c:	03d09000 	.word	0x03d09000
 8004530:	003d0900 	.word	0x003d0900
 8004534:	007a1200 	.word	0x007a1200
 8004538:	46000000 	.word	0x46000000
 800453c:	4c742400 	.word	0x4c742400
 8004540:	4a742400 	.word	0x4a742400
 8004544:	4af42400 	.word	0x4af42400

08004548 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800454e:	f7ff fe81 	bl	8004254 <HAL_RCC_GetSysClockFreq>
 8004552:	4602      	mov	r2, r0
 8004554:	4b10      	ldr	r3, [pc, #64]	; (8004598 <HAL_RCC_GetHCLKFreq+0x50>)
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	0a1b      	lsrs	r3, r3, #8
 800455a:	f003 030f 	and.w	r3, r3, #15
 800455e:	490f      	ldr	r1, [pc, #60]	; (800459c <HAL_RCC_GetHCLKFreq+0x54>)
 8004560:	5ccb      	ldrb	r3, [r1, r3]
 8004562:	f003 031f 	and.w	r3, r3, #31
 8004566:	fa22 f303 	lsr.w	r3, r2, r3
 800456a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800456c:	4b0a      	ldr	r3, [pc, #40]	; (8004598 <HAL_RCC_GetHCLKFreq+0x50>)
 800456e:	699b      	ldr	r3, [r3, #24]
 8004570:	f003 030f 	and.w	r3, r3, #15
 8004574:	4a09      	ldr	r2, [pc, #36]	; (800459c <HAL_RCC_GetHCLKFreq+0x54>)
 8004576:	5cd3      	ldrb	r3, [r2, r3]
 8004578:	f003 031f 	and.w	r3, r3, #31
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	fa22 f303 	lsr.w	r3, r2, r3
 8004582:	4a07      	ldr	r2, [pc, #28]	; (80045a0 <HAL_RCC_GetHCLKFreq+0x58>)
 8004584:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004586:	4a07      	ldr	r2, [pc, #28]	; (80045a4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800458c:	4b04      	ldr	r3, [pc, #16]	; (80045a0 <HAL_RCC_GetHCLKFreq+0x58>)
 800458e:	681b      	ldr	r3, [r3, #0]
}
 8004590:	4618      	mov	r0, r3
 8004592:	3708      	adds	r7, #8
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	58024400 	.word	0x58024400
 800459c:	0801ac68 	.word	0x0801ac68
 80045a0:	24000004 	.word	0x24000004
 80045a4:	24000000 	.word	0x24000000

080045a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80045ac:	f7ff ffcc 	bl	8004548 <HAL_RCC_GetHCLKFreq>
 80045b0:	4602      	mov	r2, r0
 80045b2:	4b06      	ldr	r3, [pc, #24]	; (80045cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80045b4:	69db      	ldr	r3, [r3, #28]
 80045b6:	091b      	lsrs	r3, r3, #4
 80045b8:	f003 0307 	and.w	r3, r3, #7
 80045bc:	4904      	ldr	r1, [pc, #16]	; (80045d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80045be:	5ccb      	ldrb	r3, [r1, r3]
 80045c0:	f003 031f 	and.w	r3, r3, #31
 80045c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	58024400 	.word	0x58024400
 80045d0:	0801ac68 	.word	0x0801ac68

080045d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80045d8:	f7ff ffb6 	bl	8004548 <HAL_RCC_GetHCLKFreq>
 80045dc:	4602      	mov	r2, r0
 80045de:	4b06      	ldr	r3, [pc, #24]	; (80045f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045e0:	69db      	ldr	r3, [r3, #28]
 80045e2:	0a1b      	lsrs	r3, r3, #8
 80045e4:	f003 0307 	and.w	r3, r3, #7
 80045e8:	4904      	ldr	r1, [pc, #16]	; (80045fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80045ea:	5ccb      	ldrb	r3, [r1, r3]
 80045ec:	f003 031f 	and.w	r3, r3, #31
 80045f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	58024400 	.word	0x58024400
 80045fc:	0801ac68 	.word	0x0801ac68

08004600 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	223f      	movs	r2, #63	; 0x3f
 800460e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004610:	4b1a      	ldr	r3, [pc, #104]	; (800467c <HAL_RCC_GetClockConfig+0x7c>)
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	f003 0207 	and.w	r2, r3, #7
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800461c:	4b17      	ldr	r3, [pc, #92]	; (800467c <HAL_RCC_GetClockConfig+0x7c>)
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004628:	4b14      	ldr	r3, [pc, #80]	; (800467c <HAL_RCC_GetClockConfig+0x7c>)
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	f003 020f 	and.w	r2, r3, #15
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004634:	4b11      	ldr	r3, [pc, #68]	; (800467c <HAL_RCC_GetClockConfig+0x7c>)
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004640:	4b0e      	ldr	r3, [pc, #56]	; (800467c <HAL_RCC_GetClockConfig+0x7c>)
 8004642:	69db      	ldr	r3, [r3, #28]
 8004644:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800464c:	4b0b      	ldr	r3, [pc, #44]	; (800467c <HAL_RCC_GetClockConfig+0x7c>)
 800464e:	69db      	ldr	r3, [r3, #28]
 8004650:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004658:	4b08      	ldr	r3, [pc, #32]	; (800467c <HAL_RCC_GetClockConfig+0x7c>)
 800465a:	6a1b      	ldr	r3, [r3, #32]
 800465c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004664:	4b06      	ldr	r3, [pc, #24]	; (8004680 <HAL_RCC_GetClockConfig+0x80>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 020f 	and.w	r2, r3, #15
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	601a      	str	r2, [r3, #0]
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr
 800467c:	58024400 	.word	0x58024400
 8004680:	52002000 	.word	0x52002000

08004684 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004684:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004688:	b0ca      	sub	sp, #296	; 0x128
 800468a:	af00      	add	r7, sp, #0
 800468c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004690:	2300      	movs	r3, #0
 8004692:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004696:	2300      	movs	r3, #0
 8004698:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800469c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80046a8:	2500      	movs	r5, #0
 80046aa:	ea54 0305 	orrs.w	r3, r4, r5
 80046ae:	d049      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80046b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80046ba:	d02f      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80046bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80046c0:	d828      	bhi.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80046c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046c6:	d01a      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80046c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046cc:	d822      	bhi.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d003      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x56>
 80046d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046d6:	d007      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80046d8:	e01c      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046da:	4bb8      	ldr	r3, [pc, #736]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046de:	4ab7      	ldr	r2, [pc, #732]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80046e6:	e01a      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80046e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046ec:	3308      	adds	r3, #8
 80046ee:	2102      	movs	r1, #2
 80046f0:	4618      	mov	r0, r3
 80046f2:	f001 fc8f 	bl	8006014 <RCCEx_PLL2_Config>
 80046f6:	4603      	mov	r3, r0
 80046f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80046fc:	e00f      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004702:	3328      	adds	r3, #40	; 0x28
 8004704:	2102      	movs	r1, #2
 8004706:	4618      	mov	r0, r3
 8004708:	f001 fd36 	bl	8006178 <RCCEx_PLL3_Config>
 800470c:	4603      	mov	r3, r0
 800470e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004712:	e004      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800471a:	e000      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800471c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800471e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10a      	bne.n	800473c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004726:	4ba5      	ldr	r3, [pc, #660]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800472a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800472e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004732:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004734:	4aa1      	ldr	r2, [pc, #644]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004736:	430b      	orrs	r3, r1
 8004738:	6513      	str	r3, [r2, #80]	; 0x50
 800473a:	e003      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800473c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004740:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004744:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800474c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8004750:	f04f 0900 	mov.w	r9, #0
 8004754:	ea58 0309 	orrs.w	r3, r8, r9
 8004758:	d047      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800475a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800475e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004760:	2b04      	cmp	r3, #4
 8004762:	d82a      	bhi.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004764:	a201      	add	r2, pc, #4	; (adr r2, 800476c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800476a:	bf00      	nop
 800476c:	08004781 	.word	0x08004781
 8004770:	0800478f 	.word	0x0800478f
 8004774:	080047a5 	.word	0x080047a5
 8004778:	080047c3 	.word	0x080047c3
 800477c:	080047c3 	.word	0x080047c3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004780:	4b8e      	ldr	r3, [pc, #568]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004784:	4a8d      	ldr	r2, [pc, #564]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004786:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800478a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800478c:	e01a      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800478e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004792:	3308      	adds	r3, #8
 8004794:	2100      	movs	r1, #0
 8004796:	4618      	mov	r0, r3
 8004798:	f001 fc3c 	bl	8006014 <RCCEx_PLL2_Config>
 800479c:	4603      	mov	r3, r0
 800479e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80047a2:	e00f      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80047a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047a8:	3328      	adds	r3, #40	; 0x28
 80047aa:	2100      	movs	r1, #0
 80047ac:	4618      	mov	r0, r3
 80047ae:	f001 fce3 	bl	8006178 <RCCEx_PLL3_Config>
 80047b2:	4603      	mov	r3, r0
 80047b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80047b8:	e004      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80047c0:	e000      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80047c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d10a      	bne.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047cc:	4b7b      	ldr	r3, [pc, #492]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047d0:	f023 0107 	bic.w	r1, r3, #7
 80047d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047da:	4a78      	ldr	r2, [pc, #480]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047dc:	430b      	orrs	r3, r1
 80047de:	6513      	str	r3, [r2, #80]	; 0x50
 80047e0:	e003      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80047ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80047f6:	f04f 0b00 	mov.w	fp, #0
 80047fa:	ea5a 030b 	orrs.w	r3, sl, fp
 80047fe:	d04c      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004800:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004806:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800480a:	d030      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800480c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004810:	d829      	bhi.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004812:	2bc0      	cmp	r3, #192	; 0xc0
 8004814:	d02d      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004816:	2bc0      	cmp	r3, #192	; 0xc0
 8004818:	d825      	bhi.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800481a:	2b80      	cmp	r3, #128	; 0x80
 800481c:	d018      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800481e:	2b80      	cmp	r3, #128	; 0x80
 8004820:	d821      	bhi.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004822:	2b00      	cmp	r3, #0
 8004824:	d002      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004826:	2b40      	cmp	r3, #64	; 0x40
 8004828:	d007      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800482a:	e01c      	b.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800482c:	4b63      	ldr	r3, [pc, #396]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800482e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004830:	4a62      	ldr	r2, [pc, #392]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004832:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004836:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004838:	e01c      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800483a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800483e:	3308      	adds	r3, #8
 8004840:	2100      	movs	r1, #0
 8004842:	4618      	mov	r0, r3
 8004844:	f001 fbe6 	bl	8006014 <RCCEx_PLL2_Config>
 8004848:	4603      	mov	r3, r0
 800484a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800484e:	e011      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004850:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004854:	3328      	adds	r3, #40	; 0x28
 8004856:	2100      	movs	r1, #0
 8004858:	4618      	mov	r0, r3
 800485a:	f001 fc8d 	bl	8006178 <RCCEx_PLL3_Config>
 800485e:	4603      	mov	r3, r0
 8004860:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004864:	e006      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800486c:	e002      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800486e:	bf00      	nop
 8004870:	e000      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004872:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004874:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10a      	bne.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800487c:	4b4f      	ldr	r3, [pc, #316]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800487e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004880:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004884:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800488a:	4a4c      	ldr	r2, [pc, #304]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800488c:	430b      	orrs	r3, r1
 800488e:	6513      	str	r3, [r2, #80]	; 0x50
 8004890:	e003      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004892:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004896:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800489a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800489e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80048a6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80048aa:	2300      	movs	r3, #0
 80048ac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80048b0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80048b4:	460b      	mov	r3, r1
 80048b6:	4313      	orrs	r3, r2
 80048b8:	d053      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80048ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80048c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048c6:	d035      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80048c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048cc:	d82e      	bhi.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80048ce:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80048d2:	d031      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80048d4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80048d8:	d828      	bhi.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80048da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048de:	d01a      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80048e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048e4:	d822      	bhi.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d003      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80048ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048ee:	d007      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80048f0:	e01c      	b.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048f2:	4b32      	ldr	r3, [pc, #200]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f6:	4a31      	ldr	r2, [pc, #196]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80048fe:	e01c      	b.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004900:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004904:	3308      	adds	r3, #8
 8004906:	2100      	movs	r1, #0
 8004908:	4618      	mov	r0, r3
 800490a:	f001 fb83 	bl	8006014 <RCCEx_PLL2_Config>
 800490e:	4603      	mov	r3, r0
 8004910:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004914:	e011      	b.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004916:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800491a:	3328      	adds	r3, #40	; 0x28
 800491c:	2100      	movs	r1, #0
 800491e:	4618      	mov	r0, r3
 8004920:	f001 fc2a 	bl	8006178 <RCCEx_PLL3_Config>
 8004924:	4603      	mov	r3, r0
 8004926:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800492a:	e006      	b.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004932:	e002      	b.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004934:	bf00      	nop
 8004936:	e000      	b.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004938:	bf00      	nop
    }

    if (ret == HAL_OK)
 800493a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10b      	bne.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004942:	4b1e      	ldr	r3, [pc, #120]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004946:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800494a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800494e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004952:	4a1a      	ldr	r2, [pc, #104]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004954:	430b      	orrs	r3, r1
 8004956:	6593      	str	r3, [r2, #88]	; 0x58
 8004958:	e003      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800495a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800495e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004962:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800496a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800496e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004972:	2300      	movs	r3, #0
 8004974:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004978:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800497c:	460b      	mov	r3, r1
 800497e:	4313      	orrs	r3, r2
 8004980:	d056      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004982:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004986:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800498a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800498e:	d038      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004990:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004994:	d831      	bhi.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004996:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800499a:	d034      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800499c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80049a0:	d82b      	bhi.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 80049a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049a6:	d01d      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80049a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049ac:	d825      	bhi.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d006      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80049b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049b6:	d00a      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80049b8:	e01f      	b.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 80049ba:	bf00      	nop
 80049bc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049c0:	4ba2      	ldr	r3, [pc, #648]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c4:	4aa1      	ldr	r2, [pc, #644]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80049cc:	e01c      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049d2:	3308      	adds	r3, #8
 80049d4:	2100      	movs	r1, #0
 80049d6:	4618      	mov	r0, r3
 80049d8:	f001 fb1c 	bl	8006014 <RCCEx_PLL2_Config>
 80049dc:	4603      	mov	r3, r0
 80049de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80049e2:	e011      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80049e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049e8:	3328      	adds	r3, #40	; 0x28
 80049ea:	2100      	movs	r1, #0
 80049ec:	4618      	mov	r0, r3
 80049ee:	f001 fbc3 	bl	8006178 <RCCEx_PLL3_Config>
 80049f2:	4603      	mov	r3, r0
 80049f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80049f8:	e006      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004a00:	e002      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004a02:	bf00      	nop
 8004a04:	e000      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004a06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d10b      	bne.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004a10:	4b8e      	ldr	r3, [pc, #568]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a14:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a1c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004a20:	4a8a      	ldr	r2, [pc, #552]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a22:	430b      	orrs	r3, r1
 8004a24:	6593      	str	r3, [r2, #88]	; 0x58
 8004a26:	e003      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a2c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a38:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004a3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004a40:	2300      	movs	r3, #0
 8004a42:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004a46:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	d03a      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a56:	2b30      	cmp	r3, #48	; 0x30
 8004a58:	d01f      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004a5a:	2b30      	cmp	r3, #48	; 0x30
 8004a5c:	d819      	bhi.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004a5e:	2b20      	cmp	r3, #32
 8004a60:	d00c      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004a62:	2b20      	cmp	r3, #32
 8004a64:	d815      	bhi.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d019      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004a6a:	2b10      	cmp	r3, #16
 8004a6c:	d111      	bne.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a6e:	4b77      	ldr	r3, [pc, #476]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a72:	4a76      	ldr	r2, [pc, #472]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004a7a:	e011      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a80:	3308      	adds	r3, #8
 8004a82:	2102      	movs	r1, #2
 8004a84:	4618      	mov	r0, r3
 8004a86:	f001 fac5 	bl	8006014 <RCCEx_PLL2_Config>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004a90:	e006      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004a98:	e002      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004a9a:	bf00      	nop
 8004a9c:	e000      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004a9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aa0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10a      	bne.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004aa8:	4b68      	ldr	r3, [pc, #416]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aac:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ab6:	4a65      	ldr	r2, [pc, #404]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ab8:	430b      	orrs	r3, r1
 8004aba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004abc:	e003      	b.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004abe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ac2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ace:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004ad2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004adc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	d051      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004aea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004af0:	d035      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004af2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004af6:	d82e      	bhi.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004af8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004afc:	d031      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004afe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b02:	d828      	bhi.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004b04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b08:	d01a      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004b0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b0e:	d822      	bhi.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d003      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004b14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b18:	d007      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004b1a:	e01c      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b1c:	4b4b      	ldr	r3, [pc, #300]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b20:	4a4a      	ldr	r2, [pc, #296]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004b28:	e01c      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b2e:	3308      	adds	r3, #8
 8004b30:	2100      	movs	r1, #0
 8004b32:	4618      	mov	r0, r3
 8004b34:	f001 fa6e 	bl	8006014 <RCCEx_PLL2_Config>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004b3e:	e011      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b44:	3328      	adds	r3, #40	; 0x28
 8004b46:	2100      	movs	r1, #0
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f001 fb15 	bl	8006178 <RCCEx_PLL3_Config>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004b54:	e006      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004b5c:	e002      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004b5e:	bf00      	nop
 8004b60:	e000      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004b62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d10a      	bne.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004b6c:	4b37      	ldr	r3, [pc, #220]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b70:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b7a:	4a34      	ldr	r2, [pc, #208]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b7c:	430b      	orrs	r3, r1
 8004b7e:	6513      	str	r3, [r2, #80]	; 0x50
 8004b80:	e003      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b92:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004b96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004ba0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	d056      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bb4:	d033      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004bb6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bba:	d82c      	bhi.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004bbc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004bc0:	d02f      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004bc2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004bc6:	d826      	bhi.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004bc8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004bcc:	d02b      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004bce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004bd2:	d820      	bhi.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004bd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bd8:	d012      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004bda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bde:	d81a      	bhi.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d022      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004be8:	d115      	bne.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bee:	3308      	adds	r3, #8
 8004bf0:	2101      	movs	r1, #1
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f001 fa0e 	bl	8006014 <RCCEx_PLL2_Config>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004bfe:	e015      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c04:	3328      	adds	r3, #40	; 0x28
 8004c06:	2101      	movs	r1, #1
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f001 fab5 	bl	8006178 <RCCEx_PLL3_Config>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004c14:	e00a      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004c1c:	e006      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004c1e:	bf00      	nop
 8004c20:	e004      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004c22:	bf00      	nop
 8004c24:	e002      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004c26:	bf00      	nop
 8004c28:	e000      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004c2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d10d      	bne.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004c34:	4b05      	ldr	r3, [pc, #20]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c38:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c42:	4a02      	ldr	r2, [pc, #8]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c44:	430b      	orrs	r3, r1
 8004c46:	6513      	str	r3, [r2, #80]	; 0x50
 8004c48:	e006      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004c4a:	bf00      	nop
 8004c4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004c54:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c60:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004c64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004c68:	2300      	movs	r3, #0
 8004c6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004c6e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004c72:	460b      	mov	r3, r1
 8004c74:	4313      	orrs	r3, r2
 8004c76:	d055      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004c80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c84:	d033      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004c86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c8a:	d82c      	bhi.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c90:	d02f      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c96:	d826      	bhi.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004c98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c9c:	d02b      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004c9e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ca2:	d820      	bhi.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004ca4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ca8:	d012      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004caa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cae:	d81a      	bhi.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d022      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004cb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cb8:	d115      	bne.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cbe:	3308      	adds	r3, #8
 8004cc0:	2101      	movs	r1, #1
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f001 f9a6 	bl	8006014 <RCCEx_PLL2_Config>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004cce:	e015      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cd4:	3328      	adds	r3, #40	; 0x28
 8004cd6:	2101      	movs	r1, #1
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f001 fa4d 	bl	8006178 <RCCEx_PLL3_Config>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004ce4:	e00a      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004cec:	e006      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004cee:	bf00      	nop
 8004cf0:	e004      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004cf2:	bf00      	nop
 8004cf4:	e002      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004cf6:	bf00      	nop
 8004cf8:	e000      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004cfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cfc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d10b      	bne.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004d04:	4ba3      	ldr	r3, [pc, #652]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d08:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004d14:	4a9f      	ldr	r2, [pc, #636]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d16:	430b      	orrs	r3, r1
 8004d18:	6593      	str	r3, [r2, #88]	; 0x58
 8004d1a:	e003      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d20:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004d30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004d34:	2300      	movs	r3, #0
 8004d36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004d3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004d3e:	460b      	mov	r3, r1
 8004d40:	4313      	orrs	r3, r2
 8004d42:	d037      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d4e:	d00e      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004d50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d54:	d816      	bhi.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d018      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004d5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d5e:	d111      	bne.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d60:	4b8c      	ldr	r3, [pc, #560]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d64:	4a8b      	ldr	r2, [pc, #556]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004d6c:	e00f      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d72:	3308      	adds	r3, #8
 8004d74:	2101      	movs	r1, #1
 8004d76:	4618      	mov	r0, r3
 8004d78:	f001 f94c 	bl	8006014 <RCCEx_PLL2_Config>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004d82:	e004      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004d8a:	e000      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004d8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10a      	bne.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004d96:	4b7f      	ldr	r3, [pc, #508]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d9a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da4:	4a7b      	ldr	r2, [pc, #492]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004da6:	430b      	orrs	r3, r1
 8004da8:	6513      	str	r3, [r2, #80]	; 0x50
 8004daa:	e003      	b.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004db0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dbc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004dc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004dca:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004dce:	460b      	mov	r3, r1
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	d039      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dda:	2b03      	cmp	r3, #3
 8004ddc:	d81c      	bhi.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004dde:	a201      	add	r2, pc, #4	; (adr r2, 8004de4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de4:	08004e21 	.word	0x08004e21
 8004de8:	08004df5 	.word	0x08004df5
 8004dec:	08004e03 	.word	0x08004e03
 8004df0:	08004e21 	.word	0x08004e21
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004df4:	4b67      	ldr	r3, [pc, #412]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df8:	4a66      	ldr	r2, [pc, #408]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004dfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dfe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004e00:	e00f      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e06:	3308      	adds	r3, #8
 8004e08:	2102      	movs	r1, #2
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f001 f902 	bl	8006014 <RCCEx_PLL2_Config>
 8004e10:	4603      	mov	r3, r0
 8004e12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004e16:	e004      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004e1e:	e000      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004e20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10a      	bne.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004e2a:	4b5a      	ldr	r3, [pc, #360]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e2e:	f023 0103 	bic.w	r1, r3, #3
 8004e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e38:	4a56      	ldr	r2, [pc, #344]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e3a:	430b      	orrs	r3, r1
 8004e3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e3e:	e003      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e44:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e50:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004e54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e58:	2300      	movs	r3, #0
 8004e5a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e5e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004e62:	460b      	mov	r3, r1
 8004e64:	4313      	orrs	r3, r2
 8004e66:	f000 809f 	beq.w	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e6a:	4b4b      	ldr	r3, [pc, #300]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a4a      	ldr	r2, [pc, #296]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e74:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e76:	f7fc faf7 	bl	8001468 <HAL_GetTick>
 8004e7a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e7e:	e00b      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e80:	f7fc faf2 	bl	8001468 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	2b64      	cmp	r3, #100	; 0x64
 8004e8e:	d903      	bls.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004e96:	e005      	b.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e98:	4b3f      	ldr	r3, [pc, #252]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d0ed      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004ea4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d179      	bne.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004eac:	4b39      	ldr	r3, [pc, #228]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004eae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004eb4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004eb8:	4053      	eors	r3, r2
 8004eba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d015      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ec2:	4b34      	ldr	r3, [pc, #208]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ece:	4b31      	ldr	r3, [pc, #196]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed2:	4a30      	ldr	r2, [pc, #192]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ed8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004eda:	4b2e      	ldr	r3, [pc, #184]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ede:	4a2d      	ldr	r2, [pc, #180]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ee0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ee4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004ee6:	4a2b      	ldr	r2, [pc, #172]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ee8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004eec:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ef2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004ef6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004efa:	d118      	bne.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004efc:	f7fc fab4 	bl	8001468 <HAL_GetTick>
 8004f00:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f04:	e00d      	b.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f06:	f7fc faaf 	bl	8001468 <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004f10:	1ad2      	subs	r2, r2, r3
 8004f12:	f241 3388 	movw	r3, #5000	; 0x1388
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d903      	bls.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8004f20:	e005      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f22:	4b1c      	ldr	r3, [pc, #112]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f26:	f003 0302 	and.w	r3, r3, #2
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d0eb      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004f2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d129      	bne.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f3a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004f3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f46:	d10e      	bne.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004f48:	4b12      	ldr	r3, [pc, #72]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f54:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004f58:	091a      	lsrs	r2, r3, #4
 8004f5a:	4b10      	ldr	r3, [pc, #64]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	4a0d      	ldr	r2, [pc, #52]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f60:	430b      	orrs	r3, r1
 8004f62:	6113      	str	r3, [r2, #16]
 8004f64:	e005      	b.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004f66:	4b0b      	ldr	r3, [pc, #44]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	4a0a      	ldr	r2, [pc, #40]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f6c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004f70:	6113      	str	r3, [r2, #16]
 8004f72:	4b08      	ldr	r3, [pc, #32]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f74:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004f7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f82:	4a04      	ldr	r2, [pc, #16]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f84:	430b      	orrs	r3, r1
 8004f86:	6713      	str	r3, [r2, #112]	; 0x70
 8004f88:	e00e      	b.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f8e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8004f92:	e009      	b.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004f94:	58024400 	.word	0x58024400
 8004f98:	58024800 	.word	0x58024800
 8004f9c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fa0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004fa4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb0:	f002 0301 	and.w	r3, r2, #1
 8004fb4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004fb8:	2300      	movs	r3, #0
 8004fba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004fbe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	f000 8089 	beq.w	80050dc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fd0:	2b28      	cmp	r3, #40	; 0x28
 8004fd2:	d86b      	bhi.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004fd4:	a201      	add	r2, pc, #4	; (adr r2, 8004fdc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fda:	bf00      	nop
 8004fdc:	080050b5 	.word	0x080050b5
 8004fe0:	080050ad 	.word	0x080050ad
 8004fe4:	080050ad 	.word	0x080050ad
 8004fe8:	080050ad 	.word	0x080050ad
 8004fec:	080050ad 	.word	0x080050ad
 8004ff0:	080050ad 	.word	0x080050ad
 8004ff4:	080050ad 	.word	0x080050ad
 8004ff8:	080050ad 	.word	0x080050ad
 8004ffc:	08005081 	.word	0x08005081
 8005000:	080050ad 	.word	0x080050ad
 8005004:	080050ad 	.word	0x080050ad
 8005008:	080050ad 	.word	0x080050ad
 800500c:	080050ad 	.word	0x080050ad
 8005010:	080050ad 	.word	0x080050ad
 8005014:	080050ad 	.word	0x080050ad
 8005018:	080050ad 	.word	0x080050ad
 800501c:	08005097 	.word	0x08005097
 8005020:	080050ad 	.word	0x080050ad
 8005024:	080050ad 	.word	0x080050ad
 8005028:	080050ad 	.word	0x080050ad
 800502c:	080050ad 	.word	0x080050ad
 8005030:	080050ad 	.word	0x080050ad
 8005034:	080050ad 	.word	0x080050ad
 8005038:	080050ad 	.word	0x080050ad
 800503c:	080050b5 	.word	0x080050b5
 8005040:	080050ad 	.word	0x080050ad
 8005044:	080050ad 	.word	0x080050ad
 8005048:	080050ad 	.word	0x080050ad
 800504c:	080050ad 	.word	0x080050ad
 8005050:	080050ad 	.word	0x080050ad
 8005054:	080050ad 	.word	0x080050ad
 8005058:	080050ad 	.word	0x080050ad
 800505c:	080050b5 	.word	0x080050b5
 8005060:	080050ad 	.word	0x080050ad
 8005064:	080050ad 	.word	0x080050ad
 8005068:	080050ad 	.word	0x080050ad
 800506c:	080050ad 	.word	0x080050ad
 8005070:	080050ad 	.word	0x080050ad
 8005074:	080050ad 	.word	0x080050ad
 8005078:	080050ad 	.word	0x080050ad
 800507c:	080050b5 	.word	0x080050b5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005080:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005084:	3308      	adds	r3, #8
 8005086:	2101      	movs	r1, #1
 8005088:	4618      	mov	r0, r3
 800508a:	f000 ffc3 	bl	8006014 <RCCEx_PLL2_Config>
 800508e:	4603      	mov	r3, r0
 8005090:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005094:	e00f      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005096:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800509a:	3328      	adds	r3, #40	; 0x28
 800509c:	2101      	movs	r1, #1
 800509e:	4618      	mov	r0, r3
 80050a0:	f001 f86a 	bl	8006178 <RCCEx_PLL3_Config>
 80050a4:	4603      	mov	r3, r0
 80050a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80050aa:	e004      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80050b2:	e000      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80050b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10a      	bne.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80050be:	4bbf      	ldr	r3, [pc, #764]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80050c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050c2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80050c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050cc:	4abb      	ldr	r2, [pc, #748]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80050ce:	430b      	orrs	r3, r1
 80050d0:	6553      	str	r3, [r2, #84]	; 0x54
 80050d2:	e003      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80050dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e4:	f002 0302 	and.w	r3, r2, #2
 80050e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80050ec:	2300      	movs	r3, #0
 80050ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80050f2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80050f6:	460b      	mov	r3, r1
 80050f8:	4313      	orrs	r3, r2
 80050fa:	d041      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80050fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005100:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005102:	2b05      	cmp	r3, #5
 8005104:	d824      	bhi.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005106:	a201      	add	r2, pc, #4	; (adr r2, 800510c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800510c:	08005159 	.word	0x08005159
 8005110:	08005125 	.word	0x08005125
 8005114:	0800513b 	.word	0x0800513b
 8005118:	08005159 	.word	0x08005159
 800511c:	08005159 	.word	0x08005159
 8005120:	08005159 	.word	0x08005159
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005124:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005128:	3308      	adds	r3, #8
 800512a:	2101      	movs	r1, #1
 800512c:	4618      	mov	r0, r3
 800512e:	f000 ff71 	bl	8006014 <RCCEx_PLL2_Config>
 8005132:	4603      	mov	r3, r0
 8005134:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005138:	e00f      	b.n	800515a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800513a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800513e:	3328      	adds	r3, #40	; 0x28
 8005140:	2101      	movs	r1, #1
 8005142:	4618      	mov	r0, r3
 8005144:	f001 f818 	bl	8006178 <RCCEx_PLL3_Config>
 8005148:	4603      	mov	r3, r0
 800514a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800514e:	e004      	b.n	800515a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005156:	e000      	b.n	800515a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005158:	bf00      	nop
    }

    if (ret == HAL_OK)
 800515a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800515e:	2b00      	cmp	r3, #0
 8005160:	d10a      	bne.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005162:	4b96      	ldr	r3, [pc, #600]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005166:	f023 0107 	bic.w	r1, r3, #7
 800516a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800516e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005170:	4a92      	ldr	r2, [pc, #584]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005172:	430b      	orrs	r3, r1
 8005174:	6553      	str	r3, [r2, #84]	; 0x54
 8005176:	e003      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005178:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800517c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005180:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005188:	f002 0304 	and.w	r3, r2, #4
 800518c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005190:	2300      	movs	r3, #0
 8005192:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005196:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800519a:	460b      	mov	r3, r1
 800519c:	4313      	orrs	r3, r2
 800519e:	d044      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80051a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051a8:	2b05      	cmp	r3, #5
 80051aa:	d825      	bhi.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80051ac:	a201      	add	r2, pc, #4	; (adr r2, 80051b4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80051ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b2:	bf00      	nop
 80051b4:	08005201 	.word	0x08005201
 80051b8:	080051cd 	.word	0x080051cd
 80051bc:	080051e3 	.word	0x080051e3
 80051c0:	08005201 	.word	0x08005201
 80051c4:	08005201 	.word	0x08005201
 80051c8:	08005201 	.word	0x08005201
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80051cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051d0:	3308      	adds	r3, #8
 80051d2:	2101      	movs	r1, #1
 80051d4:	4618      	mov	r0, r3
 80051d6:	f000 ff1d 	bl	8006014 <RCCEx_PLL2_Config>
 80051da:	4603      	mov	r3, r0
 80051dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80051e0:	e00f      	b.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80051e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051e6:	3328      	adds	r3, #40	; 0x28
 80051e8:	2101      	movs	r1, #1
 80051ea:	4618      	mov	r0, r3
 80051ec:	f000 ffc4 	bl	8006178 <RCCEx_PLL3_Config>
 80051f0:	4603      	mov	r3, r0
 80051f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80051f6:	e004      	b.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80051fe:	e000      	b.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005200:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005202:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005206:	2b00      	cmp	r3, #0
 8005208:	d10b      	bne.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800520a:	4b6c      	ldr	r3, [pc, #432]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800520c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800520e:	f023 0107 	bic.w	r1, r3, #7
 8005212:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005216:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800521a:	4a68      	ldr	r2, [pc, #416]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800521c:	430b      	orrs	r3, r1
 800521e:	6593      	str	r3, [r2, #88]	; 0x58
 8005220:	e003      	b.n	800522a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005222:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005226:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800522a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800522e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005232:	f002 0320 	and.w	r3, r2, #32
 8005236:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800523a:	2300      	movs	r3, #0
 800523c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005240:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005244:	460b      	mov	r3, r1
 8005246:	4313      	orrs	r3, r2
 8005248:	d055      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800524a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800524e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005252:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005256:	d033      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005258:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800525c:	d82c      	bhi.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800525e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005262:	d02f      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005268:	d826      	bhi.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800526a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800526e:	d02b      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005270:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005274:	d820      	bhi.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005276:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800527a:	d012      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800527c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005280:	d81a      	bhi.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005282:	2b00      	cmp	r3, #0
 8005284:	d022      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005286:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800528a:	d115      	bne.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800528c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005290:	3308      	adds	r3, #8
 8005292:	2100      	movs	r1, #0
 8005294:	4618      	mov	r0, r3
 8005296:	f000 febd 	bl	8006014 <RCCEx_PLL2_Config>
 800529a:	4603      	mov	r3, r0
 800529c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80052a0:	e015      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80052a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052a6:	3328      	adds	r3, #40	; 0x28
 80052a8:	2102      	movs	r1, #2
 80052aa:	4618      	mov	r0, r3
 80052ac:	f000 ff64 	bl	8006178 <RCCEx_PLL3_Config>
 80052b0:	4603      	mov	r3, r0
 80052b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80052b6:	e00a      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80052be:	e006      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80052c0:	bf00      	nop
 80052c2:	e004      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80052c4:	bf00      	nop
 80052c6:	e002      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80052c8:	bf00      	nop
 80052ca:	e000      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80052cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10b      	bne.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052d6:	4b39      	ldr	r3, [pc, #228]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80052d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052da:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80052de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052e6:	4a35      	ldr	r2, [pc, #212]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80052e8:	430b      	orrs	r3, r1
 80052ea:	6553      	str	r3, [r2, #84]	; 0x54
 80052ec:	e003      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80052f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fe:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005302:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005306:	2300      	movs	r3, #0
 8005308:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800530c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005310:	460b      	mov	r3, r1
 8005312:	4313      	orrs	r3, r2
 8005314:	d058      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005316:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800531a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800531e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005322:	d033      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005324:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005328:	d82c      	bhi.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800532a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800532e:	d02f      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005334:	d826      	bhi.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005336:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800533a:	d02b      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800533c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005340:	d820      	bhi.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005342:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005346:	d012      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005348:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800534c:	d81a      	bhi.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800534e:	2b00      	cmp	r3, #0
 8005350:	d022      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005356:	d115      	bne.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005358:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800535c:	3308      	adds	r3, #8
 800535e:	2100      	movs	r1, #0
 8005360:	4618      	mov	r0, r3
 8005362:	f000 fe57 	bl	8006014 <RCCEx_PLL2_Config>
 8005366:	4603      	mov	r3, r0
 8005368:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800536c:	e015      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800536e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005372:	3328      	adds	r3, #40	; 0x28
 8005374:	2102      	movs	r1, #2
 8005376:	4618      	mov	r0, r3
 8005378:	f000 fefe 	bl	8006178 <RCCEx_PLL3_Config>
 800537c:	4603      	mov	r3, r0
 800537e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005382:	e00a      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800538a:	e006      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800538c:	bf00      	nop
 800538e:	e004      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005390:	bf00      	nop
 8005392:	e002      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005394:	bf00      	nop
 8005396:	e000      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005398:	bf00      	nop
    }

    if (ret == HAL_OK)
 800539a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d10e      	bne.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80053a2:	4b06      	ldr	r3, [pc, #24]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80053a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053a6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80053aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053b2:	4a02      	ldr	r2, [pc, #8]	; (80053bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80053b4:	430b      	orrs	r3, r1
 80053b6:	6593      	str	r3, [r2, #88]	; 0x58
 80053b8:	e006      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80053ba:	bf00      	nop
 80053bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80053c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80053d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80053d8:	2300      	movs	r3, #0
 80053da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80053de:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80053e2:	460b      	mov	r3, r1
 80053e4:	4313      	orrs	r3, r2
 80053e6:	d055      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80053e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80053f0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80053f4:	d033      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80053f6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80053fa:	d82c      	bhi.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80053fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005400:	d02f      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005402:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005406:	d826      	bhi.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005408:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800540c:	d02b      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800540e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005412:	d820      	bhi.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005414:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005418:	d012      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800541a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800541e:	d81a      	bhi.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005420:	2b00      	cmp	r3, #0
 8005422:	d022      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005424:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005428:	d115      	bne.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800542a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800542e:	3308      	adds	r3, #8
 8005430:	2100      	movs	r1, #0
 8005432:	4618      	mov	r0, r3
 8005434:	f000 fdee 	bl	8006014 <RCCEx_PLL2_Config>
 8005438:	4603      	mov	r3, r0
 800543a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800543e:	e015      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005440:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005444:	3328      	adds	r3, #40	; 0x28
 8005446:	2102      	movs	r1, #2
 8005448:	4618      	mov	r0, r3
 800544a:	f000 fe95 	bl	8006178 <RCCEx_PLL3_Config>
 800544e:	4603      	mov	r3, r0
 8005450:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005454:	e00a      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800545c:	e006      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800545e:	bf00      	nop
 8005460:	e004      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005462:	bf00      	nop
 8005464:	e002      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005466:	bf00      	nop
 8005468:	e000      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800546a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800546c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005470:	2b00      	cmp	r3, #0
 8005472:	d10b      	bne.n	800548c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005474:	4ba1      	ldr	r3, [pc, #644]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005478:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800547c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005480:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005484:	4a9d      	ldr	r2, [pc, #628]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005486:	430b      	orrs	r3, r1
 8005488:	6593      	str	r3, [r2, #88]	; 0x58
 800548a:	e003      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800548c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005490:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005494:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549c:	f002 0308 	and.w	r3, r2, #8
 80054a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80054a4:	2300      	movs	r3, #0
 80054a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80054aa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80054ae:	460b      	mov	r3, r1
 80054b0:	4313      	orrs	r3, r2
 80054b2:	d01e      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80054b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054c0:	d10c      	bne.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80054c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054c6:	3328      	adds	r3, #40	; 0x28
 80054c8:	2102      	movs	r1, #2
 80054ca:	4618      	mov	r0, r3
 80054cc:	f000 fe54 	bl	8006178 <RCCEx_PLL3_Config>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d002      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80054dc:	4b87      	ldr	r3, [pc, #540]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80054e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054ec:	4a83      	ldr	r2, [pc, #524]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054ee:	430b      	orrs	r3, r1
 80054f0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80054f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fa:	f002 0310 	and.w	r3, r2, #16
 80054fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005502:	2300      	movs	r3, #0
 8005504:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005508:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800550c:	460b      	mov	r3, r1
 800550e:	4313      	orrs	r3, r2
 8005510:	d01e      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005512:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005516:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800551a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800551e:	d10c      	bne.n	800553a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005520:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005524:	3328      	adds	r3, #40	; 0x28
 8005526:	2102      	movs	r1, #2
 8005528:	4618      	mov	r0, r3
 800552a:	f000 fe25 	bl	8006178 <RCCEx_PLL3_Config>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d002      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800553a:	4b70      	ldr	r3, [pc, #448]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800553c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800553e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005542:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005546:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800554a:	4a6c      	ldr	r2, [pc, #432]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800554c:	430b      	orrs	r3, r1
 800554e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005550:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005558:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800555c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005560:	2300      	movs	r3, #0
 8005562:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005566:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800556a:	460b      	mov	r3, r1
 800556c:	4313      	orrs	r3, r2
 800556e:	d03e      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005570:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005574:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005578:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800557c:	d022      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800557e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005582:	d81b      	bhi.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005584:	2b00      	cmp	r3, #0
 8005586:	d003      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800558c:	d00b      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800558e:	e015      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005590:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005594:	3308      	adds	r3, #8
 8005596:	2100      	movs	r1, #0
 8005598:	4618      	mov	r0, r3
 800559a:	f000 fd3b 	bl	8006014 <RCCEx_PLL2_Config>
 800559e:	4603      	mov	r3, r0
 80055a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80055a4:	e00f      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80055a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055aa:	3328      	adds	r3, #40	; 0x28
 80055ac:	2102      	movs	r1, #2
 80055ae:	4618      	mov	r0, r3
 80055b0:	f000 fde2 	bl	8006178 <RCCEx_PLL3_Config>
 80055b4:	4603      	mov	r3, r0
 80055b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80055ba:	e004      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80055c2:	e000      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80055c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d10b      	bne.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055ce:	4b4b      	ldr	r3, [pc, #300]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055d2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80055d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80055de:	4a47      	ldr	r2, [pc, #284]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055e0:	430b      	orrs	r3, r1
 80055e2:	6593      	str	r3, [r2, #88]	; 0x58
 80055e4:	e003      	b.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80055ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80055fa:	67bb      	str	r3, [r7, #120]	; 0x78
 80055fc:	2300      	movs	r3, #0
 80055fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005600:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005604:	460b      	mov	r3, r1
 8005606:	4313      	orrs	r3, r2
 8005608:	d03b      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800560a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800560e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005612:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005616:	d01f      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005618:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800561c:	d818      	bhi.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800561e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005622:	d003      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005624:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005628:	d007      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800562a:	e011      	b.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800562c:	4b33      	ldr	r3, [pc, #204]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800562e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005630:	4a32      	ldr	r2, [pc, #200]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005632:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005636:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005638:	e00f      	b.n	800565a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800563a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800563e:	3328      	adds	r3, #40	; 0x28
 8005640:	2101      	movs	r1, #1
 8005642:	4618      	mov	r0, r3
 8005644:	f000 fd98 	bl	8006178 <RCCEx_PLL3_Config>
 8005648:	4603      	mov	r3, r0
 800564a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800564e:	e004      	b.n	800565a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005656:	e000      	b.n	800565a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005658:	bf00      	nop
    }

    if (ret == HAL_OK)
 800565a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10b      	bne.n	800567a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005662:	4b26      	ldr	r3, [pc, #152]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005666:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800566a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800566e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005672:	4a22      	ldr	r2, [pc, #136]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005674:	430b      	orrs	r3, r1
 8005676:	6553      	str	r3, [r2, #84]	; 0x54
 8005678:	e003      	b.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800567a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800567e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005682:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800568e:	673b      	str	r3, [r7, #112]	; 0x70
 8005690:	2300      	movs	r3, #0
 8005692:	677b      	str	r3, [r7, #116]	; 0x74
 8005694:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005698:	460b      	mov	r3, r1
 800569a:	4313      	orrs	r3, r2
 800569c:	d034      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800569e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d003      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80056a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056ac:	d007      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80056ae:	e011      	b.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056b0:	4b12      	ldr	r3, [pc, #72]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b4:	4a11      	ldr	r2, [pc, #68]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80056bc:	e00e      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80056be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056c2:	3308      	adds	r3, #8
 80056c4:	2102      	movs	r1, #2
 80056c6:	4618      	mov	r0, r3
 80056c8:	f000 fca4 	bl	8006014 <RCCEx_PLL2_Config>
 80056cc:	4603      	mov	r3, r0
 80056ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80056d2:	e003      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80056da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d10d      	bne.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80056e4:	4b05      	ldr	r3, [pc, #20]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80056ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056f2:	4a02      	ldr	r2, [pc, #8]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056f4:	430b      	orrs	r3, r1
 80056f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80056f8:	e006      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80056fa:	bf00      	nop
 80056fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005700:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005704:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005708:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800570c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005710:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005714:	66bb      	str	r3, [r7, #104]	; 0x68
 8005716:	2300      	movs	r3, #0
 8005718:	66fb      	str	r3, [r7, #108]	; 0x6c
 800571a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800571e:	460b      	mov	r3, r1
 8005720:	4313      	orrs	r3, r2
 8005722:	d00c      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005724:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005728:	3328      	adds	r3, #40	; 0x28
 800572a:	2102      	movs	r1, #2
 800572c:	4618      	mov	r0, r3
 800572e:	f000 fd23 	bl	8006178 <RCCEx_PLL3_Config>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d002      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800573e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005746:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800574a:	663b      	str	r3, [r7, #96]	; 0x60
 800574c:	2300      	movs	r3, #0
 800574e:	667b      	str	r3, [r7, #100]	; 0x64
 8005750:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005754:	460b      	mov	r3, r1
 8005756:	4313      	orrs	r3, r2
 8005758:	d038      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800575a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800575e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005762:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005766:	d018      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005768:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800576c:	d811      	bhi.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800576e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005772:	d014      	beq.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005774:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005778:	d80b      	bhi.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800577a:	2b00      	cmp	r3, #0
 800577c:	d011      	beq.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800577e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005782:	d106      	bne.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005784:	4bc3      	ldr	r3, [pc, #780]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005788:	4ac2      	ldr	r2, [pc, #776]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800578a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800578e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005790:	e008      	b.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005798:	e004      	b.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800579a:	bf00      	nop
 800579c:	e002      	b.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800579e:	bf00      	nop
 80057a0:	e000      	b.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80057a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d10b      	bne.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057ac:	4bb9      	ldr	r3, [pc, #740]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80057b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057bc:	4ab5      	ldr	r2, [pc, #724]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057be:	430b      	orrs	r3, r1
 80057c0:	6553      	str	r3, [r2, #84]	; 0x54
 80057c2:	e003      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80057cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80057d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80057da:	2300      	movs	r3, #0
 80057dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057de:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80057e2:	460b      	mov	r3, r1
 80057e4:	4313      	orrs	r3, r2
 80057e6:	d009      	beq.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80057e8:	4baa      	ldr	r3, [pc, #680]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80057f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057f6:	4aa7      	ldr	r2, [pc, #668]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057f8:	430b      	orrs	r3, r1
 80057fa:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80057fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005804:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8005808:	653b      	str	r3, [r7, #80]	; 0x50
 800580a:	2300      	movs	r3, #0
 800580c:	657b      	str	r3, [r7, #84]	; 0x54
 800580e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005812:	460b      	mov	r3, r1
 8005814:	4313      	orrs	r3, r2
 8005816:	d00a      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005818:	4b9e      	ldr	r3, [pc, #632]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8005820:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005824:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005828:	4a9a      	ldr	r2, [pc, #616]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800582a:	430b      	orrs	r3, r1
 800582c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800582e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005836:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800583a:	64bb      	str	r3, [r7, #72]	; 0x48
 800583c:	2300      	movs	r3, #0
 800583e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005840:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005844:	460b      	mov	r3, r1
 8005846:	4313      	orrs	r3, r2
 8005848:	d009      	beq.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800584a:	4b92      	ldr	r3, [pc, #584]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800584c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800584e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8005852:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005856:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005858:	4a8e      	ldr	r2, [pc, #568]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800585a:	430b      	orrs	r3, r1
 800585c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800585e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005866:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800586a:	643b      	str	r3, [r7, #64]	; 0x40
 800586c:	2300      	movs	r3, #0
 800586e:	647b      	str	r3, [r7, #68]	; 0x44
 8005870:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005874:	460b      	mov	r3, r1
 8005876:	4313      	orrs	r3, r2
 8005878:	d00e      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800587a:	4b86      	ldr	r3, [pc, #536]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	4a85      	ldr	r2, [pc, #532]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005880:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005884:	6113      	str	r3, [r2, #16]
 8005886:	4b83      	ldr	r3, [pc, #524]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005888:	6919      	ldr	r1, [r3, #16]
 800588a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800588e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005892:	4a80      	ldr	r2, [pc, #512]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005894:	430b      	orrs	r3, r1
 8005896:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005898:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800589c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80058a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80058a6:	2300      	movs	r3, #0
 80058a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058aa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80058ae:	460b      	mov	r3, r1
 80058b0:	4313      	orrs	r3, r2
 80058b2:	d009      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80058b4:	4b77      	ldr	r3, [pc, #476]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058b8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80058bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058c2:	4a74      	ldr	r2, [pc, #464]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058c4:	430b      	orrs	r3, r1
 80058c6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80058c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80058d4:	633b      	str	r3, [r7, #48]	; 0x30
 80058d6:	2300      	movs	r3, #0
 80058d8:	637b      	str	r3, [r7, #52]	; 0x34
 80058da:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80058de:	460b      	mov	r3, r1
 80058e0:	4313      	orrs	r3, r2
 80058e2:	d00a      	beq.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80058e4:	4b6b      	ldr	r3, [pc, #428]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058e8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80058ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058f4:	4a67      	ldr	r2, [pc, #412]	; (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058f6:	430b      	orrs	r3, r1
 80058f8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80058fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005902:	2100      	movs	r1, #0
 8005904:	62b9      	str	r1, [r7, #40]	; 0x28
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800590c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005910:	460b      	mov	r3, r1
 8005912:	4313      	orrs	r3, r2
 8005914:	d011      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005916:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800591a:	3308      	adds	r3, #8
 800591c:	2100      	movs	r1, #0
 800591e:	4618      	mov	r0, r3
 8005920:	f000 fb78 	bl	8006014 <RCCEx_PLL2_Config>
 8005924:	4603      	mov	r3, r0
 8005926:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800592a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800592e:	2b00      	cmp	r3, #0
 8005930:	d003      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005932:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005936:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800593a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800593e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005942:	2100      	movs	r1, #0
 8005944:	6239      	str	r1, [r7, #32]
 8005946:	f003 0302 	and.w	r3, r3, #2
 800594a:	627b      	str	r3, [r7, #36]	; 0x24
 800594c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005950:	460b      	mov	r3, r1
 8005952:	4313      	orrs	r3, r2
 8005954:	d011      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005956:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800595a:	3308      	adds	r3, #8
 800595c:	2101      	movs	r1, #1
 800595e:	4618      	mov	r0, r3
 8005960:	f000 fb58 	bl	8006014 <RCCEx_PLL2_Config>
 8005964:	4603      	mov	r3, r0
 8005966:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800596a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800596e:	2b00      	cmp	r3, #0
 8005970:	d003      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005972:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005976:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800597a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800597e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005982:	2100      	movs	r1, #0
 8005984:	61b9      	str	r1, [r7, #24]
 8005986:	f003 0304 	and.w	r3, r3, #4
 800598a:	61fb      	str	r3, [r7, #28]
 800598c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005990:	460b      	mov	r3, r1
 8005992:	4313      	orrs	r3, r2
 8005994:	d011      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005996:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800599a:	3308      	adds	r3, #8
 800599c:	2102      	movs	r1, #2
 800599e:	4618      	mov	r0, r3
 80059a0:	f000 fb38 	bl	8006014 <RCCEx_PLL2_Config>
 80059a4:	4603      	mov	r3, r0
 80059a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80059aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d003      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80059ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c2:	2100      	movs	r1, #0
 80059c4:	6139      	str	r1, [r7, #16]
 80059c6:	f003 0308 	and.w	r3, r3, #8
 80059ca:	617b      	str	r3, [r7, #20]
 80059cc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80059d0:	460b      	mov	r3, r1
 80059d2:	4313      	orrs	r3, r2
 80059d4:	d011      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80059d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059da:	3328      	adds	r3, #40	; 0x28
 80059dc:	2100      	movs	r1, #0
 80059de:	4618      	mov	r0, r3
 80059e0:	f000 fbca 	bl	8006178 <RCCEx_PLL3_Config>
 80059e4:	4603      	mov	r3, r0
 80059e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80059ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d003      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80059fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a02:	2100      	movs	r1, #0
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	f003 0310 	and.w	r3, r3, #16
 8005a0a:	60fb      	str	r3, [r7, #12]
 8005a0c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005a10:	460b      	mov	r3, r1
 8005a12:	4313      	orrs	r3, r2
 8005a14:	d011      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a1a:	3328      	adds	r3, #40	; 0x28
 8005a1c:	2101      	movs	r1, #1
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f000 fbaa 	bl	8006178 <RCCEx_PLL3_Config>
 8005a24:	4603      	mov	r3, r0
 8005a26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005a2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d003      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a42:	2100      	movs	r1, #0
 8005a44:	6039      	str	r1, [r7, #0]
 8005a46:	f003 0320 	and.w	r3, r3, #32
 8005a4a:	607b      	str	r3, [r7, #4]
 8005a4c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005a50:	460b      	mov	r3, r1
 8005a52:	4313      	orrs	r3, r2
 8005a54:	d011      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a5a:	3328      	adds	r3, #40	; 0x28
 8005a5c:	2102      	movs	r1, #2
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f000 fb8a 	bl	8006178 <RCCEx_PLL3_Config>
 8005a64:	4603      	mov	r3, r0
 8005a66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8005a6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d003      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8005a7a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d101      	bne.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005a82:	2300      	movs	r3, #0
 8005a84:	e000      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a94:	58024400 	.word	0x58024400

08005a98 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005a9c:	f7fe fd54 	bl	8004548 <HAL_RCC_GetHCLKFreq>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	4b06      	ldr	r3, [pc, #24]	; (8005abc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005aa4:	6a1b      	ldr	r3, [r3, #32]
 8005aa6:	091b      	lsrs	r3, r3, #4
 8005aa8:	f003 0307 	and.w	r3, r3, #7
 8005aac:	4904      	ldr	r1, [pc, #16]	; (8005ac0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005aae:	5ccb      	ldrb	r3, [r1, r3]
 8005ab0:	f003 031f 	and.w	r3, r3, #31
 8005ab4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	58024400 	.word	0x58024400
 8005ac0:	0801ac68 	.word	0x0801ac68

08005ac4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b089      	sub	sp, #36	; 0x24
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005acc:	4ba1      	ldr	r3, [pc, #644]	; (8005d54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad0:	f003 0303 	and.w	r3, r3, #3
 8005ad4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005ad6:	4b9f      	ldr	r3, [pc, #636]	; (8005d54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ada:	0b1b      	lsrs	r3, r3, #12
 8005adc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ae0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005ae2:	4b9c      	ldr	r3, [pc, #624]	; (8005d54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae6:	091b      	lsrs	r3, r3, #4
 8005ae8:	f003 0301 	and.w	r3, r3, #1
 8005aec:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005aee:	4b99      	ldr	r3, [pc, #612]	; (8005d54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af2:	08db      	lsrs	r3, r3, #3
 8005af4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	fb02 f303 	mul.w	r3, r2, r3
 8005afe:	ee07 3a90 	vmov	s15, r3
 8005b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b06:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f000 8111 	beq.w	8005d34 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	f000 8083 	beq.w	8005c20 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	f200 80a1 	bhi.w	8005c64 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d003      	beq.n	8005b30 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d056      	beq.n	8005bdc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005b2e:	e099      	b.n	8005c64 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b30:	4b88      	ldr	r3, [pc, #544]	; (8005d54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0320 	and.w	r3, r3, #32
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d02d      	beq.n	8005b98 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b3c:	4b85      	ldr	r3, [pc, #532]	; (8005d54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	08db      	lsrs	r3, r3, #3
 8005b42:	f003 0303 	and.w	r3, r3, #3
 8005b46:	4a84      	ldr	r2, [pc, #528]	; (8005d58 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005b48:	fa22 f303 	lsr.w	r3, r2, r3
 8005b4c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	ee07 3a90 	vmov	s15, r3
 8005b54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	ee07 3a90 	vmov	s15, r3
 8005b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b66:	4b7b      	ldr	r3, [pc, #492]	; (8005d54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b6e:	ee07 3a90 	vmov	s15, r3
 8005b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b76:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b7a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005d5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b92:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005b96:	e087      	b.n	8005ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	ee07 3a90 	vmov	s15, r3
 8005b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ba2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005d60 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005ba6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005baa:	4b6a      	ldr	r3, [pc, #424]	; (8005d54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bb2:	ee07 3a90 	vmov	s15, r3
 8005bb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bba:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bbe:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005d5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005bc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005bda:	e065      	b.n	8005ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	ee07 3a90 	vmov	s15, r3
 8005be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005be6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005d64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005bea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bee:	4b59      	ldr	r3, [pc, #356]	; (8005d54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bf6:	ee07 3a90 	vmov	s15, r3
 8005bfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c02:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005d5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c1e:	e043      	b.n	8005ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	ee07 3a90 	vmov	s15, r3
 8005c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c2a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005d68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005c2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c32:	4b48      	ldr	r3, [pc, #288]	; (8005d54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c3a:	ee07 3a90 	vmov	s15, r3
 8005c3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c42:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c46:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005d5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c62:	e021      	b.n	8005ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	ee07 3a90 	vmov	s15, r3
 8005c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c6e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005d64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005c72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c76:	4b37      	ldr	r3, [pc, #220]	; (8005d54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c7e:	ee07 3a90 	vmov	s15, r3
 8005c82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c86:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c8a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005d5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ca2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ca6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005ca8:	4b2a      	ldr	r3, [pc, #168]	; (8005d54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cac:	0a5b      	lsrs	r3, r3, #9
 8005cae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cb2:	ee07 3a90 	vmov	s15, r3
 8005cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005cbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005cc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cce:	ee17 2a90 	vmov	r2, s15
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005cd6:	4b1f      	ldr	r3, [pc, #124]	; (8005d54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cda:	0c1b      	lsrs	r3, r3, #16
 8005cdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ce0:	ee07 3a90 	vmov	s15, r3
 8005ce4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ce8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005cec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005cf0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cfc:	ee17 2a90 	vmov	r2, s15
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005d04:	4b13      	ldr	r3, [pc, #76]	; (8005d54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d08:	0e1b      	lsrs	r3, r3, #24
 8005d0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d0e:	ee07 3a90 	vmov	s15, r3
 8005d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d2a:	ee17 2a90 	vmov	r2, s15
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005d32:	e008      	b.n	8005d46 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	609a      	str	r2, [r3, #8]
}
 8005d46:	bf00      	nop
 8005d48:	3724      	adds	r7, #36	; 0x24
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop
 8005d54:	58024400 	.word	0x58024400
 8005d58:	03d09000 	.word	0x03d09000
 8005d5c:	46000000 	.word	0x46000000
 8005d60:	4c742400 	.word	0x4c742400
 8005d64:	4a742400 	.word	0x4a742400
 8005d68:	4af42400 	.word	0x4af42400

08005d6c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b089      	sub	sp, #36	; 0x24
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d74:	4ba1      	ldr	r3, [pc, #644]	; (8005ffc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d78:	f003 0303 	and.w	r3, r3, #3
 8005d7c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005d7e:	4b9f      	ldr	r3, [pc, #636]	; (8005ffc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d82:	0d1b      	lsrs	r3, r3, #20
 8005d84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d88:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005d8a:	4b9c      	ldr	r3, [pc, #624]	; (8005ffc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d8e:	0a1b      	lsrs	r3, r3, #8
 8005d90:	f003 0301 	and.w	r3, r3, #1
 8005d94:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005d96:	4b99      	ldr	r3, [pc, #612]	; (8005ffc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d9a:	08db      	lsrs	r3, r3, #3
 8005d9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005da0:	693a      	ldr	r2, [r7, #16]
 8005da2:	fb02 f303 	mul.w	r3, r2, r3
 8005da6:	ee07 3a90 	vmov	s15, r3
 8005daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f000 8111 	beq.w	8005fdc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	f000 8083 	beq.w	8005ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	f200 80a1 	bhi.w	8005f0c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d003      	beq.n	8005dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d056      	beq.n	8005e84 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005dd6:	e099      	b.n	8005f0c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005dd8:	4b88      	ldr	r3, [pc, #544]	; (8005ffc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0320 	and.w	r3, r3, #32
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d02d      	beq.n	8005e40 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005de4:	4b85      	ldr	r3, [pc, #532]	; (8005ffc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	08db      	lsrs	r3, r3, #3
 8005dea:	f003 0303 	and.w	r3, r3, #3
 8005dee:	4a84      	ldr	r2, [pc, #528]	; (8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005df0:	fa22 f303 	lsr.w	r3, r2, r3
 8005df4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	ee07 3a90 	vmov	s15, r3
 8005dfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	ee07 3a90 	vmov	s15, r3
 8005e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e0e:	4b7b      	ldr	r3, [pc, #492]	; (8005ffc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e16:	ee07 3a90 	vmov	s15, r3
 8005e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e22:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006004 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e3a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005e3e:	e087      	b.n	8005f50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	ee07 3a90 	vmov	s15, r3
 8005e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e4a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006008 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005e4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e52:	4b6a      	ldr	r3, [pc, #424]	; (8005ffc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e5a:	ee07 3a90 	vmov	s15, r3
 8005e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e62:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e66:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006004 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e82:	e065      	b.n	8005f50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	ee07 3a90 	vmov	s15, r3
 8005e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e8e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800600c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005e92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e96:	4b59      	ldr	r3, [pc, #356]	; (8005ffc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e9e:	ee07 3a90 	vmov	s15, r3
 8005ea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ea6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005eaa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006004 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005eae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ec2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ec6:	e043      	b.n	8005f50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	ee07 3a90 	vmov	s15, r3
 8005ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ed2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006010 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005ed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eda:	4b48      	ldr	r3, [pc, #288]	; (8005ffc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ee2:	ee07 3a90 	vmov	s15, r3
 8005ee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eea:	ed97 6a03 	vldr	s12, [r7, #12]
 8005eee:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006004 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005efa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005efe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f0a:	e021      	b.n	8005f50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	ee07 3a90 	vmov	s15, r3
 8005f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f16:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800600c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005f1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f1e:	4b37      	ldr	r3, [pc, #220]	; (8005ffc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f26:	ee07 3a90 	vmov	s15, r3
 8005f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f32:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006004 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f4e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005f50:	4b2a      	ldr	r3, [pc, #168]	; (8005ffc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f54:	0a5b      	lsrs	r3, r3, #9
 8005f56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f5a:	ee07 3a90 	vmov	s15, r3
 8005f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f76:	ee17 2a90 	vmov	r2, s15
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005f7e:	4b1f      	ldr	r3, [pc, #124]	; (8005ffc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f82:	0c1b      	lsrs	r3, r3, #16
 8005f84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f88:	ee07 3a90 	vmov	s15, r3
 8005f8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f94:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f98:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fa0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fa4:	ee17 2a90 	vmov	r2, s15
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005fac:	4b13      	ldr	r3, [pc, #76]	; (8005ffc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb0:	0e1b      	lsrs	r3, r3, #24
 8005fb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fb6:	ee07 3a90 	vmov	s15, r3
 8005fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005fc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fd2:	ee17 2a90 	vmov	r2, s15
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005fda:	e008      	b.n	8005fee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	609a      	str	r2, [r3, #8]
}
 8005fee:	bf00      	nop
 8005ff0:	3724      	adds	r7, #36	; 0x24
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	58024400 	.word	0x58024400
 8006000:	03d09000 	.word	0x03d09000
 8006004:	46000000 	.word	0x46000000
 8006008:	4c742400 	.word	0x4c742400
 800600c:	4a742400 	.word	0x4a742400
 8006010:	4af42400 	.word	0x4af42400

08006014 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800601e:	2300      	movs	r3, #0
 8006020:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006022:	4b53      	ldr	r3, [pc, #332]	; (8006170 <RCCEx_PLL2_Config+0x15c>)
 8006024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006026:	f003 0303 	and.w	r3, r3, #3
 800602a:	2b03      	cmp	r3, #3
 800602c:	d101      	bne.n	8006032 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e099      	b.n	8006166 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006032:	4b4f      	ldr	r3, [pc, #316]	; (8006170 <RCCEx_PLL2_Config+0x15c>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a4e      	ldr	r2, [pc, #312]	; (8006170 <RCCEx_PLL2_Config+0x15c>)
 8006038:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800603c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800603e:	f7fb fa13 	bl	8001468 <HAL_GetTick>
 8006042:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006044:	e008      	b.n	8006058 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006046:	f7fb fa0f 	bl	8001468 <HAL_GetTick>
 800604a:	4602      	mov	r2, r0
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	2b02      	cmp	r3, #2
 8006052:	d901      	bls.n	8006058 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006054:	2303      	movs	r3, #3
 8006056:	e086      	b.n	8006166 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006058:	4b45      	ldr	r3, [pc, #276]	; (8006170 <RCCEx_PLL2_Config+0x15c>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1f0      	bne.n	8006046 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006064:	4b42      	ldr	r3, [pc, #264]	; (8006170 <RCCEx_PLL2_Config+0x15c>)
 8006066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006068:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	031b      	lsls	r3, r3, #12
 8006072:	493f      	ldr	r1, [pc, #252]	; (8006170 <RCCEx_PLL2_Config+0x15c>)
 8006074:	4313      	orrs	r3, r2
 8006076:	628b      	str	r3, [r1, #40]	; 0x28
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	3b01      	subs	r3, #1
 800607e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	3b01      	subs	r3, #1
 8006088:	025b      	lsls	r3, r3, #9
 800608a:	b29b      	uxth	r3, r3
 800608c:	431a      	orrs	r2, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	3b01      	subs	r3, #1
 8006094:	041b      	lsls	r3, r3, #16
 8006096:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800609a:	431a      	orrs	r2, r3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	3b01      	subs	r3, #1
 80060a2:	061b      	lsls	r3, r3, #24
 80060a4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80060a8:	4931      	ldr	r1, [pc, #196]	; (8006170 <RCCEx_PLL2_Config+0x15c>)
 80060aa:	4313      	orrs	r3, r2
 80060ac:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80060ae:	4b30      	ldr	r3, [pc, #192]	; (8006170 <RCCEx_PLL2_Config+0x15c>)
 80060b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	695b      	ldr	r3, [r3, #20]
 80060ba:	492d      	ldr	r1, [pc, #180]	; (8006170 <RCCEx_PLL2_Config+0x15c>)
 80060bc:	4313      	orrs	r3, r2
 80060be:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80060c0:	4b2b      	ldr	r3, [pc, #172]	; (8006170 <RCCEx_PLL2_Config+0x15c>)
 80060c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c4:	f023 0220 	bic.w	r2, r3, #32
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	4928      	ldr	r1, [pc, #160]	; (8006170 <RCCEx_PLL2_Config+0x15c>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80060d2:	4b27      	ldr	r3, [pc, #156]	; (8006170 <RCCEx_PLL2_Config+0x15c>)
 80060d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d6:	4a26      	ldr	r2, [pc, #152]	; (8006170 <RCCEx_PLL2_Config+0x15c>)
 80060d8:	f023 0310 	bic.w	r3, r3, #16
 80060dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80060de:	4b24      	ldr	r3, [pc, #144]	; (8006170 <RCCEx_PLL2_Config+0x15c>)
 80060e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060e2:	4b24      	ldr	r3, [pc, #144]	; (8006174 <RCCEx_PLL2_Config+0x160>)
 80060e4:	4013      	ands	r3, r2
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	69d2      	ldr	r2, [r2, #28]
 80060ea:	00d2      	lsls	r2, r2, #3
 80060ec:	4920      	ldr	r1, [pc, #128]	; (8006170 <RCCEx_PLL2_Config+0x15c>)
 80060ee:	4313      	orrs	r3, r2
 80060f0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80060f2:	4b1f      	ldr	r3, [pc, #124]	; (8006170 <RCCEx_PLL2_Config+0x15c>)
 80060f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f6:	4a1e      	ldr	r2, [pc, #120]	; (8006170 <RCCEx_PLL2_Config+0x15c>)
 80060f8:	f043 0310 	orr.w	r3, r3, #16
 80060fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d106      	bne.n	8006112 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006104:	4b1a      	ldr	r3, [pc, #104]	; (8006170 <RCCEx_PLL2_Config+0x15c>)
 8006106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006108:	4a19      	ldr	r2, [pc, #100]	; (8006170 <RCCEx_PLL2_Config+0x15c>)
 800610a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800610e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006110:	e00f      	b.n	8006132 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d106      	bne.n	8006126 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006118:	4b15      	ldr	r3, [pc, #84]	; (8006170 <RCCEx_PLL2_Config+0x15c>)
 800611a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800611c:	4a14      	ldr	r2, [pc, #80]	; (8006170 <RCCEx_PLL2_Config+0x15c>)
 800611e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006122:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006124:	e005      	b.n	8006132 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006126:	4b12      	ldr	r3, [pc, #72]	; (8006170 <RCCEx_PLL2_Config+0x15c>)
 8006128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800612a:	4a11      	ldr	r2, [pc, #68]	; (8006170 <RCCEx_PLL2_Config+0x15c>)
 800612c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006130:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006132:	4b0f      	ldr	r3, [pc, #60]	; (8006170 <RCCEx_PLL2_Config+0x15c>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a0e      	ldr	r2, [pc, #56]	; (8006170 <RCCEx_PLL2_Config+0x15c>)
 8006138:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800613c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800613e:	f7fb f993 	bl	8001468 <HAL_GetTick>
 8006142:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006144:	e008      	b.n	8006158 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006146:	f7fb f98f 	bl	8001468 <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	2b02      	cmp	r3, #2
 8006152:	d901      	bls.n	8006158 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006154:	2303      	movs	r3, #3
 8006156:	e006      	b.n	8006166 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006158:	4b05      	ldr	r3, [pc, #20]	; (8006170 <RCCEx_PLL2_Config+0x15c>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d0f0      	beq.n	8006146 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006164:	7bfb      	ldrb	r3, [r7, #15]
}
 8006166:	4618      	mov	r0, r3
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	58024400 	.word	0x58024400
 8006174:	ffff0007 	.word	0xffff0007

08006178 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006182:	2300      	movs	r3, #0
 8006184:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006186:	4b53      	ldr	r3, [pc, #332]	; (80062d4 <RCCEx_PLL3_Config+0x15c>)
 8006188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618a:	f003 0303 	and.w	r3, r3, #3
 800618e:	2b03      	cmp	r3, #3
 8006190:	d101      	bne.n	8006196 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e099      	b.n	80062ca <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006196:	4b4f      	ldr	r3, [pc, #316]	; (80062d4 <RCCEx_PLL3_Config+0x15c>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a4e      	ldr	r2, [pc, #312]	; (80062d4 <RCCEx_PLL3_Config+0x15c>)
 800619c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061a2:	f7fb f961 	bl	8001468 <HAL_GetTick>
 80061a6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80061a8:	e008      	b.n	80061bc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80061aa:	f7fb f95d 	bl	8001468 <HAL_GetTick>
 80061ae:	4602      	mov	r2, r0
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	2b02      	cmp	r3, #2
 80061b6:	d901      	bls.n	80061bc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80061b8:	2303      	movs	r3, #3
 80061ba:	e086      	b.n	80062ca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80061bc:	4b45      	ldr	r3, [pc, #276]	; (80062d4 <RCCEx_PLL3_Config+0x15c>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1f0      	bne.n	80061aa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80061c8:	4b42      	ldr	r3, [pc, #264]	; (80062d4 <RCCEx_PLL3_Config+0x15c>)
 80061ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061cc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	051b      	lsls	r3, r3, #20
 80061d6:	493f      	ldr	r1, [pc, #252]	; (80062d4 <RCCEx_PLL3_Config+0x15c>)
 80061d8:	4313      	orrs	r3, r2
 80061da:	628b      	str	r3, [r1, #40]	; 0x28
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	3b01      	subs	r3, #1
 80061e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	3b01      	subs	r3, #1
 80061ec:	025b      	lsls	r3, r3, #9
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	431a      	orrs	r2, r3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	3b01      	subs	r3, #1
 80061f8:	041b      	lsls	r3, r3, #16
 80061fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80061fe:	431a      	orrs	r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	3b01      	subs	r3, #1
 8006206:	061b      	lsls	r3, r3, #24
 8006208:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800620c:	4931      	ldr	r1, [pc, #196]	; (80062d4 <RCCEx_PLL3_Config+0x15c>)
 800620e:	4313      	orrs	r3, r2
 8006210:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006212:	4b30      	ldr	r3, [pc, #192]	; (80062d4 <RCCEx_PLL3_Config+0x15c>)
 8006214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006216:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	492d      	ldr	r1, [pc, #180]	; (80062d4 <RCCEx_PLL3_Config+0x15c>)
 8006220:	4313      	orrs	r3, r2
 8006222:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006224:	4b2b      	ldr	r3, [pc, #172]	; (80062d4 <RCCEx_PLL3_Config+0x15c>)
 8006226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006228:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	699b      	ldr	r3, [r3, #24]
 8006230:	4928      	ldr	r1, [pc, #160]	; (80062d4 <RCCEx_PLL3_Config+0x15c>)
 8006232:	4313      	orrs	r3, r2
 8006234:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006236:	4b27      	ldr	r3, [pc, #156]	; (80062d4 <RCCEx_PLL3_Config+0x15c>)
 8006238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623a:	4a26      	ldr	r2, [pc, #152]	; (80062d4 <RCCEx_PLL3_Config+0x15c>)
 800623c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006240:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006242:	4b24      	ldr	r3, [pc, #144]	; (80062d4 <RCCEx_PLL3_Config+0x15c>)
 8006244:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006246:	4b24      	ldr	r3, [pc, #144]	; (80062d8 <RCCEx_PLL3_Config+0x160>)
 8006248:	4013      	ands	r3, r2
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	69d2      	ldr	r2, [r2, #28]
 800624e:	00d2      	lsls	r2, r2, #3
 8006250:	4920      	ldr	r1, [pc, #128]	; (80062d4 <RCCEx_PLL3_Config+0x15c>)
 8006252:	4313      	orrs	r3, r2
 8006254:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006256:	4b1f      	ldr	r3, [pc, #124]	; (80062d4 <RCCEx_PLL3_Config+0x15c>)
 8006258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800625a:	4a1e      	ldr	r2, [pc, #120]	; (80062d4 <RCCEx_PLL3_Config+0x15c>)
 800625c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006260:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d106      	bne.n	8006276 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006268:	4b1a      	ldr	r3, [pc, #104]	; (80062d4 <RCCEx_PLL3_Config+0x15c>)
 800626a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626c:	4a19      	ldr	r2, [pc, #100]	; (80062d4 <RCCEx_PLL3_Config+0x15c>)
 800626e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006272:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006274:	e00f      	b.n	8006296 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	2b01      	cmp	r3, #1
 800627a:	d106      	bne.n	800628a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800627c:	4b15      	ldr	r3, [pc, #84]	; (80062d4 <RCCEx_PLL3_Config+0x15c>)
 800627e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006280:	4a14      	ldr	r2, [pc, #80]	; (80062d4 <RCCEx_PLL3_Config+0x15c>)
 8006282:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006286:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006288:	e005      	b.n	8006296 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800628a:	4b12      	ldr	r3, [pc, #72]	; (80062d4 <RCCEx_PLL3_Config+0x15c>)
 800628c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628e:	4a11      	ldr	r2, [pc, #68]	; (80062d4 <RCCEx_PLL3_Config+0x15c>)
 8006290:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006294:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006296:	4b0f      	ldr	r3, [pc, #60]	; (80062d4 <RCCEx_PLL3_Config+0x15c>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a0e      	ldr	r2, [pc, #56]	; (80062d4 <RCCEx_PLL3_Config+0x15c>)
 800629c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062a2:	f7fb f8e1 	bl	8001468 <HAL_GetTick>
 80062a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80062a8:	e008      	b.n	80062bc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80062aa:	f7fb f8dd 	bl	8001468 <HAL_GetTick>
 80062ae:	4602      	mov	r2, r0
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	1ad3      	subs	r3, r2, r3
 80062b4:	2b02      	cmp	r3, #2
 80062b6:	d901      	bls.n	80062bc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80062b8:	2303      	movs	r3, #3
 80062ba:	e006      	b.n	80062ca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80062bc:	4b05      	ldr	r3, [pc, #20]	; (80062d4 <RCCEx_PLL3_Config+0x15c>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d0f0      	beq.n	80062aa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80062c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3710      	adds	r7, #16
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	58024400 	.word	0x58024400
 80062d8:	ffff0007 	.word	0xffff0007

080062dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d101      	bne.n	80062ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e049      	b.n	8006382 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d106      	bne.n	8006308 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 f841 	bl	800638a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2202      	movs	r2, #2
 800630c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	3304      	adds	r3, #4
 8006318:	4619      	mov	r1, r3
 800631a:	4610      	mov	r0, r2
 800631c:	f000 fa00 	bl	8006720 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3708      	adds	r7, #8
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}

0800638a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800638a:	b480      	push	{r7}
 800638c:	b083      	sub	sp, #12
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006392:	bf00      	nop
 8006394:	370c      	adds	r7, #12
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
	...

080063a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b085      	sub	sp, #20
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d001      	beq.n	80063b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e054      	b.n	8006462 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2202      	movs	r2, #2
 80063bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	68da      	ldr	r2, [r3, #12]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f042 0201 	orr.w	r2, r2, #1
 80063ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a26      	ldr	r2, [pc, #152]	; (8006470 <HAL_TIM_Base_Start_IT+0xd0>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d022      	beq.n	8006420 <HAL_TIM_Base_Start_IT+0x80>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063e2:	d01d      	beq.n	8006420 <HAL_TIM_Base_Start_IT+0x80>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a22      	ldr	r2, [pc, #136]	; (8006474 <HAL_TIM_Base_Start_IT+0xd4>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d018      	beq.n	8006420 <HAL_TIM_Base_Start_IT+0x80>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a21      	ldr	r2, [pc, #132]	; (8006478 <HAL_TIM_Base_Start_IT+0xd8>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d013      	beq.n	8006420 <HAL_TIM_Base_Start_IT+0x80>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a1f      	ldr	r2, [pc, #124]	; (800647c <HAL_TIM_Base_Start_IT+0xdc>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d00e      	beq.n	8006420 <HAL_TIM_Base_Start_IT+0x80>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a1e      	ldr	r2, [pc, #120]	; (8006480 <HAL_TIM_Base_Start_IT+0xe0>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d009      	beq.n	8006420 <HAL_TIM_Base_Start_IT+0x80>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a1c      	ldr	r2, [pc, #112]	; (8006484 <HAL_TIM_Base_Start_IT+0xe4>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d004      	beq.n	8006420 <HAL_TIM_Base_Start_IT+0x80>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a1b      	ldr	r2, [pc, #108]	; (8006488 <HAL_TIM_Base_Start_IT+0xe8>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d115      	bne.n	800644c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	689a      	ldr	r2, [r3, #8]
 8006426:	4b19      	ldr	r3, [pc, #100]	; (800648c <HAL_TIM_Base_Start_IT+0xec>)
 8006428:	4013      	ands	r3, r2
 800642a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2b06      	cmp	r3, #6
 8006430:	d015      	beq.n	800645e <HAL_TIM_Base_Start_IT+0xbe>
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006438:	d011      	beq.n	800645e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f042 0201 	orr.w	r2, r2, #1
 8006448:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800644a:	e008      	b.n	800645e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f042 0201 	orr.w	r2, r2, #1
 800645a:	601a      	str	r2, [r3, #0]
 800645c:	e000      	b.n	8006460 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800645e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	3714      	adds	r7, #20
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr
 800646e:	bf00      	nop
 8006470:	40010000 	.word	0x40010000
 8006474:	40000400 	.word	0x40000400
 8006478:	40000800 	.word	0x40000800
 800647c:	40000c00 	.word	0x40000c00
 8006480:	40010400 	.word	0x40010400
 8006484:	40001800 	.word	0x40001800
 8006488:	40014000 	.word	0x40014000
 800648c:	00010007 	.word	0x00010007

08006490 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	f003 0302 	and.w	r3, r3, #2
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	d122      	bne.n	80064ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	f003 0302 	and.w	r3, r3, #2
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d11b      	bne.n	80064ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f06f 0202 	mvn.w	r2, #2
 80064bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2201      	movs	r2, #1
 80064c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	f003 0303 	and.w	r3, r3, #3
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d003      	beq.n	80064da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 f905 	bl	80066e2 <HAL_TIM_IC_CaptureCallback>
 80064d8:	e005      	b.n	80064e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 f8f7 	bl	80066ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 f908 	bl	80066f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	f003 0304 	and.w	r3, r3, #4
 80064f6:	2b04      	cmp	r3, #4
 80064f8:	d122      	bne.n	8006540 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	f003 0304 	and.w	r3, r3, #4
 8006504:	2b04      	cmp	r3, #4
 8006506:	d11b      	bne.n	8006540 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f06f 0204 	mvn.w	r2, #4
 8006510:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2202      	movs	r2, #2
 8006516:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006522:	2b00      	cmp	r3, #0
 8006524:	d003      	beq.n	800652e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 f8db 	bl	80066e2 <HAL_TIM_IC_CaptureCallback>
 800652c:	e005      	b.n	800653a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 f8cd 	bl	80066ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 f8de 	bl	80066f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	f003 0308 	and.w	r3, r3, #8
 800654a:	2b08      	cmp	r3, #8
 800654c:	d122      	bne.n	8006594 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	f003 0308 	and.w	r3, r3, #8
 8006558:	2b08      	cmp	r3, #8
 800655a:	d11b      	bne.n	8006594 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f06f 0208 	mvn.w	r2, #8
 8006564:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2204      	movs	r2, #4
 800656a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	69db      	ldr	r3, [r3, #28]
 8006572:	f003 0303 	and.w	r3, r3, #3
 8006576:	2b00      	cmp	r3, #0
 8006578:	d003      	beq.n	8006582 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 f8b1 	bl	80066e2 <HAL_TIM_IC_CaptureCallback>
 8006580:	e005      	b.n	800658e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 f8a3 	bl	80066ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 f8b4 	bl	80066f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	f003 0310 	and.w	r3, r3, #16
 800659e:	2b10      	cmp	r3, #16
 80065a0:	d122      	bne.n	80065e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	f003 0310 	and.w	r3, r3, #16
 80065ac:	2b10      	cmp	r3, #16
 80065ae:	d11b      	bne.n	80065e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f06f 0210 	mvn.w	r2, #16
 80065b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2208      	movs	r2, #8
 80065be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	69db      	ldr	r3, [r3, #28]
 80065c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d003      	beq.n	80065d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 f887 	bl	80066e2 <HAL_TIM_IC_CaptureCallback>
 80065d4:	e005      	b.n	80065e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 f879 	bl	80066ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 f88a 	bl	80066f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	f003 0301 	and.w	r3, r3, #1
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d10e      	bne.n	8006614 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	f003 0301 	and.w	r3, r3, #1
 8006600:	2b01      	cmp	r3, #1
 8006602:	d107      	bne.n	8006614 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f06f 0201 	mvn.w	r2, #1
 800660c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f7fa fade 	bl	8000bd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800661e:	2b80      	cmp	r3, #128	; 0x80
 8006620:	d10e      	bne.n	8006640 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800662c:	2b80      	cmp	r3, #128	; 0x80
 800662e:	d107      	bne.n	8006640 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 f914 	bl	8006868 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800664a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800664e:	d10e      	bne.n	800666e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800665a:	2b80      	cmp	r3, #128	; 0x80
 800665c:	d107      	bne.n	800666e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006666:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 f907 	bl	800687c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006678:	2b40      	cmp	r3, #64	; 0x40
 800667a:	d10e      	bne.n	800669a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006686:	2b40      	cmp	r3, #64	; 0x40
 8006688:	d107      	bne.n	800669a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006692:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 f838 	bl	800670a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	f003 0320 	and.w	r3, r3, #32
 80066a4:	2b20      	cmp	r3, #32
 80066a6:	d10e      	bne.n	80066c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	f003 0320 	and.w	r3, r3, #32
 80066b2:	2b20      	cmp	r3, #32
 80066b4:	d107      	bne.n	80066c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f06f 0220 	mvn.w	r2, #32
 80066be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 f8c7 	bl	8006854 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066c6:	bf00      	nop
 80066c8:	3708      	adds	r7, #8
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}

080066ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066ce:	b480      	push	{r7}
 80066d0:	b083      	sub	sp, #12
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066d6:	bf00      	nop
 80066d8:	370c      	adds	r7, #12
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr

080066e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80066e2:	b480      	push	{r7}
 80066e4:	b083      	sub	sp, #12
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80066ea:	bf00      	nop
 80066ec:	370c      	adds	r7, #12
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr

080066f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80066f6:	b480      	push	{r7}
 80066f8:	b083      	sub	sp, #12
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80066fe:	bf00      	nop
 8006700:	370c      	adds	r7, #12
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr

0800670a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800670a:	b480      	push	{r7}
 800670c:	b083      	sub	sp, #12
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006712:	bf00      	nop
 8006714:	370c      	adds	r7, #12
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
	...

08006720 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006720:	b480      	push	{r7}
 8006722:	b085      	sub	sp, #20
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a40      	ldr	r2, [pc, #256]	; (8006834 <TIM_Base_SetConfig+0x114>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d013      	beq.n	8006760 <TIM_Base_SetConfig+0x40>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800673e:	d00f      	beq.n	8006760 <TIM_Base_SetConfig+0x40>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4a3d      	ldr	r2, [pc, #244]	; (8006838 <TIM_Base_SetConfig+0x118>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d00b      	beq.n	8006760 <TIM_Base_SetConfig+0x40>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a3c      	ldr	r2, [pc, #240]	; (800683c <TIM_Base_SetConfig+0x11c>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d007      	beq.n	8006760 <TIM_Base_SetConfig+0x40>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4a3b      	ldr	r2, [pc, #236]	; (8006840 <TIM_Base_SetConfig+0x120>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d003      	beq.n	8006760 <TIM_Base_SetConfig+0x40>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4a3a      	ldr	r2, [pc, #232]	; (8006844 <TIM_Base_SetConfig+0x124>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d108      	bne.n	8006772 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006766:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	68fa      	ldr	r2, [r7, #12]
 800676e:	4313      	orrs	r3, r2
 8006770:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a2f      	ldr	r2, [pc, #188]	; (8006834 <TIM_Base_SetConfig+0x114>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d01f      	beq.n	80067ba <TIM_Base_SetConfig+0x9a>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006780:	d01b      	beq.n	80067ba <TIM_Base_SetConfig+0x9a>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a2c      	ldr	r2, [pc, #176]	; (8006838 <TIM_Base_SetConfig+0x118>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d017      	beq.n	80067ba <TIM_Base_SetConfig+0x9a>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a2b      	ldr	r2, [pc, #172]	; (800683c <TIM_Base_SetConfig+0x11c>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d013      	beq.n	80067ba <TIM_Base_SetConfig+0x9a>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a2a      	ldr	r2, [pc, #168]	; (8006840 <TIM_Base_SetConfig+0x120>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d00f      	beq.n	80067ba <TIM_Base_SetConfig+0x9a>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a29      	ldr	r2, [pc, #164]	; (8006844 <TIM_Base_SetConfig+0x124>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d00b      	beq.n	80067ba <TIM_Base_SetConfig+0x9a>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a28      	ldr	r2, [pc, #160]	; (8006848 <TIM_Base_SetConfig+0x128>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d007      	beq.n	80067ba <TIM_Base_SetConfig+0x9a>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a27      	ldr	r2, [pc, #156]	; (800684c <TIM_Base_SetConfig+0x12c>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d003      	beq.n	80067ba <TIM_Base_SetConfig+0x9a>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a26      	ldr	r2, [pc, #152]	; (8006850 <TIM_Base_SetConfig+0x130>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d108      	bne.n	80067cc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	695b      	ldr	r3, [r3, #20]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	689a      	ldr	r2, [r3, #8]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a10      	ldr	r2, [pc, #64]	; (8006834 <TIM_Base_SetConfig+0x114>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d00f      	beq.n	8006818 <TIM_Base_SetConfig+0xf8>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a12      	ldr	r2, [pc, #72]	; (8006844 <TIM_Base_SetConfig+0x124>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d00b      	beq.n	8006818 <TIM_Base_SetConfig+0xf8>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a11      	ldr	r2, [pc, #68]	; (8006848 <TIM_Base_SetConfig+0x128>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d007      	beq.n	8006818 <TIM_Base_SetConfig+0xf8>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a10      	ldr	r2, [pc, #64]	; (800684c <TIM_Base_SetConfig+0x12c>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d003      	beq.n	8006818 <TIM_Base_SetConfig+0xf8>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a0f      	ldr	r2, [pc, #60]	; (8006850 <TIM_Base_SetConfig+0x130>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d103      	bne.n	8006820 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	691a      	ldr	r2, [r3, #16]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	615a      	str	r2, [r3, #20]
}
 8006826:	bf00      	nop
 8006828:	3714      	adds	r7, #20
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	40010000 	.word	0x40010000
 8006838:	40000400 	.word	0x40000400
 800683c:	40000800 	.word	0x40000800
 8006840:	40000c00 	.word	0x40000c00
 8006844:	40010400 	.word	0x40010400
 8006848:	40014000 	.word	0x40014000
 800684c:	40014400 	.word	0x40014400
 8006850:	40014800 	.word	0x40014800

08006854 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800685c:	bf00      	nop
 800685e:	370c      	adds	r7, #12
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006870:	bf00      	nop
 8006872:	370c      	adds	r7, #12
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr

0800687c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006884:	bf00      	nop
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d101      	bne.n	80068a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	e042      	b.n	8006928 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d106      	bne.n	80068ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f7fa f9c1 	bl	8000c3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2224      	movs	r2, #36	; 0x24
 80068be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f022 0201 	bic.w	r2, r2, #1
 80068d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 f82c 	bl	8006930 <UART_SetConfig>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d101      	bne.n	80068e2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e022      	b.n	8006928 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d002      	beq.n	80068f0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 fd88 	bl	8007400 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	685a      	ldr	r2, [r3, #4]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	689a      	ldr	r2, [r3, #8]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800690e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f042 0201 	orr.w	r2, r2, #1
 800691e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 fe0f 	bl	8007544 <UART_CheckIdleState>
 8006926:	4603      	mov	r3, r0
}
 8006928:	4618      	mov	r0, r3
 800692a:	3708      	adds	r7, #8
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006930:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006934:	b092      	sub	sp, #72	; 0x48
 8006936:	af00      	add	r7, sp, #0
 8006938:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800693a:	2300      	movs	r3, #0
 800693c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	689a      	ldr	r2, [r3, #8]
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	431a      	orrs	r2, r3
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	695b      	ldr	r3, [r3, #20]
 800694e:	431a      	orrs	r2, r3
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	69db      	ldr	r3, [r3, #28]
 8006954:	4313      	orrs	r3, r2
 8006956:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	4bbe      	ldr	r3, [pc, #760]	; (8006c58 <UART_SetConfig+0x328>)
 8006960:	4013      	ands	r3, r2
 8006962:	697a      	ldr	r2, [r7, #20]
 8006964:	6812      	ldr	r2, [r2, #0]
 8006966:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006968:	430b      	orrs	r3, r1
 800696a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	68da      	ldr	r2, [r3, #12]
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	430a      	orrs	r2, r1
 8006980:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4ab3      	ldr	r2, [pc, #716]	; (8006c5c <UART_SetConfig+0x32c>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d004      	beq.n	800699c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	6a1b      	ldr	r3, [r3, #32]
 8006996:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006998:	4313      	orrs	r3, r2
 800699a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	689a      	ldr	r2, [r3, #8]
 80069a2:	4baf      	ldr	r3, [pc, #700]	; (8006c60 <UART_SetConfig+0x330>)
 80069a4:	4013      	ands	r3, r2
 80069a6:	697a      	ldr	r2, [r7, #20]
 80069a8:	6812      	ldr	r2, [r2, #0]
 80069aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80069ac:	430b      	orrs	r3, r1
 80069ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b6:	f023 010f 	bic.w	r1, r3, #15
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	430a      	orrs	r2, r1
 80069c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4aa6      	ldr	r2, [pc, #664]	; (8006c64 <UART_SetConfig+0x334>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d177      	bne.n	8006ac0 <UART_SetConfig+0x190>
 80069d0:	4ba5      	ldr	r3, [pc, #660]	; (8006c68 <UART_SetConfig+0x338>)
 80069d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069d8:	2b28      	cmp	r3, #40	; 0x28
 80069da:	d86d      	bhi.n	8006ab8 <UART_SetConfig+0x188>
 80069dc:	a201      	add	r2, pc, #4	; (adr r2, 80069e4 <UART_SetConfig+0xb4>)
 80069de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e2:	bf00      	nop
 80069e4:	08006a89 	.word	0x08006a89
 80069e8:	08006ab9 	.word	0x08006ab9
 80069ec:	08006ab9 	.word	0x08006ab9
 80069f0:	08006ab9 	.word	0x08006ab9
 80069f4:	08006ab9 	.word	0x08006ab9
 80069f8:	08006ab9 	.word	0x08006ab9
 80069fc:	08006ab9 	.word	0x08006ab9
 8006a00:	08006ab9 	.word	0x08006ab9
 8006a04:	08006a91 	.word	0x08006a91
 8006a08:	08006ab9 	.word	0x08006ab9
 8006a0c:	08006ab9 	.word	0x08006ab9
 8006a10:	08006ab9 	.word	0x08006ab9
 8006a14:	08006ab9 	.word	0x08006ab9
 8006a18:	08006ab9 	.word	0x08006ab9
 8006a1c:	08006ab9 	.word	0x08006ab9
 8006a20:	08006ab9 	.word	0x08006ab9
 8006a24:	08006a99 	.word	0x08006a99
 8006a28:	08006ab9 	.word	0x08006ab9
 8006a2c:	08006ab9 	.word	0x08006ab9
 8006a30:	08006ab9 	.word	0x08006ab9
 8006a34:	08006ab9 	.word	0x08006ab9
 8006a38:	08006ab9 	.word	0x08006ab9
 8006a3c:	08006ab9 	.word	0x08006ab9
 8006a40:	08006ab9 	.word	0x08006ab9
 8006a44:	08006aa1 	.word	0x08006aa1
 8006a48:	08006ab9 	.word	0x08006ab9
 8006a4c:	08006ab9 	.word	0x08006ab9
 8006a50:	08006ab9 	.word	0x08006ab9
 8006a54:	08006ab9 	.word	0x08006ab9
 8006a58:	08006ab9 	.word	0x08006ab9
 8006a5c:	08006ab9 	.word	0x08006ab9
 8006a60:	08006ab9 	.word	0x08006ab9
 8006a64:	08006aa9 	.word	0x08006aa9
 8006a68:	08006ab9 	.word	0x08006ab9
 8006a6c:	08006ab9 	.word	0x08006ab9
 8006a70:	08006ab9 	.word	0x08006ab9
 8006a74:	08006ab9 	.word	0x08006ab9
 8006a78:	08006ab9 	.word	0x08006ab9
 8006a7c:	08006ab9 	.word	0x08006ab9
 8006a80:	08006ab9 	.word	0x08006ab9
 8006a84:	08006ab1 	.word	0x08006ab1
 8006a88:	2301      	movs	r3, #1
 8006a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a8e:	e222      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006a90:	2304      	movs	r3, #4
 8006a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a96:	e21e      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006a98:	2308      	movs	r3, #8
 8006a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a9e:	e21a      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006aa0:	2310      	movs	r3, #16
 8006aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aa6:	e216      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006aa8:	2320      	movs	r3, #32
 8006aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aae:	e212      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006ab0:	2340      	movs	r3, #64	; 0x40
 8006ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ab6:	e20e      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006ab8:	2380      	movs	r3, #128	; 0x80
 8006aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006abe:	e20a      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a69      	ldr	r2, [pc, #420]	; (8006c6c <UART_SetConfig+0x33c>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d130      	bne.n	8006b2c <UART_SetConfig+0x1fc>
 8006aca:	4b67      	ldr	r3, [pc, #412]	; (8006c68 <UART_SetConfig+0x338>)
 8006acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ace:	f003 0307 	and.w	r3, r3, #7
 8006ad2:	2b05      	cmp	r3, #5
 8006ad4:	d826      	bhi.n	8006b24 <UART_SetConfig+0x1f4>
 8006ad6:	a201      	add	r2, pc, #4	; (adr r2, 8006adc <UART_SetConfig+0x1ac>)
 8006ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006adc:	08006af5 	.word	0x08006af5
 8006ae0:	08006afd 	.word	0x08006afd
 8006ae4:	08006b05 	.word	0x08006b05
 8006ae8:	08006b0d 	.word	0x08006b0d
 8006aec:	08006b15 	.word	0x08006b15
 8006af0:	08006b1d 	.word	0x08006b1d
 8006af4:	2300      	movs	r3, #0
 8006af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006afa:	e1ec      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006afc:	2304      	movs	r3, #4
 8006afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b02:	e1e8      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006b04:	2308      	movs	r3, #8
 8006b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b0a:	e1e4      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006b0c:	2310      	movs	r3, #16
 8006b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b12:	e1e0      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006b14:	2320      	movs	r3, #32
 8006b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b1a:	e1dc      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006b1c:	2340      	movs	r3, #64	; 0x40
 8006b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b22:	e1d8      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006b24:	2380      	movs	r3, #128	; 0x80
 8006b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b2a:	e1d4      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a4f      	ldr	r2, [pc, #316]	; (8006c70 <UART_SetConfig+0x340>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d130      	bne.n	8006b98 <UART_SetConfig+0x268>
 8006b36:	4b4c      	ldr	r3, [pc, #304]	; (8006c68 <UART_SetConfig+0x338>)
 8006b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b3a:	f003 0307 	and.w	r3, r3, #7
 8006b3e:	2b05      	cmp	r3, #5
 8006b40:	d826      	bhi.n	8006b90 <UART_SetConfig+0x260>
 8006b42:	a201      	add	r2, pc, #4	; (adr r2, 8006b48 <UART_SetConfig+0x218>)
 8006b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b48:	08006b61 	.word	0x08006b61
 8006b4c:	08006b69 	.word	0x08006b69
 8006b50:	08006b71 	.word	0x08006b71
 8006b54:	08006b79 	.word	0x08006b79
 8006b58:	08006b81 	.word	0x08006b81
 8006b5c:	08006b89 	.word	0x08006b89
 8006b60:	2300      	movs	r3, #0
 8006b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b66:	e1b6      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006b68:	2304      	movs	r3, #4
 8006b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b6e:	e1b2      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006b70:	2308      	movs	r3, #8
 8006b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b76:	e1ae      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006b78:	2310      	movs	r3, #16
 8006b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b7e:	e1aa      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006b80:	2320      	movs	r3, #32
 8006b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b86:	e1a6      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006b88:	2340      	movs	r3, #64	; 0x40
 8006b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b8e:	e1a2      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006b90:	2380      	movs	r3, #128	; 0x80
 8006b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b96:	e19e      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a35      	ldr	r2, [pc, #212]	; (8006c74 <UART_SetConfig+0x344>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d130      	bne.n	8006c04 <UART_SetConfig+0x2d4>
 8006ba2:	4b31      	ldr	r3, [pc, #196]	; (8006c68 <UART_SetConfig+0x338>)
 8006ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ba6:	f003 0307 	and.w	r3, r3, #7
 8006baa:	2b05      	cmp	r3, #5
 8006bac:	d826      	bhi.n	8006bfc <UART_SetConfig+0x2cc>
 8006bae:	a201      	add	r2, pc, #4	; (adr r2, 8006bb4 <UART_SetConfig+0x284>)
 8006bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb4:	08006bcd 	.word	0x08006bcd
 8006bb8:	08006bd5 	.word	0x08006bd5
 8006bbc:	08006bdd 	.word	0x08006bdd
 8006bc0:	08006be5 	.word	0x08006be5
 8006bc4:	08006bed 	.word	0x08006bed
 8006bc8:	08006bf5 	.word	0x08006bf5
 8006bcc:	2300      	movs	r3, #0
 8006bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bd2:	e180      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006bd4:	2304      	movs	r3, #4
 8006bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bda:	e17c      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006bdc:	2308      	movs	r3, #8
 8006bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006be2:	e178      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006be4:	2310      	movs	r3, #16
 8006be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bea:	e174      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006bec:	2320      	movs	r3, #32
 8006bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bf2:	e170      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006bf4:	2340      	movs	r3, #64	; 0x40
 8006bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bfa:	e16c      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006bfc:	2380      	movs	r3, #128	; 0x80
 8006bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c02:	e168      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a1b      	ldr	r2, [pc, #108]	; (8006c78 <UART_SetConfig+0x348>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d142      	bne.n	8006c94 <UART_SetConfig+0x364>
 8006c0e:	4b16      	ldr	r3, [pc, #88]	; (8006c68 <UART_SetConfig+0x338>)
 8006c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c12:	f003 0307 	and.w	r3, r3, #7
 8006c16:	2b05      	cmp	r3, #5
 8006c18:	d838      	bhi.n	8006c8c <UART_SetConfig+0x35c>
 8006c1a:	a201      	add	r2, pc, #4	; (adr r2, 8006c20 <UART_SetConfig+0x2f0>)
 8006c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c20:	08006c39 	.word	0x08006c39
 8006c24:	08006c41 	.word	0x08006c41
 8006c28:	08006c49 	.word	0x08006c49
 8006c2c:	08006c51 	.word	0x08006c51
 8006c30:	08006c7d 	.word	0x08006c7d
 8006c34:	08006c85 	.word	0x08006c85
 8006c38:	2300      	movs	r3, #0
 8006c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c3e:	e14a      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006c40:	2304      	movs	r3, #4
 8006c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c46:	e146      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006c48:	2308      	movs	r3, #8
 8006c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c4e:	e142      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006c50:	2310      	movs	r3, #16
 8006c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c56:	e13e      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006c58:	cfff69f3 	.word	0xcfff69f3
 8006c5c:	58000c00 	.word	0x58000c00
 8006c60:	11fff4ff 	.word	0x11fff4ff
 8006c64:	40011000 	.word	0x40011000
 8006c68:	58024400 	.word	0x58024400
 8006c6c:	40004400 	.word	0x40004400
 8006c70:	40004800 	.word	0x40004800
 8006c74:	40004c00 	.word	0x40004c00
 8006c78:	40005000 	.word	0x40005000
 8006c7c:	2320      	movs	r3, #32
 8006c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c82:	e128      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006c84:	2340      	movs	r3, #64	; 0x40
 8006c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c8a:	e124      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006c8c:	2380      	movs	r3, #128	; 0x80
 8006c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c92:	e120      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4acb      	ldr	r2, [pc, #812]	; (8006fc8 <UART_SetConfig+0x698>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d176      	bne.n	8006d8c <UART_SetConfig+0x45c>
 8006c9e:	4bcb      	ldr	r3, [pc, #812]	; (8006fcc <UART_SetConfig+0x69c>)
 8006ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ca2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ca6:	2b28      	cmp	r3, #40	; 0x28
 8006ca8:	d86c      	bhi.n	8006d84 <UART_SetConfig+0x454>
 8006caa:	a201      	add	r2, pc, #4	; (adr r2, 8006cb0 <UART_SetConfig+0x380>)
 8006cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb0:	08006d55 	.word	0x08006d55
 8006cb4:	08006d85 	.word	0x08006d85
 8006cb8:	08006d85 	.word	0x08006d85
 8006cbc:	08006d85 	.word	0x08006d85
 8006cc0:	08006d85 	.word	0x08006d85
 8006cc4:	08006d85 	.word	0x08006d85
 8006cc8:	08006d85 	.word	0x08006d85
 8006ccc:	08006d85 	.word	0x08006d85
 8006cd0:	08006d5d 	.word	0x08006d5d
 8006cd4:	08006d85 	.word	0x08006d85
 8006cd8:	08006d85 	.word	0x08006d85
 8006cdc:	08006d85 	.word	0x08006d85
 8006ce0:	08006d85 	.word	0x08006d85
 8006ce4:	08006d85 	.word	0x08006d85
 8006ce8:	08006d85 	.word	0x08006d85
 8006cec:	08006d85 	.word	0x08006d85
 8006cf0:	08006d65 	.word	0x08006d65
 8006cf4:	08006d85 	.word	0x08006d85
 8006cf8:	08006d85 	.word	0x08006d85
 8006cfc:	08006d85 	.word	0x08006d85
 8006d00:	08006d85 	.word	0x08006d85
 8006d04:	08006d85 	.word	0x08006d85
 8006d08:	08006d85 	.word	0x08006d85
 8006d0c:	08006d85 	.word	0x08006d85
 8006d10:	08006d6d 	.word	0x08006d6d
 8006d14:	08006d85 	.word	0x08006d85
 8006d18:	08006d85 	.word	0x08006d85
 8006d1c:	08006d85 	.word	0x08006d85
 8006d20:	08006d85 	.word	0x08006d85
 8006d24:	08006d85 	.word	0x08006d85
 8006d28:	08006d85 	.word	0x08006d85
 8006d2c:	08006d85 	.word	0x08006d85
 8006d30:	08006d75 	.word	0x08006d75
 8006d34:	08006d85 	.word	0x08006d85
 8006d38:	08006d85 	.word	0x08006d85
 8006d3c:	08006d85 	.word	0x08006d85
 8006d40:	08006d85 	.word	0x08006d85
 8006d44:	08006d85 	.word	0x08006d85
 8006d48:	08006d85 	.word	0x08006d85
 8006d4c:	08006d85 	.word	0x08006d85
 8006d50:	08006d7d 	.word	0x08006d7d
 8006d54:	2301      	movs	r3, #1
 8006d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d5a:	e0bc      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006d5c:	2304      	movs	r3, #4
 8006d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d62:	e0b8      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006d64:	2308      	movs	r3, #8
 8006d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d6a:	e0b4      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006d6c:	2310      	movs	r3, #16
 8006d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d72:	e0b0      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006d74:	2320      	movs	r3, #32
 8006d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d7a:	e0ac      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006d7c:	2340      	movs	r3, #64	; 0x40
 8006d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d82:	e0a8      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006d84:	2380      	movs	r3, #128	; 0x80
 8006d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d8a:	e0a4      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a8f      	ldr	r2, [pc, #572]	; (8006fd0 <UART_SetConfig+0x6a0>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d130      	bne.n	8006df8 <UART_SetConfig+0x4c8>
 8006d96:	4b8d      	ldr	r3, [pc, #564]	; (8006fcc <UART_SetConfig+0x69c>)
 8006d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d9a:	f003 0307 	and.w	r3, r3, #7
 8006d9e:	2b05      	cmp	r3, #5
 8006da0:	d826      	bhi.n	8006df0 <UART_SetConfig+0x4c0>
 8006da2:	a201      	add	r2, pc, #4	; (adr r2, 8006da8 <UART_SetConfig+0x478>)
 8006da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da8:	08006dc1 	.word	0x08006dc1
 8006dac:	08006dc9 	.word	0x08006dc9
 8006db0:	08006dd1 	.word	0x08006dd1
 8006db4:	08006dd9 	.word	0x08006dd9
 8006db8:	08006de1 	.word	0x08006de1
 8006dbc:	08006de9 	.word	0x08006de9
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dc6:	e086      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006dc8:	2304      	movs	r3, #4
 8006dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dce:	e082      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006dd0:	2308      	movs	r3, #8
 8006dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dd6:	e07e      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006dd8:	2310      	movs	r3, #16
 8006dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dde:	e07a      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006de0:	2320      	movs	r3, #32
 8006de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006de6:	e076      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006de8:	2340      	movs	r3, #64	; 0x40
 8006dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dee:	e072      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006df0:	2380      	movs	r3, #128	; 0x80
 8006df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006df6:	e06e      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a75      	ldr	r2, [pc, #468]	; (8006fd4 <UART_SetConfig+0x6a4>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d130      	bne.n	8006e64 <UART_SetConfig+0x534>
 8006e02:	4b72      	ldr	r3, [pc, #456]	; (8006fcc <UART_SetConfig+0x69c>)
 8006e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e06:	f003 0307 	and.w	r3, r3, #7
 8006e0a:	2b05      	cmp	r3, #5
 8006e0c:	d826      	bhi.n	8006e5c <UART_SetConfig+0x52c>
 8006e0e:	a201      	add	r2, pc, #4	; (adr r2, 8006e14 <UART_SetConfig+0x4e4>)
 8006e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e14:	08006e2d 	.word	0x08006e2d
 8006e18:	08006e35 	.word	0x08006e35
 8006e1c:	08006e3d 	.word	0x08006e3d
 8006e20:	08006e45 	.word	0x08006e45
 8006e24:	08006e4d 	.word	0x08006e4d
 8006e28:	08006e55 	.word	0x08006e55
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e32:	e050      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006e34:	2304      	movs	r3, #4
 8006e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e3a:	e04c      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006e3c:	2308      	movs	r3, #8
 8006e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e42:	e048      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006e44:	2310      	movs	r3, #16
 8006e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e4a:	e044      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006e4c:	2320      	movs	r3, #32
 8006e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e52:	e040      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006e54:	2340      	movs	r3, #64	; 0x40
 8006e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e5a:	e03c      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006e5c:	2380      	movs	r3, #128	; 0x80
 8006e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e62:	e038      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a5b      	ldr	r2, [pc, #364]	; (8006fd8 <UART_SetConfig+0x6a8>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d130      	bne.n	8006ed0 <UART_SetConfig+0x5a0>
 8006e6e:	4b57      	ldr	r3, [pc, #348]	; (8006fcc <UART_SetConfig+0x69c>)
 8006e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e72:	f003 0307 	and.w	r3, r3, #7
 8006e76:	2b05      	cmp	r3, #5
 8006e78:	d826      	bhi.n	8006ec8 <UART_SetConfig+0x598>
 8006e7a:	a201      	add	r2, pc, #4	; (adr r2, 8006e80 <UART_SetConfig+0x550>)
 8006e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e80:	08006e99 	.word	0x08006e99
 8006e84:	08006ea1 	.word	0x08006ea1
 8006e88:	08006ea9 	.word	0x08006ea9
 8006e8c:	08006eb1 	.word	0x08006eb1
 8006e90:	08006eb9 	.word	0x08006eb9
 8006e94:	08006ec1 	.word	0x08006ec1
 8006e98:	2302      	movs	r3, #2
 8006e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e9e:	e01a      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006ea0:	2304      	movs	r3, #4
 8006ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ea6:	e016      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006ea8:	2308      	movs	r3, #8
 8006eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eae:	e012      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006eb0:	2310      	movs	r3, #16
 8006eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eb6:	e00e      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006eb8:	2320      	movs	r3, #32
 8006eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ebe:	e00a      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006ec0:	2340      	movs	r3, #64	; 0x40
 8006ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ec6:	e006      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006ec8:	2380      	movs	r3, #128	; 0x80
 8006eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ece:	e002      	b.n	8006ed6 <UART_SetConfig+0x5a6>
 8006ed0:	2380      	movs	r3, #128	; 0x80
 8006ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a3f      	ldr	r2, [pc, #252]	; (8006fd8 <UART_SetConfig+0x6a8>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	f040 80f8 	bne.w	80070d2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ee2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006ee6:	2b20      	cmp	r3, #32
 8006ee8:	dc46      	bgt.n	8006f78 <UART_SetConfig+0x648>
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	f2c0 8082 	blt.w	8006ff4 <UART_SetConfig+0x6c4>
 8006ef0:	3b02      	subs	r3, #2
 8006ef2:	2b1e      	cmp	r3, #30
 8006ef4:	d87e      	bhi.n	8006ff4 <UART_SetConfig+0x6c4>
 8006ef6:	a201      	add	r2, pc, #4	; (adr r2, 8006efc <UART_SetConfig+0x5cc>)
 8006ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006efc:	08006f7f 	.word	0x08006f7f
 8006f00:	08006ff5 	.word	0x08006ff5
 8006f04:	08006f87 	.word	0x08006f87
 8006f08:	08006ff5 	.word	0x08006ff5
 8006f0c:	08006ff5 	.word	0x08006ff5
 8006f10:	08006ff5 	.word	0x08006ff5
 8006f14:	08006f97 	.word	0x08006f97
 8006f18:	08006ff5 	.word	0x08006ff5
 8006f1c:	08006ff5 	.word	0x08006ff5
 8006f20:	08006ff5 	.word	0x08006ff5
 8006f24:	08006ff5 	.word	0x08006ff5
 8006f28:	08006ff5 	.word	0x08006ff5
 8006f2c:	08006ff5 	.word	0x08006ff5
 8006f30:	08006ff5 	.word	0x08006ff5
 8006f34:	08006fa7 	.word	0x08006fa7
 8006f38:	08006ff5 	.word	0x08006ff5
 8006f3c:	08006ff5 	.word	0x08006ff5
 8006f40:	08006ff5 	.word	0x08006ff5
 8006f44:	08006ff5 	.word	0x08006ff5
 8006f48:	08006ff5 	.word	0x08006ff5
 8006f4c:	08006ff5 	.word	0x08006ff5
 8006f50:	08006ff5 	.word	0x08006ff5
 8006f54:	08006ff5 	.word	0x08006ff5
 8006f58:	08006ff5 	.word	0x08006ff5
 8006f5c:	08006ff5 	.word	0x08006ff5
 8006f60:	08006ff5 	.word	0x08006ff5
 8006f64:	08006ff5 	.word	0x08006ff5
 8006f68:	08006ff5 	.word	0x08006ff5
 8006f6c:	08006ff5 	.word	0x08006ff5
 8006f70:	08006ff5 	.word	0x08006ff5
 8006f74:	08006fe7 	.word	0x08006fe7
 8006f78:	2b40      	cmp	r3, #64	; 0x40
 8006f7a:	d037      	beq.n	8006fec <UART_SetConfig+0x6bc>
 8006f7c:	e03a      	b.n	8006ff4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006f7e:	f7fe fd8b 	bl	8005a98 <HAL_RCCEx_GetD3PCLK1Freq>
 8006f82:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006f84:	e03c      	b.n	8007000 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f7fe fd9a 	bl	8005ac4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f94:	e034      	b.n	8007000 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f96:	f107 0318 	add.w	r3, r7, #24
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f7fe fee6 	bl	8005d6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fa4:	e02c      	b.n	8007000 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fa6:	4b09      	ldr	r3, [pc, #36]	; (8006fcc <UART_SetConfig+0x69c>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f003 0320 	and.w	r3, r3, #32
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d016      	beq.n	8006fe0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006fb2:	4b06      	ldr	r3, [pc, #24]	; (8006fcc <UART_SetConfig+0x69c>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	08db      	lsrs	r3, r3, #3
 8006fb8:	f003 0303 	and.w	r3, r3, #3
 8006fbc:	4a07      	ldr	r2, [pc, #28]	; (8006fdc <UART_SetConfig+0x6ac>)
 8006fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8006fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006fc4:	e01c      	b.n	8007000 <UART_SetConfig+0x6d0>
 8006fc6:	bf00      	nop
 8006fc8:	40011400 	.word	0x40011400
 8006fcc:	58024400 	.word	0x58024400
 8006fd0:	40007800 	.word	0x40007800
 8006fd4:	40007c00 	.word	0x40007c00
 8006fd8:	58000c00 	.word	0x58000c00
 8006fdc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006fe0:	4b9d      	ldr	r3, [pc, #628]	; (8007258 <UART_SetConfig+0x928>)
 8006fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fe4:	e00c      	b.n	8007000 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006fe6:	4b9d      	ldr	r3, [pc, #628]	; (800725c <UART_SetConfig+0x92c>)
 8006fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fea:	e009      	b.n	8007000 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ff2:	e005      	b.n	8007000 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006ffe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007002:	2b00      	cmp	r3, #0
 8007004:	f000 81de 	beq.w	80073c4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700c:	4a94      	ldr	r2, [pc, #592]	; (8007260 <UART_SetConfig+0x930>)
 800700e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007012:	461a      	mov	r2, r3
 8007014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007016:	fbb3 f3f2 	udiv	r3, r3, r2
 800701a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	685a      	ldr	r2, [r3, #4]
 8007020:	4613      	mov	r3, r2
 8007022:	005b      	lsls	r3, r3, #1
 8007024:	4413      	add	r3, r2
 8007026:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007028:	429a      	cmp	r2, r3
 800702a:	d305      	bcc.n	8007038 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007032:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007034:	429a      	cmp	r2, r3
 8007036:	d903      	bls.n	8007040 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800703e:	e1c1      	b.n	80073c4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007042:	2200      	movs	r2, #0
 8007044:	60bb      	str	r3, [r7, #8]
 8007046:	60fa      	str	r2, [r7, #12]
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704c:	4a84      	ldr	r2, [pc, #528]	; (8007260 <UART_SetConfig+0x930>)
 800704e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007052:	b29b      	uxth	r3, r3
 8007054:	2200      	movs	r2, #0
 8007056:	603b      	str	r3, [r7, #0]
 8007058:	607a      	str	r2, [r7, #4]
 800705a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800705e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007062:	f7f9 f98d 	bl	8000380 <__aeabi_uldivmod>
 8007066:	4602      	mov	r2, r0
 8007068:	460b      	mov	r3, r1
 800706a:	4610      	mov	r0, r2
 800706c:	4619      	mov	r1, r3
 800706e:	f04f 0200 	mov.w	r2, #0
 8007072:	f04f 0300 	mov.w	r3, #0
 8007076:	020b      	lsls	r3, r1, #8
 8007078:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800707c:	0202      	lsls	r2, r0, #8
 800707e:	6979      	ldr	r1, [r7, #20]
 8007080:	6849      	ldr	r1, [r1, #4]
 8007082:	0849      	lsrs	r1, r1, #1
 8007084:	2000      	movs	r0, #0
 8007086:	460c      	mov	r4, r1
 8007088:	4605      	mov	r5, r0
 800708a:	eb12 0804 	adds.w	r8, r2, r4
 800708e:	eb43 0905 	adc.w	r9, r3, r5
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	469a      	mov	sl, r3
 800709a:	4693      	mov	fp, r2
 800709c:	4652      	mov	r2, sl
 800709e:	465b      	mov	r3, fp
 80070a0:	4640      	mov	r0, r8
 80070a2:	4649      	mov	r1, r9
 80070a4:	f7f9 f96c 	bl	8000380 <__aeabi_uldivmod>
 80070a8:	4602      	mov	r2, r0
 80070aa:	460b      	mov	r3, r1
 80070ac:	4613      	mov	r3, r2
 80070ae:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80070b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070b6:	d308      	bcc.n	80070ca <UART_SetConfig+0x79a>
 80070b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070be:	d204      	bcs.n	80070ca <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070c6:	60da      	str	r2, [r3, #12]
 80070c8:	e17c      	b.n	80073c4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80070d0:	e178      	b.n	80073c4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	69db      	ldr	r3, [r3, #28]
 80070d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070da:	f040 80c5 	bne.w	8007268 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80070de:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80070e2:	2b20      	cmp	r3, #32
 80070e4:	dc48      	bgt.n	8007178 <UART_SetConfig+0x848>
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	db7b      	blt.n	80071e2 <UART_SetConfig+0x8b2>
 80070ea:	2b20      	cmp	r3, #32
 80070ec:	d879      	bhi.n	80071e2 <UART_SetConfig+0x8b2>
 80070ee:	a201      	add	r2, pc, #4	; (adr r2, 80070f4 <UART_SetConfig+0x7c4>)
 80070f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f4:	0800717f 	.word	0x0800717f
 80070f8:	08007187 	.word	0x08007187
 80070fc:	080071e3 	.word	0x080071e3
 8007100:	080071e3 	.word	0x080071e3
 8007104:	0800718f 	.word	0x0800718f
 8007108:	080071e3 	.word	0x080071e3
 800710c:	080071e3 	.word	0x080071e3
 8007110:	080071e3 	.word	0x080071e3
 8007114:	0800719f 	.word	0x0800719f
 8007118:	080071e3 	.word	0x080071e3
 800711c:	080071e3 	.word	0x080071e3
 8007120:	080071e3 	.word	0x080071e3
 8007124:	080071e3 	.word	0x080071e3
 8007128:	080071e3 	.word	0x080071e3
 800712c:	080071e3 	.word	0x080071e3
 8007130:	080071e3 	.word	0x080071e3
 8007134:	080071af 	.word	0x080071af
 8007138:	080071e3 	.word	0x080071e3
 800713c:	080071e3 	.word	0x080071e3
 8007140:	080071e3 	.word	0x080071e3
 8007144:	080071e3 	.word	0x080071e3
 8007148:	080071e3 	.word	0x080071e3
 800714c:	080071e3 	.word	0x080071e3
 8007150:	080071e3 	.word	0x080071e3
 8007154:	080071e3 	.word	0x080071e3
 8007158:	080071e3 	.word	0x080071e3
 800715c:	080071e3 	.word	0x080071e3
 8007160:	080071e3 	.word	0x080071e3
 8007164:	080071e3 	.word	0x080071e3
 8007168:	080071e3 	.word	0x080071e3
 800716c:	080071e3 	.word	0x080071e3
 8007170:	080071e3 	.word	0x080071e3
 8007174:	080071d5 	.word	0x080071d5
 8007178:	2b40      	cmp	r3, #64	; 0x40
 800717a:	d02e      	beq.n	80071da <UART_SetConfig+0x8aa>
 800717c:	e031      	b.n	80071e2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800717e:	f7fd fa13 	bl	80045a8 <HAL_RCC_GetPCLK1Freq>
 8007182:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007184:	e033      	b.n	80071ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007186:	f7fd fa25 	bl	80045d4 <HAL_RCC_GetPCLK2Freq>
 800718a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800718c:	e02f      	b.n	80071ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800718e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007192:	4618      	mov	r0, r3
 8007194:	f7fe fc96 	bl	8005ac4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800719a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800719c:	e027      	b.n	80071ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800719e:	f107 0318 	add.w	r3, r7, #24
 80071a2:	4618      	mov	r0, r3
 80071a4:	f7fe fde2 	bl	8005d6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80071a8:	69fb      	ldr	r3, [r7, #28]
 80071aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071ac:	e01f      	b.n	80071ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071ae:	4b2d      	ldr	r3, [pc, #180]	; (8007264 <UART_SetConfig+0x934>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f003 0320 	and.w	r3, r3, #32
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d009      	beq.n	80071ce <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80071ba:	4b2a      	ldr	r3, [pc, #168]	; (8007264 <UART_SetConfig+0x934>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	08db      	lsrs	r3, r3, #3
 80071c0:	f003 0303 	and.w	r3, r3, #3
 80071c4:	4a24      	ldr	r2, [pc, #144]	; (8007258 <UART_SetConfig+0x928>)
 80071c6:	fa22 f303 	lsr.w	r3, r2, r3
 80071ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80071cc:	e00f      	b.n	80071ee <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80071ce:	4b22      	ldr	r3, [pc, #136]	; (8007258 <UART_SetConfig+0x928>)
 80071d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071d2:	e00c      	b.n	80071ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80071d4:	4b21      	ldr	r3, [pc, #132]	; (800725c <UART_SetConfig+0x92c>)
 80071d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071d8:	e009      	b.n	80071ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071e0:	e005      	b.n	80071ee <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80071e2:	2300      	movs	r3, #0
 80071e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80071ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80071ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	f000 80e7 	beq.w	80073c4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fa:	4a19      	ldr	r2, [pc, #100]	; (8007260 <UART_SetConfig+0x930>)
 80071fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007200:	461a      	mov	r2, r3
 8007202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007204:	fbb3 f3f2 	udiv	r3, r3, r2
 8007208:	005a      	lsls	r2, r3, #1
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	085b      	lsrs	r3, r3, #1
 8007210:	441a      	add	r2, r3
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	fbb2 f3f3 	udiv	r3, r2, r3
 800721a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800721c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800721e:	2b0f      	cmp	r3, #15
 8007220:	d916      	bls.n	8007250 <UART_SetConfig+0x920>
 8007222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007228:	d212      	bcs.n	8007250 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800722a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800722c:	b29b      	uxth	r3, r3
 800722e:	f023 030f 	bic.w	r3, r3, #15
 8007232:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007236:	085b      	lsrs	r3, r3, #1
 8007238:	b29b      	uxth	r3, r3
 800723a:	f003 0307 	and.w	r3, r3, #7
 800723e:	b29a      	uxth	r2, r3
 8007240:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007242:	4313      	orrs	r3, r2
 8007244:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800724c:	60da      	str	r2, [r3, #12]
 800724e:	e0b9      	b.n	80073c4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007250:	2301      	movs	r3, #1
 8007252:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007256:	e0b5      	b.n	80073c4 <UART_SetConfig+0xa94>
 8007258:	03d09000 	.word	0x03d09000
 800725c:	003d0900 	.word	0x003d0900
 8007260:	0801ac9c 	.word	0x0801ac9c
 8007264:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007268:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800726c:	2b20      	cmp	r3, #32
 800726e:	dc49      	bgt.n	8007304 <UART_SetConfig+0x9d4>
 8007270:	2b00      	cmp	r3, #0
 8007272:	db7c      	blt.n	800736e <UART_SetConfig+0xa3e>
 8007274:	2b20      	cmp	r3, #32
 8007276:	d87a      	bhi.n	800736e <UART_SetConfig+0xa3e>
 8007278:	a201      	add	r2, pc, #4	; (adr r2, 8007280 <UART_SetConfig+0x950>)
 800727a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800727e:	bf00      	nop
 8007280:	0800730b 	.word	0x0800730b
 8007284:	08007313 	.word	0x08007313
 8007288:	0800736f 	.word	0x0800736f
 800728c:	0800736f 	.word	0x0800736f
 8007290:	0800731b 	.word	0x0800731b
 8007294:	0800736f 	.word	0x0800736f
 8007298:	0800736f 	.word	0x0800736f
 800729c:	0800736f 	.word	0x0800736f
 80072a0:	0800732b 	.word	0x0800732b
 80072a4:	0800736f 	.word	0x0800736f
 80072a8:	0800736f 	.word	0x0800736f
 80072ac:	0800736f 	.word	0x0800736f
 80072b0:	0800736f 	.word	0x0800736f
 80072b4:	0800736f 	.word	0x0800736f
 80072b8:	0800736f 	.word	0x0800736f
 80072bc:	0800736f 	.word	0x0800736f
 80072c0:	0800733b 	.word	0x0800733b
 80072c4:	0800736f 	.word	0x0800736f
 80072c8:	0800736f 	.word	0x0800736f
 80072cc:	0800736f 	.word	0x0800736f
 80072d0:	0800736f 	.word	0x0800736f
 80072d4:	0800736f 	.word	0x0800736f
 80072d8:	0800736f 	.word	0x0800736f
 80072dc:	0800736f 	.word	0x0800736f
 80072e0:	0800736f 	.word	0x0800736f
 80072e4:	0800736f 	.word	0x0800736f
 80072e8:	0800736f 	.word	0x0800736f
 80072ec:	0800736f 	.word	0x0800736f
 80072f0:	0800736f 	.word	0x0800736f
 80072f4:	0800736f 	.word	0x0800736f
 80072f8:	0800736f 	.word	0x0800736f
 80072fc:	0800736f 	.word	0x0800736f
 8007300:	08007361 	.word	0x08007361
 8007304:	2b40      	cmp	r3, #64	; 0x40
 8007306:	d02e      	beq.n	8007366 <UART_SetConfig+0xa36>
 8007308:	e031      	b.n	800736e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800730a:	f7fd f94d 	bl	80045a8 <HAL_RCC_GetPCLK1Freq>
 800730e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007310:	e033      	b.n	800737a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007312:	f7fd f95f 	bl	80045d4 <HAL_RCC_GetPCLK2Freq>
 8007316:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007318:	e02f      	b.n	800737a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800731a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800731e:	4618      	mov	r0, r3
 8007320:	f7fe fbd0 	bl	8005ac4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007326:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007328:	e027      	b.n	800737a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800732a:	f107 0318 	add.w	r3, r7, #24
 800732e:	4618      	mov	r0, r3
 8007330:	f7fe fd1c 	bl	8005d6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007338:	e01f      	b.n	800737a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800733a:	4b2d      	ldr	r3, [pc, #180]	; (80073f0 <UART_SetConfig+0xac0>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f003 0320 	and.w	r3, r3, #32
 8007342:	2b00      	cmp	r3, #0
 8007344:	d009      	beq.n	800735a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007346:	4b2a      	ldr	r3, [pc, #168]	; (80073f0 <UART_SetConfig+0xac0>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	08db      	lsrs	r3, r3, #3
 800734c:	f003 0303 	and.w	r3, r3, #3
 8007350:	4a28      	ldr	r2, [pc, #160]	; (80073f4 <UART_SetConfig+0xac4>)
 8007352:	fa22 f303 	lsr.w	r3, r2, r3
 8007356:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007358:	e00f      	b.n	800737a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800735a:	4b26      	ldr	r3, [pc, #152]	; (80073f4 <UART_SetConfig+0xac4>)
 800735c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800735e:	e00c      	b.n	800737a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007360:	4b25      	ldr	r3, [pc, #148]	; (80073f8 <UART_SetConfig+0xac8>)
 8007362:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007364:	e009      	b.n	800737a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007366:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800736a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800736c:	e005      	b.n	800737a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800736e:	2300      	movs	r3, #0
 8007370:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007378:	bf00      	nop
    }

    if (pclk != 0U)
 800737a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800737c:	2b00      	cmp	r3, #0
 800737e:	d021      	beq.n	80073c4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007384:	4a1d      	ldr	r2, [pc, #116]	; (80073fc <UART_SetConfig+0xacc>)
 8007386:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800738a:	461a      	mov	r2, r3
 800738c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800738e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	085b      	lsrs	r3, r3, #1
 8007398:	441a      	add	r2, r3
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	fbb2 f3f3 	udiv	r3, r2, r3
 80073a2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a6:	2b0f      	cmp	r3, #15
 80073a8:	d909      	bls.n	80073be <UART_SetConfig+0xa8e>
 80073aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073b0:	d205      	bcs.n	80073be <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80073b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b4:	b29a      	uxth	r2, r3
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	60da      	str	r2, [r3, #12]
 80073bc:	e002      	b.n	80073c4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	2201      	movs	r2, #1
 80073d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	2200      	movs	r2, #0
 80073d8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	2200      	movs	r2, #0
 80073de:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80073e0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3748      	adds	r7, #72	; 0x48
 80073e8:	46bd      	mov	sp, r7
 80073ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073ee:	bf00      	nop
 80073f0:	58024400 	.word	0x58024400
 80073f4:	03d09000 	.word	0x03d09000
 80073f8:	003d0900 	.word	0x003d0900
 80073fc:	0801ac9c 	.word	0x0801ac9c

08007400 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800740c:	f003 0301 	and.w	r3, r3, #1
 8007410:	2b00      	cmp	r3, #0
 8007412:	d00a      	beq.n	800742a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	430a      	orrs	r2, r1
 8007428:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800742e:	f003 0302 	and.w	r3, r3, #2
 8007432:	2b00      	cmp	r3, #0
 8007434:	d00a      	beq.n	800744c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	430a      	orrs	r2, r1
 800744a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007450:	f003 0304 	and.w	r3, r3, #4
 8007454:	2b00      	cmp	r3, #0
 8007456:	d00a      	beq.n	800746e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	430a      	orrs	r2, r1
 800746c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007472:	f003 0308 	and.w	r3, r3, #8
 8007476:	2b00      	cmp	r3, #0
 8007478:	d00a      	beq.n	8007490 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	430a      	orrs	r2, r1
 800748e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007494:	f003 0310 	and.w	r3, r3, #16
 8007498:	2b00      	cmp	r3, #0
 800749a:	d00a      	beq.n	80074b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	430a      	orrs	r2, r1
 80074b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b6:	f003 0320 	and.w	r3, r3, #32
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00a      	beq.n	80074d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	430a      	orrs	r2, r1
 80074d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d01a      	beq.n	8007516 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	430a      	orrs	r2, r1
 80074f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074fe:	d10a      	bne.n	8007516 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	430a      	orrs	r2, r1
 8007514:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800751a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800751e:	2b00      	cmp	r3, #0
 8007520:	d00a      	beq.n	8007538 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	430a      	orrs	r2, r1
 8007536:	605a      	str	r2, [r3, #4]
  }
}
 8007538:	bf00      	nop
 800753a:	370c      	adds	r7, #12
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr

08007544 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b098      	sub	sp, #96	; 0x60
 8007548:	af02      	add	r7, sp, #8
 800754a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007554:	f7f9 ff88 	bl	8001468 <HAL_GetTick>
 8007558:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f003 0308 	and.w	r3, r3, #8
 8007564:	2b08      	cmp	r3, #8
 8007566:	d12f      	bne.n	80075c8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007568:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800756c:	9300      	str	r3, [sp, #0]
 800756e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007570:	2200      	movs	r2, #0
 8007572:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 f88e 	bl	8007698 <UART_WaitOnFlagUntilTimeout>
 800757c:	4603      	mov	r3, r0
 800757e:	2b00      	cmp	r3, #0
 8007580:	d022      	beq.n	80075c8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800758a:	e853 3f00 	ldrex	r3, [r3]
 800758e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007592:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007596:	653b      	str	r3, [r7, #80]	; 0x50
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	461a      	mov	r2, r3
 800759e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075a0:	647b      	str	r3, [r7, #68]	; 0x44
 80075a2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80075a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075a8:	e841 2300 	strex	r3, r2, [r1]
 80075ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d1e6      	bne.n	8007582 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2220      	movs	r2, #32
 80075b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075c4:	2303      	movs	r3, #3
 80075c6:	e063      	b.n	8007690 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f003 0304 	and.w	r3, r3, #4
 80075d2:	2b04      	cmp	r3, #4
 80075d4:	d149      	bne.n	800766a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075d6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80075da:	9300      	str	r3, [sp, #0]
 80075dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075de:	2200      	movs	r2, #0
 80075e0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 f857 	bl	8007698 <UART_WaitOnFlagUntilTimeout>
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d03c      	beq.n	800766a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f8:	e853 3f00 	ldrex	r3, [r3]
 80075fc:	623b      	str	r3, [r7, #32]
   return(result);
 80075fe:	6a3b      	ldr	r3, [r7, #32]
 8007600:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007604:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	461a      	mov	r2, r3
 800760c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800760e:	633b      	str	r3, [r7, #48]	; 0x30
 8007610:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007612:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007614:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007616:	e841 2300 	strex	r3, r2, [r1]
 800761a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800761c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800761e:	2b00      	cmp	r3, #0
 8007620:	d1e6      	bne.n	80075f0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	3308      	adds	r3, #8
 8007628:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	e853 3f00 	ldrex	r3, [r3]
 8007630:	60fb      	str	r3, [r7, #12]
   return(result);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f023 0301 	bic.w	r3, r3, #1
 8007638:	64bb      	str	r3, [r7, #72]	; 0x48
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	3308      	adds	r3, #8
 8007640:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007642:	61fa      	str	r2, [r7, #28]
 8007644:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007646:	69b9      	ldr	r1, [r7, #24]
 8007648:	69fa      	ldr	r2, [r7, #28]
 800764a:	e841 2300 	strex	r3, r2, [r1]
 800764e:	617b      	str	r3, [r7, #20]
   return(result);
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d1e5      	bne.n	8007622 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2220      	movs	r2, #32
 800765a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007666:	2303      	movs	r3, #3
 8007668:	e012      	b.n	8007690 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2220      	movs	r2, #32
 800766e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2220      	movs	r2, #32
 8007676:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800768e:	2300      	movs	r3, #0
}
 8007690:	4618      	mov	r0, r3
 8007692:	3758      	adds	r7, #88	; 0x58
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	60b9      	str	r1, [r7, #8]
 80076a2:	603b      	str	r3, [r7, #0]
 80076a4:	4613      	mov	r3, r2
 80076a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076a8:	e049      	b.n	800773e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076b0:	d045      	beq.n	800773e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076b2:	f7f9 fed9 	bl	8001468 <HAL_GetTick>
 80076b6:	4602      	mov	r2, r0
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	1ad3      	subs	r3, r2, r3
 80076bc:	69ba      	ldr	r2, [r7, #24]
 80076be:	429a      	cmp	r2, r3
 80076c0:	d302      	bcc.n	80076c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80076c2:	69bb      	ldr	r3, [r7, #24]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d101      	bne.n	80076cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80076c8:	2303      	movs	r3, #3
 80076ca:	e048      	b.n	800775e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f003 0304 	and.w	r3, r3, #4
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d031      	beq.n	800773e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	69db      	ldr	r3, [r3, #28]
 80076e0:	f003 0308 	and.w	r3, r3, #8
 80076e4:	2b08      	cmp	r3, #8
 80076e6:	d110      	bne.n	800770a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	2208      	movs	r2, #8
 80076ee:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80076f0:	68f8      	ldr	r0, [r7, #12]
 80076f2:	f000 f839 	bl	8007768 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2208      	movs	r2, #8
 80076fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2200      	movs	r2, #0
 8007702:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	e029      	b.n	800775e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	69db      	ldr	r3, [r3, #28]
 8007710:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007714:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007718:	d111      	bne.n	800773e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007722:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007724:	68f8      	ldr	r0, [r7, #12]
 8007726:	f000 f81f 	bl	8007768 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2220      	movs	r2, #32
 800772e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2200      	movs	r2, #0
 8007736:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800773a:	2303      	movs	r3, #3
 800773c:	e00f      	b.n	800775e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	69da      	ldr	r2, [r3, #28]
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	4013      	ands	r3, r2
 8007748:	68ba      	ldr	r2, [r7, #8]
 800774a:	429a      	cmp	r2, r3
 800774c:	bf0c      	ite	eq
 800774e:	2301      	moveq	r3, #1
 8007750:	2300      	movne	r3, #0
 8007752:	b2db      	uxtb	r3, r3
 8007754:	461a      	mov	r2, r3
 8007756:	79fb      	ldrb	r3, [r7, #7]
 8007758:	429a      	cmp	r2, r3
 800775a:	d0a6      	beq.n	80076aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800775c:	2300      	movs	r3, #0
}
 800775e:	4618      	mov	r0, r3
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
	...

08007768 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007768:	b480      	push	{r7}
 800776a:	b095      	sub	sp, #84	; 0x54
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007778:	e853 3f00 	ldrex	r3, [r3]
 800777c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800777e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007780:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007784:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	461a      	mov	r2, r3
 800778c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800778e:	643b      	str	r3, [r7, #64]	; 0x40
 8007790:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007792:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007794:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007796:	e841 2300 	strex	r3, r2, [r1]
 800779a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800779c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d1e6      	bne.n	8007770 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	3308      	adds	r3, #8
 80077a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077aa:	6a3b      	ldr	r3, [r7, #32]
 80077ac:	e853 3f00 	ldrex	r3, [r3]
 80077b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80077b2:	69fa      	ldr	r2, [r7, #28]
 80077b4:	4b1e      	ldr	r3, [pc, #120]	; (8007830 <UART_EndRxTransfer+0xc8>)
 80077b6:	4013      	ands	r3, r2
 80077b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	3308      	adds	r3, #8
 80077c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80077c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077ca:	e841 2300 	strex	r3, r2, [r1]
 80077ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d1e5      	bne.n	80077a2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d118      	bne.n	8007810 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	e853 3f00 	ldrex	r3, [r3]
 80077ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	f023 0310 	bic.w	r3, r3, #16
 80077f2:	647b      	str	r3, [r7, #68]	; 0x44
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	461a      	mov	r2, r3
 80077fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077fc:	61bb      	str	r3, [r7, #24]
 80077fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007800:	6979      	ldr	r1, [r7, #20]
 8007802:	69ba      	ldr	r2, [r7, #24]
 8007804:	e841 2300 	strex	r3, r2, [r1]
 8007808:	613b      	str	r3, [r7, #16]
   return(result);
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d1e6      	bne.n	80077de <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2220      	movs	r2, #32
 8007814:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2200      	movs	r2, #0
 8007822:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007824:	bf00      	nop
 8007826:	3754      	adds	r7, #84	; 0x54
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr
 8007830:	effffffe 	.word	0xeffffffe

08007834 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007834:	b480      	push	{r7}
 8007836:	b085      	sub	sp, #20
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007842:	2b01      	cmp	r3, #1
 8007844:	d101      	bne.n	800784a <HAL_UARTEx_DisableFifoMode+0x16>
 8007846:	2302      	movs	r3, #2
 8007848:	e027      	b.n	800789a <HAL_UARTEx_DisableFifoMode+0x66>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2201      	movs	r2, #1
 800784e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2224      	movs	r2, #36	; 0x24
 8007856:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f022 0201 	bic.w	r2, r2, #1
 8007870:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007878:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	68fa      	ldr	r2, [r7, #12]
 8007886:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2220      	movs	r2, #32
 800788c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007898:	2300      	movs	r3, #0
}
 800789a:	4618      	mov	r0, r3
 800789c:	3714      	adds	r7, #20
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr

080078a6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80078a6:	b580      	push	{r7, lr}
 80078a8:	b084      	sub	sp, #16
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
 80078ae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d101      	bne.n	80078be <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80078ba:	2302      	movs	r3, #2
 80078bc:	e02d      	b.n	800791a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2201      	movs	r2, #1
 80078c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2224      	movs	r2, #36	; 0x24
 80078ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f022 0201 	bic.w	r2, r2, #1
 80078e4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	683a      	ldr	r2, [r7, #0]
 80078f6:	430a      	orrs	r2, r1
 80078f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 f850 	bl	80079a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	68fa      	ldr	r2, [r7, #12]
 8007906:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2220      	movs	r2, #32
 800790c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007918:	2300      	movs	r3, #0
}
 800791a:	4618      	mov	r0, r3
 800791c:	3710      	adds	r7, #16
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}

08007922 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007922:	b580      	push	{r7, lr}
 8007924:	b084      	sub	sp, #16
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
 800792a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007932:	2b01      	cmp	r3, #1
 8007934:	d101      	bne.n	800793a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007936:	2302      	movs	r3, #2
 8007938:	e02d      	b.n	8007996 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2201      	movs	r2, #1
 800793e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2224      	movs	r2, #36	; 0x24
 8007946:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	681a      	ldr	r2, [r3, #0]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f022 0201 	bic.w	r2, r2, #1
 8007960:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	683a      	ldr	r2, [r7, #0]
 8007972:	430a      	orrs	r2, r1
 8007974:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 f812 	bl	80079a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	68fa      	ldr	r2, [r7, #12]
 8007982:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2220      	movs	r2, #32
 8007988:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007994:	2300      	movs	r3, #0
}
 8007996:	4618      	mov	r0, r3
 8007998:	3710      	adds	r7, #16
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
	...

080079a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b085      	sub	sp, #20
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d108      	bne.n	80079c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80079c0:	e031      	b.n	8007a26 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80079c2:	2310      	movs	r3, #16
 80079c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80079c6:	2310      	movs	r3, #16
 80079c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	0e5b      	lsrs	r3, r3, #25
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	f003 0307 	and.w	r3, r3, #7
 80079d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	0f5b      	lsrs	r3, r3, #29
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	f003 0307 	and.w	r3, r3, #7
 80079e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80079ea:	7bbb      	ldrb	r3, [r7, #14]
 80079ec:	7b3a      	ldrb	r2, [r7, #12]
 80079ee:	4911      	ldr	r1, [pc, #68]	; (8007a34 <UARTEx_SetNbDataToProcess+0x94>)
 80079f0:	5c8a      	ldrb	r2, [r1, r2]
 80079f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80079f6:	7b3a      	ldrb	r2, [r7, #12]
 80079f8:	490f      	ldr	r1, [pc, #60]	; (8007a38 <UARTEx_SetNbDataToProcess+0x98>)
 80079fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80079fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a00:	b29a      	uxth	r2, r3
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a08:	7bfb      	ldrb	r3, [r7, #15]
 8007a0a:	7b7a      	ldrb	r2, [r7, #13]
 8007a0c:	4909      	ldr	r1, [pc, #36]	; (8007a34 <UARTEx_SetNbDataToProcess+0x94>)
 8007a0e:	5c8a      	ldrb	r2, [r1, r2]
 8007a10:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007a14:	7b7a      	ldrb	r2, [r7, #13]
 8007a16:	4908      	ldr	r1, [pc, #32]	; (8007a38 <UARTEx_SetNbDataToProcess+0x98>)
 8007a18:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a1a:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a1e:	b29a      	uxth	r2, r3
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007a26:	bf00      	nop
 8007a28:	3714      	adds	r7, #20
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr
 8007a32:	bf00      	nop
 8007a34:	0801acb4 	.word	0x0801acb4
 8007a38:	0801acbc 	.word	0x0801acbc

08007a3c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a3c:	b084      	sub	sp, #16
 8007a3e:	b580      	push	{r7, lr}
 8007a40:	b084      	sub	sp, #16
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
 8007a46:	f107 001c 	add.w	r0, r7, #28
 8007a4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d120      	bne.n	8007a96 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a58:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	68da      	ldr	r2, [r3, #12]
 8007a64:	4b2a      	ldr	r3, [pc, #168]	; (8007b10 <USB_CoreInit+0xd4>)
 8007a66:	4013      	ands	r3, r2
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	68db      	ldr	r3, [r3, #12]
 8007a70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007a78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d105      	bne.n	8007a8a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	68db      	ldr	r3, [r3, #12]
 8007a82:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 faac 	bl	8007fe8 <USB_CoreReset>
 8007a90:	4603      	mov	r3, r0
 8007a92:	73fb      	strb	r3, [r7, #15]
 8007a94:	e01a      	b.n	8007acc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 faa0 	bl	8007fe8 <USB_CoreReset>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007aac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d106      	bne.n	8007ac0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	639a      	str	r2, [r3, #56]	; 0x38
 8007abe:	e005      	b.n	8007acc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	d116      	bne.n	8007b00 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ad6:	b29a      	uxth	r2, r3
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007ae0:	4b0c      	ldr	r3, [pc, #48]	; (8007b14 <USB_CoreInit+0xd8>)
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	f043 0206 	orr.w	r2, r3, #6
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	f043 0220 	orr.w	r2, r3, #32
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3710      	adds	r7, #16
 8007b06:	46bd      	mov	sp, r7
 8007b08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b0c:	b004      	add	sp, #16
 8007b0e:	4770      	bx	lr
 8007b10:	ffbdffbf 	.word	0xffbdffbf
 8007b14:	03ee0000 	.word	0x03ee0000

08007b18 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	689b      	ldr	r3, [r3, #8]
 8007b24:	f023 0201 	bic.w	r2, r3, #1
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	370c      	adds	r7, #12
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr

08007b3a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007b3a:	b580      	push	{r7, lr}
 8007b3c:	b084      	sub	sp, #16
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
 8007b42:	460b      	mov	r3, r1
 8007b44:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007b46:	2300      	movs	r3, #0
 8007b48:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	68db      	ldr	r3, [r3, #12]
 8007b4e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007b56:	78fb      	ldrb	r3, [r7, #3]
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d115      	bne.n	8007b88 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007b68:	2001      	movs	r0, #1
 8007b6a:	f7f9 fc89 	bl	8001480 <HAL_Delay>
      ms++;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	3301      	adds	r3, #1
 8007b72:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 fa29 	bl	8007fcc <USB_GetMode>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d01e      	beq.n	8007bbe <USB_SetCurrentMode+0x84>
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2b31      	cmp	r3, #49	; 0x31
 8007b84:	d9f0      	bls.n	8007b68 <USB_SetCurrentMode+0x2e>
 8007b86:	e01a      	b.n	8007bbe <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007b88:	78fb      	ldrb	r3, [r7, #3]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d115      	bne.n	8007bba <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007b9a:	2001      	movs	r0, #1
 8007b9c:	f7f9 fc70 	bl	8001480 <HAL_Delay>
      ms++;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 fa10 	bl	8007fcc <USB_GetMode>
 8007bac:	4603      	mov	r3, r0
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d005      	beq.n	8007bbe <USB_SetCurrentMode+0x84>
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2b31      	cmp	r3, #49	; 0x31
 8007bb6:	d9f0      	bls.n	8007b9a <USB_SetCurrentMode+0x60>
 8007bb8:	e001      	b.n	8007bbe <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e005      	b.n	8007bca <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2b32      	cmp	r3, #50	; 0x32
 8007bc2:	d101      	bne.n	8007bc8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	e000      	b.n	8007bca <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3710      	adds	r7, #16
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
	...

08007bd4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007bd4:	b084      	sub	sp, #16
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b086      	sub	sp, #24
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
 8007bde:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007be2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007be6:	2300      	movs	r3, #0
 8007be8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007bee:	2300      	movs	r3, #0
 8007bf0:	613b      	str	r3, [r7, #16]
 8007bf2:	e009      	b.n	8007c08 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	3340      	adds	r3, #64	; 0x40
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	4413      	add	r3, r2
 8007bfe:	2200      	movs	r2, #0
 8007c00:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	3301      	adds	r3, #1
 8007c06:	613b      	str	r3, [r7, #16]
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	2b0e      	cmp	r3, #14
 8007c0c:	d9f2      	bls.n	8007bf4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007c0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d11c      	bne.n	8007c4e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	68fa      	ldr	r2, [r7, #12]
 8007c1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c22:	f043 0302 	orr.w	r3, r3, #2
 8007c26:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c2c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	601a      	str	r2, [r3, #0]
 8007c4c:	e005      	b.n	8007c5a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c52:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c60:	461a      	mov	r2, r3
 8007c62:	2300      	movs	r3, #0
 8007c64:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c74:	461a      	mov	r2, r3
 8007c76:	680b      	ldr	r3, [r1, #0]
 8007c78:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d10c      	bne.n	8007c9a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d104      	bne.n	8007c90 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007c86:	2100      	movs	r1, #0
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 f965 	bl	8007f58 <USB_SetDevSpeed>
 8007c8e:	e008      	b.n	8007ca2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007c90:	2101      	movs	r1, #1
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 f960 	bl	8007f58 <USB_SetDevSpeed>
 8007c98:	e003      	b.n	8007ca2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007c9a:	2103      	movs	r1, #3
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 f95b 	bl	8007f58 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007ca2:	2110      	movs	r1, #16
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 f8f3 	bl	8007e90 <USB_FlushTxFifo>
 8007caa:	4603      	mov	r3, r0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d001      	beq.n	8007cb4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f000 f91f 	bl	8007ef8 <USB_FlushRxFifo>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d001      	beq.n	8007cc4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cca:	461a      	mov	r2, r3
 8007ccc:	2300      	movs	r3, #0
 8007cce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	2300      	movs	r3, #0
 8007cda:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ce8:	2300      	movs	r3, #0
 8007cea:	613b      	str	r3, [r7, #16]
 8007cec:	e043      	b.n	8007d76 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	015a      	lsls	r2, r3, #5
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	4413      	add	r3, r2
 8007cf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d04:	d118      	bne.n	8007d38 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d10a      	bne.n	8007d22 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	015a      	lsls	r2, r3, #5
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	4413      	add	r3, r2
 8007d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d18:	461a      	mov	r2, r3
 8007d1a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007d1e:	6013      	str	r3, [r2, #0]
 8007d20:	e013      	b.n	8007d4a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	015a      	lsls	r2, r3, #5
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	4413      	add	r3, r2
 8007d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d2e:	461a      	mov	r2, r3
 8007d30:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007d34:	6013      	str	r3, [r2, #0]
 8007d36:	e008      	b.n	8007d4a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	015a      	lsls	r2, r3, #5
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	4413      	add	r3, r2
 8007d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d44:	461a      	mov	r2, r3
 8007d46:	2300      	movs	r3, #0
 8007d48:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	015a      	lsls	r2, r3, #5
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	4413      	add	r3, r2
 8007d52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d56:	461a      	mov	r2, r3
 8007d58:	2300      	movs	r3, #0
 8007d5a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	015a      	lsls	r2, r3, #5
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	4413      	add	r3, r2
 8007d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d68:	461a      	mov	r2, r3
 8007d6a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007d6e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	3301      	adds	r3, #1
 8007d74:	613b      	str	r3, [r7, #16]
 8007d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d78:	693a      	ldr	r2, [r7, #16]
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d3b7      	bcc.n	8007cee <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d7e:	2300      	movs	r3, #0
 8007d80:	613b      	str	r3, [r7, #16]
 8007d82:	e043      	b.n	8007e0c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	015a      	lsls	r2, r3, #5
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	4413      	add	r3, r2
 8007d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d9a:	d118      	bne.n	8007dce <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d10a      	bne.n	8007db8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	015a      	lsls	r2, r3, #5
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	4413      	add	r3, r2
 8007daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dae:	461a      	mov	r2, r3
 8007db0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007db4:	6013      	str	r3, [r2, #0]
 8007db6:	e013      	b.n	8007de0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	015a      	lsls	r2, r3, #5
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	4413      	add	r3, r2
 8007dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007dca:	6013      	str	r3, [r2, #0]
 8007dcc:	e008      	b.n	8007de0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	015a      	lsls	r2, r3, #5
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	4413      	add	r3, r2
 8007dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dda:	461a      	mov	r2, r3
 8007ddc:	2300      	movs	r3, #0
 8007dde:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	015a      	lsls	r2, r3, #5
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	4413      	add	r3, r2
 8007de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dec:	461a      	mov	r2, r3
 8007dee:	2300      	movs	r3, #0
 8007df0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	015a      	lsls	r2, r3, #5
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	4413      	add	r3, r2
 8007dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dfe:	461a      	mov	r2, r3
 8007e00:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007e04:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	3301      	adds	r3, #1
 8007e0a:	613b      	str	r3, [r7, #16]
 8007e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0e:	693a      	ldr	r2, [r7, #16]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d3b7      	bcc.n	8007d84 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e1a:	691b      	ldr	r3, [r3, #16]
 8007e1c:	68fa      	ldr	r2, [r7, #12]
 8007e1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e26:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007e34:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d105      	bne.n	8007e48 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	699b      	ldr	r3, [r3, #24]
 8007e40:	f043 0210 	orr.w	r2, r3, #16
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	699a      	ldr	r2, [r3, #24]
 8007e4c:	4b0e      	ldr	r3, [pc, #56]	; (8007e88 <USB_DevInit+0x2b4>)
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d005      	beq.n	8007e66 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	699b      	ldr	r3, [r3, #24]
 8007e5e:	f043 0208 	orr.w	r2, r3, #8
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007e66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d105      	bne.n	8007e78 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	699a      	ldr	r2, [r3, #24]
 8007e70:	4b06      	ldr	r3, [pc, #24]	; (8007e8c <USB_DevInit+0x2b8>)
 8007e72:	4313      	orrs	r3, r2
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007e78:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3718      	adds	r7, #24
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e84:	b004      	add	sp, #16
 8007e86:	4770      	bx	lr
 8007e88:	803c3800 	.word	0x803c3800
 8007e8c:	40000004 	.word	0x40000004

08007e90 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b085      	sub	sp, #20
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	3301      	adds	r3, #1
 8007ea2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	4a13      	ldr	r2, [pc, #76]	; (8007ef4 <USB_FlushTxFifo+0x64>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d901      	bls.n	8007eb0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007eac:	2303      	movs	r3, #3
 8007eae:	e01b      	b.n	8007ee8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	691b      	ldr	r3, [r3, #16]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	daf2      	bge.n	8007e9e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	019b      	lsls	r3, r3, #6
 8007ec0:	f043 0220 	orr.w	r2, r3, #32
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	3301      	adds	r3, #1
 8007ecc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	4a08      	ldr	r2, [pc, #32]	; (8007ef4 <USB_FlushTxFifo+0x64>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d901      	bls.n	8007eda <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007ed6:	2303      	movs	r3, #3
 8007ed8:	e006      	b.n	8007ee8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	691b      	ldr	r3, [r3, #16]
 8007ede:	f003 0320 	and.w	r3, r3, #32
 8007ee2:	2b20      	cmp	r3, #32
 8007ee4:	d0f0      	beq.n	8007ec8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007ee6:	2300      	movs	r3, #0
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3714      	adds	r7, #20
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr
 8007ef4:	00030d40 	.word	0x00030d40

08007ef8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b085      	sub	sp, #20
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f00:	2300      	movs	r3, #0
 8007f02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	3301      	adds	r3, #1
 8007f08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	4a11      	ldr	r2, [pc, #68]	; (8007f54 <USB_FlushRxFifo+0x5c>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d901      	bls.n	8007f16 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007f12:	2303      	movs	r3, #3
 8007f14:	e018      	b.n	8007f48 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	691b      	ldr	r3, [r3, #16]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	daf2      	bge.n	8007f04 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2210      	movs	r2, #16
 8007f26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	4a08      	ldr	r2, [pc, #32]	; (8007f54 <USB_FlushRxFifo+0x5c>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d901      	bls.n	8007f3a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007f36:	2303      	movs	r3, #3
 8007f38:	e006      	b.n	8007f48 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	691b      	ldr	r3, [r3, #16]
 8007f3e:	f003 0310 	and.w	r3, r3, #16
 8007f42:	2b10      	cmp	r3, #16
 8007f44:	d0f0      	beq.n	8007f28 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007f46:	2300      	movs	r3, #0
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3714      	adds	r7, #20
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr
 8007f54:	00030d40 	.word	0x00030d40

08007f58 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	460b      	mov	r3, r1
 8007f62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	78fb      	ldrb	r3, [r7, #3]
 8007f72:	68f9      	ldr	r1, [r7, #12]
 8007f74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007f7c:	2300      	movs	r3, #0
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3714      	adds	r7, #20
 8007f82:	46bd      	mov	sp, r7
 8007f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f88:	4770      	bx	lr

08007f8a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007f8a:	b480      	push	{r7}
 8007f8c:	b085      	sub	sp, #20
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	68fa      	ldr	r2, [r7, #12]
 8007fa0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007fa4:	f023 0303 	bic.w	r3, r3, #3
 8007fa8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	68fa      	ldr	r2, [r7, #12]
 8007fb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fb8:	f043 0302 	orr.w	r3, r3, #2
 8007fbc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007fbe:	2300      	movs	r3, #0
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3714      	adds	r7, #20
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b083      	sub	sp, #12
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	695b      	ldr	r3, [r3, #20]
 8007fd8:	f003 0301 	and.w	r3, r3, #1
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	370c      	adds	r7, #12
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b085      	sub	sp, #20
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	4a13      	ldr	r2, [pc, #76]	; (800804c <USB_CoreReset+0x64>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d901      	bls.n	8008006 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008002:	2303      	movs	r3, #3
 8008004:	e01b      	b.n	800803e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	691b      	ldr	r3, [r3, #16]
 800800a:	2b00      	cmp	r3, #0
 800800c:	daf2      	bge.n	8007ff4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800800e:	2300      	movs	r3, #0
 8008010:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	691b      	ldr	r3, [r3, #16]
 8008016:	f043 0201 	orr.w	r2, r3, #1
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	3301      	adds	r3, #1
 8008022:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	4a09      	ldr	r2, [pc, #36]	; (800804c <USB_CoreReset+0x64>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d901      	bls.n	8008030 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800802c:	2303      	movs	r3, #3
 800802e:	e006      	b.n	800803e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	691b      	ldr	r3, [r3, #16]
 8008034:	f003 0301 	and.w	r3, r3, #1
 8008038:	2b01      	cmp	r3, #1
 800803a:	d0f0      	beq.n	800801e <USB_CoreReset+0x36>

  return HAL_OK;
 800803c:	2300      	movs	r3, #0
}
 800803e:	4618      	mov	r0, r3
 8008040:	3714      	adds	r7, #20
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr
 800804a:	bf00      	nop
 800804c:	00030d40 	.word	0x00030d40

08008050 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b084      	sub	sp, #16
 8008054:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8008056:	4b98      	ldr	r3, [pc, #608]	; (80082b8 <MX_LWIP_Init+0x268>)
 8008058:	22c0      	movs	r2, #192	; 0xc0
 800805a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800805c:	4b96      	ldr	r3, [pc, #600]	; (80082b8 <MX_LWIP_Init+0x268>)
 800805e:	22a8      	movs	r2, #168	; 0xa8
 8008060:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 10;
 8008062:	4b95      	ldr	r3, [pc, #596]	; (80082b8 <MX_LWIP_Init+0x268>)
 8008064:	220a      	movs	r2, #10
 8008066:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 3;
 8008068:	4b93      	ldr	r3, [pc, #588]	; (80082b8 <MX_LWIP_Init+0x268>)
 800806a:	2203      	movs	r2, #3
 800806c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800806e:	4b93      	ldr	r3, [pc, #588]	; (80082bc <MX_LWIP_Init+0x26c>)
 8008070:	22ff      	movs	r2, #255	; 0xff
 8008072:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8008074:	4b91      	ldr	r3, [pc, #580]	; (80082bc <MX_LWIP_Init+0x26c>)
 8008076:	22ff      	movs	r2, #255	; 0xff
 8008078:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800807a:	4b90      	ldr	r3, [pc, #576]	; (80082bc <MX_LWIP_Init+0x26c>)
 800807c:	22ff      	movs	r2, #255	; 0xff
 800807e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8008080:	4b8e      	ldr	r3, [pc, #568]	; (80082bc <MX_LWIP_Init+0x26c>)
 8008082:	2200      	movs	r2, #0
 8008084:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8008086:	4b8e      	ldr	r3, [pc, #568]	; (80082c0 <MX_LWIP_Init+0x270>)
 8008088:	22c0      	movs	r2, #192	; 0xc0
 800808a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800808c:	4b8c      	ldr	r3, [pc, #560]	; (80082c0 <MX_LWIP_Init+0x270>)
 800808e:	22a8      	movs	r2, #168	; 0xa8
 8008090:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 10;
 8008092:	4b8b      	ldr	r3, [pc, #556]	; (80082c0 <MX_LWIP_Init+0x270>)
 8008094:	220a      	movs	r2, #10
 8008096:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8008098:	4b89      	ldr	r3, [pc, #548]	; (80082c0 <MX_LWIP_Init+0x270>)
 800809a:	2201      	movs	r2, #1
 800809c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800809e:	2100      	movs	r1, #0
 80080a0:	2000      	movs	r0, #0
 80080a2:	f00e f9bd 	bl	8016420 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80080a6:	4b84      	ldr	r3, [pc, #528]	; (80082b8 <MX_LWIP_Init+0x268>)
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	061a      	lsls	r2, r3, #24
 80080ac:	4b82      	ldr	r3, [pc, #520]	; (80082b8 <MX_LWIP_Init+0x268>)
 80080ae:	785b      	ldrb	r3, [r3, #1]
 80080b0:	041b      	lsls	r3, r3, #16
 80080b2:	431a      	orrs	r2, r3
 80080b4:	4b80      	ldr	r3, [pc, #512]	; (80082b8 <MX_LWIP_Init+0x268>)
 80080b6:	789b      	ldrb	r3, [r3, #2]
 80080b8:	021b      	lsls	r3, r3, #8
 80080ba:	4313      	orrs	r3, r2
 80080bc:	4a7e      	ldr	r2, [pc, #504]	; (80082b8 <MX_LWIP_Init+0x268>)
 80080be:	78d2      	ldrb	r2, [r2, #3]
 80080c0:	4313      	orrs	r3, r2
 80080c2:	061a      	lsls	r2, r3, #24
 80080c4:	4b7c      	ldr	r3, [pc, #496]	; (80082b8 <MX_LWIP_Init+0x268>)
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	0619      	lsls	r1, r3, #24
 80080ca:	4b7b      	ldr	r3, [pc, #492]	; (80082b8 <MX_LWIP_Init+0x268>)
 80080cc:	785b      	ldrb	r3, [r3, #1]
 80080ce:	041b      	lsls	r3, r3, #16
 80080d0:	4319      	orrs	r1, r3
 80080d2:	4b79      	ldr	r3, [pc, #484]	; (80082b8 <MX_LWIP_Init+0x268>)
 80080d4:	789b      	ldrb	r3, [r3, #2]
 80080d6:	021b      	lsls	r3, r3, #8
 80080d8:	430b      	orrs	r3, r1
 80080da:	4977      	ldr	r1, [pc, #476]	; (80082b8 <MX_LWIP_Init+0x268>)
 80080dc:	78c9      	ldrb	r1, [r1, #3]
 80080de:	430b      	orrs	r3, r1
 80080e0:	021b      	lsls	r3, r3, #8
 80080e2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80080e6:	431a      	orrs	r2, r3
 80080e8:	4b73      	ldr	r3, [pc, #460]	; (80082b8 <MX_LWIP_Init+0x268>)
 80080ea:	781b      	ldrb	r3, [r3, #0]
 80080ec:	0619      	lsls	r1, r3, #24
 80080ee:	4b72      	ldr	r3, [pc, #456]	; (80082b8 <MX_LWIP_Init+0x268>)
 80080f0:	785b      	ldrb	r3, [r3, #1]
 80080f2:	041b      	lsls	r3, r3, #16
 80080f4:	4319      	orrs	r1, r3
 80080f6:	4b70      	ldr	r3, [pc, #448]	; (80082b8 <MX_LWIP_Init+0x268>)
 80080f8:	789b      	ldrb	r3, [r3, #2]
 80080fa:	021b      	lsls	r3, r3, #8
 80080fc:	430b      	orrs	r3, r1
 80080fe:	496e      	ldr	r1, [pc, #440]	; (80082b8 <MX_LWIP_Init+0x268>)
 8008100:	78c9      	ldrb	r1, [r1, #3]
 8008102:	430b      	orrs	r3, r1
 8008104:	0a1b      	lsrs	r3, r3, #8
 8008106:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800810a:	431a      	orrs	r2, r3
 800810c:	4b6a      	ldr	r3, [pc, #424]	; (80082b8 <MX_LWIP_Init+0x268>)
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	0619      	lsls	r1, r3, #24
 8008112:	4b69      	ldr	r3, [pc, #420]	; (80082b8 <MX_LWIP_Init+0x268>)
 8008114:	785b      	ldrb	r3, [r3, #1]
 8008116:	041b      	lsls	r3, r3, #16
 8008118:	4319      	orrs	r1, r3
 800811a:	4b67      	ldr	r3, [pc, #412]	; (80082b8 <MX_LWIP_Init+0x268>)
 800811c:	789b      	ldrb	r3, [r3, #2]
 800811e:	021b      	lsls	r3, r3, #8
 8008120:	430b      	orrs	r3, r1
 8008122:	4965      	ldr	r1, [pc, #404]	; (80082b8 <MX_LWIP_Init+0x268>)
 8008124:	78c9      	ldrb	r1, [r1, #3]
 8008126:	430b      	orrs	r3, r1
 8008128:	0e1b      	lsrs	r3, r3, #24
 800812a:	4313      	orrs	r3, r2
 800812c:	4a65      	ldr	r2, [pc, #404]	; (80082c4 <MX_LWIP_Init+0x274>)
 800812e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8008130:	4b62      	ldr	r3, [pc, #392]	; (80082bc <MX_LWIP_Init+0x26c>)
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	061a      	lsls	r2, r3, #24
 8008136:	4b61      	ldr	r3, [pc, #388]	; (80082bc <MX_LWIP_Init+0x26c>)
 8008138:	785b      	ldrb	r3, [r3, #1]
 800813a:	041b      	lsls	r3, r3, #16
 800813c:	431a      	orrs	r2, r3
 800813e:	4b5f      	ldr	r3, [pc, #380]	; (80082bc <MX_LWIP_Init+0x26c>)
 8008140:	789b      	ldrb	r3, [r3, #2]
 8008142:	021b      	lsls	r3, r3, #8
 8008144:	4313      	orrs	r3, r2
 8008146:	4a5d      	ldr	r2, [pc, #372]	; (80082bc <MX_LWIP_Init+0x26c>)
 8008148:	78d2      	ldrb	r2, [r2, #3]
 800814a:	4313      	orrs	r3, r2
 800814c:	061a      	lsls	r2, r3, #24
 800814e:	4b5b      	ldr	r3, [pc, #364]	; (80082bc <MX_LWIP_Init+0x26c>)
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	0619      	lsls	r1, r3, #24
 8008154:	4b59      	ldr	r3, [pc, #356]	; (80082bc <MX_LWIP_Init+0x26c>)
 8008156:	785b      	ldrb	r3, [r3, #1]
 8008158:	041b      	lsls	r3, r3, #16
 800815a:	4319      	orrs	r1, r3
 800815c:	4b57      	ldr	r3, [pc, #348]	; (80082bc <MX_LWIP_Init+0x26c>)
 800815e:	789b      	ldrb	r3, [r3, #2]
 8008160:	021b      	lsls	r3, r3, #8
 8008162:	430b      	orrs	r3, r1
 8008164:	4955      	ldr	r1, [pc, #340]	; (80082bc <MX_LWIP_Init+0x26c>)
 8008166:	78c9      	ldrb	r1, [r1, #3]
 8008168:	430b      	orrs	r3, r1
 800816a:	021b      	lsls	r3, r3, #8
 800816c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008170:	431a      	orrs	r2, r3
 8008172:	4b52      	ldr	r3, [pc, #328]	; (80082bc <MX_LWIP_Init+0x26c>)
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	0619      	lsls	r1, r3, #24
 8008178:	4b50      	ldr	r3, [pc, #320]	; (80082bc <MX_LWIP_Init+0x26c>)
 800817a:	785b      	ldrb	r3, [r3, #1]
 800817c:	041b      	lsls	r3, r3, #16
 800817e:	4319      	orrs	r1, r3
 8008180:	4b4e      	ldr	r3, [pc, #312]	; (80082bc <MX_LWIP_Init+0x26c>)
 8008182:	789b      	ldrb	r3, [r3, #2]
 8008184:	021b      	lsls	r3, r3, #8
 8008186:	430b      	orrs	r3, r1
 8008188:	494c      	ldr	r1, [pc, #304]	; (80082bc <MX_LWIP_Init+0x26c>)
 800818a:	78c9      	ldrb	r1, [r1, #3]
 800818c:	430b      	orrs	r3, r1
 800818e:	0a1b      	lsrs	r3, r3, #8
 8008190:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008194:	431a      	orrs	r2, r3
 8008196:	4b49      	ldr	r3, [pc, #292]	; (80082bc <MX_LWIP_Init+0x26c>)
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	0619      	lsls	r1, r3, #24
 800819c:	4b47      	ldr	r3, [pc, #284]	; (80082bc <MX_LWIP_Init+0x26c>)
 800819e:	785b      	ldrb	r3, [r3, #1]
 80081a0:	041b      	lsls	r3, r3, #16
 80081a2:	4319      	orrs	r1, r3
 80081a4:	4b45      	ldr	r3, [pc, #276]	; (80082bc <MX_LWIP_Init+0x26c>)
 80081a6:	789b      	ldrb	r3, [r3, #2]
 80081a8:	021b      	lsls	r3, r3, #8
 80081aa:	430b      	orrs	r3, r1
 80081ac:	4943      	ldr	r1, [pc, #268]	; (80082bc <MX_LWIP_Init+0x26c>)
 80081ae:	78c9      	ldrb	r1, [r1, #3]
 80081b0:	430b      	orrs	r3, r1
 80081b2:	0e1b      	lsrs	r3, r3, #24
 80081b4:	4313      	orrs	r3, r2
 80081b6:	4a44      	ldr	r2, [pc, #272]	; (80082c8 <MX_LWIP_Init+0x278>)
 80081b8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80081ba:	4b41      	ldr	r3, [pc, #260]	; (80082c0 <MX_LWIP_Init+0x270>)
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	061a      	lsls	r2, r3, #24
 80081c0:	4b3f      	ldr	r3, [pc, #252]	; (80082c0 <MX_LWIP_Init+0x270>)
 80081c2:	785b      	ldrb	r3, [r3, #1]
 80081c4:	041b      	lsls	r3, r3, #16
 80081c6:	431a      	orrs	r2, r3
 80081c8:	4b3d      	ldr	r3, [pc, #244]	; (80082c0 <MX_LWIP_Init+0x270>)
 80081ca:	789b      	ldrb	r3, [r3, #2]
 80081cc:	021b      	lsls	r3, r3, #8
 80081ce:	4313      	orrs	r3, r2
 80081d0:	4a3b      	ldr	r2, [pc, #236]	; (80082c0 <MX_LWIP_Init+0x270>)
 80081d2:	78d2      	ldrb	r2, [r2, #3]
 80081d4:	4313      	orrs	r3, r2
 80081d6:	061a      	lsls	r2, r3, #24
 80081d8:	4b39      	ldr	r3, [pc, #228]	; (80082c0 <MX_LWIP_Init+0x270>)
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	0619      	lsls	r1, r3, #24
 80081de:	4b38      	ldr	r3, [pc, #224]	; (80082c0 <MX_LWIP_Init+0x270>)
 80081e0:	785b      	ldrb	r3, [r3, #1]
 80081e2:	041b      	lsls	r3, r3, #16
 80081e4:	4319      	orrs	r1, r3
 80081e6:	4b36      	ldr	r3, [pc, #216]	; (80082c0 <MX_LWIP_Init+0x270>)
 80081e8:	789b      	ldrb	r3, [r3, #2]
 80081ea:	021b      	lsls	r3, r3, #8
 80081ec:	430b      	orrs	r3, r1
 80081ee:	4934      	ldr	r1, [pc, #208]	; (80082c0 <MX_LWIP_Init+0x270>)
 80081f0:	78c9      	ldrb	r1, [r1, #3]
 80081f2:	430b      	orrs	r3, r1
 80081f4:	021b      	lsls	r3, r3, #8
 80081f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80081fa:	431a      	orrs	r2, r3
 80081fc:	4b30      	ldr	r3, [pc, #192]	; (80082c0 <MX_LWIP_Init+0x270>)
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	0619      	lsls	r1, r3, #24
 8008202:	4b2f      	ldr	r3, [pc, #188]	; (80082c0 <MX_LWIP_Init+0x270>)
 8008204:	785b      	ldrb	r3, [r3, #1]
 8008206:	041b      	lsls	r3, r3, #16
 8008208:	4319      	orrs	r1, r3
 800820a:	4b2d      	ldr	r3, [pc, #180]	; (80082c0 <MX_LWIP_Init+0x270>)
 800820c:	789b      	ldrb	r3, [r3, #2]
 800820e:	021b      	lsls	r3, r3, #8
 8008210:	430b      	orrs	r3, r1
 8008212:	492b      	ldr	r1, [pc, #172]	; (80082c0 <MX_LWIP_Init+0x270>)
 8008214:	78c9      	ldrb	r1, [r1, #3]
 8008216:	430b      	orrs	r3, r1
 8008218:	0a1b      	lsrs	r3, r3, #8
 800821a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800821e:	431a      	orrs	r2, r3
 8008220:	4b27      	ldr	r3, [pc, #156]	; (80082c0 <MX_LWIP_Init+0x270>)
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	0619      	lsls	r1, r3, #24
 8008226:	4b26      	ldr	r3, [pc, #152]	; (80082c0 <MX_LWIP_Init+0x270>)
 8008228:	785b      	ldrb	r3, [r3, #1]
 800822a:	041b      	lsls	r3, r3, #16
 800822c:	4319      	orrs	r1, r3
 800822e:	4b24      	ldr	r3, [pc, #144]	; (80082c0 <MX_LWIP_Init+0x270>)
 8008230:	789b      	ldrb	r3, [r3, #2]
 8008232:	021b      	lsls	r3, r3, #8
 8008234:	430b      	orrs	r3, r1
 8008236:	4922      	ldr	r1, [pc, #136]	; (80082c0 <MX_LWIP_Init+0x270>)
 8008238:	78c9      	ldrb	r1, [r1, #3]
 800823a:	430b      	orrs	r3, r1
 800823c:	0e1b      	lsrs	r3, r3, #24
 800823e:	4313      	orrs	r3, r2
 8008240:	4a22      	ldr	r2, [pc, #136]	; (80082cc <MX_LWIP_Init+0x27c>)
 8008242:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8008244:	4b22      	ldr	r3, [pc, #136]	; (80082d0 <MX_LWIP_Init+0x280>)
 8008246:	9302      	str	r3, [sp, #8]
 8008248:	4b22      	ldr	r3, [pc, #136]	; (80082d4 <MX_LWIP_Init+0x284>)
 800824a:	9301      	str	r3, [sp, #4]
 800824c:	2300      	movs	r3, #0
 800824e:	9300      	str	r3, [sp, #0]
 8008250:	4b1e      	ldr	r3, [pc, #120]	; (80082cc <MX_LWIP_Init+0x27c>)
 8008252:	4a1d      	ldr	r2, [pc, #116]	; (80082c8 <MX_LWIP_Init+0x278>)
 8008254:	491b      	ldr	r1, [pc, #108]	; (80082c4 <MX_LWIP_Init+0x274>)
 8008256:	4820      	ldr	r0, [pc, #128]	; (80082d8 <MX_LWIP_Init+0x288>)
 8008258:	f007 fc54 	bl	800fb04 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800825c:	481e      	ldr	r0, [pc, #120]	; (80082d8 <MX_LWIP_Init+0x288>)
 800825e:	f007 fe03 	bl	800fe68 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8008262:	4b1d      	ldr	r3, [pc, #116]	; (80082d8 <MX_LWIP_Init+0x288>)
 8008264:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008268:	089b      	lsrs	r3, r3, #2
 800826a:	f003 0301 	and.w	r3, r3, #1
 800826e:	b2db      	uxtb	r3, r3
 8008270:	2b00      	cmp	r3, #0
 8008272:	d003      	beq.n	800827c <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8008274:	4818      	ldr	r0, [pc, #96]	; (80082d8 <MX_LWIP_Init+0x288>)
 8008276:	f007 fe07 	bl	800fe88 <netif_set_up>
 800827a:	e002      	b.n	8008282 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800827c:	4816      	ldr	r0, [pc, #88]	; (80082d8 <MX_LWIP_Init+0x288>)
 800827e:	f007 fe6f 	bl	800ff60 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8008282:	4916      	ldr	r1, [pc, #88]	; (80082dc <MX_LWIP_Init+0x28c>)
 8008284:	4814      	ldr	r0, [pc, #80]	; (80082d8 <MX_LWIP_Init+0x288>)
 8008286:	f007 ff01 	bl	801008c <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800828a:	2224      	movs	r2, #36	; 0x24
 800828c:	2100      	movs	r1, #0
 800828e:	4814      	ldr	r0, [pc, #80]	; (80082e0 <MX_LWIP_Init+0x290>)
 8008290:	f00e fda3 	bl	8016dda <memset>
  attributes.name = "EthLink";
 8008294:	4b12      	ldr	r3, [pc, #72]	; (80082e0 <MX_LWIP_Init+0x290>)
 8008296:	4a13      	ldr	r2, [pc, #76]	; (80082e4 <MX_LWIP_Init+0x294>)
 8008298:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800829a:	4b11      	ldr	r3, [pc, #68]	; (80082e0 <MX_LWIP_Init+0x290>)
 800829c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80082a0:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 80082a2:	4b0f      	ldr	r3, [pc, #60]	; (80082e0 <MX_LWIP_Init+0x290>)
 80082a4:	2210      	movs	r2, #16
 80082a6:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 80082a8:	4a0d      	ldr	r2, [pc, #52]	; (80082e0 <MX_LWIP_Init+0x290>)
 80082aa:	490b      	ldr	r1, [pc, #44]	; (80082d8 <MX_LWIP_Init+0x288>)
 80082ac:	480e      	ldr	r0, [pc, #56]	; (80082e8 <MX_LWIP_Init+0x298>)
 80082ae:	f000 fd7e 	bl	8008dae <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80082b2:	bf00      	nop
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	240007ac 	.word	0x240007ac
 80082bc:	240007b0 	.word	0x240007b0
 80082c0:	240007b4 	.word	0x240007b4
 80082c4:	240007a0 	.word	0x240007a0
 80082c8:	240007a4 	.word	0x240007a4
 80082cc:	240007a8 	.word	0x240007a8
 80082d0:	0801635d 	.word	0x0801635d
 80082d4:	08008721 	.word	0x08008721
 80082d8:	2400076c 	.word	0x2400076c
 80082dc:	080082ed 	.word	0x080082ed
 80082e0:	240007b8 	.word	0x240007b8
 80082e4:	08017d90 	.word	0x08017d90
 80082e8:	08008a05 	.word	0x08008a05

080082ec <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b083      	sub	sp, #12
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80082f4:	bf00      	nop
 80082f6:	370c      	adds	r7, #12
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr

08008300 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b0aa      	sub	sp, #168	; 0xa8
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8008308:	2300      	movs	r3, #0
 800830a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 800830e:	2300      	movs	r3, #0
 8008310:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  int32_t PHYLinkState = 0;
 8008314:	2300      	movs	r3, #0
 8008316:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 800831a:	f107 0310 	add.w	r3, r7, #16
 800831e:	2264      	movs	r2, #100	; 0x64
 8008320:	2100      	movs	r1, #0
 8008322:	4618      	mov	r0, r3
 8008324:	f00e fd59 	bl	8016dda <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8008328:	4b85      	ldr	r3, [pc, #532]	; (8008540 <low_level_init+0x240>)
 800832a:	4a86      	ldr	r2, [pc, #536]	; (8008544 <low_level_init+0x244>)
 800832c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800832e:	2300      	movs	r3, #0
 8008330:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8008332:	2380      	movs	r3, #128	; 0x80
 8008334:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8008336:	23e1      	movs	r3, #225	; 0xe1
 8008338:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800833a:	2300      	movs	r3, #0
 800833c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800833e:	2300      	movs	r3, #0
 8008340:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8008342:	2300      	movs	r3, #0
 8008344:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8008346:	4a7e      	ldr	r2, [pc, #504]	; (8008540 <low_level_init+0x240>)
 8008348:	f107 0308 	add.w	r3, r7, #8
 800834c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800834e:	4b7c      	ldr	r3, [pc, #496]	; (8008540 <low_level_init+0x240>)
 8008350:	2201      	movs	r2, #1
 8008352:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8008354:	4b7a      	ldr	r3, [pc, #488]	; (8008540 <low_level_init+0x240>)
 8008356:	4a7c      	ldr	r2, [pc, #496]	; (8008548 <low_level_init+0x248>)
 8008358:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800835a:	4b79      	ldr	r3, [pc, #484]	; (8008540 <low_level_init+0x240>)
 800835c:	4a7b      	ldr	r2, [pc, #492]	; (800854c <low_level_init+0x24c>)
 800835e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8008360:	4b77      	ldr	r3, [pc, #476]	; (8008540 <low_level_init+0x240>)
 8008362:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8008366:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8008368:	4875      	ldr	r0, [pc, #468]	; (8008540 <low_level_init+0x240>)
 800836a:	f7f9 f9ad 	bl	80016c8 <HAL_ETH_Init>
 800836e:	4603      	mov	r3, r0
 8008370:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8008374:	2238      	movs	r2, #56	; 0x38
 8008376:	2100      	movs	r1, #0
 8008378:	4875      	ldr	r0, [pc, #468]	; (8008550 <low_level_init+0x250>)
 800837a:	f00e fd2e 	bl	8016dda <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800837e:	4b74      	ldr	r3, [pc, #464]	; (8008550 <low_level_init+0x250>)
 8008380:	2221      	movs	r2, #33	; 0x21
 8008382:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8008384:	4b72      	ldr	r3, [pc, #456]	; (8008550 <low_level_init+0x250>)
 8008386:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800838a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800838c:	4b70      	ldr	r3, [pc, #448]	; (8008550 <low_level_init+0x250>)
 800838e:	2200      	movs	r2, #0
 8008390:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8008392:	4870      	ldr	r0, [pc, #448]	; (8008554 <low_level_init+0x254>)
 8008394:	f007 fa70 	bl	800f878 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2206      	movs	r2, #6
 800839c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80083a0:	4b67      	ldr	r3, [pc, #412]	; (8008540 <low_level_init+0x240>)
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	781a      	ldrb	r2, [r3, #0]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80083ac:	4b64      	ldr	r3, [pc, #400]	; (8008540 <low_level_init+0x240>)
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	785a      	ldrb	r2, [r3, #1]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80083b8:	4b61      	ldr	r3, [pc, #388]	; (8008540 <low_level_init+0x240>)
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	789a      	ldrb	r2, [r3, #2]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80083c4:	4b5e      	ldr	r3, [pc, #376]	; (8008540 <low_level_init+0x240>)
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	78da      	ldrb	r2, [r3, #3]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80083d0:	4b5b      	ldr	r3, [pc, #364]	; (8008540 <low_level_init+0x240>)
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	791a      	ldrb	r2, [r3, #4]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80083dc:	4b58      	ldr	r3, [pc, #352]	; (8008540 <low_level_init+0x240>)
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	795a      	ldrb	r2, [r3, #5]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80083ee:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80083f6:	f043 030a 	orr.w	r3, r3, #10
 80083fa:	b2da      	uxtb	r2, r3
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8008402:	2200      	movs	r2, #0
 8008404:	2101      	movs	r1, #1
 8008406:	2001      	movs	r0, #1
 8008408:	f000 fe8d 	bl	8009126 <osSemaphoreNew>
 800840c:	4603      	mov	r3, r0
 800840e:	4a52      	ldr	r2, [pc, #328]	; (8008558 <low_level_init+0x258>)
 8008410:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8008412:	2200      	movs	r2, #0
 8008414:	2101      	movs	r1, #1
 8008416:	2001      	movs	r0, #1
 8008418:	f000 fe85 	bl	8009126 <osSemaphoreNew>
 800841c:	4603      	mov	r3, r0
 800841e:	4a4f      	ldr	r2, [pc, #316]	; (800855c <low_level_init+0x25c>)
 8008420:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8008422:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008426:	2224      	movs	r2, #36	; 0x24
 8008428:	2100      	movs	r1, #0
 800842a:	4618      	mov	r0, r3
 800842c:	f00e fcd5 	bl	8016dda <memset>
  attributes.name = "EthIf";
 8008430:	4b4b      	ldr	r3, [pc, #300]	; (8008560 <low_level_init+0x260>)
 8008432:	677b      	str	r3, [r7, #116]	; 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8008434:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8008438:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  attributes.priority = osPriorityRealtime;
 800843c:	2330      	movs	r3, #48	; 0x30
 800843e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 8008442:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008446:	461a      	mov	r2, r3
 8008448:	6879      	ldr	r1, [r7, #4]
 800844a:	4846      	ldr	r0, [pc, #280]	; (8008564 <low_level_init+0x264>)
 800844c:	f000 fcaf 	bl	8008dae <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8008450:	4945      	ldr	r1, [pc, #276]	; (8008568 <low_level_init+0x268>)
 8008452:	4846      	ldr	r0, [pc, #280]	; (800856c <low_level_init+0x26c>)
 8008454:	f7f8 fe57 	bl	8001106 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8008458:	4844      	ldr	r0, [pc, #272]	; (800856c <low_level_init+0x26c>)
 800845a:	f7f8 fe86 	bl	800116a <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800845e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8008462:	2b00      	cmp	r3, #0
 8008464:	d165      	bne.n	8008532 <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8008466:	4841      	ldr	r0, [pc, #260]	; (800856c <low_level_init+0x26c>)
 8008468:	f7f8 ff27 	bl	80012ba <LAN8742_GetLinkState>
 800846c:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8008470:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008474:	2b01      	cmp	r3, #1
 8008476:	dc06      	bgt.n	8008486 <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f007 fdd7 	bl	801002c <netif_set_link_down>
      netif_set_down(netif);
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f007 fd6e 	bl	800ff60 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8008484:	e057      	b.n	8008536 <low_level_init+0x236>
      switch (PHYLinkState)
 8008486:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800848a:	3b02      	subs	r3, #2
 800848c:	2b03      	cmp	r3, #3
 800848e:	d82b      	bhi.n	80084e8 <low_level_init+0x1e8>
 8008490:	a201      	add	r2, pc, #4	; (adr r2, 8008498 <low_level_init+0x198>)
 8008492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008496:	bf00      	nop
 8008498:	080084a9 	.word	0x080084a9
 800849c:	080084bb 	.word	0x080084bb
 80084a0:	080084cb 	.word	0x080084cb
 80084a4:	080084db 	.word	0x080084db
        duplex = ETH_FULLDUPLEX_MODE;
 80084a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80084ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 80084b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80084b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 80084b8:	e01f      	b.n	80084fa <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 80084ba:	2300      	movs	r3, #0
 80084bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 80084c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80084c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 80084c8:	e017      	b.n	80084fa <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 80084ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80084ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 80084d2:	2300      	movs	r3, #0
 80084d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 80084d8:	e00f      	b.n	80084fa <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 80084da:	2300      	movs	r3, #0
 80084dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 80084e0:	2300      	movs	r3, #0
 80084e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 80084e6:	e008      	b.n	80084fa <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 80084e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80084ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 80084f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80084f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 80084f8:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80084fa:	f107 0310 	add.w	r3, r7, #16
 80084fe:	4619      	mov	r1, r3
 8008500:	480f      	ldr	r0, [pc, #60]	; (8008540 <low_level_init+0x240>)
 8008502:	f7f9 fd4d 	bl	8001fa0 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8008506:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800850a:	62bb      	str	r3, [r7, #40]	; 0x28
    MACConf.Speed = speed;
 800850c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008510:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8008512:	f107 0310 	add.w	r3, r7, #16
 8008516:	4619      	mov	r1, r3
 8008518:	4809      	ldr	r0, [pc, #36]	; (8008540 <low_level_init+0x240>)
 800851a:	f7f9 ff15 	bl	8002348 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800851e:	4808      	ldr	r0, [pc, #32]	; (8008540 <low_level_init+0x240>)
 8008520:	f7f9 f9b8 	bl	8001894 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f007 fcaf 	bl	800fe88 <netif_set_up>
    netif_set_link_up(netif);
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f007 fd4a 	bl	800ffc4 <netif_set_link_up>
}
 8008530:	e001      	b.n	8008536 <low_level_init+0x236>
    Error_Handler();
 8008532:	f7f8 fb5f 	bl	8000bf4 <Error_Handler>
}
 8008536:	bf00      	nop
 8008538:	37a8      	adds	r7, #168	; 0xa8
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
 800853e:	bf00      	nop
 8008540:	24005170 	.word	0x24005170
 8008544:	40028000 	.word	0x40028000
 8008548:	240000f8 	.word	0x240000f8
 800854c:	24000098 	.word	0x24000098
 8008550:	24005220 	.word	0x24005220
 8008554:	0801acc4 	.word	0x0801acc4
 8008558:	24005168 	.word	0x24005168
 800855c:	2400516c 	.word	0x2400516c
 8008560:	08017d98 	.word	0x08017d98
 8008564:	080086cd 	.word	0x080086cd
 8008568:	24000010 	.word	0x24000010
 800856c:	24005258 	.word	0x24005258

08008570 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b092      	sub	sp, #72	; 0x48
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800857a:	2300      	movs	r3, #0
 800857c:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800857e:	2300      	movs	r3, #0
 8008580:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8008582:	2300      	movs	r3, #0
 8008584:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8008588:	f107 030c 	add.w	r3, r7, #12
 800858c:	2230      	movs	r2, #48	; 0x30
 800858e:	2100      	movs	r1, #0
 8008590:	4618      	mov	r0, r3
 8008592:	f00e fc22 	bl	8016dda <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8008596:	f107 030c 	add.w	r3, r7, #12
 800859a:	2230      	movs	r2, #48	; 0x30
 800859c:	2100      	movs	r1, #0
 800859e:	4618      	mov	r0, r3
 80085a0:	f00e fc1b 	bl	8016dda <memset>

  for(q = p; q != NULL; q = q->next)
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	643b      	str	r3, [r7, #64]	; 0x40
 80085a8:	e045      	b.n	8008636 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80085aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085ac:	2b03      	cmp	r3, #3
 80085ae:	d902      	bls.n	80085b6 <low_level_output+0x46>
      return ERR_IF;
 80085b0:	f06f 030b 	mvn.w	r3, #11
 80085b4:	e065      	b.n	8008682 <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 80085b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085b8:	6859      	ldr	r1, [r3, #4]
 80085ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085bc:	4613      	mov	r3, r2
 80085be:	005b      	lsls	r3, r3, #1
 80085c0:	4413      	add	r3, r2
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	3348      	adds	r3, #72	; 0x48
 80085c6:	443b      	add	r3, r7
 80085c8:	3b3c      	subs	r3, #60	; 0x3c
 80085ca:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80085cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085ce:	895b      	ldrh	r3, [r3, #10]
 80085d0:	4619      	mov	r1, r3
 80085d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085d4:	4613      	mov	r3, r2
 80085d6:	005b      	lsls	r3, r3, #1
 80085d8:	4413      	add	r3, r2
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	3348      	adds	r3, #72	; 0x48
 80085de:	443b      	add	r3, r7
 80085e0:	3b38      	subs	r3, #56	; 0x38
 80085e2:	6019      	str	r1, [r3, #0]

    if(i>0)
 80085e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d011      	beq.n	800860e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80085ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085ec:	1e5a      	subs	r2, r3, #1
 80085ee:	f107 000c 	add.w	r0, r7, #12
 80085f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80085f4:	460b      	mov	r3, r1
 80085f6:	005b      	lsls	r3, r3, #1
 80085f8:	440b      	add	r3, r1
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	18c1      	adds	r1, r0, r3
 80085fe:	4613      	mov	r3, r2
 8008600:	005b      	lsls	r3, r3, #1
 8008602:	4413      	add	r3, r2
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	3348      	adds	r3, #72	; 0x48
 8008608:	443b      	add	r3, r7
 800860a:	3b34      	subs	r3, #52	; 0x34
 800860c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800860e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d109      	bne.n	800862a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8008616:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008618:	4613      	mov	r3, r2
 800861a:	005b      	lsls	r3, r3, #1
 800861c:	4413      	add	r3, r2
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	3348      	adds	r3, #72	; 0x48
 8008622:	443b      	add	r3, r7
 8008624:	3b34      	subs	r3, #52	; 0x34
 8008626:	2200      	movs	r2, #0
 8008628:	601a      	str	r2, [r3, #0]
    }

    i++;
 800862a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800862c:	3301      	adds	r3, #1
 800862e:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8008630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	643b      	str	r3, [r7, #64]	; 0x40
 8008636:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008638:	2b00      	cmp	r3, #0
 800863a:	d1b6      	bne.n	80085aa <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	891b      	ldrh	r3, [r3, #8]
 8008640:	461a      	mov	r2, r3
 8008642:	4b12      	ldr	r3, [pc, #72]	; (800868c <low_level_output+0x11c>)
 8008644:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8008646:	4a11      	ldr	r2, [pc, #68]	; (800868c <low_level_output+0x11c>)
 8008648:	f107 030c 	add.w	r3, r7, #12
 800864c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800864e:	4a0f      	ldr	r2, [pc, #60]	; (800868c <low_level_output+0x11c>)
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8008654:	6838      	ldr	r0, [r7, #0]
 8008656:	f008 f96d 	bl	8010934 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 800865a:	490c      	ldr	r1, [pc, #48]	; (800868c <low_level_output+0x11c>)
 800865c:	480c      	ldr	r0, [pc, #48]	; (8008690 <low_level_output+0x120>)
 800865e:	f7f9 fa1d 	bl	8001a9c <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8008662:	bf00      	nop
 8008664:	4b0b      	ldr	r3, [pc, #44]	; (8008694 <low_level_output+0x124>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f04f 31ff 	mov.w	r1, #4294967295
 800866c:	4618      	mov	r0, r3
 800866e:	f000 fde3 	bl	8009238 <osSemaphoreAcquire>
 8008672:	4603      	mov	r3, r0
 8008674:	2b00      	cmp	r3, #0
 8008676:	d1f5      	bne.n	8008664 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8008678:	4805      	ldr	r0, [pc, #20]	; (8008690 <low_level_output+0x120>)
 800867a:	f7f9 fb8e 	bl	8001d9a <HAL_ETH_ReleaseTxPacket>

  return errval;
 800867e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8008682:	4618      	mov	r0, r3
 8008684:	3748      	adds	r7, #72	; 0x48
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}
 800868a:	bf00      	nop
 800868c:	24005220 	.word	0x24005220
 8008690:	24005170 	.word	0x24005170
 8008694:	2400516c 	.word	0x2400516c

08008698 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b084      	sub	sp, #16
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80086a0:	2300      	movs	r3, #0
 80086a2:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80086a4:	4b07      	ldr	r3, [pc, #28]	; (80086c4 <low_level_input+0x2c>)
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d105      	bne.n	80086b8 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80086ac:	f107 030c 	add.w	r3, r7, #12
 80086b0:	4619      	mov	r1, r3
 80086b2:	4805      	ldr	r0, [pc, #20]	; (80086c8 <low_level_input+0x30>)
 80086b4:	f7f9 fa43 	bl	8001b3e <HAL_ETH_ReadData>
  }

  return p;
 80086b8:	68fb      	ldr	r3, [r7, #12]
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3710      	adds	r7, #16
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	bf00      	nop
 80086c4:	24005164 	.word	0x24005164
 80086c8:	24005170 	.word	0x24005170

080086cc <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80086d4:	2300      	movs	r3, #0
 80086d6:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80086dc:	4b0f      	ldr	r3, [pc, #60]	; (800871c <ethernetif_input+0x50>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f04f 31ff 	mov.w	r1, #4294967295
 80086e4:	4618      	mov	r0, r3
 80086e6:	f000 fda7 	bl	8009238 <osSemaphoreAcquire>
 80086ea:	4603      	mov	r3, r0
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d1f5      	bne.n	80086dc <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 80086f0:	68b8      	ldr	r0, [r7, #8]
 80086f2:	f7ff ffd1 	bl	8008698 <low_level_input>
 80086f6:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d00a      	beq.n	8008714 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	691b      	ldr	r3, [r3, #16]
 8008702:	68b9      	ldr	r1, [r7, #8]
 8008704:	68f8      	ldr	r0, [r7, #12]
 8008706:	4798      	blx	r3
 8008708:	4603      	mov	r3, r0
 800870a:	2b00      	cmp	r3, #0
 800870c:	d002      	beq.n	8008714 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800870e:	68f8      	ldr	r0, [r7, #12]
 8008710:	f008 f86a 	bl	80107e8 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d1ea      	bne.n	80086f0 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800871a:	e7df      	b.n	80086dc <ethernetif_input+0x10>
 800871c:	24005168 	.word	0x24005168

08008720 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d106      	bne.n	800873c <ethernetif_init+0x1c>
 800872e:	4b0e      	ldr	r3, [pc, #56]	; (8008768 <ethernetif_init+0x48>)
 8008730:	f240 12f5 	movw	r2, #501	; 0x1f5
 8008734:	490d      	ldr	r1, [pc, #52]	; (800876c <ethernetif_init+0x4c>)
 8008736:	480e      	ldr	r0, [pc, #56]	; (8008770 <ethernetif_init+0x50>)
 8008738:	f00e fbec 	bl	8016f14 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2273      	movs	r2, #115	; 0x73
 8008740:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2274      	movs	r2, #116	; 0x74
 8008748:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	4a09      	ldr	r2, [pc, #36]	; (8008774 <ethernetif_init+0x54>)
 8008750:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	4a08      	ldr	r2, [pc, #32]	; (8008778 <ethernetif_init+0x58>)
 8008756:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f7ff fdd1 	bl	8008300 <low_level_init>

  return ERR_OK;
 800875e:	2300      	movs	r3, #0
}
 8008760:	4618      	mov	r0, r3
 8008762:	3708      	adds	r7, #8
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}
 8008768:	08017da0 	.word	0x08017da0
 800876c:	08017dbc 	.word	0x08017dbc
 8008770:	08017dcc 	.word	0x08017dcc
 8008774:	0800d1b1 	.word	0x0800d1b1
 8008778:	08008571 	.word	0x08008571

0800877c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8008788:	68f9      	ldr	r1, [r7, #12]
 800878a:	4809      	ldr	r0, [pc, #36]	; (80087b0 <pbuf_free_custom+0x34>)
 800878c:	f007 f964 	bl	800fa58 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8008790:	4b08      	ldr	r3, [pc, #32]	; (80087b4 <pbuf_free_custom+0x38>)
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	2b01      	cmp	r3, #1
 8008796:	d107      	bne.n	80087a8 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8008798:	4b06      	ldr	r3, [pc, #24]	; (80087b4 <pbuf_free_custom+0x38>)
 800879a:	2200      	movs	r2, #0
 800879c:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800879e:	4b06      	ldr	r3, [pc, #24]	; (80087b8 <pbuf_free_custom+0x3c>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4618      	mov	r0, r3
 80087a4:	f000 fd9a 	bl	80092dc <osSemaphoreRelease>
  }
}
 80087a8:	bf00      	nop
 80087aa:	3710      	adds	r7, #16
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}
 80087b0:	0801acc4 	.word	0x0801acc4
 80087b4:	24005164 	.word	0x24005164
 80087b8:	24005168 	.word	0x24005168

080087bc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80087c0:	f7f8 fe52 	bl	8001468 <HAL_GetTick>
 80087c4:	4603      	mov	r3, r0
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	bd80      	pop	{r7, pc}
	...

080087cc <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b08e      	sub	sp, #56	; 0x38
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087d8:	2200      	movs	r2, #0
 80087da:	601a      	str	r2, [r3, #0]
 80087dc:	605a      	str	r2, [r3, #4]
 80087de:	609a      	str	r2, [r3, #8]
 80087e0:	60da      	str	r2, [r3, #12]
 80087e2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a59      	ldr	r2, [pc, #356]	; (8008950 <HAL_ETH_MspInit+0x184>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	f040 80ab 	bne.w	8008946 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80087f0:	4b58      	ldr	r3, [pc, #352]	; (8008954 <HAL_ETH_MspInit+0x188>)
 80087f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80087f6:	4a57      	ldr	r2, [pc, #348]	; (8008954 <HAL_ETH_MspInit+0x188>)
 80087f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087fc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008800:	4b54      	ldr	r3, [pc, #336]	; (8008954 <HAL_ETH_MspInit+0x188>)
 8008802:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008806:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800880a:	623b      	str	r3, [r7, #32]
 800880c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800880e:	4b51      	ldr	r3, [pc, #324]	; (8008954 <HAL_ETH_MspInit+0x188>)
 8008810:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008814:	4a4f      	ldr	r2, [pc, #316]	; (8008954 <HAL_ETH_MspInit+0x188>)
 8008816:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800881a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800881e:	4b4d      	ldr	r3, [pc, #308]	; (8008954 <HAL_ETH_MspInit+0x188>)
 8008820:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008824:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008828:	61fb      	str	r3, [r7, #28]
 800882a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800882c:	4b49      	ldr	r3, [pc, #292]	; (8008954 <HAL_ETH_MspInit+0x188>)
 800882e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008832:	4a48      	ldr	r2, [pc, #288]	; (8008954 <HAL_ETH_MspInit+0x188>)
 8008834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008838:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800883c:	4b45      	ldr	r3, [pc, #276]	; (8008954 <HAL_ETH_MspInit+0x188>)
 800883e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008846:	61bb      	str	r3, [r7, #24]
 8008848:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800884a:	4b42      	ldr	r3, [pc, #264]	; (8008954 <HAL_ETH_MspInit+0x188>)
 800884c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008850:	4a40      	ldr	r2, [pc, #256]	; (8008954 <HAL_ETH_MspInit+0x188>)
 8008852:	f043 0304 	orr.w	r3, r3, #4
 8008856:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800885a:	4b3e      	ldr	r3, [pc, #248]	; (8008954 <HAL_ETH_MspInit+0x188>)
 800885c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008860:	f003 0304 	and.w	r3, r3, #4
 8008864:	617b      	str	r3, [r7, #20]
 8008866:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008868:	4b3a      	ldr	r3, [pc, #232]	; (8008954 <HAL_ETH_MspInit+0x188>)
 800886a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800886e:	4a39      	ldr	r2, [pc, #228]	; (8008954 <HAL_ETH_MspInit+0x188>)
 8008870:	f043 0301 	orr.w	r3, r3, #1
 8008874:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008878:	4b36      	ldr	r3, [pc, #216]	; (8008954 <HAL_ETH_MspInit+0x188>)
 800887a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800887e:	f003 0301 	and.w	r3, r3, #1
 8008882:	613b      	str	r3, [r7, #16]
 8008884:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008886:	4b33      	ldr	r3, [pc, #204]	; (8008954 <HAL_ETH_MspInit+0x188>)
 8008888:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800888c:	4a31      	ldr	r2, [pc, #196]	; (8008954 <HAL_ETH_MspInit+0x188>)
 800888e:	f043 0302 	orr.w	r3, r3, #2
 8008892:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008896:	4b2f      	ldr	r3, [pc, #188]	; (8008954 <HAL_ETH_MspInit+0x188>)
 8008898:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800889c:	f003 0302 	and.w	r3, r3, #2
 80088a0:	60fb      	str	r3, [r7, #12]
 80088a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80088a4:	4b2b      	ldr	r3, [pc, #172]	; (8008954 <HAL_ETH_MspInit+0x188>)
 80088a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80088aa:	4a2a      	ldr	r2, [pc, #168]	; (8008954 <HAL_ETH_MspInit+0x188>)
 80088ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80088b4:	4b27      	ldr	r3, [pc, #156]	; (8008954 <HAL_ETH_MspInit+0x188>)
 80088b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80088ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088be:	60bb      	str	r3, [r7, #8]
 80088c0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80088c2:	2332      	movs	r3, #50	; 0x32
 80088c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088c6:	2302      	movs	r3, #2
 80088c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088ca:	2300      	movs	r3, #0
 80088cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088ce:	2300      	movs	r3, #0
 80088d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80088d2:	230b      	movs	r3, #11
 80088d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80088d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088da:	4619      	mov	r1, r3
 80088dc:	481e      	ldr	r0, [pc, #120]	; (8008958 <HAL_ETH_MspInit+0x18c>)
 80088de:	f7fa fb19 	bl	8002f14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80088e2:	2386      	movs	r3, #134	; 0x86
 80088e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088e6:	2302      	movs	r3, #2
 80088e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088ea:	2300      	movs	r3, #0
 80088ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088ee:	2300      	movs	r3, #0
 80088f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80088f2:	230b      	movs	r3, #11
 80088f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088fa:	4619      	mov	r1, r3
 80088fc:	4817      	ldr	r0, [pc, #92]	; (800895c <HAL_ETH_MspInit+0x190>)
 80088fe:	f7fa fb09 	bl	8002f14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8008902:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008906:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008908:	2302      	movs	r3, #2
 800890a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800890c:	2300      	movs	r3, #0
 800890e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008910:	2300      	movs	r3, #0
 8008912:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008914:	230b      	movs	r3, #11
 8008916:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800891c:	4619      	mov	r1, r3
 800891e:	4810      	ldr	r0, [pc, #64]	; (8008960 <HAL_ETH_MspInit+0x194>)
 8008920:	f7fa faf8 	bl	8002f14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8008924:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8008928:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800892a:	2302      	movs	r3, #2
 800892c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800892e:	2300      	movs	r3, #0
 8008930:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008932:	2300      	movs	r3, #0
 8008934:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008936:	230b      	movs	r3, #11
 8008938:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800893a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800893e:	4619      	mov	r1, r3
 8008940:	4808      	ldr	r0, [pc, #32]	; (8008964 <HAL_ETH_MspInit+0x198>)
 8008942:	f7fa fae7 	bl	8002f14 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8008946:	bf00      	nop
 8008948:	3738      	adds	r7, #56	; 0x38
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	40028000 	.word	0x40028000
 8008954:	58024400 	.word	0x58024400
 8008958:	58020800 	.word	0x58020800
 800895c:	58020000 	.word	0x58020000
 8008960:	58020400 	.word	0x58020400
 8008964:	58021800 	.word	0x58021800

08008968 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800896c:	4802      	ldr	r0, [pc, #8]	; (8008978 <ETH_PHY_IO_Init+0x10>)
 800896e:	f7f9 fd05 	bl	800237c <HAL_ETH_SetMDIOClockRange>

  return 0;
 8008972:	2300      	movs	r3, #0
}
 8008974:	4618      	mov	r0, r3
 8008976:	bd80      	pop	{r7, pc}
 8008978:	24005170 	.word	0x24005170

0800897c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800897c:	b480      	push	{r7}
 800897e:	af00      	add	r7, sp, #0
  return 0;
 8008980:	2300      	movs	r3, #0
}
 8008982:	4618      	mov	r0, r3
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b084      	sub	sp, #16
 8008990:	af00      	add	r7, sp, #0
 8008992:	60f8      	str	r0, [r7, #12]
 8008994:	60b9      	str	r1, [r7, #8]
 8008996:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	68ba      	ldr	r2, [r7, #8]
 800899c:	68f9      	ldr	r1, [r7, #12]
 800899e:	4807      	ldr	r0, [pc, #28]	; (80089bc <ETH_PHY_IO_ReadReg+0x30>)
 80089a0:	f7f9 fa56 	bl	8001e50 <HAL_ETH_ReadPHYRegister>
 80089a4:	4603      	mov	r3, r0
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d002      	beq.n	80089b0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80089aa:	f04f 33ff 	mov.w	r3, #4294967295
 80089ae:	e000      	b.n	80089b2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80089b0:	2300      	movs	r3, #0
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3710      	adds	r7, #16
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}
 80089ba:	bf00      	nop
 80089bc:	24005170 	.word	0x24005170

080089c0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b084      	sub	sp, #16
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	60f8      	str	r0, [r7, #12]
 80089c8:	60b9      	str	r1, [r7, #8]
 80089ca:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	68ba      	ldr	r2, [r7, #8]
 80089d0:	68f9      	ldr	r1, [r7, #12]
 80089d2:	4807      	ldr	r0, [pc, #28]	; (80089f0 <ETH_PHY_IO_WriteReg+0x30>)
 80089d4:	f7f9 fa90 	bl	8001ef8 <HAL_ETH_WritePHYRegister>
 80089d8:	4603      	mov	r3, r0
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d002      	beq.n	80089e4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80089de:	f04f 33ff 	mov.w	r3, #4294967295
 80089e2:	e000      	b.n	80089e6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80089e4:	2300      	movs	r3, #0
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3710      	adds	r7, #16
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	24005170 	.word	0x24005170

080089f4 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80089f8:	f7f8 fd36 	bl	8001468 <HAL_GetTick>
 80089fc:	4603      	mov	r3, r0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	bd80      	pop	{r7, pc}
	...

08008a04 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b0a0      	sub	sp, #128	; 0x80
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8008a0c:	f107 0308 	add.w	r3, r7, #8
 8008a10:	2264      	movs	r2, #100	; 0x64
 8008a12:	2100      	movs	r1, #0
 8008a14:	4618      	mov	r0, r3
 8008a16:	f00e f9e0 	bl	8016dda <memset>
  int32_t PHYLinkState = 0;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008a22:	2300      	movs	r3, #0
 8008a24:	67bb      	str	r3, [r7, #120]	; 0x78
 8008a26:	2300      	movs	r3, #0
 8008a28:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8008a2e:	483a      	ldr	r0, [pc, #232]	; (8008b18 <ethernet_link_thread+0x114>)
 8008a30:	f7f8 fc43 	bl	80012ba <LAN8742_GetLinkState>
 8008a34:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8008a36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a38:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008a3c:	089b      	lsrs	r3, r3, #2
 8008a3e:	f003 0301 	and.w	r3, r3, #1
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d00c      	beq.n	8008a62 <ethernet_link_thread+0x5e>
 8008a48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	dc09      	bgt.n	8008a62 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8008a4e:	4833      	ldr	r0, [pc, #204]	; (8008b1c <ethernet_link_thread+0x118>)
 8008a50:	f7f8 ffac 	bl	80019ac <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8008a54:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008a56:	f007 fa83 	bl	800ff60 <netif_set_down>
    netif_set_link_down(netif);
 8008a5a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008a5c:	f007 fae6 	bl	801002c <netif_set_link_down>
 8008a60:	e055      	b.n	8008b0e <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8008a62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a64:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008a68:	f003 0304 	and.w	r3, r3, #4
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d14e      	bne.n	8008b0e <ethernet_link_thread+0x10a>
 8008a70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	dd4b      	ble.n	8008b0e <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8008a76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a78:	3b02      	subs	r3, #2
 8008a7a:	2b03      	cmp	r3, #3
 8008a7c:	d82a      	bhi.n	8008ad4 <ethernet_link_thread+0xd0>
 8008a7e:	a201      	add	r2, pc, #4	; (adr r2, 8008a84 <ethernet_link_thread+0x80>)
 8008a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a84:	08008a95 	.word	0x08008a95
 8008a88:	08008aa7 	.word	0x08008aa7
 8008a8c:	08008ab7 	.word	0x08008ab7
 8008a90:	08008ac7 	.word	0x08008ac7
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8008a94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008a98:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8008a9a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008a9e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008aa4:	e017      	b.n	8008ad6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8008aaa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008aae:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008ab4:	e00f      	b.n	8008ad6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8008ab6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008aba:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8008abc:	2300      	movs	r3, #0
 8008abe:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008ac4:	e007      	b.n	8008ad6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8008aca:	2300      	movs	r3, #0
 8008acc:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008ad2:	e000      	b.n	8008ad6 <ethernet_link_thread+0xd2>
    default:
      break;
 8008ad4:	bf00      	nop
    }

    if(linkchanged)
 8008ad6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d018      	beq.n	8008b0e <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8008adc:	f107 0308 	add.w	r3, r7, #8
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	480e      	ldr	r0, [pc, #56]	; (8008b1c <ethernet_link_thread+0x118>)
 8008ae4:	f7f9 fa5c 	bl	8001fa0 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8008ae8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008aea:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8008aec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008aee:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8008af0:	f107 0308 	add.w	r3, r7, #8
 8008af4:	4619      	mov	r1, r3
 8008af6:	4809      	ldr	r0, [pc, #36]	; (8008b1c <ethernet_link_thread+0x118>)
 8008af8:	f7f9 fc26 	bl	8002348 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8008afc:	4807      	ldr	r0, [pc, #28]	; (8008b1c <ethernet_link_thread+0x118>)
 8008afe:	f7f8 fec9 	bl	8001894 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8008b02:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008b04:	f007 f9c0 	bl	800fe88 <netif_set_up>
      netif_set_link_up(netif);
 8008b08:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008b0a:	f007 fa5b 	bl	800ffc4 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8008b0e:	2064      	movs	r0, #100	; 0x64
 8008b10:	f000 f9e0 	bl	8008ed4 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8008b14:	e78b      	b.n	8008a2e <ethernet_link_thread+0x2a>
 8008b16:	bf00      	nop
 8008b18:	24005258 	.word	0x24005258
 8008b1c:	24005170 	.word	0x24005170

08008b20 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b086      	sub	sp, #24
 8008b24:	af02      	add	r7, sp, #8
 8008b26:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8008b28:	4812      	ldr	r0, [pc, #72]	; (8008b74 <HAL_ETH_RxAllocateCallback+0x54>)
 8008b2a:	f006 ff21 	bl	800f970 <memp_malloc_pool>
 8008b2e:	60f8      	str	r0, [r7, #12]
  if (p)
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d014      	beq.n	8008b60 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	f103 0220 	add.w	r2, r3, #32
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	4a0d      	ldr	r2, [pc, #52]	; (8008b78 <HAL_ETH_RxAllocateCallback+0x58>)
 8008b44:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8008b4e:	9201      	str	r2, [sp, #4]
 8008b50:	9300      	str	r3, [sp, #0]
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2241      	movs	r2, #65	; 0x41
 8008b56:	2100      	movs	r1, #0
 8008b58:	2000      	movs	r0, #0
 8008b5a:	f007 fc8b 	bl	8010474 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8008b5e:	e005      	b.n	8008b6c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8008b60:	4b06      	ldr	r3, [pc, #24]	; (8008b7c <HAL_ETH_RxAllocateCallback+0x5c>)
 8008b62:	2201      	movs	r2, #1
 8008b64:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	601a      	str	r2, [r3, #0]
}
 8008b6c:	bf00      	nop
 8008b6e:	3710      	adds	r7, #16
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}
 8008b74:	0801acc4 	.word	0x0801acc4
 8008b78:	0800877d 	.word	0x0800877d
 8008b7c:	24005164 	.word	0x24005164

08008b80 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b08d      	sub	sp, #52	; 0x34
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	60f8      	str	r0, [r7, #12]
 8008b88:	60b9      	str	r1, [r7, #8]
 8008b8a:	607a      	str	r2, [r7, #4]
 8008b8c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *p = NULL;
 8008b96:	2300      	movs	r3, #0
 8008b98:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	3b20      	subs	r3, #32
 8008b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  p->next = NULL;
 8008ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8008ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba8:	2200      	movs	r2, #0
 8008baa:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8008bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bae:	887a      	ldrh	r2, [r7, #2]
 8008bb0:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8008bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d103      	bne.n	8008bc2 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8008bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bbe:	601a      	str	r2, [r3, #0]
 8008bc0:	e003      	b.n	8008bca <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8008bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bc8:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8008bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bce:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8008bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bd6:	e009      	b.n	8008bec <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8008bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bda:	891a      	ldrh	r2, [r3, #8]
 8008bdc:	887b      	ldrh	r3, [r7, #2]
 8008bde:	4413      	add	r3, r2
 8008be0:	b29a      	uxth	r2, r3
 8008be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be4:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8008be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d1f2      	bne.n	8008bd8 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8008bf2:	887b      	ldrh	r3, [r7, #2]
 8008bf4:	687a      	ldr	r2, [r7, #4]
 8008bf6:	623a      	str	r2, [r7, #32]
 8008bf8:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8008bfa:	69fb      	ldr	r3, [r7, #28]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	dd1d      	ble.n	8008c3c <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8008c00:	6a3b      	ldr	r3, [r7, #32]
 8008c02:	f003 021f 	and.w	r2, r3, #31
 8008c06:	69fb      	ldr	r3, [r7, #28]
 8008c08:	4413      	add	r3, r2
 8008c0a:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8008c0c:	6a3b      	ldr	r3, [r7, #32]
 8008c0e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8008c10:	f3bf 8f4f 	dsb	sy
}
 8008c14:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8008c16:	4a0d      	ldr	r2, [pc, #52]	; (8008c4c <HAL_ETH_RxLinkCallback+0xcc>)
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	3320      	adds	r3, #32
 8008c22:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8008c24:	69bb      	ldr	r3, [r7, #24]
 8008c26:	3b20      	subs	r3, #32
 8008c28:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 8008c2a:	69bb      	ldr	r3, [r7, #24]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	dcf2      	bgt.n	8008c16 <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 8008c30:	f3bf 8f4f 	dsb	sy
}
 8008c34:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008c36:	f3bf 8f6f 	isb	sy
}
 8008c3a:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8008c3c:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 8008c3e:	bf00      	nop
 8008c40:	3734      	adds	r7, #52	; 0x34
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr
 8008c4a:	bf00      	nop
 8008c4c:	e000ed00 	.word	0xe000ed00

08008c50 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b082      	sub	sp, #8
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f007 fdc5 	bl	80107e8 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8008c5e:	bf00      	nop
 8008c60:	3708      	adds	r7, #8
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
	...

08008c68 <__NVIC_SetPriority>:
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	4603      	mov	r3, r0
 8008c70:	6039      	str	r1, [r7, #0]
 8008c72:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008c74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	db0a      	blt.n	8008c92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	b2da      	uxtb	r2, r3
 8008c80:	490c      	ldr	r1, [pc, #48]	; (8008cb4 <__NVIC_SetPriority+0x4c>)
 8008c82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c86:	0112      	lsls	r2, r2, #4
 8008c88:	b2d2      	uxtb	r2, r2
 8008c8a:	440b      	add	r3, r1
 8008c8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008c90:	e00a      	b.n	8008ca8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	b2da      	uxtb	r2, r3
 8008c96:	4908      	ldr	r1, [pc, #32]	; (8008cb8 <__NVIC_SetPriority+0x50>)
 8008c98:	88fb      	ldrh	r3, [r7, #6]
 8008c9a:	f003 030f 	and.w	r3, r3, #15
 8008c9e:	3b04      	subs	r3, #4
 8008ca0:	0112      	lsls	r2, r2, #4
 8008ca2:	b2d2      	uxtb	r2, r2
 8008ca4:	440b      	add	r3, r1
 8008ca6:	761a      	strb	r2, [r3, #24]
}
 8008ca8:	bf00      	nop
 8008caa:	370c      	adds	r7, #12
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr
 8008cb4:	e000e100 	.word	0xe000e100
 8008cb8:	e000ed00 	.word	0xe000ed00

08008cbc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008cc0:	4b05      	ldr	r3, [pc, #20]	; (8008cd8 <SysTick_Handler+0x1c>)
 8008cc2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008cc4:	f003 f8ce 	bl	800be64 <xTaskGetSchedulerState>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	2b01      	cmp	r3, #1
 8008ccc:	d001      	beq.n	8008cd2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008cce:	f001 f90b 	bl	8009ee8 <xPortSysTickHandler>
  }
}
 8008cd2:	bf00      	nop
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	bf00      	nop
 8008cd8:	e000e010 	.word	0xe000e010

08008cdc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008ce0:	2100      	movs	r1, #0
 8008ce2:	f06f 0004 	mvn.w	r0, #4
 8008ce6:	f7ff ffbf 	bl	8008c68 <__NVIC_SetPriority>
#endif
}
 8008cea:	bf00      	nop
 8008cec:	bd80      	pop	{r7, pc}
	...

08008cf0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008cf0:	b480      	push	{r7}
 8008cf2:	b083      	sub	sp, #12
 8008cf4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cf6:	f3ef 8305 	mrs	r3, IPSR
 8008cfa:	603b      	str	r3, [r7, #0]
  return(result);
 8008cfc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d003      	beq.n	8008d0a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008d02:	f06f 0305 	mvn.w	r3, #5
 8008d06:	607b      	str	r3, [r7, #4]
 8008d08:	e00c      	b.n	8008d24 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008d0a:	4b0a      	ldr	r3, [pc, #40]	; (8008d34 <osKernelInitialize+0x44>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d105      	bne.n	8008d1e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008d12:	4b08      	ldr	r3, [pc, #32]	; (8008d34 <osKernelInitialize+0x44>)
 8008d14:	2201      	movs	r2, #1
 8008d16:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	607b      	str	r3, [r7, #4]
 8008d1c:	e002      	b.n	8008d24 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8008d22:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008d24:	687b      	ldr	r3, [r7, #4]
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	370c      	adds	r7, #12
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr
 8008d32:	bf00      	nop
 8008d34:	24005278 	.word	0x24005278

08008d38 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b082      	sub	sp, #8
 8008d3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d3e:	f3ef 8305 	mrs	r3, IPSR
 8008d42:	603b      	str	r3, [r7, #0]
  return(result);
 8008d44:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d003      	beq.n	8008d52 <osKernelStart+0x1a>
    stat = osErrorISR;
 8008d4a:	f06f 0305 	mvn.w	r3, #5
 8008d4e:	607b      	str	r3, [r7, #4]
 8008d50:	e010      	b.n	8008d74 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008d52:	4b0b      	ldr	r3, [pc, #44]	; (8008d80 <osKernelStart+0x48>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	2b01      	cmp	r3, #1
 8008d58:	d109      	bne.n	8008d6e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008d5a:	f7ff ffbf 	bl	8008cdc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008d5e:	4b08      	ldr	r3, [pc, #32]	; (8008d80 <osKernelStart+0x48>)
 8008d60:	2202      	movs	r2, #2
 8008d62:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008d64:	f002 fc00 	bl	800b568 <vTaskStartScheduler>
      stat = osOK;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	607b      	str	r3, [r7, #4]
 8008d6c:	e002      	b.n	8008d74 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8008d72:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008d74:	687b      	ldr	r3, [r7, #4]
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3708      	adds	r7, #8
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	24005278 	.word	0x24005278

08008d84 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d8a:	f3ef 8305 	mrs	r3, IPSR
 8008d8e:	603b      	str	r3, [r7, #0]
  return(result);
 8008d90:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d003      	beq.n	8008d9e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8008d96:	f002 fd13 	bl	800b7c0 <xTaskGetTickCountFromISR>
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	e002      	b.n	8008da4 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8008d9e:	f002 fcff 	bl	800b7a0 <xTaskGetTickCount>
 8008da2:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8008da4:	687b      	ldr	r3, [r7, #4]
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3708      	adds	r7, #8
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}

08008dae <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008dae:	b580      	push	{r7, lr}
 8008db0:	b08e      	sub	sp, #56	; 0x38
 8008db2:	af04      	add	r7, sp, #16
 8008db4:	60f8      	str	r0, [r7, #12]
 8008db6:	60b9      	str	r1, [r7, #8]
 8008db8:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008dbe:	f3ef 8305 	mrs	r3, IPSR
 8008dc2:	617b      	str	r3, [r7, #20]
  return(result);
 8008dc4:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d17f      	bne.n	8008eca <osThreadNew+0x11c>
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d07c      	beq.n	8008eca <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8008dd0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8008dd4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008dd6:	2318      	movs	r3, #24
 8008dd8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008dde:	f04f 33ff 	mov.w	r3, #4294967295
 8008de2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d045      	beq.n	8008e76 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d002      	beq.n	8008df8 <osThreadNew+0x4a>
        name = attr->name;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	699b      	ldr	r3, [r3, #24]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d002      	beq.n	8008e06 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	699b      	ldr	r3, [r3, #24]
 8008e04:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008e06:	69fb      	ldr	r3, [r7, #28]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d008      	beq.n	8008e1e <osThreadNew+0x70>
 8008e0c:	69fb      	ldr	r3, [r7, #28]
 8008e0e:	2b38      	cmp	r3, #56	; 0x38
 8008e10:	d805      	bhi.n	8008e1e <osThreadNew+0x70>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	f003 0301 	and.w	r3, r3, #1
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d001      	beq.n	8008e22 <osThreadNew+0x74>
        return (NULL);
 8008e1e:	2300      	movs	r3, #0
 8008e20:	e054      	b.n	8008ecc <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	695b      	ldr	r3, [r3, #20]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d003      	beq.n	8008e32 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	695b      	ldr	r3, [r3, #20]
 8008e2e:	089b      	lsrs	r3, r3, #2
 8008e30:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	689b      	ldr	r3, [r3, #8]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d00e      	beq.n	8008e58 <osThreadNew+0xaa>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	68db      	ldr	r3, [r3, #12]
 8008e3e:	2bbb      	cmp	r3, #187	; 0xbb
 8008e40:	d90a      	bls.n	8008e58 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d006      	beq.n	8008e58 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	695b      	ldr	r3, [r3, #20]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d002      	beq.n	8008e58 <osThreadNew+0xaa>
        mem = 1;
 8008e52:	2301      	movs	r3, #1
 8008e54:	61bb      	str	r3, [r7, #24]
 8008e56:	e010      	b.n	8008e7a <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	689b      	ldr	r3, [r3, #8]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d10c      	bne.n	8008e7a <osThreadNew+0xcc>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	68db      	ldr	r3, [r3, #12]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d108      	bne.n	8008e7a <osThreadNew+0xcc>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	691b      	ldr	r3, [r3, #16]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d104      	bne.n	8008e7a <osThreadNew+0xcc>
          mem = 0;
 8008e70:	2300      	movs	r3, #0
 8008e72:	61bb      	str	r3, [r7, #24]
 8008e74:	e001      	b.n	8008e7a <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8008e76:	2300      	movs	r3, #0
 8008e78:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008e7a:	69bb      	ldr	r3, [r7, #24]
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d110      	bne.n	8008ea2 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008e88:	9202      	str	r2, [sp, #8]
 8008e8a:	9301      	str	r3, [sp, #4]
 8008e8c:	69fb      	ldr	r3, [r7, #28]
 8008e8e:	9300      	str	r3, [sp, #0]
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	6a3a      	ldr	r2, [r7, #32]
 8008e94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008e96:	68f8      	ldr	r0, [r7, #12]
 8008e98:	f002 f97a 	bl	800b190 <xTaskCreateStatic>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	613b      	str	r3, [r7, #16]
 8008ea0:	e013      	b.n	8008eca <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8008ea2:	69bb      	ldr	r3, [r7, #24]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d110      	bne.n	8008eca <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008ea8:	6a3b      	ldr	r3, [r7, #32]
 8008eaa:	b29a      	uxth	r2, r3
 8008eac:	f107 0310 	add.w	r3, r7, #16
 8008eb0:	9301      	str	r3, [sp, #4]
 8008eb2:	69fb      	ldr	r3, [r7, #28]
 8008eb4:	9300      	str	r3, [sp, #0]
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008eba:	68f8      	ldr	r0, [r7, #12]
 8008ebc:	f002 f9c5 	bl	800b24a <xTaskCreate>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	2b01      	cmp	r3, #1
 8008ec4:	d001      	beq.n	8008eca <osThreadNew+0x11c>
            hTask = NULL;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008eca:	693b      	ldr	r3, [r7, #16]
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3728      	adds	r7, #40	; 0x28
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}

08008ed4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b084      	sub	sp, #16
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008edc:	f3ef 8305 	mrs	r3, IPSR
 8008ee0:	60bb      	str	r3, [r7, #8]
  return(result);
 8008ee2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d003      	beq.n	8008ef0 <osDelay+0x1c>
    stat = osErrorISR;
 8008ee8:	f06f 0305 	mvn.w	r3, #5
 8008eec:	60fb      	str	r3, [r7, #12]
 8008eee:	e007      	b.n	8008f00 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d002      	beq.n	8008f00 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f002 fb00 	bl	800b500 <vTaskDelay>
    }
  }

  return (stat);
 8008f00:	68fb      	ldr	r3, [r7, #12]
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3710      	adds	r7, #16
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}

08008f0a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008f0a:	b580      	push	{r7, lr}
 8008f0c:	b088      	sub	sp, #32
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8008f12:	2300      	movs	r3, #0
 8008f14:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f16:	f3ef 8305 	mrs	r3, IPSR
 8008f1a:	60bb      	str	r3, [r7, #8]
  return(result);
 8008f1c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d174      	bne.n	800900c <osMutexNew+0x102>
    if (attr != NULL) {
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d003      	beq.n	8008f30 <osMutexNew+0x26>
      type = attr->attr_bits;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	61bb      	str	r3, [r7, #24]
 8008f2e:	e001      	b.n	8008f34 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8008f30:	2300      	movs	r3, #0
 8008f32:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008f34:	69bb      	ldr	r3, [r7, #24]
 8008f36:	f003 0301 	and.w	r3, r3, #1
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d002      	beq.n	8008f44 <osMutexNew+0x3a>
      rmtx = 1U;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	617b      	str	r3, [r7, #20]
 8008f42:	e001      	b.n	8008f48 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8008f44:	2300      	movs	r3, #0
 8008f46:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008f48:	69bb      	ldr	r3, [r7, #24]
 8008f4a:	f003 0308 	and.w	r3, r3, #8
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d15c      	bne.n	800900c <osMutexNew+0x102>
      mem = -1;
 8008f52:	f04f 33ff 	mov.w	r3, #4294967295
 8008f56:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d015      	beq.n	8008f8a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	689b      	ldr	r3, [r3, #8]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d006      	beq.n	8008f74 <osMutexNew+0x6a>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	68db      	ldr	r3, [r3, #12]
 8008f6a:	2b4f      	cmp	r3, #79	; 0x4f
 8008f6c:	d902      	bls.n	8008f74 <osMutexNew+0x6a>
          mem = 1;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	613b      	str	r3, [r7, #16]
 8008f72:	e00c      	b.n	8008f8e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	689b      	ldr	r3, [r3, #8]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d108      	bne.n	8008f8e <osMutexNew+0x84>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	68db      	ldr	r3, [r3, #12]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d104      	bne.n	8008f8e <osMutexNew+0x84>
            mem = 0;
 8008f84:	2300      	movs	r3, #0
 8008f86:	613b      	str	r3, [r7, #16]
 8008f88:	e001      	b.n	8008f8e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d112      	bne.n	8008fba <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d007      	beq.n	8008faa <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	689b      	ldr	r3, [r3, #8]
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	2004      	movs	r0, #4
 8008fa2:	f001 f9a0 	bl	800a2e6 <xQueueCreateMutexStatic>
 8008fa6:	61f8      	str	r0, [r7, #28]
 8008fa8:	e016      	b.n	8008fd8 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	689b      	ldr	r3, [r3, #8]
 8008fae:	4619      	mov	r1, r3
 8008fb0:	2001      	movs	r0, #1
 8008fb2:	f001 f998 	bl	800a2e6 <xQueueCreateMutexStatic>
 8008fb6:	61f8      	str	r0, [r7, #28]
 8008fb8:	e00e      	b.n	8008fd8 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d10b      	bne.n	8008fd8 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d004      	beq.n	8008fd0 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8008fc6:	2004      	movs	r0, #4
 8008fc8:	f001 f975 	bl	800a2b6 <xQueueCreateMutex>
 8008fcc:	61f8      	str	r0, [r7, #28]
 8008fce:	e003      	b.n	8008fd8 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8008fd0:	2001      	movs	r0, #1
 8008fd2:	f001 f970 	bl	800a2b6 <xQueueCreateMutex>
 8008fd6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008fd8:	69fb      	ldr	r3, [r7, #28]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d00c      	beq.n	8008ff8 <osMutexNew+0xee>
        if (attr != NULL) {
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d003      	beq.n	8008fec <osMutexNew+0xe2>
          name = attr->name;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	60fb      	str	r3, [r7, #12]
 8008fea:	e001      	b.n	8008ff0 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8008fec:	2300      	movs	r3, #0
 8008fee:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8008ff0:	68f9      	ldr	r1, [r7, #12]
 8008ff2:	69f8      	ldr	r0, [r7, #28]
 8008ff4:	f002 f844 	bl	800b080 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008ff8:	69fb      	ldr	r3, [r7, #28]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d006      	beq.n	800900c <osMutexNew+0x102>
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d003      	beq.n	800900c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8009004:	69fb      	ldr	r3, [r7, #28]
 8009006:	f043 0301 	orr.w	r3, r3, #1
 800900a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800900c:	69fb      	ldr	r3, [r7, #28]
}
 800900e:	4618      	mov	r0, r3
 8009010:	3720      	adds	r7, #32
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}

08009016 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8009016:	b580      	push	{r7, lr}
 8009018:	b086      	sub	sp, #24
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
 800901e:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f023 0301 	bic.w	r3, r3, #1
 8009026:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f003 0301 	and.w	r3, r3, #1
 800902e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8009030:	2300      	movs	r3, #0
 8009032:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009034:	f3ef 8305 	mrs	r3, IPSR
 8009038:	60bb      	str	r3, [r7, #8]
  return(result);
 800903a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800903c:	2b00      	cmp	r3, #0
 800903e:	d003      	beq.n	8009048 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8009040:	f06f 0305 	mvn.w	r3, #5
 8009044:	617b      	str	r3, [r7, #20]
 8009046:	e02c      	b.n	80090a2 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d103      	bne.n	8009056 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800904e:	f06f 0303 	mvn.w	r3, #3
 8009052:	617b      	str	r3, [r7, #20]
 8009054:	e025      	b.n	80090a2 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d011      	beq.n	8009080 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800905c:	6839      	ldr	r1, [r7, #0]
 800905e:	6938      	ldr	r0, [r7, #16]
 8009060:	f001 f990 	bl	800a384 <xQueueTakeMutexRecursive>
 8009064:	4603      	mov	r3, r0
 8009066:	2b01      	cmp	r3, #1
 8009068:	d01b      	beq.n	80090a2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d003      	beq.n	8009078 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8009070:	f06f 0301 	mvn.w	r3, #1
 8009074:	617b      	str	r3, [r7, #20]
 8009076:	e014      	b.n	80090a2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8009078:	f06f 0302 	mvn.w	r3, #2
 800907c:	617b      	str	r3, [r7, #20]
 800907e:	e010      	b.n	80090a2 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8009080:	6839      	ldr	r1, [r7, #0]
 8009082:	6938      	ldr	r0, [r7, #16]
 8009084:	f001 fd24 	bl	800aad0 <xQueueSemaphoreTake>
 8009088:	4603      	mov	r3, r0
 800908a:	2b01      	cmp	r3, #1
 800908c:	d009      	beq.n	80090a2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d003      	beq.n	800909c <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8009094:	f06f 0301 	mvn.w	r3, #1
 8009098:	617b      	str	r3, [r7, #20]
 800909a:	e002      	b.n	80090a2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800909c:	f06f 0302 	mvn.w	r3, #2
 80090a0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80090a2:	697b      	ldr	r3, [r7, #20]
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3718      	adds	r7, #24
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}

080090ac <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b086      	sub	sp, #24
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f023 0301 	bic.w	r3, r3, #1
 80090ba:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f003 0301 	and.w	r3, r3, #1
 80090c2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80090c4:	2300      	movs	r3, #0
 80090c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090c8:	f3ef 8305 	mrs	r3, IPSR
 80090cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80090ce:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d003      	beq.n	80090dc <osMutexRelease+0x30>
    stat = osErrorISR;
 80090d4:	f06f 0305 	mvn.w	r3, #5
 80090d8:	617b      	str	r3, [r7, #20]
 80090da:	e01f      	b.n	800911c <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d103      	bne.n	80090ea <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80090e2:	f06f 0303 	mvn.w	r3, #3
 80090e6:	617b      	str	r3, [r7, #20]
 80090e8:	e018      	b.n	800911c <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d009      	beq.n	8009104 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80090f0:	6938      	ldr	r0, [r7, #16]
 80090f2:	f001 f913 	bl	800a31c <xQueueGiveMutexRecursive>
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d00f      	beq.n	800911c <osMutexRelease+0x70>
        stat = osErrorResource;
 80090fc:	f06f 0302 	mvn.w	r3, #2
 8009100:	617b      	str	r3, [r7, #20]
 8009102:	e00b      	b.n	800911c <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8009104:	2300      	movs	r3, #0
 8009106:	2200      	movs	r2, #0
 8009108:	2100      	movs	r1, #0
 800910a:	6938      	ldr	r0, [r7, #16]
 800910c:	f001 f9da 	bl	800a4c4 <xQueueGenericSend>
 8009110:	4603      	mov	r3, r0
 8009112:	2b01      	cmp	r3, #1
 8009114:	d002      	beq.n	800911c <osMutexRelease+0x70>
        stat = osErrorResource;
 8009116:	f06f 0302 	mvn.w	r3, #2
 800911a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800911c:	697b      	ldr	r3, [r7, #20]
}
 800911e:	4618      	mov	r0, r3
 8009120:	3718      	adds	r7, #24
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}

08009126 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009126:	b580      	push	{r7, lr}
 8009128:	b08a      	sub	sp, #40	; 0x28
 800912a:	af02      	add	r7, sp, #8
 800912c:	60f8      	str	r0, [r7, #12]
 800912e:	60b9      	str	r1, [r7, #8]
 8009130:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009132:	2300      	movs	r3, #0
 8009134:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009136:	f3ef 8305 	mrs	r3, IPSR
 800913a:	613b      	str	r3, [r7, #16]
  return(result);
 800913c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800913e:	2b00      	cmp	r3, #0
 8009140:	d175      	bne.n	800922e <osSemaphoreNew+0x108>
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d072      	beq.n	800922e <osSemaphoreNew+0x108>
 8009148:	68ba      	ldr	r2, [r7, #8]
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	429a      	cmp	r2, r3
 800914e:	d86e      	bhi.n	800922e <osSemaphoreNew+0x108>
    mem = -1;
 8009150:	f04f 33ff 	mov.w	r3, #4294967295
 8009154:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d015      	beq.n	8009188 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	689b      	ldr	r3, [r3, #8]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d006      	beq.n	8009172 <osSemaphoreNew+0x4c>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	68db      	ldr	r3, [r3, #12]
 8009168:	2b4f      	cmp	r3, #79	; 0x4f
 800916a:	d902      	bls.n	8009172 <osSemaphoreNew+0x4c>
        mem = 1;
 800916c:	2301      	movs	r3, #1
 800916e:	61bb      	str	r3, [r7, #24]
 8009170:	e00c      	b.n	800918c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	689b      	ldr	r3, [r3, #8]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d108      	bne.n	800918c <osSemaphoreNew+0x66>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	68db      	ldr	r3, [r3, #12]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d104      	bne.n	800918c <osSemaphoreNew+0x66>
          mem = 0;
 8009182:	2300      	movs	r3, #0
 8009184:	61bb      	str	r3, [r7, #24]
 8009186:	e001      	b.n	800918c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009188:	2300      	movs	r3, #0
 800918a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800918c:	69bb      	ldr	r3, [r7, #24]
 800918e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009192:	d04c      	beq.n	800922e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2b01      	cmp	r3, #1
 8009198:	d128      	bne.n	80091ec <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800919a:	69bb      	ldr	r3, [r7, #24]
 800919c:	2b01      	cmp	r3, #1
 800919e:	d10a      	bne.n	80091b6 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	689b      	ldr	r3, [r3, #8]
 80091a4:	2203      	movs	r2, #3
 80091a6:	9200      	str	r2, [sp, #0]
 80091a8:	2200      	movs	r2, #0
 80091aa:	2100      	movs	r1, #0
 80091ac:	2001      	movs	r0, #1
 80091ae:	f000 ff93 	bl	800a0d8 <xQueueGenericCreateStatic>
 80091b2:	61f8      	str	r0, [r7, #28]
 80091b4:	e005      	b.n	80091c2 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80091b6:	2203      	movs	r2, #3
 80091b8:	2100      	movs	r1, #0
 80091ba:	2001      	movs	r0, #1
 80091bc:	f001 f804 	bl	800a1c8 <xQueueGenericCreate>
 80091c0:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80091c2:	69fb      	ldr	r3, [r7, #28]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d022      	beq.n	800920e <osSemaphoreNew+0xe8>
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d01f      	beq.n	800920e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80091ce:	2300      	movs	r3, #0
 80091d0:	2200      	movs	r2, #0
 80091d2:	2100      	movs	r1, #0
 80091d4:	69f8      	ldr	r0, [r7, #28]
 80091d6:	f001 f975 	bl	800a4c4 <xQueueGenericSend>
 80091da:	4603      	mov	r3, r0
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d016      	beq.n	800920e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80091e0:	69f8      	ldr	r0, [r7, #28]
 80091e2:	f001 fe01 	bl	800ade8 <vQueueDelete>
            hSemaphore = NULL;
 80091e6:	2300      	movs	r3, #0
 80091e8:	61fb      	str	r3, [r7, #28]
 80091ea:	e010      	b.n	800920e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80091ec:	69bb      	ldr	r3, [r7, #24]
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d108      	bne.n	8009204 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	689b      	ldr	r3, [r3, #8]
 80091f6:	461a      	mov	r2, r3
 80091f8:	68b9      	ldr	r1, [r7, #8]
 80091fa:	68f8      	ldr	r0, [r7, #12]
 80091fc:	f001 f8f8 	bl	800a3f0 <xQueueCreateCountingSemaphoreStatic>
 8009200:	61f8      	str	r0, [r7, #28]
 8009202:	e004      	b.n	800920e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009204:	68b9      	ldr	r1, [r7, #8]
 8009206:	68f8      	ldr	r0, [r7, #12]
 8009208:	f001 f929 	bl	800a45e <xQueueCreateCountingSemaphore>
 800920c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800920e:	69fb      	ldr	r3, [r7, #28]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d00c      	beq.n	800922e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d003      	beq.n	8009222 <osSemaphoreNew+0xfc>
          name = attr->name;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	617b      	str	r3, [r7, #20]
 8009220:	e001      	b.n	8009226 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009222:	2300      	movs	r3, #0
 8009224:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009226:	6979      	ldr	r1, [r7, #20]
 8009228:	69f8      	ldr	r0, [r7, #28]
 800922a:	f001 ff29 	bl	800b080 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800922e:	69fb      	ldr	r3, [r7, #28]
}
 8009230:	4618      	mov	r0, r3
 8009232:	3720      	adds	r7, #32
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009238:	b580      	push	{r7, lr}
 800923a:	b086      	sub	sp, #24
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009246:	2300      	movs	r3, #0
 8009248:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d103      	bne.n	8009258 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009250:	f06f 0303 	mvn.w	r3, #3
 8009254:	617b      	str	r3, [r7, #20]
 8009256:	e039      	b.n	80092cc <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009258:	f3ef 8305 	mrs	r3, IPSR
 800925c:	60fb      	str	r3, [r7, #12]
  return(result);
 800925e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009260:	2b00      	cmp	r3, #0
 8009262:	d022      	beq.n	80092aa <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d003      	beq.n	8009272 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800926a:	f06f 0303 	mvn.w	r3, #3
 800926e:	617b      	str	r3, [r7, #20]
 8009270:	e02c      	b.n	80092cc <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8009272:	2300      	movs	r3, #0
 8009274:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009276:	f107 0308 	add.w	r3, r7, #8
 800927a:	461a      	mov	r2, r3
 800927c:	2100      	movs	r1, #0
 800927e:	6938      	ldr	r0, [r7, #16]
 8009280:	f001 fd32 	bl	800ace8 <xQueueReceiveFromISR>
 8009284:	4603      	mov	r3, r0
 8009286:	2b01      	cmp	r3, #1
 8009288:	d003      	beq.n	8009292 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800928a:	f06f 0302 	mvn.w	r3, #2
 800928e:	617b      	str	r3, [r7, #20]
 8009290:	e01c      	b.n	80092cc <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d019      	beq.n	80092cc <osSemaphoreAcquire+0x94>
 8009298:	4b0f      	ldr	r3, [pc, #60]	; (80092d8 <osSemaphoreAcquire+0xa0>)
 800929a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800929e:	601a      	str	r2, [r3, #0]
 80092a0:	f3bf 8f4f 	dsb	sy
 80092a4:	f3bf 8f6f 	isb	sy
 80092a8:	e010      	b.n	80092cc <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80092aa:	6839      	ldr	r1, [r7, #0]
 80092ac:	6938      	ldr	r0, [r7, #16]
 80092ae:	f001 fc0f 	bl	800aad0 <xQueueSemaphoreTake>
 80092b2:	4603      	mov	r3, r0
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	d009      	beq.n	80092cc <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d003      	beq.n	80092c6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80092be:	f06f 0301 	mvn.w	r3, #1
 80092c2:	617b      	str	r3, [r7, #20]
 80092c4:	e002      	b.n	80092cc <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80092c6:	f06f 0302 	mvn.w	r3, #2
 80092ca:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80092cc:	697b      	ldr	r3, [r7, #20]
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3718      	adds	r7, #24
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
 80092d6:	bf00      	nop
 80092d8:	e000ed04 	.word	0xe000ed04

080092dc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80092dc:	b580      	push	{r7, lr}
 80092de:	b086      	sub	sp, #24
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80092e8:	2300      	movs	r3, #0
 80092ea:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d103      	bne.n	80092fa <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80092f2:	f06f 0303 	mvn.w	r3, #3
 80092f6:	617b      	str	r3, [r7, #20]
 80092f8:	e02c      	b.n	8009354 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092fa:	f3ef 8305 	mrs	r3, IPSR
 80092fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8009300:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009302:	2b00      	cmp	r3, #0
 8009304:	d01a      	beq.n	800933c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8009306:	2300      	movs	r3, #0
 8009308:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800930a:	f107 0308 	add.w	r3, r7, #8
 800930e:	4619      	mov	r1, r3
 8009310:	6938      	ldr	r0, [r7, #16]
 8009312:	f001 fa70 	bl	800a7f6 <xQueueGiveFromISR>
 8009316:	4603      	mov	r3, r0
 8009318:	2b01      	cmp	r3, #1
 800931a:	d003      	beq.n	8009324 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800931c:	f06f 0302 	mvn.w	r3, #2
 8009320:	617b      	str	r3, [r7, #20]
 8009322:	e017      	b.n	8009354 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d014      	beq.n	8009354 <osSemaphoreRelease+0x78>
 800932a:	4b0d      	ldr	r3, [pc, #52]	; (8009360 <osSemaphoreRelease+0x84>)
 800932c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009330:	601a      	str	r2, [r3, #0]
 8009332:	f3bf 8f4f 	dsb	sy
 8009336:	f3bf 8f6f 	isb	sy
 800933a:	e00b      	b.n	8009354 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800933c:	2300      	movs	r3, #0
 800933e:	2200      	movs	r2, #0
 8009340:	2100      	movs	r1, #0
 8009342:	6938      	ldr	r0, [r7, #16]
 8009344:	f001 f8be 	bl	800a4c4 <xQueueGenericSend>
 8009348:	4603      	mov	r3, r0
 800934a:	2b01      	cmp	r3, #1
 800934c:	d002      	beq.n	8009354 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800934e:	f06f 0302 	mvn.w	r3, #2
 8009352:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009354:	697b      	ldr	r3, [r7, #20]
}
 8009356:	4618      	mov	r0, r3
 8009358:	3718      	adds	r7, #24
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
 800935e:	bf00      	nop
 8009360:	e000ed04 	.word	0xe000ed04

08009364 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009364:	b580      	push	{r7, lr}
 8009366:	b08a      	sub	sp, #40	; 0x28
 8009368:	af02      	add	r7, sp, #8
 800936a:	60f8      	str	r0, [r7, #12]
 800936c:	60b9      	str	r1, [r7, #8]
 800936e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009370:	2300      	movs	r3, #0
 8009372:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009374:	f3ef 8305 	mrs	r3, IPSR
 8009378:	613b      	str	r3, [r7, #16]
  return(result);
 800937a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800937c:	2b00      	cmp	r3, #0
 800937e:	d15f      	bne.n	8009440 <osMessageQueueNew+0xdc>
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d05c      	beq.n	8009440 <osMessageQueueNew+0xdc>
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d059      	beq.n	8009440 <osMessageQueueNew+0xdc>
    mem = -1;
 800938c:	f04f 33ff 	mov.w	r3, #4294967295
 8009390:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d029      	beq.n	80093ec <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	689b      	ldr	r3, [r3, #8]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d012      	beq.n	80093c6 <osMessageQueueNew+0x62>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	68db      	ldr	r3, [r3, #12]
 80093a4:	2b4f      	cmp	r3, #79	; 0x4f
 80093a6:	d90e      	bls.n	80093c6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d00a      	beq.n	80093c6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	695a      	ldr	r2, [r3, #20]
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	68b9      	ldr	r1, [r7, #8]
 80093b8:	fb01 f303 	mul.w	r3, r1, r3
 80093bc:	429a      	cmp	r2, r3
 80093be:	d302      	bcc.n	80093c6 <osMessageQueueNew+0x62>
        mem = 1;
 80093c0:	2301      	movs	r3, #1
 80093c2:	61bb      	str	r3, [r7, #24]
 80093c4:	e014      	b.n	80093f0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	689b      	ldr	r3, [r3, #8]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d110      	bne.n	80093f0 <osMessageQueueNew+0x8c>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	68db      	ldr	r3, [r3, #12]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d10c      	bne.n	80093f0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d108      	bne.n	80093f0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	695b      	ldr	r3, [r3, #20]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d104      	bne.n	80093f0 <osMessageQueueNew+0x8c>
          mem = 0;
 80093e6:	2300      	movs	r3, #0
 80093e8:	61bb      	str	r3, [r7, #24]
 80093ea:	e001      	b.n	80093f0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80093ec:	2300      	movs	r3, #0
 80093ee:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80093f0:	69bb      	ldr	r3, [r7, #24]
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d10b      	bne.n	800940e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	691a      	ldr	r2, [r3, #16]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	689b      	ldr	r3, [r3, #8]
 80093fe:	2100      	movs	r1, #0
 8009400:	9100      	str	r1, [sp, #0]
 8009402:	68b9      	ldr	r1, [r7, #8]
 8009404:	68f8      	ldr	r0, [r7, #12]
 8009406:	f000 fe67 	bl	800a0d8 <xQueueGenericCreateStatic>
 800940a:	61f8      	str	r0, [r7, #28]
 800940c:	e008      	b.n	8009420 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800940e:	69bb      	ldr	r3, [r7, #24]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d105      	bne.n	8009420 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8009414:	2200      	movs	r2, #0
 8009416:	68b9      	ldr	r1, [r7, #8]
 8009418:	68f8      	ldr	r0, [r7, #12]
 800941a:	f000 fed5 	bl	800a1c8 <xQueueGenericCreate>
 800941e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009420:	69fb      	ldr	r3, [r7, #28]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d00c      	beq.n	8009440 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d003      	beq.n	8009434 <osMessageQueueNew+0xd0>
        name = attr->name;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	617b      	str	r3, [r7, #20]
 8009432:	e001      	b.n	8009438 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009434:	2300      	movs	r3, #0
 8009436:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009438:	6979      	ldr	r1, [r7, #20]
 800943a:	69f8      	ldr	r0, [r7, #28]
 800943c:	f001 fe20 	bl	800b080 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009440:	69fb      	ldr	r3, [r7, #28]
}
 8009442:	4618      	mov	r0, r3
 8009444:	3720      	adds	r7, #32
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
	...

0800944c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800944c:	b580      	push	{r7, lr}
 800944e:	b088      	sub	sp, #32
 8009450:	af00      	add	r7, sp, #0
 8009452:	60f8      	str	r0, [r7, #12]
 8009454:	60b9      	str	r1, [r7, #8]
 8009456:	603b      	str	r3, [r7, #0]
 8009458:	4613      	mov	r3, r2
 800945a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009460:	2300      	movs	r3, #0
 8009462:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009464:	f3ef 8305 	mrs	r3, IPSR
 8009468:	617b      	str	r3, [r7, #20]
  return(result);
 800946a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800946c:	2b00      	cmp	r3, #0
 800946e:	d028      	beq.n	80094c2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009470:	69bb      	ldr	r3, [r7, #24]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d005      	beq.n	8009482 <osMessageQueuePut+0x36>
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d002      	beq.n	8009482 <osMessageQueuePut+0x36>
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d003      	beq.n	800948a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8009482:	f06f 0303 	mvn.w	r3, #3
 8009486:	61fb      	str	r3, [r7, #28]
 8009488:	e038      	b.n	80094fc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800948a:	2300      	movs	r3, #0
 800948c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800948e:	f107 0210 	add.w	r2, r7, #16
 8009492:	2300      	movs	r3, #0
 8009494:	68b9      	ldr	r1, [r7, #8]
 8009496:	69b8      	ldr	r0, [r7, #24]
 8009498:	f001 f912 	bl	800a6c0 <xQueueGenericSendFromISR>
 800949c:	4603      	mov	r3, r0
 800949e:	2b01      	cmp	r3, #1
 80094a0:	d003      	beq.n	80094aa <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80094a2:	f06f 0302 	mvn.w	r3, #2
 80094a6:	61fb      	str	r3, [r7, #28]
 80094a8:	e028      	b.n	80094fc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d025      	beq.n	80094fc <osMessageQueuePut+0xb0>
 80094b0:	4b15      	ldr	r3, [pc, #84]	; (8009508 <osMessageQueuePut+0xbc>)
 80094b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094b6:	601a      	str	r2, [r3, #0]
 80094b8:	f3bf 8f4f 	dsb	sy
 80094bc:	f3bf 8f6f 	isb	sy
 80094c0:	e01c      	b.n	80094fc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80094c2:	69bb      	ldr	r3, [r7, #24]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d002      	beq.n	80094ce <osMessageQueuePut+0x82>
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d103      	bne.n	80094d6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80094ce:	f06f 0303 	mvn.w	r3, #3
 80094d2:	61fb      	str	r3, [r7, #28]
 80094d4:	e012      	b.n	80094fc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80094d6:	2300      	movs	r3, #0
 80094d8:	683a      	ldr	r2, [r7, #0]
 80094da:	68b9      	ldr	r1, [r7, #8]
 80094dc:	69b8      	ldr	r0, [r7, #24]
 80094de:	f000 fff1 	bl	800a4c4 <xQueueGenericSend>
 80094e2:	4603      	mov	r3, r0
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d009      	beq.n	80094fc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d003      	beq.n	80094f6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80094ee:	f06f 0301 	mvn.w	r3, #1
 80094f2:	61fb      	str	r3, [r7, #28]
 80094f4:	e002      	b.n	80094fc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80094f6:	f06f 0302 	mvn.w	r3, #2
 80094fa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80094fc:	69fb      	ldr	r3, [r7, #28]
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3720      	adds	r7, #32
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}
 8009506:	bf00      	nop
 8009508:	e000ed04 	.word	0xe000ed04

0800950c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800950c:	b580      	push	{r7, lr}
 800950e:	b088      	sub	sp, #32
 8009510:	af00      	add	r7, sp, #0
 8009512:	60f8      	str	r0, [r7, #12]
 8009514:	60b9      	str	r1, [r7, #8]
 8009516:	607a      	str	r2, [r7, #4]
 8009518:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800951e:	2300      	movs	r3, #0
 8009520:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009522:	f3ef 8305 	mrs	r3, IPSR
 8009526:	617b      	str	r3, [r7, #20]
  return(result);
 8009528:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800952a:	2b00      	cmp	r3, #0
 800952c:	d028      	beq.n	8009580 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800952e:	69bb      	ldr	r3, [r7, #24]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d005      	beq.n	8009540 <osMessageQueueGet+0x34>
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d002      	beq.n	8009540 <osMessageQueueGet+0x34>
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d003      	beq.n	8009548 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009540:	f06f 0303 	mvn.w	r3, #3
 8009544:	61fb      	str	r3, [r7, #28]
 8009546:	e037      	b.n	80095b8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8009548:	2300      	movs	r3, #0
 800954a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800954c:	f107 0310 	add.w	r3, r7, #16
 8009550:	461a      	mov	r2, r3
 8009552:	68b9      	ldr	r1, [r7, #8]
 8009554:	69b8      	ldr	r0, [r7, #24]
 8009556:	f001 fbc7 	bl	800ace8 <xQueueReceiveFromISR>
 800955a:	4603      	mov	r3, r0
 800955c:	2b01      	cmp	r3, #1
 800955e:	d003      	beq.n	8009568 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009560:	f06f 0302 	mvn.w	r3, #2
 8009564:	61fb      	str	r3, [r7, #28]
 8009566:	e027      	b.n	80095b8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d024      	beq.n	80095b8 <osMessageQueueGet+0xac>
 800956e:	4b15      	ldr	r3, [pc, #84]	; (80095c4 <osMessageQueueGet+0xb8>)
 8009570:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009574:	601a      	str	r2, [r3, #0]
 8009576:	f3bf 8f4f 	dsb	sy
 800957a:	f3bf 8f6f 	isb	sy
 800957e:	e01b      	b.n	80095b8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009580:	69bb      	ldr	r3, [r7, #24]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d002      	beq.n	800958c <osMessageQueueGet+0x80>
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d103      	bne.n	8009594 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800958c:	f06f 0303 	mvn.w	r3, #3
 8009590:	61fb      	str	r3, [r7, #28]
 8009592:	e011      	b.n	80095b8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009594:	683a      	ldr	r2, [r7, #0]
 8009596:	68b9      	ldr	r1, [r7, #8]
 8009598:	69b8      	ldr	r0, [r7, #24]
 800959a:	f001 f9b9 	bl	800a910 <xQueueReceive>
 800959e:	4603      	mov	r3, r0
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d009      	beq.n	80095b8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d003      	beq.n	80095b2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80095aa:	f06f 0301 	mvn.w	r3, #1
 80095ae:	61fb      	str	r3, [r7, #28]
 80095b0:	e002      	b.n	80095b8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80095b2:	f06f 0302 	mvn.w	r3, #2
 80095b6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80095b8:	69fb      	ldr	r3, [r7, #28]
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3720      	adds	r7, #32
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}
 80095c2:	bf00      	nop
 80095c4:	e000ed04 	.word	0xe000ed04

080095c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80095c8:	b480      	push	{r7}
 80095ca:	b085      	sub	sp, #20
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	60f8      	str	r0, [r7, #12]
 80095d0:	60b9      	str	r1, [r7, #8]
 80095d2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	4a07      	ldr	r2, [pc, #28]	; (80095f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80095d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	4a06      	ldr	r2, [pc, #24]	; (80095f8 <vApplicationGetIdleTaskMemory+0x30>)
 80095de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80095e6:	601a      	str	r2, [r3, #0]
}
 80095e8:	bf00      	nop
 80095ea:	3714      	adds	r7, #20
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr
 80095f4:	2400527c 	.word	0x2400527c
 80095f8:	24005338 	.word	0x24005338

080095fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80095fc:	b480      	push	{r7}
 80095fe:	b085      	sub	sp, #20
 8009600:	af00      	add	r7, sp, #0
 8009602:	60f8      	str	r0, [r7, #12]
 8009604:	60b9      	str	r1, [r7, #8]
 8009606:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	4a07      	ldr	r2, [pc, #28]	; (8009628 <vApplicationGetTimerTaskMemory+0x2c>)
 800960c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	4a06      	ldr	r2, [pc, #24]	; (800962c <vApplicationGetTimerTaskMemory+0x30>)
 8009612:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f241 7270 	movw	r2, #6000	; 0x1770
 800961a:	601a      	str	r2, [r3, #0]
}
 800961c:	bf00      	nop
 800961e:	3714      	adds	r7, #20
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr
 8009628:	24008218 	.word	0x24008218
 800962c:	240082d4 	.word	0x240082d4

08009630 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b08a      	sub	sp, #40	; 0x28
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009638:	2300      	movs	r3, #0
 800963a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800963c:	f002 f804 	bl	800b648 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009640:	4b5b      	ldr	r3, [pc, #364]	; (80097b0 <pvPortMalloc+0x180>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d101      	bne.n	800964c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009648:	f000 f920 	bl	800988c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800964c:	4b59      	ldr	r3, [pc, #356]	; (80097b4 <pvPortMalloc+0x184>)
 800964e:	681a      	ldr	r2, [r3, #0]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	4013      	ands	r3, r2
 8009654:	2b00      	cmp	r3, #0
 8009656:	f040 8093 	bne.w	8009780 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d01d      	beq.n	800969c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009660:	2208      	movs	r2, #8
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	4413      	add	r3, r2
 8009666:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f003 0307 	and.w	r3, r3, #7
 800966e:	2b00      	cmp	r3, #0
 8009670:	d014      	beq.n	800969c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f023 0307 	bic.w	r3, r3, #7
 8009678:	3308      	adds	r3, #8
 800967a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f003 0307 	and.w	r3, r3, #7
 8009682:	2b00      	cmp	r3, #0
 8009684:	d00a      	beq.n	800969c <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800968a:	f383 8811 	msr	BASEPRI, r3
 800968e:	f3bf 8f6f 	isb	sy
 8009692:	f3bf 8f4f 	dsb	sy
 8009696:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009698:	bf00      	nop
 800969a:	e7fe      	b.n	800969a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d06e      	beq.n	8009780 <pvPortMalloc+0x150>
 80096a2:	4b45      	ldr	r3, [pc, #276]	; (80097b8 <pvPortMalloc+0x188>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	687a      	ldr	r2, [r7, #4]
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d869      	bhi.n	8009780 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80096ac:	4b43      	ldr	r3, [pc, #268]	; (80097bc <pvPortMalloc+0x18c>)
 80096ae:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80096b0:	4b42      	ldr	r3, [pc, #264]	; (80097bc <pvPortMalloc+0x18c>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80096b6:	e004      	b.n	80096c2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80096b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ba:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80096bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80096c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c4:	685b      	ldr	r3, [r3, #4]
 80096c6:	687a      	ldr	r2, [r7, #4]
 80096c8:	429a      	cmp	r2, r3
 80096ca:	d903      	bls.n	80096d4 <pvPortMalloc+0xa4>
 80096cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d1f1      	bne.n	80096b8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80096d4:	4b36      	ldr	r3, [pc, #216]	; (80097b0 <pvPortMalloc+0x180>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096da:	429a      	cmp	r2, r3
 80096dc:	d050      	beq.n	8009780 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80096de:	6a3b      	ldr	r3, [r7, #32]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	2208      	movs	r2, #8
 80096e4:	4413      	add	r3, r2
 80096e6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80096e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ea:	681a      	ldr	r2, [r3, #0]
 80096ec:	6a3b      	ldr	r3, [r7, #32]
 80096ee:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80096f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f2:	685a      	ldr	r2, [r3, #4]
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	1ad2      	subs	r2, r2, r3
 80096f8:	2308      	movs	r3, #8
 80096fa:	005b      	lsls	r3, r3, #1
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d91f      	bls.n	8009740 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	4413      	add	r3, r2
 8009706:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009708:	69bb      	ldr	r3, [r7, #24]
 800970a:	f003 0307 	and.w	r3, r3, #7
 800970e:	2b00      	cmp	r3, #0
 8009710:	d00a      	beq.n	8009728 <pvPortMalloc+0xf8>
	__asm volatile
 8009712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009716:	f383 8811 	msr	BASEPRI, r3
 800971a:	f3bf 8f6f 	isb	sy
 800971e:	f3bf 8f4f 	dsb	sy
 8009722:	613b      	str	r3, [r7, #16]
}
 8009724:	bf00      	nop
 8009726:	e7fe      	b.n	8009726 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972a:	685a      	ldr	r2, [r3, #4]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	1ad2      	subs	r2, r2, r3
 8009730:	69bb      	ldr	r3, [r7, #24]
 8009732:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009736:	687a      	ldr	r2, [r7, #4]
 8009738:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800973a:	69b8      	ldr	r0, [r7, #24]
 800973c:	f000 f908 	bl	8009950 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009740:	4b1d      	ldr	r3, [pc, #116]	; (80097b8 <pvPortMalloc+0x188>)
 8009742:	681a      	ldr	r2, [r3, #0]
 8009744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009746:	685b      	ldr	r3, [r3, #4]
 8009748:	1ad3      	subs	r3, r2, r3
 800974a:	4a1b      	ldr	r2, [pc, #108]	; (80097b8 <pvPortMalloc+0x188>)
 800974c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800974e:	4b1a      	ldr	r3, [pc, #104]	; (80097b8 <pvPortMalloc+0x188>)
 8009750:	681a      	ldr	r2, [r3, #0]
 8009752:	4b1b      	ldr	r3, [pc, #108]	; (80097c0 <pvPortMalloc+0x190>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	429a      	cmp	r2, r3
 8009758:	d203      	bcs.n	8009762 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800975a:	4b17      	ldr	r3, [pc, #92]	; (80097b8 <pvPortMalloc+0x188>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4a18      	ldr	r2, [pc, #96]	; (80097c0 <pvPortMalloc+0x190>)
 8009760:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009764:	685a      	ldr	r2, [r3, #4]
 8009766:	4b13      	ldr	r3, [pc, #76]	; (80097b4 <pvPortMalloc+0x184>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	431a      	orrs	r2, r3
 800976c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009772:	2200      	movs	r2, #0
 8009774:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009776:	4b13      	ldr	r3, [pc, #76]	; (80097c4 <pvPortMalloc+0x194>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	3301      	adds	r3, #1
 800977c:	4a11      	ldr	r2, [pc, #68]	; (80097c4 <pvPortMalloc+0x194>)
 800977e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009780:	f001 ff70 	bl	800b664 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009784:	69fb      	ldr	r3, [r7, #28]
 8009786:	f003 0307 	and.w	r3, r3, #7
 800978a:	2b00      	cmp	r3, #0
 800978c:	d00a      	beq.n	80097a4 <pvPortMalloc+0x174>
	__asm volatile
 800978e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009792:	f383 8811 	msr	BASEPRI, r3
 8009796:	f3bf 8f6f 	isb	sy
 800979a:	f3bf 8f4f 	dsb	sy
 800979e:	60fb      	str	r3, [r7, #12]
}
 80097a0:	bf00      	nop
 80097a2:	e7fe      	b.n	80097a2 <pvPortMalloc+0x172>
	return pvReturn;
 80097a4:	69fb      	ldr	r3, [r7, #28]
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3728      	adds	r7, #40	; 0x28
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}
 80097ae:	bf00      	nop
 80097b0:	24011c9c 	.word	0x24011c9c
 80097b4:	24011cb0 	.word	0x24011cb0
 80097b8:	24011ca0 	.word	0x24011ca0
 80097bc:	24011c94 	.word	0x24011c94
 80097c0:	24011ca4 	.word	0x24011ca4
 80097c4:	24011ca8 	.word	0x24011ca8

080097c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b086      	sub	sp, #24
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d04d      	beq.n	8009876 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80097da:	2308      	movs	r3, #8
 80097dc:	425b      	negs	r3, r3
 80097de:	697a      	ldr	r2, [r7, #20]
 80097e0:	4413      	add	r3, r2
 80097e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	685a      	ldr	r2, [r3, #4]
 80097ec:	4b24      	ldr	r3, [pc, #144]	; (8009880 <vPortFree+0xb8>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4013      	ands	r3, r2
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d10a      	bne.n	800980c <vPortFree+0x44>
	__asm volatile
 80097f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097fa:	f383 8811 	msr	BASEPRI, r3
 80097fe:	f3bf 8f6f 	isb	sy
 8009802:	f3bf 8f4f 	dsb	sy
 8009806:	60fb      	str	r3, [r7, #12]
}
 8009808:	bf00      	nop
 800980a:	e7fe      	b.n	800980a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d00a      	beq.n	800982a <vPortFree+0x62>
	__asm volatile
 8009814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009818:	f383 8811 	msr	BASEPRI, r3
 800981c:	f3bf 8f6f 	isb	sy
 8009820:	f3bf 8f4f 	dsb	sy
 8009824:	60bb      	str	r3, [r7, #8]
}
 8009826:	bf00      	nop
 8009828:	e7fe      	b.n	8009828 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	685a      	ldr	r2, [r3, #4]
 800982e:	4b14      	ldr	r3, [pc, #80]	; (8009880 <vPortFree+0xb8>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4013      	ands	r3, r2
 8009834:	2b00      	cmp	r3, #0
 8009836:	d01e      	beq.n	8009876 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d11a      	bne.n	8009876 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	685a      	ldr	r2, [r3, #4]
 8009844:	4b0e      	ldr	r3, [pc, #56]	; (8009880 <vPortFree+0xb8>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	43db      	mvns	r3, r3
 800984a:	401a      	ands	r2, r3
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009850:	f001 fefa 	bl	800b648 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	685a      	ldr	r2, [r3, #4]
 8009858:	4b0a      	ldr	r3, [pc, #40]	; (8009884 <vPortFree+0xbc>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4413      	add	r3, r2
 800985e:	4a09      	ldr	r2, [pc, #36]	; (8009884 <vPortFree+0xbc>)
 8009860:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009862:	6938      	ldr	r0, [r7, #16]
 8009864:	f000 f874 	bl	8009950 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009868:	4b07      	ldr	r3, [pc, #28]	; (8009888 <vPortFree+0xc0>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	3301      	adds	r3, #1
 800986e:	4a06      	ldr	r2, [pc, #24]	; (8009888 <vPortFree+0xc0>)
 8009870:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009872:	f001 fef7 	bl	800b664 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009876:	bf00      	nop
 8009878:	3718      	adds	r7, #24
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
 800987e:	bf00      	nop
 8009880:	24011cb0 	.word	0x24011cb0
 8009884:	24011ca0 	.word	0x24011ca0
 8009888:	24011cac 	.word	0x24011cac

0800988c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800988c:	b480      	push	{r7}
 800988e:	b085      	sub	sp, #20
 8009890:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009892:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009896:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009898:	4b27      	ldr	r3, [pc, #156]	; (8009938 <prvHeapInit+0xac>)
 800989a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	f003 0307 	and.w	r3, r3, #7
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d00c      	beq.n	80098c0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	3307      	adds	r3, #7
 80098aa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	f023 0307 	bic.w	r3, r3, #7
 80098b2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80098b4:	68ba      	ldr	r2, [r7, #8]
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	1ad3      	subs	r3, r2, r3
 80098ba:	4a1f      	ldr	r2, [pc, #124]	; (8009938 <prvHeapInit+0xac>)
 80098bc:	4413      	add	r3, r2
 80098be:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80098c4:	4a1d      	ldr	r2, [pc, #116]	; (800993c <prvHeapInit+0xb0>)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80098ca:	4b1c      	ldr	r3, [pc, #112]	; (800993c <prvHeapInit+0xb0>)
 80098cc:	2200      	movs	r2, #0
 80098ce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	68ba      	ldr	r2, [r7, #8]
 80098d4:	4413      	add	r3, r2
 80098d6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80098d8:	2208      	movs	r2, #8
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	1a9b      	subs	r3, r3, r2
 80098de:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f023 0307 	bic.w	r3, r3, #7
 80098e6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	4a15      	ldr	r2, [pc, #84]	; (8009940 <prvHeapInit+0xb4>)
 80098ec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80098ee:	4b14      	ldr	r3, [pc, #80]	; (8009940 <prvHeapInit+0xb4>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	2200      	movs	r2, #0
 80098f4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80098f6:	4b12      	ldr	r3, [pc, #72]	; (8009940 <prvHeapInit+0xb4>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	2200      	movs	r2, #0
 80098fc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	68fa      	ldr	r2, [r7, #12]
 8009906:	1ad2      	subs	r2, r2, r3
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800990c:	4b0c      	ldr	r3, [pc, #48]	; (8009940 <prvHeapInit+0xb4>)
 800990e:	681a      	ldr	r2, [r3, #0]
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	4a0a      	ldr	r2, [pc, #40]	; (8009944 <prvHeapInit+0xb8>)
 800991a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	685b      	ldr	r3, [r3, #4]
 8009920:	4a09      	ldr	r2, [pc, #36]	; (8009948 <prvHeapInit+0xbc>)
 8009922:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009924:	4b09      	ldr	r3, [pc, #36]	; (800994c <prvHeapInit+0xc0>)
 8009926:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800992a:	601a      	str	r2, [r3, #0]
}
 800992c:	bf00      	nop
 800992e:	3714      	adds	r7, #20
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr
 8009938:	2400e094 	.word	0x2400e094
 800993c:	24011c94 	.word	0x24011c94
 8009940:	24011c9c 	.word	0x24011c9c
 8009944:	24011ca4 	.word	0x24011ca4
 8009948:	24011ca0 	.word	0x24011ca0
 800994c:	24011cb0 	.word	0x24011cb0

08009950 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009950:	b480      	push	{r7}
 8009952:	b085      	sub	sp, #20
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009958:	4b28      	ldr	r3, [pc, #160]	; (80099fc <prvInsertBlockIntoFreeList+0xac>)
 800995a:	60fb      	str	r3, [r7, #12]
 800995c:	e002      	b.n	8009964 <prvInsertBlockIntoFreeList+0x14>
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	60fb      	str	r3, [r7, #12]
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	687a      	ldr	r2, [r7, #4]
 800996a:	429a      	cmp	r2, r3
 800996c:	d8f7      	bhi.n	800995e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	685b      	ldr	r3, [r3, #4]
 8009976:	68ba      	ldr	r2, [r7, #8]
 8009978:	4413      	add	r3, r2
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	429a      	cmp	r2, r3
 800997e:	d108      	bne.n	8009992 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	685a      	ldr	r2, [r3, #4]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	441a      	add	r2, r3
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	685b      	ldr	r3, [r3, #4]
 800999a:	68ba      	ldr	r2, [r7, #8]
 800999c:	441a      	add	r2, r3
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	429a      	cmp	r2, r3
 80099a4:	d118      	bne.n	80099d8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681a      	ldr	r2, [r3, #0]
 80099aa:	4b15      	ldr	r3, [pc, #84]	; (8009a00 <prvInsertBlockIntoFreeList+0xb0>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d00d      	beq.n	80099ce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	685a      	ldr	r2, [r3, #4]
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	685b      	ldr	r3, [r3, #4]
 80099bc:	441a      	add	r2, r3
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	681a      	ldr	r2, [r3, #0]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	601a      	str	r2, [r3, #0]
 80099cc:	e008      	b.n	80099e0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80099ce:	4b0c      	ldr	r3, [pc, #48]	; (8009a00 <prvInsertBlockIntoFreeList+0xb0>)
 80099d0:	681a      	ldr	r2, [r3, #0]
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	601a      	str	r2, [r3, #0]
 80099d6:	e003      	b.n	80099e0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681a      	ldr	r2, [r3, #0]
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80099e0:	68fa      	ldr	r2, [r7, #12]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	429a      	cmp	r2, r3
 80099e6:	d002      	beq.n	80099ee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	687a      	ldr	r2, [r7, #4]
 80099ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80099ee:	bf00      	nop
 80099f0:	3714      	adds	r7, #20
 80099f2:	46bd      	mov	sp, r7
 80099f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f8:	4770      	bx	lr
 80099fa:	bf00      	nop
 80099fc:	24011c94 	.word	0x24011c94
 8009a00:	24011c9c 	.word	0x24011c9c

08009a04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009a04:	b480      	push	{r7}
 8009a06:	b083      	sub	sp, #12
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f103 0208 	add.w	r2, r3, #8
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f04f 32ff 	mov.w	r2, #4294967295
 8009a1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f103 0208 	add.w	r2, r3, #8
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f103 0208 	add.w	r2, r3, #8
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2200      	movs	r2, #0
 8009a36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009a38:	bf00      	nop
 8009a3a:	370c      	adds	r7, #12
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr

08009a44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009a44:	b480      	push	{r7}
 8009a46:	b083      	sub	sp, #12
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009a52:	bf00      	nop
 8009a54:	370c      	adds	r7, #12
 8009a56:	46bd      	mov	sp, r7
 8009a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5c:	4770      	bx	lr

08009a5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009a5e:	b480      	push	{r7}
 8009a60:	b085      	sub	sp, #20
 8009a62:	af00      	add	r7, sp, #0
 8009a64:	6078      	str	r0, [r7, #4]
 8009a66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	68fa      	ldr	r2, [r7, #12]
 8009a72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	689a      	ldr	r2, [r3, #8]
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	689b      	ldr	r3, [r3, #8]
 8009a80:	683a      	ldr	r2, [r7, #0]
 8009a82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	683a      	ldr	r2, [r7, #0]
 8009a88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	1c5a      	adds	r2, r3, #1
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	601a      	str	r2, [r3, #0]
}
 8009a9a:	bf00      	nop
 8009a9c:	3714      	adds	r7, #20
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa4:	4770      	bx	lr

08009aa6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009aa6:	b480      	push	{r7}
 8009aa8:	b085      	sub	sp, #20
 8009aaa:	af00      	add	r7, sp, #0
 8009aac:	6078      	str	r0, [r7, #4]
 8009aae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009abc:	d103      	bne.n	8009ac6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	691b      	ldr	r3, [r3, #16]
 8009ac2:	60fb      	str	r3, [r7, #12]
 8009ac4:	e00c      	b.n	8009ae0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	3308      	adds	r3, #8
 8009aca:	60fb      	str	r3, [r7, #12]
 8009acc:	e002      	b.n	8009ad4 <vListInsert+0x2e>
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	60fb      	str	r3, [r7, #12]
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	685b      	ldr	r3, [r3, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	68ba      	ldr	r2, [r7, #8]
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d2f6      	bcs.n	8009ace <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	685a      	ldr	r2, [r3, #4]
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	685b      	ldr	r3, [r3, #4]
 8009aec:	683a      	ldr	r2, [r7, #0]
 8009aee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	68fa      	ldr	r2, [r7, #12]
 8009af4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	683a      	ldr	r2, [r7, #0]
 8009afa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	1c5a      	adds	r2, r3, #1
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	601a      	str	r2, [r3, #0]
}
 8009b0c:	bf00      	nop
 8009b0e:	3714      	adds	r7, #20
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr

08009b18 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b085      	sub	sp, #20
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	691b      	ldr	r3, [r3, #16]
 8009b24:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	687a      	ldr	r2, [r7, #4]
 8009b2c:	6892      	ldr	r2, [r2, #8]
 8009b2e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	689b      	ldr	r3, [r3, #8]
 8009b34:	687a      	ldr	r2, [r7, #4]
 8009b36:	6852      	ldr	r2, [r2, #4]
 8009b38:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	687a      	ldr	r2, [r7, #4]
 8009b40:	429a      	cmp	r2, r3
 8009b42:	d103      	bne.n	8009b4c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	689a      	ldr	r2, [r3, #8]
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	1e5a      	subs	r2, r3, #1
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3714      	adds	r7, #20
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr

08009b6c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b085      	sub	sp, #20
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	60f8      	str	r0, [r7, #12]
 8009b74:	60b9      	str	r1, [r7, #8]
 8009b76:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	3b04      	subs	r3, #4
 8009b7c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009b84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	3b04      	subs	r3, #4
 8009b8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	f023 0201 	bic.w	r2, r3, #1
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	3b04      	subs	r3, #4
 8009b9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009b9c:	4a0c      	ldr	r2, [pc, #48]	; (8009bd0 <pxPortInitialiseStack+0x64>)
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	3b14      	subs	r3, #20
 8009ba6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009ba8:	687a      	ldr	r2, [r7, #4]
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	3b04      	subs	r3, #4
 8009bb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f06f 0202 	mvn.w	r2, #2
 8009bba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	3b20      	subs	r3, #32
 8009bc0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3714      	adds	r7, #20
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr
 8009bd0:	08009bd5 	.word	0x08009bd5

08009bd4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b085      	sub	sp, #20
 8009bd8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009bde:	4b12      	ldr	r3, [pc, #72]	; (8009c28 <prvTaskExitError+0x54>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009be6:	d00a      	beq.n	8009bfe <prvTaskExitError+0x2a>
	__asm volatile
 8009be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bec:	f383 8811 	msr	BASEPRI, r3
 8009bf0:	f3bf 8f6f 	isb	sy
 8009bf4:	f3bf 8f4f 	dsb	sy
 8009bf8:	60fb      	str	r3, [r7, #12]
}
 8009bfa:	bf00      	nop
 8009bfc:	e7fe      	b.n	8009bfc <prvTaskExitError+0x28>
	__asm volatile
 8009bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c02:	f383 8811 	msr	BASEPRI, r3
 8009c06:	f3bf 8f6f 	isb	sy
 8009c0a:	f3bf 8f4f 	dsb	sy
 8009c0e:	60bb      	str	r3, [r7, #8]
}
 8009c10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009c12:	bf00      	nop
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d0fc      	beq.n	8009c14 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009c1a:	bf00      	nop
 8009c1c:	bf00      	nop
 8009c1e:	3714      	adds	r7, #20
 8009c20:	46bd      	mov	sp, r7
 8009c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c26:	4770      	bx	lr
 8009c28:	24000024 	.word	0x24000024
 8009c2c:	00000000 	.word	0x00000000

08009c30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009c30:	4b07      	ldr	r3, [pc, #28]	; (8009c50 <pxCurrentTCBConst2>)
 8009c32:	6819      	ldr	r1, [r3, #0]
 8009c34:	6808      	ldr	r0, [r1, #0]
 8009c36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c3a:	f380 8809 	msr	PSP, r0
 8009c3e:	f3bf 8f6f 	isb	sy
 8009c42:	f04f 0000 	mov.w	r0, #0
 8009c46:	f380 8811 	msr	BASEPRI, r0
 8009c4a:	4770      	bx	lr
 8009c4c:	f3af 8000 	nop.w

08009c50 <pxCurrentTCBConst2>:
 8009c50:	24011cfc 	.word	0x24011cfc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009c54:	bf00      	nop
 8009c56:	bf00      	nop

08009c58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009c58:	4808      	ldr	r0, [pc, #32]	; (8009c7c <prvPortStartFirstTask+0x24>)
 8009c5a:	6800      	ldr	r0, [r0, #0]
 8009c5c:	6800      	ldr	r0, [r0, #0]
 8009c5e:	f380 8808 	msr	MSP, r0
 8009c62:	f04f 0000 	mov.w	r0, #0
 8009c66:	f380 8814 	msr	CONTROL, r0
 8009c6a:	b662      	cpsie	i
 8009c6c:	b661      	cpsie	f
 8009c6e:	f3bf 8f4f 	dsb	sy
 8009c72:	f3bf 8f6f 	isb	sy
 8009c76:	df00      	svc	0
 8009c78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009c7a:	bf00      	nop
 8009c7c:	e000ed08 	.word	0xe000ed08

08009c80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b086      	sub	sp, #24
 8009c84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009c86:	4b46      	ldr	r3, [pc, #280]	; (8009da0 <xPortStartScheduler+0x120>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4a46      	ldr	r2, [pc, #280]	; (8009da4 <xPortStartScheduler+0x124>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d10a      	bne.n	8009ca6 <xPortStartScheduler+0x26>
	__asm volatile
 8009c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c94:	f383 8811 	msr	BASEPRI, r3
 8009c98:	f3bf 8f6f 	isb	sy
 8009c9c:	f3bf 8f4f 	dsb	sy
 8009ca0:	613b      	str	r3, [r7, #16]
}
 8009ca2:	bf00      	nop
 8009ca4:	e7fe      	b.n	8009ca4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009ca6:	4b3e      	ldr	r3, [pc, #248]	; (8009da0 <xPortStartScheduler+0x120>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4a3f      	ldr	r2, [pc, #252]	; (8009da8 <xPortStartScheduler+0x128>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d10a      	bne.n	8009cc6 <xPortStartScheduler+0x46>
	__asm volatile
 8009cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb4:	f383 8811 	msr	BASEPRI, r3
 8009cb8:	f3bf 8f6f 	isb	sy
 8009cbc:	f3bf 8f4f 	dsb	sy
 8009cc0:	60fb      	str	r3, [r7, #12]
}
 8009cc2:	bf00      	nop
 8009cc4:	e7fe      	b.n	8009cc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009cc6:	4b39      	ldr	r3, [pc, #228]	; (8009dac <xPortStartScheduler+0x12c>)
 8009cc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	781b      	ldrb	r3, [r3, #0]
 8009cce:	b2db      	uxtb	r3, r3
 8009cd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	22ff      	movs	r2, #255	; 0xff
 8009cd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	781b      	ldrb	r3, [r3, #0]
 8009cdc:	b2db      	uxtb	r3, r3
 8009cde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009ce0:	78fb      	ldrb	r3, [r7, #3]
 8009ce2:	b2db      	uxtb	r3, r3
 8009ce4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009ce8:	b2da      	uxtb	r2, r3
 8009cea:	4b31      	ldr	r3, [pc, #196]	; (8009db0 <xPortStartScheduler+0x130>)
 8009cec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009cee:	4b31      	ldr	r3, [pc, #196]	; (8009db4 <xPortStartScheduler+0x134>)
 8009cf0:	2207      	movs	r2, #7
 8009cf2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009cf4:	e009      	b.n	8009d0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009cf6:	4b2f      	ldr	r3, [pc, #188]	; (8009db4 <xPortStartScheduler+0x134>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	3b01      	subs	r3, #1
 8009cfc:	4a2d      	ldr	r2, [pc, #180]	; (8009db4 <xPortStartScheduler+0x134>)
 8009cfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009d00:	78fb      	ldrb	r3, [r7, #3]
 8009d02:	b2db      	uxtb	r3, r3
 8009d04:	005b      	lsls	r3, r3, #1
 8009d06:	b2db      	uxtb	r3, r3
 8009d08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d0a:	78fb      	ldrb	r3, [r7, #3]
 8009d0c:	b2db      	uxtb	r3, r3
 8009d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d12:	2b80      	cmp	r3, #128	; 0x80
 8009d14:	d0ef      	beq.n	8009cf6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009d16:	4b27      	ldr	r3, [pc, #156]	; (8009db4 <xPortStartScheduler+0x134>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f1c3 0307 	rsb	r3, r3, #7
 8009d1e:	2b04      	cmp	r3, #4
 8009d20:	d00a      	beq.n	8009d38 <xPortStartScheduler+0xb8>
	__asm volatile
 8009d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d26:	f383 8811 	msr	BASEPRI, r3
 8009d2a:	f3bf 8f6f 	isb	sy
 8009d2e:	f3bf 8f4f 	dsb	sy
 8009d32:	60bb      	str	r3, [r7, #8]
}
 8009d34:	bf00      	nop
 8009d36:	e7fe      	b.n	8009d36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009d38:	4b1e      	ldr	r3, [pc, #120]	; (8009db4 <xPortStartScheduler+0x134>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	021b      	lsls	r3, r3, #8
 8009d3e:	4a1d      	ldr	r2, [pc, #116]	; (8009db4 <xPortStartScheduler+0x134>)
 8009d40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009d42:	4b1c      	ldr	r3, [pc, #112]	; (8009db4 <xPortStartScheduler+0x134>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009d4a:	4a1a      	ldr	r2, [pc, #104]	; (8009db4 <xPortStartScheduler+0x134>)
 8009d4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	b2da      	uxtb	r2, r3
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009d56:	4b18      	ldr	r3, [pc, #96]	; (8009db8 <xPortStartScheduler+0x138>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	4a17      	ldr	r2, [pc, #92]	; (8009db8 <xPortStartScheduler+0x138>)
 8009d5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009d60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009d62:	4b15      	ldr	r3, [pc, #84]	; (8009db8 <xPortStartScheduler+0x138>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4a14      	ldr	r2, [pc, #80]	; (8009db8 <xPortStartScheduler+0x138>)
 8009d68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009d6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009d6e:	f000 f8dd 	bl	8009f2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009d72:	4b12      	ldr	r3, [pc, #72]	; (8009dbc <xPortStartScheduler+0x13c>)
 8009d74:	2200      	movs	r2, #0
 8009d76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009d78:	f000 f8fc 	bl	8009f74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009d7c:	4b10      	ldr	r3, [pc, #64]	; (8009dc0 <xPortStartScheduler+0x140>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4a0f      	ldr	r2, [pc, #60]	; (8009dc0 <xPortStartScheduler+0x140>)
 8009d82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009d86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009d88:	f7ff ff66 	bl	8009c58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009d8c:	f001 fde4 	bl	800b958 <vTaskSwitchContext>
	prvTaskExitError();
 8009d90:	f7ff ff20 	bl	8009bd4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009d94:	2300      	movs	r3, #0
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3718      	adds	r7, #24
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
 8009d9e:	bf00      	nop
 8009da0:	e000ed00 	.word	0xe000ed00
 8009da4:	410fc271 	.word	0x410fc271
 8009da8:	410fc270 	.word	0x410fc270
 8009dac:	e000e400 	.word	0xe000e400
 8009db0:	24011cb4 	.word	0x24011cb4
 8009db4:	24011cb8 	.word	0x24011cb8
 8009db8:	e000ed20 	.word	0xe000ed20
 8009dbc:	24000024 	.word	0x24000024
 8009dc0:	e000ef34 	.word	0xe000ef34

08009dc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b083      	sub	sp, #12
 8009dc8:	af00      	add	r7, sp, #0
	__asm volatile
 8009dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dce:	f383 8811 	msr	BASEPRI, r3
 8009dd2:	f3bf 8f6f 	isb	sy
 8009dd6:	f3bf 8f4f 	dsb	sy
 8009dda:	607b      	str	r3, [r7, #4]
}
 8009ddc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009dde:	4b0f      	ldr	r3, [pc, #60]	; (8009e1c <vPortEnterCritical+0x58>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	3301      	adds	r3, #1
 8009de4:	4a0d      	ldr	r2, [pc, #52]	; (8009e1c <vPortEnterCritical+0x58>)
 8009de6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009de8:	4b0c      	ldr	r3, [pc, #48]	; (8009e1c <vPortEnterCritical+0x58>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	2b01      	cmp	r3, #1
 8009dee:	d10f      	bne.n	8009e10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009df0:	4b0b      	ldr	r3, [pc, #44]	; (8009e20 <vPortEnterCritical+0x5c>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	b2db      	uxtb	r3, r3
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d00a      	beq.n	8009e10 <vPortEnterCritical+0x4c>
	__asm volatile
 8009dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dfe:	f383 8811 	msr	BASEPRI, r3
 8009e02:	f3bf 8f6f 	isb	sy
 8009e06:	f3bf 8f4f 	dsb	sy
 8009e0a:	603b      	str	r3, [r7, #0]
}
 8009e0c:	bf00      	nop
 8009e0e:	e7fe      	b.n	8009e0e <vPortEnterCritical+0x4a>
	}
}
 8009e10:	bf00      	nop
 8009e12:	370c      	adds	r7, #12
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr
 8009e1c:	24000024 	.word	0x24000024
 8009e20:	e000ed04 	.word	0xe000ed04

08009e24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009e24:	b480      	push	{r7}
 8009e26:	b083      	sub	sp, #12
 8009e28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009e2a:	4b12      	ldr	r3, [pc, #72]	; (8009e74 <vPortExitCritical+0x50>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d10a      	bne.n	8009e48 <vPortExitCritical+0x24>
	__asm volatile
 8009e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e36:	f383 8811 	msr	BASEPRI, r3
 8009e3a:	f3bf 8f6f 	isb	sy
 8009e3e:	f3bf 8f4f 	dsb	sy
 8009e42:	607b      	str	r3, [r7, #4]
}
 8009e44:	bf00      	nop
 8009e46:	e7fe      	b.n	8009e46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009e48:	4b0a      	ldr	r3, [pc, #40]	; (8009e74 <vPortExitCritical+0x50>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	3b01      	subs	r3, #1
 8009e4e:	4a09      	ldr	r2, [pc, #36]	; (8009e74 <vPortExitCritical+0x50>)
 8009e50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009e52:	4b08      	ldr	r3, [pc, #32]	; (8009e74 <vPortExitCritical+0x50>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d105      	bne.n	8009e66 <vPortExitCritical+0x42>
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009e64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009e66:	bf00      	nop
 8009e68:	370c      	adds	r7, #12
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e70:	4770      	bx	lr
 8009e72:	bf00      	nop
 8009e74:	24000024 	.word	0x24000024
	...

08009e80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009e80:	f3ef 8009 	mrs	r0, PSP
 8009e84:	f3bf 8f6f 	isb	sy
 8009e88:	4b15      	ldr	r3, [pc, #84]	; (8009ee0 <pxCurrentTCBConst>)
 8009e8a:	681a      	ldr	r2, [r3, #0]
 8009e8c:	f01e 0f10 	tst.w	lr, #16
 8009e90:	bf08      	it	eq
 8009e92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009e96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e9a:	6010      	str	r0, [r2, #0]
 8009e9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009ea0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009ea4:	f380 8811 	msr	BASEPRI, r0
 8009ea8:	f3bf 8f4f 	dsb	sy
 8009eac:	f3bf 8f6f 	isb	sy
 8009eb0:	f001 fd52 	bl	800b958 <vTaskSwitchContext>
 8009eb4:	f04f 0000 	mov.w	r0, #0
 8009eb8:	f380 8811 	msr	BASEPRI, r0
 8009ebc:	bc09      	pop	{r0, r3}
 8009ebe:	6819      	ldr	r1, [r3, #0]
 8009ec0:	6808      	ldr	r0, [r1, #0]
 8009ec2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ec6:	f01e 0f10 	tst.w	lr, #16
 8009eca:	bf08      	it	eq
 8009ecc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009ed0:	f380 8809 	msr	PSP, r0
 8009ed4:	f3bf 8f6f 	isb	sy
 8009ed8:	4770      	bx	lr
 8009eda:	bf00      	nop
 8009edc:	f3af 8000 	nop.w

08009ee0 <pxCurrentTCBConst>:
 8009ee0:	24011cfc 	.word	0x24011cfc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009ee4:	bf00      	nop
 8009ee6:	bf00      	nop

08009ee8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b082      	sub	sp, #8
 8009eec:	af00      	add	r7, sp, #0
	__asm volatile
 8009eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef2:	f383 8811 	msr	BASEPRI, r3
 8009ef6:	f3bf 8f6f 	isb	sy
 8009efa:	f3bf 8f4f 	dsb	sy
 8009efe:	607b      	str	r3, [r7, #4]
}
 8009f00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009f02:	f001 fc6f 	bl	800b7e4 <xTaskIncrementTick>
 8009f06:	4603      	mov	r3, r0
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d003      	beq.n	8009f14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009f0c:	4b06      	ldr	r3, [pc, #24]	; (8009f28 <xPortSysTickHandler+0x40>)
 8009f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f12:	601a      	str	r2, [r3, #0]
 8009f14:	2300      	movs	r3, #0
 8009f16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	f383 8811 	msr	BASEPRI, r3
}
 8009f1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009f20:	bf00      	nop
 8009f22:	3708      	adds	r7, #8
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}
 8009f28:	e000ed04 	.word	0xe000ed04

08009f2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009f30:	4b0b      	ldr	r3, [pc, #44]	; (8009f60 <vPortSetupTimerInterrupt+0x34>)
 8009f32:	2200      	movs	r2, #0
 8009f34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009f36:	4b0b      	ldr	r3, [pc, #44]	; (8009f64 <vPortSetupTimerInterrupt+0x38>)
 8009f38:	2200      	movs	r2, #0
 8009f3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009f3c:	4b0a      	ldr	r3, [pc, #40]	; (8009f68 <vPortSetupTimerInterrupt+0x3c>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	4a0a      	ldr	r2, [pc, #40]	; (8009f6c <vPortSetupTimerInterrupt+0x40>)
 8009f42:	fba2 2303 	umull	r2, r3, r2, r3
 8009f46:	099b      	lsrs	r3, r3, #6
 8009f48:	4a09      	ldr	r2, [pc, #36]	; (8009f70 <vPortSetupTimerInterrupt+0x44>)
 8009f4a:	3b01      	subs	r3, #1
 8009f4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009f4e:	4b04      	ldr	r3, [pc, #16]	; (8009f60 <vPortSetupTimerInterrupt+0x34>)
 8009f50:	2207      	movs	r2, #7
 8009f52:	601a      	str	r2, [r3, #0]
}
 8009f54:	bf00      	nop
 8009f56:	46bd      	mov	sp, r7
 8009f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5c:	4770      	bx	lr
 8009f5e:	bf00      	nop
 8009f60:	e000e010 	.word	0xe000e010
 8009f64:	e000e018 	.word	0xe000e018
 8009f68:	24000000 	.word	0x24000000
 8009f6c:	10624dd3 	.word	0x10624dd3
 8009f70:	e000e014 	.word	0xe000e014

08009f74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009f74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009f84 <vPortEnableVFP+0x10>
 8009f78:	6801      	ldr	r1, [r0, #0]
 8009f7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009f7e:	6001      	str	r1, [r0, #0]
 8009f80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009f82:	bf00      	nop
 8009f84:	e000ed88 	.word	0xe000ed88

08009f88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009f88:	b480      	push	{r7}
 8009f8a:	b085      	sub	sp, #20
 8009f8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009f8e:	f3ef 8305 	mrs	r3, IPSR
 8009f92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2b0f      	cmp	r3, #15
 8009f98:	d914      	bls.n	8009fc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009f9a:	4a17      	ldr	r2, [pc, #92]	; (8009ff8 <vPortValidateInterruptPriority+0x70>)
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	4413      	add	r3, r2
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009fa4:	4b15      	ldr	r3, [pc, #84]	; (8009ffc <vPortValidateInterruptPriority+0x74>)
 8009fa6:	781b      	ldrb	r3, [r3, #0]
 8009fa8:	7afa      	ldrb	r2, [r7, #11]
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d20a      	bcs.n	8009fc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb2:	f383 8811 	msr	BASEPRI, r3
 8009fb6:	f3bf 8f6f 	isb	sy
 8009fba:	f3bf 8f4f 	dsb	sy
 8009fbe:	607b      	str	r3, [r7, #4]
}
 8009fc0:	bf00      	nop
 8009fc2:	e7fe      	b.n	8009fc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009fc4:	4b0e      	ldr	r3, [pc, #56]	; (800a000 <vPortValidateInterruptPriority+0x78>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009fcc:	4b0d      	ldr	r3, [pc, #52]	; (800a004 <vPortValidateInterruptPriority+0x7c>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	d90a      	bls.n	8009fea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd8:	f383 8811 	msr	BASEPRI, r3
 8009fdc:	f3bf 8f6f 	isb	sy
 8009fe0:	f3bf 8f4f 	dsb	sy
 8009fe4:	603b      	str	r3, [r7, #0]
}
 8009fe6:	bf00      	nop
 8009fe8:	e7fe      	b.n	8009fe8 <vPortValidateInterruptPriority+0x60>
	}
 8009fea:	bf00      	nop
 8009fec:	3714      	adds	r7, #20
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff4:	4770      	bx	lr
 8009ff6:	bf00      	nop
 8009ff8:	e000e3f0 	.word	0xe000e3f0
 8009ffc:	24011cb4 	.word	0x24011cb4
 800a000:	e000ed0c 	.word	0xe000ed0c
 800a004:	24011cb8 	.word	0x24011cb8

0800a008 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b084      	sub	sp, #16
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d10a      	bne.n	800a032 <xQueueGenericReset+0x2a>
	__asm volatile
 800a01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a020:	f383 8811 	msr	BASEPRI, r3
 800a024:	f3bf 8f6f 	isb	sy
 800a028:	f3bf 8f4f 	dsb	sy
 800a02c:	60bb      	str	r3, [r7, #8]
}
 800a02e:	bf00      	nop
 800a030:	e7fe      	b.n	800a030 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a032:	f7ff fec7 	bl	8009dc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681a      	ldr	r2, [r3, #0]
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a03e:	68f9      	ldr	r1, [r7, #12]
 800a040:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a042:	fb01 f303 	mul.w	r3, r1, r3
 800a046:	441a      	add	r2, r3
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2200      	movs	r2, #0
 800a050:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681a      	ldr	r2, [r3, #0]
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681a      	ldr	r2, [r3, #0]
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a062:	3b01      	subs	r3, #1
 800a064:	68f9      	ldr	r1, [r7, #12]
 800a066:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a068:	fb01 f303 	mul.w	r3, r1, r3
 800a06c:	441a      	add	r2, r3
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	22ff      	movs	r2, #255	; 0xff
 800a076:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	22ff      	movs	r2, #255	; 0xff
 800a07e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d114      	bne.n	800a0b2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	691b      	ldr	r3, [r3, #16]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d01a      	beq.n	800a0c6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	3310      	adds	r3, #16
 800a094:	4618      	mov	r0, r3
 800a096:	f001 fd13 	bl	800bac0 <xTaskRemoveFromEventList>
 800a09a:	4603      	mov	r3, r0
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d012      	beq.n	800a0c6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a0a0:	4b0c      	ldr	r3, [pc, #48]	; (800a0d4 <xQueueGenericReset+0xcc>)
 800a0a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0a6:	601a      	str	r2, [r3, #0]
 800a0a8:	f3bf 8f4f 	dsb	sy
 800a0ac:	f3bf 8f6f 	isb	sy
 800a0b0:	e009      	b.n	800a0c6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	3310      	adds	r3, #16
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f7ff fca4 	bl	8009a04 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	3324      	adds	r3, #36	; 0x24
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f7ff fc9f 	bl	8009a04 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a0c6:	f7ff fead 	bl	8009e24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a0ca:	2301      	movs	r3, #1
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3710      	adds	r7, #16
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}
 800a0d4:	e000ed04 	.word	0xe000ed04

0800a0d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b08e      	sub	sp, #56	; 0x38
 800a0dc:	af02      	add	r7, sp, #8
 800a0de:	60f8      	str	r0, [r7, #12]
 800a0e0:	60b9      	str	r1, [r7, #8]
 800a0e2:	607a      	str	r2, [r7, #4]
 800a0e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d10a      	bne.n	800a102 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f0:	f383 8811 	msr	BASEPRI, r3
 800a0f4:	f3bf 8f6f 	isb	sy
 800a0f8:	f3bf 8f4f 	dsb	sy
 800a0fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a0fe:	bf00      	nop
 800a100:	e7fe      	b.n	800a100 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d10a      	bne.n	800a11e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a10c:	f383 8811 	msr	BASEPRI, r3
 800a110:	f3bf 8f6f 	isb	sy
 800a114:	f3bf 8f4f 	dsb	sy
 800a118:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a11a:	bf00      	nop
 800a11c:	e7fe      	b.n	800a11c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d002      	beq.n	800a12a <xQueueGenericCreateStatic+0x52>
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d001      	beq.n	800a12e <xQueueGenericCreateStatic+0x56>
 800a12a:	2301      	movs	r3, #1
 800a12c:	e000      	b.n	800a130 <xQueueGenericCreateStatic+0x58>
 800a12e:	2300      	movs	r3, #0
 800a130:	2b00      	cmp	r3, #0
 800a132:	d10a      	bne.n	800a14a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a138:	f383 8811 	msr	BASEPRI, r3
 800a13c:	f3bf 8f6f 	isb	sy
 800a140:	f3bf 8f4f 	dsb	sy
 800a144:	623b      	str	r3, [r7, #32]
}
 800a146:	bf00      	nop
 800a148:	e7fe      	b.n	800a148 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d102      	bne.n	800a156 <xQueueGenericCreateStatic+0x7e>
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d101      	bne.n	800a15a <xQueueGenericCreateStatic+0x82>
 800a156:	2301      	movs	r3, #1
 800a158:	e000      	b.n	800a15c <xQueueGenericCreateStatic+0x84>
 800a15a:	2300      	movs	r3, #0
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d10a      	bne.n	800a176 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a164:	f383 8811 	msr	BASEPRI, r3
 800a168:	f3bf 8f6f 	isb	sy
 800a16c:	f3bf 8f4f 	dsb	sy
 800a170:	61fb      	str	r3, [r7, #28]
}
 800a172:	bf00      	nop
 800a174:	e7fe      	b.n	800a174 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a176:	2350      	movs	r3, #80	; 0x50
 800a178:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	2b50      	cmp	r3, #80	; 0x50
 800a17e:	d00a      	beq.n	800a196 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a184:	f383 8811 	msr	BASEPRI, r3
 800a188:	f3bf 8f6f 	isb	sy
 800a18c:	f3bf 8f4f 	dsb	sy
 800a190:	61bb      	str	r3, [r7, #24]
}
 800a192:	bf00      	nop
 800a194:	e7fe      	b.n	800a194 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a196:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d00d      	beq.n	800a1be <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1a4:	2201      	movs	r2, #1
 800a1a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a1aa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1b0:	9300      	str	r3, [sp, #0]
 800a1b2:	4613      	mov	r3, r2
 800a1b4:	687a      	ldr	r2, [r7, #4]
 800a1b6:	68b9      	ldr	r1, [r7, #8]
 800a1b8:	68f8      	ldr	r0, [r7, #12]
 800a1ba:	f000 f83f 	bl	800a23c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3730      	adds	r7, #48	; 0x30
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}

0800a1c8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b08a      	sub	sp, #40	; 0x28
 800a1cc:	af02      	add	r7, sp, #8
 800a1ce:	60f8      	str	r0, [r7, #12]
 800a1d0:	60b9      	str	r1, [r7, #8]
 800a1d2:	4613      	mov	r3, r2
 800a1d4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d10a      	bne.n	800a1f2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a1dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e0:	f383 8811 	msr	BASEPRI, r3
 800a1e4:	f3bf 8f6f 	isb	sy
 800a1e8:	f3bf 8f4f 	dsb	sy
 800a1ec:	613b      	str	r3, [r7, #16]
}
 800a1ee:	bf00      	nop
 800a1f0:	e7fe      	b.n	800a1f0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	68ba      	ldr	r2, [r7, #8]
 800a1f6:	fb02 f303 	mul.w	r3, r2, r3
 800a1fa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a1fc:	69fb      	ldr	r3, [r7, #28]
 800a1fe:	3350      	adds	r3, #80	; 0x50
 800a200:	4618      	mov	r0, r3
 800a202:	f7ff fa15 	bl	8009630 <pvPortMalloc>
 800a206:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a208:	69bb      	ldr	r3, [r7, #24]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d011      	beq.n	800a232 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a20e:	69bb      	ldr	r3, [r7, #24]
 800a210:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	3350      	adds	r3, #80	; 0x50
 800a216:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a218:	69bb      	ldr	r3, [r7, #24]
 800a21a:	2200      	movs	r2, #0
 800a21c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a220:	79fa      	ldrb	r2, [r7, #7]
 800a222:	69bb      	ldr	r3, [r7, #24]
 800a224:	9300      	str	r3, [sp, #0]
 800a226:	4613      	mov	r3, r2
 800a228:	697a      	ldr	r2, [r7, #20]
 800a22a:	68b9      	ldr	r1, [r7, #8]
 800a22c:	68f8      	ldr	r0, [r7, #12]
 800a22e:	f000 f805 	bl	800a23c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a232:	69bb      	ldr	r3, [r7, #24]
	}
 800a234:	4618      	mov	r0, r3
 800a236:	3720      	adds	r7, #32
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}

0800a23c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b084      	sub	sp, #16
 800a240:	af00      	add	r7, sp, #0
 800a242:	60f8      	str	r0, [r7, #12]
 800a244:	60b9      	str	r1, [r7, #8]
 800a246:	607a      	str	r2, [r7, #4]
 800a248:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d103      	bne.n	800a258 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a250:	69bb      	ldr	r3, [r7, #24]
 800a252:	69ba      	ldr	r2, [r7, #24]
 800a254:	601a      	str	r2, [r3, #0]
 800a256:	e002      	b.n	800a25e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a258:	69bb      	ldr	r3, [r7, #24]
 800a25a:	687a      	ldr	r2, [r7, #4]
 800a25c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a25e:	69bb      	ldr	r3, [r7, #24]
 800a260:	68fa      	ldr	r2, [r7, #12]
 800a262:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a264:	69bb      	ldr	r3, [r7, #24]
 800a266:	68ba      	ldr	r2, [r7, #8]
 800a268:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a26a:	2101      	movs	r1, #1
 800a26c:	69b8      	ldr	r0, [r7, #24]
 800a26e:	f7ff fecb 	bl	800a008 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a272:	69bb      	ldr	r3, [r7, #24]
 800a274:	78fa      	ldrb	r2, [r7, #3]
 800a276:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a27a:	bf00      	nop
 800a27c:	3710      	adds	r7, #16
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}

0800a282 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a282:	b580      	push	{r7, lr}
 800a284:	b082      	sub	sp, #8
 800a286:	af00      	add	r7, sp, #0
 800a288:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d00e      	beq.n	800a2ae <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2200      	movs	r2, #0
 800a294:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2200      	movs	r2, #0
 800a29a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	2100      	movs	r1, #0
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f000 f90b 	bl	800a4c4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a2ae:	bf00      	nop
 800a2b0:	3708      	adds	r7, #8
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}

0800a2b6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a2b6:	b580      	push	{r7, lr}
 800a2b8:	b086      	sub	sp, #24
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	4603      	mov	r3, r0
 800a2be:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	617b      	str	r3, [r7, #20]
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a2c8:	79fb      	ldrb	r3, [r7, #7]
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	6939      	ldr	r1, [r7, #16]
 800a2ce:	6978      	ldr	r0, [r7, #20]
 800a2d0:	f7ff ff7a 	bl	800a1c8 <xQueueGenericCreate>
 800a2d4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a2d6:	68f8      	ldr	r0, [r7, #12]
 800a2d8:	f7ff ffd3 	bl	800a282 <prvInitialiseMutex>

		return xNewQueue;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
	}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3718      	adds	r7, #24
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}

0800a2e6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a2e6:	b580      	push	{r7, lr}
 800a2e8:	b088      	sub	sp, #32
 800a2ea:	af02      	add	r7, sp, #8
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	6039      	str	r1, [r7, #0]
 800a2f0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	617b      	str	r3, [r7, #20]
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a2fa:	79fb      	ldrb	r3, [r7, #7]
 800a2fc:	9300      	str	r3, [sp, #0]
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	2200      	movs	r2, #0
 800a302:	6939      	ldr	r1, [r7, #16]
 800a304:	6978      	ldr	r0, [r7, #20]
 800a306:	f7ff fee7 	bl	800a0d8 <xQueueGenericCreateStatic>
 800a30a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a30c:	68f8      	ldr	r0, [r7, #12]
 800a30e:	f7ff ffb8 	bl	800a282 <prvInitialiseMutex>

		return xNewQueue;
 800a312:	68fb      	ldr	r3, [r7, #12]
	}
 800a314:	4618      	mov	r0, r3
 800a316:	3718      	adds	r7, #24
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}

0800a31c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800a31c:	b590      	push	{r4, r7, lr}
 800a31e:	b087      	sub	sp, #28
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d10a      	bne.n	800a344 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800a32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a332:	f383 8811 	msr	BASEPRI, r3
 800a336:	f3bf 8f6f 	isb	sy
 800a33a:	f3bf 8f4f 	dsb	sy
 800a33e:	60fb      	str	r3, [r7, #12]
}
 800a340:	bf00      	nop
 800a342:	e7fe      	b.n	800a342 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	689c      	ldr	r4, [r3, #8]
 800a348:	f001 fd7c 	bl	800be44 <xTaskGetCurrentTaskHandle>
 800a34c:	4603      	mov	r3, r0
 800a34e:	429c      	cmp	r4, r3
 800a350:	d111      	bne.n	800a376 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	68db      	ldr	r3, [r3, #12]
 800a356:	1e5a      	subs	r2, r3, #1
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	68db      	ldr	r3, [r3, #12]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d105      	bne.n	800a370 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800a364:	2300      	movs	r3, #0
 800a366:	2200      	movs	r2, #0
 800a368:	2100      	movs	r1, #0
 800a36a:	6938      	ldr	r0, [r7, #16]
 800a36c:	f000 f8aa 	bl	800a4c4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800a370:	2301      	movs	r3, #1
 800a372:	617b      	str	r3, [r7, #20]
 800a374:	e001      	b.n	800a37a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800a376:	2300      	movs	r3, #0
 800a378:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800a37a:	697b      	ldr	r3, [r7, #20]
	}
 800a37c:	4618      	mov	r0, r3
 800a37e:	371c      	adds	r7, #28
 800a380:	46bd      	mov	sp, r7
 800a382:	bd90      	pop	{r4, r7, pc}

0800a384 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800a384:	b590      	push	{r4, r7, lr}
 800a386:	b087      	sub	sp, #28
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
 800a38c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d10a      	bne.n	800a3ae <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800a398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a39c:	f383 8811 	msr	BASEPRI, r3
 800a3a0:	f3bf 8f6f 	isb	sy
 800a3a4:	f3bf 8f4f 	dsb	sy
 800a3a8:	60fb      	str	r3, [r7, #12]
}
 800a3aa:	bf00      	nop
 800a3ac:	e7fe      	b.n	800a3ac <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	689c      	ldr	r4, [r3, #8]
 800a3b2:	f001 fd47 	bl	800be44 <xTaskGetCurrentTaskHandle>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	429c      	cmp	r4, r3
 800a3ba:	d107      	bne.n	800a3cc <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	68db      	ldr	r3, [r3, #12]
 800a3c0:	1c5a      	adds	r2, r3, #1
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	617b      	str	r3, [r7, #20]
 800a3ca:	e00c      	b.n	800a3e6 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800a3cc:	6839      	ldr	r1, [r7, #0]
 800a3ce:	6938      	ldr	r0, [r7, #16]
 800a3d0:	f000 fb7e 	bl	800aad0 <xQueueSemaphoreTake>
 800a3d4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d004      	beq.n	800a3e6 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	68db      	ldr	r3, [r3, #12]
 800a3e0:	1c5a      	adds	r2, r3, #1
 800a3e2:	693b      	ldr	r3, [r7, #16]
 800a3e4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800a3e6:	697b      	ldr	r3, [r7, #20]
	}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	371c      	adds	r7, #28
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd90      	pop	{r4, r7, pc}

0800a3f0 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b08a      	sub	sp, #40	; 0x28
 800a3f4:	af02      	add	r7, sp, #8
 800a3f6:	60f8      	str	r0, [r7, #12]
 800a3f8:	60b9      	str	r1, [r7, #8]
 800a3fa:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d10a      	bne.n	800a418 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800a402:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a406:	f383 8811 	msr	BASEPRI, r3
 800a40a:	f3bf 8f6f 	isb	sy
 800a40e:	f3bf 8f4f 	dsb	sy
 800a412:	61bb      	str	r3, [r7, #24]
}
 800a414:	bf00      	nop
 800a416:	e7fe      	b.n	800a416 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a418:	68ba      	ldr	r2, [r7, #8]
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	429a      	cmp	r2, r3
 800a41e:	d90a      	bls.n	800a436 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800a420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a424:	f383 8811 	msr	BASEPRI, r3
 800a428:	f3bf 8f6f 	isb	sy
 800a42c:	f3bf 8f4f 	dsb	sy
 800a430:	617b      	str	r3, [r7, #20]
}
 800a432:	bf00      	nop
 800a434:	e7fe      	b.n	800a434 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a436:	2302      	movs	r3, #2
 800a438:	9300      	str	r3, [sp, #0]
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2200      	movs	r2, #0
 800a43e:	2100      	movs	r1, #0
 800a440:	68f8      	ldr	r0, [r7, #12]
 800a442:	f7ff fe49 	bl	800a0d8 <xQueueGenericCreateStatic>
 800a446:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a448:	69fb      	ldr	r3, [r7, #28]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d002      	beq.n	800a454 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a44e:	69fb      	ldr	r3, [r7, #28]
 800a450:	68ba      	ldr	r2, [r7, #8]
 800a452:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a454:	69fb      	ldr	r3, [r7, #28]
	}
 800a456:	4618      	mov	r0, r3
 800a458:	3720      	adds	r7, #32
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}

0800a45e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a45e:	b580      	push	{r7, lr}
 800a460:	b086      	sub	sp, #24
 800a462:	af00      	add	r7, sp, #0
 800a464:	6078      	str	r0, [r7, #4]
 800a466:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d10a      	bne.n	800a484 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800a46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a472:	f383 8811 	msr	BASEPRI, r3
 800a476:	f3bf 8f6f 	isb	sy
 800a47a:	f3bf 8f4f 	dsb	sy
 800a47e:	613b      	str	r3, [r7, #16]
}
 800a480:	bf00      	nop
 800a482:	e7fe      	b.n	800a482 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a484:	683a      	ldr	r2, [r7, #0]
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	429a      	cmp	r2, r3
 800a48a:	d90a      	bls.n	800a4a2 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800a48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a490:	f383 8811 	msr	BASEPRI, r3
 800a494:	f3bf 8f6f 	isb	sy
 800a498:	f3bf 8f4f 	dsb	sy
 800a49c:	60fb      	str	r3, [r7, #12]
}
 800a49e:	bf00      	nop
 800a4a0:	e7fe      	b.n	800a4a0 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a4a2:	2202      	movs	r2, #2
 800a4a4:	2100      	movs	r1, #0
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f7ff fe8e 	bl	800a1c8 <xQueueGenericCreate>
 800a4ac:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d002      	beq.n	800a4ba <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	683a      	ldr	r2, [r7, #0]
 800a4b8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a4ba:	697b      	ldr	r3, [r7, #20]
	}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3718      	adds	r7, #24
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}

0800a4c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b08e      	sub	sp, #56	; 0x38
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	60f8      	str	r0, [r7, #12]
 800a4cc:	60b9      	str	r1, [r7, #8]
 800a4ce:	607a      	str	r2, [r7, #4]
 800a4d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d10a      	bne.n	800a4f6 <xQueueGenericSend+0x32>
	__asm volatile
 800a4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e4:	f383 8811 	msr	BASEPRI, r3
 800a4e8:	f3bf 8f6f 	isb	sy
 800a4ec:	f3bf 8f4f 	dsb	sy
 800a4f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a4f2:	bf00      	nop
 800a4f4:	e7fe      	b.n	800a4f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d103      	bne.n	800a504 <xQueueGenericSend+0x40>
 800a4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a500:	2b00      	cmp	r3, #0
 800a502:	d101      	bne.n	800a508 <xQueueGenericSend+0x44>
 800a504:	2301      	movs	r3, #1
 800a506:	e000      	b.n	800a50a <xQueueGenericSend+0x46>
 800a508:	2300      	movs	r3, #0
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d10a      	bne.n	800a524 <xQueueGenericSend+0x60>
	__asm volatile
 800a50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a512:	f383 8811 	msr	BASEPRI, r3
 800a516:	f3bf 8f6f 	isb	sy
 800a51a:	f3bf 8f4f 	dsb	sy
 800a51e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a520:	bf00      	nop
 800a522:	e7fe      	b.n	800a522 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	2b02      	cmp	r3, #2
 800a528:	d103      	bne.n	800a532 <xQueueGenericSend+0x6e>
 800a52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a52c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a52e:	2b01      	cmp	r3, #1
 800a530:	d101      	bne.n	800a536 <xQueueGenericSend+0x72>
 800a532:	2301      	movs	r3, #1
 800a534:	e000      	b.n	800a538 <xQueueGenericSend+0x74>
 800a536:	2300      	movs	r3, #0
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d10a      	bne.n	800a552 <xQueueGenericSend+0x8e>
	__asm volatile
 800a53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a540:	f383 8811 	msr	BASEPRI, r3
 800a544:	f3bf 8f6f 	isb	sy
 800a548:	f3bf 8f4f 	dsb	sy
 800a54c:	623b      	str	r3, [r7, #32]
}
 800a54e:	bf00      	nop
 800a550:	e7fe      	b.n	800a550 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a552:	f001 fc87 	bl	800be64 <xTaskGetSchedulerState>
 800a556:	4603      	mov	r3, r0
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d102      	bne.n	800a562 <xQueueGenericSend+0x9e>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d101      	bne.n	800a566 <xQueueGenericSend+0xa2>
 800a562:	2301      	movs	r3, #1
 800a564:	e000      	b.n	800a568 <xQueueGenericSend+0xa4>
 800a566:	2300      	movs	r3, #0
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d10a      	bne.n	800a582 <xQueueGenericSend+0xbe>
	__asm volatile
 800a56c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a570:	f383 8811 	msr	BASEPRI, r3
 800a574:	f3bf 8f6f 	isb	sy
 800a578:	f3bf 8f4f 	dsb	sy
 800a57c:	61fb      	str	r3, [r7, #28]
}
 800a57e:	bf00      	nop
 800a580:	e7fe      	b.n	800a580 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a582:	f7ff fc1f 	bl	8009dc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a588:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a58c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a58e:	429a      	cmp	r2, r3
 800a590:	d302      	bcc.n	800a598 <xQueueGenericSend+0xd4>
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	2b02      	cmp	r3, #2
 800a596:	d129      	bne.n	800a5ec <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a598:	683a      	ldr	r2, [r7, #0]
 800a59a:	68b9      	ldr	r1, [r7, #8]
 800a59c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a59e:	f000 fc5e 	bl	800ae5e <prvCopyDataToQueue>
 800a5a2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d010      	beq.n	800a5ce <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a5ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ae:	3324      	adds	r3, #36	; 0x24
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f001 fa85 	bl	800bac0 <xTaskRemoveFromEventList>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d013      	beq.n	800a5e4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a5bc:	4b3f      	ldr	r3, [pc, #252]	; (800a6bc <xQueueGenericSend+0x1f8>)
 800a5be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5c2:	601a      	str	r2, [r3, #0]
 800a5c4:	f3bf 8f4f 	dsb	sy
 800a5c8:	f3bf 8f6f 	isb	sy
 800a5cc:	e00a      	b.n	800a5e4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d007      	beq.n	800a5e4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a5d4:	4b39      	ldr	r3, [pc, #228]	; (800a6bc <xQueueGenericSend+0x1f8>)
 800a5d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5da:	601a      	str	r2, [r3, #0]
 800a5dc:	f3bf 8f4f 	dsb	sy
 800a5e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a5e4:	f7ff fc1e 	bl	8009e24 <vPortExitCritical>
				return pdPASS;
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	e063      	b.n	800a6b4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d103      	bne.n	800a5fa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a5f2:	f7ff fc17 	bl	8009e24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	e05c      	b.n	800a6b4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a5fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d106      	bne.n	800a60e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a600:	f107 0314 	add.w	r3, r7, #20
 800a604:	4618      	mov	r0, r3
 800a606:	f001 fabf 	bl	800bb88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a60a:	2301      	movs	r3, #1
 800a60c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a60e:	f7ff fc09 	bl	8009e24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a612:	f001 f819 	bl	800b648 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a616:	f7ff fbd5 	bl	8009dc4 <vPortEnterCritical>
 800a61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a61c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a620:	b25b      	sxtb	r3, r3
 800a622:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a626:	d103      	bne.n	800a630 <xQueueGenericSend+0x16c>
 800a628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a62a:	2200      	movs	r2, #0
 800a62c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a632:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a636:	b25b      	sxtb	r3, r3
 800a638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a63c:	d103      	bne.n	800a646 <xQueueGenericSend+0x182>
 800a63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a640:	2200      	movs	r2, #0
 800a642:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a646:	f7ff fbed 	bl	8009e24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a64a:	1d3a      	adds	r2, r7, #4
 800a64c:	f107 0314 	add.w	r3, r7, #20
 800a650:	4611      	mov	r1, r2
 800a652:	4618      	mov	r0, r3
 800a654:	f001 faae 	bl	800bbb4 <xTaskCheckForTimeOut>
 800a658:	4603      	mov	r3, r0
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d124      	bne.n	800a6a8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a65e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a660:	f000 fcf5 	bl	800b04e <prvIsQueueFull>
 800a664:	4603      	mov	r3, r0
 800a666:	2b00      	cmp	r3, #0
 800a668:	d018      	beq.n	800a69c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a66c:	3310      	adds	r3, #16
 800a66e:	687a      	ldr	r2, [r7, #4]
 800a670:	4611      	mov	r1, r2
 800a672:	4618      	mov	r0, r3
 800a674:	f001 f9d4 	bl	800ba20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a678:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a67a:	f000 fc80 	bl	800af7e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a67e:	f000 fff1 	bl	800b664 <xTaskResumeAll>
 800a682:	4603      	mov	r3, r0
 800a684:	2b00      	cmp	r3, #0
 800a686:	f47f af7c 	bne.w	800a582 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a68a:	4b0c      	ldr	r3, [pc, #48]	; (800a6bc <xQueueGenericSend+0x1f8>)
 800a68c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a690:	601a      	str	r2, [r3, #0]
 800a692:	f3bf 8f4f 	dsb	sy
 800a696:	f3bf 8f6f 	isb	sy
 800a69a:	e772      	b.n	800a582 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a69c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a69e:	f000 fc6e 	bl	800af7e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a6a2:	f000 ffdf 	bl	800b664 <xTaskResumeAll>
 800a6a6:	e76c      	b.n	800a582 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a6a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a6aa:	f000 fc68 	bl	800af7e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a6ae:	f000 ffd9 	bl	800b664 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a6b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3738      	adds	r7, #56	; 0x38
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}
 800a6bc:	e000ed04 	.word	0xe000ed04

0800a6c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b090      	sub	sp, #64	; 0x40
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	60f8      	str	r0, [r7, #12]
 800a6c8:	60b9      	str	r1, [r7, #8]
 800a6ca:	607a      	str	r2, [r7, #4]
 800a6cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a6d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d10a      	bne.n	800a6ee <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a6d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6dc:	f383 8811 	msr	BASEPRI, r3
 800a6e0:	f3bf 8f6f 	isb	sy
 800a6e4:	f3bf 8f4f 	dsb	sy
 800a6e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a6ea:	bf00      	nop
 800a6ec:	e7fe      	b.n	800a6ec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d103      	bne.n	800a6fc <xQueueGenericSendFromISR+0x3c>
 800a6f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d101      	bne.n	800a700 <xQueueGenericSendFromISR+0x40>
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	e000      	b.n	800a702 <xQueueGenericSendFromISR+0x42>
 800a700:	2300      	movs	r3, #0
 800a702:	2b00      	cmp	r3, #0
 800a704:	d10a      	bne.n	800a71c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a70a:	f383 8811 	msr	BASEPRI, r3
 800a70e:	f3bf 8f6f 	isb	sy
 800a712:	f3bf 8f4f 	dsb	sy
 800a716:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a718:	bf00      	nop
 800a71a:	e7fe      	b.n	800a71a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	2b02      	cmp	r3, #2
 800a720:	d103      	bne.n	800a72a <xQueueGenericSendFromISR+0x6a>
 800a722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a726:	2b01      	cmp	r3, #1
 800a728:	d101      	bne.n	800a72e <xQueueGenericSendFromISR+0x6e>
 800a72a:	2301      	movs	r3, #1
 800a72c:	e000      	b.n	800a730 <xQueueGenericSendFromISR+0x70>
 800a72e:	2300      	movs	r3, #0
 800a730:	2b00      	cmp	r3, #0
 800a732:	d10a      	bne.n	800a74a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a738:	f383 8811 	msr	BASEPRI, r3
 800a73c:	f3bf 8f6f 	isb	sy
 800a740:	f3bf 8f4f 	dsb	sy
 800a744:	623b      	str	r3, [r7, #32]
}
 800a746:	bf00      	nop
 800a748:	e7fe      	b.n	800a748 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a74a:	f7ff fc1d 	bl	8009f88 <vPortValidateInterruptPriority>
	__asm volatile
 800a74e:	f3ef 8211 	mrs	r2, BASEPRI
 800a752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a756:	f383 8811 	msr	BASEPRI, r3
 800a75a:	f3bf 8f6f 	isb	sy
 800a75e:	f3bf 8f4f 	dsb	sy
 800a762:	61fa      	str	r2, [r7, #28]
 800a764:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800a766:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a768:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a76a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a76c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a76e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a772:	429a      	cmp	r2, r3
 800a774:	d302      	bcc.n	800a77c <xQueueGenericSendFromISR+0xbc>
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	2b02      	cmp	r3, #2
 800a77a:	d12f      	bne.n	800a7dc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a77c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a77e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a782:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a78a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a78c:	683a      	ldr	r2, [r7, #0]
 800a78e:	68b9      	ldr	r1, [r7, #8]
 800a790:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a792:	f000 fb64 	bl	800ae5e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a796:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a79a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a79e:	d112      	bne.n	800a7c6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d016      	beq.n	800a7d6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a7a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7aa:	3324      	adds	r3, #36	; 0x24
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f001 f987 	bl	800bac0 <xTaskRemoveFromEventList>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d00e      	beq.n	800a7d6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d00b      	beq.n	800a7d6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2201      	movs	r2, #1
 800a7c2:	601a      	str	r2, [r3, #0]
 800a7c4:	e007      	b.n	800a7d6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a7c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a7ca:	3301      	adds	r3, #1
 800a7cc:	b2db      	uxtb	r3, r3
 800a7ce:	b25a      	sxtb	r2, r3
 800a7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a7da:	e001      	b.n	800a7e0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7e2:	617b      	str	r3, [r7, #20]
	__asm volatile
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	f383 8811 	msr	BASEPRI, r3
}
 800a7ea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a7ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3740      	adds	r7, #64	; 0x40
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}

0800a7f6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a7f6:	b580      	push	{r7, lr}
 800a7f8:	b08e      	sub	sp, #56	; 0x38
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	6078      	str	r0, [r7, #4]
 800a7fe:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a806:	2b00      	cmp	r3, #0
 800a808:	d10a      	bne.n	800a820 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a80a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a80e:	f383 8811 	msr	BASEPRI, r3
 800a812:	f3bf 8f6f 	isb	sy
 800a816:	f3bf 8f4f 	dsb	sy
 800a81a:	623b      	str	r3, [r7, #32]
}
 800a81c:	bf00      	nop
 800a81e:	e7fe      	b.n	800a81e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a824:	2b00      	cmp	r3, #0
 800a826:	d00a      	beq.n	800a83e <xQueueGiveFromISR+0x48>
	__asm volatile
 800a828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a82c:	f383 8811 	msr	BASEPRI, r3
 800a830:	f3bf 8f6f 	isb	sy
 800a834:	f3bf 8f4f 	dsb	sy
 800a838:	61fb      	str	r3, [r7, #28]
}
 800a83a:	bf00      	nop
 800a83c:	e7fe      	b.n	800a83c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a83e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d103      	bne.n	800a84e <xQueueGiveFromISR+0x58>
 800a846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a848:	689b      	ldr	r3, [r3, #8]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d101      	bne.n	800a852 <xQueueGiveFromISR+0x5c>
 800a84e:	2301      	movs	r3, #1
 800a850:	e000      	b.n	800a854 <xQueueGiveFromISR+0x5e>
 800a852:	2300      	movs	r3, #0
 800a854:	2b00      	cmp	r3, #0
 800a856:	d10a      	bne.n	800a86e <xQueueGiveFromISR+0x78>
	__asm volatile
 800a858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a85c:	f383 8811 	msr	BASEPRI, r3
 800a860:	f3bf 8f6f 	isb	sy
 800a864:	f3bf 8f4f 	dsb	sy
 800a868:	61bb      	str	r3, [r7, #24]
}
 800a86a:	bf00      	nop
 800a86c:	e7fe      	b.n	800a86c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a86e:	f7ff fb8b 	bl	8009f88 <vPortValidateInterruptPriority>
	__asm volatile
 800a872:	f3ef 8211 	mrs	r2, BASEPRI
 800a876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a87a:	f383 8811 	msr	BASEPRI, r3
 800a87e:	f3bf 8f6f 	isb	sy
 800a882:	f3bf 8f4f 	dsb	sy
 800a886:	617a      	str	r2, [r7, #20]
 800a888:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a88a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a88c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a892:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a898:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a89a:	429a      	cmp	r2, r3
 800a89c:	d22b      	bcs.n	800a8f6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a8a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8aa:	1c5a      	adds	r2, r3, #1
 800a8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ae:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a8b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a8b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8b8:	d112      	bne.n	800a8e0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d016      	beq.n	800a8f0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c4:	3324      	adds	r3, #36	; 0x24
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f001 f8fa 	bl	800bac0 <xTaskRemoveFromEventList>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d00e      	beq.n	800a8f0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d00b      	beq.n	800a8f0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	2201      	movs	r2, #1
 800a8dc:	601a      	str	r2, [r3, #0]
 800a8de:	e007      	b.n	800a8f0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a8e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a8e4:	3301      	adds	r3, #1
 800a8e6:	b2db      	uxtb	r3, r3
 800a8e8:	b25a      	sxtb	r2, r3
 800a8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	637b      	str	r3, [r7, #52]	; 0x34
 800a8f4:	e001      	b.n	800a8fa <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	637b      	str	r3, [r7, #52]	; 0x34
 800a8fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8fc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	f383 8811 	msr	BASEPRI, r3
}
 800a904:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3738      	adds	r7, #56	; 0x38
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b08c      	sub	sp, #48	; 0x30
 800a914:	af00      	add	r7, sp, #0
 800a916:	60f8      	str	r0, [r7, #12]
 800a918:	60b9      	str	r1, [r7, #8]
 800a91a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a91c:	2300      	movs	r3, #0
 800a91e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a926:	2b00      	cmp	r3, #0
 800a928:	d10a      	bne.n	800a940 <xQueueReceive+0x30>
	__asm volatile
 800a92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a92e:	f383 8811 	msr	BASEPRI, r3
 800a932:	f3bf 8f6f 	isb	sy
 800a936:	f3bf 8f4f 	dsb	sy
 800a93a:	623b      	str	r3, [r7, #32]
}
 800a93c:	bf00      	nop
 800a93e:	e7fe      	b.n	800a93e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d103      	bne.n	800a94e <xQueueReceive+0x3e>
 800a946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d101      	bne.n	800a952 <xQueueReceive+0x42>
 800a94e:	2301      	movs	r3, #1
 800a950:	e000      	b.n	800a954 <xQueueReceive+0x44>
 800a952:	2300      	movs	r3, #0
 800a954:	2b00      	cmp	r3, #0
 800a956:	d10a      	bne.n	800a96e <xQueueReceive+0x5e>
	__asm volatile
 800a958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a95c:	f383 8811 	msr	BASEPRI, r3
 800a960:	f3bf 8f6f 	isb	sy
 800a964:	f3bf 8f4f 	dsb	sy
 800a968:	61fb      	str	r3, [r7, #28]
}
 800a96a:	bf00      	nop
 800a96c:	e7fe      	b.n	800a96c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a96e:	f001 fa79 	bl	800be64 <xTaskGetSchedulerState>
 800a972:	4603      	mov	r3, r0
 800a974:	2b00      	cmp	r3, #0
 800a976:	d102      	bne.n	800a97e <xQueueReceive+0x6e>
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d101      	bne.n	800a982 <xQueueReceive+0x72>
 800a97e:	2301      	movs	r3, #1
 800a980:	e000      	b.n	800a984 <xQueueReceive+0x74>
 800a982:	2300      	movs	r3, #0
 800a984:	2b00      	cmp	r3, #0
 800a986:	d10a      	bne.n	800a99e <xQueueReceive+0x8e>
	__asm volatile
 800a988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a98c:	f383 8811 	msr	BASEPRI, r3
 800a990:	f3bf 8f6f 	isb	sy
 800a994:	f3bf 8f4f 	dsb	sy
 800a998:	61bb      	str	r3, [r7, #24]
}
 800a99a:	bf00      	nop
 800a99c:	e7fe      	b.n	800a99c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a99e:	f7ff fa11 	bl	8009dc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9a6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d01f      	beq.n	800a9ee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a9ae:	68b9      	ldr	r1, [r7, #8]
 800a9b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9b2:	f000 fabe 	bl	800af32 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b8:	1e5a      	subs	r2, r3, #1
 800a9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9bc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a9be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c0:	691b      	ldr	r3, [r3, #16]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d00f      	beq.n	800a9e6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c8:	3310      	adds	r3, #16
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f001 f878 	bl	800bac0 <xTaskRemoveFromEventList>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d007      	beq.n	800a9e6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a9d6:	4b3d      	ldr	r3, [pc, #244]	; (800aacc <xQueueReceive+0x1bc>)
 800a9d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9dc:	601a      	str	r2, [r3, #0]
 800a9de:	f3bf 8f4f 	dsb	sy
 800a9e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a9e6:	f7ff fa1d 	bl	8009e24 <vPortExitCritical>
				return pdPASS;
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	e069      	b.n	800aac2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d103      	bne.n	800a9fc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a9f4:	f7ff fa16 	bl	8009e24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	e062      	b.n	800aac2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d106      	bne.n	800aa10 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aa02:	f107 0310 	add.w	r3, r7, #16
 800aa06:	4618      	mov	r0, r3
 800aa08:	f001 f8be 	bl	800bb88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aa10:	f7ff fa08 	bl	8009e24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aa14:	f000 fe18 	bl	800b648 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aa18:	f7ff f9d4 	bl	8009dc4 <vPortEnterCritical>
 800aa1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa22:	b25b      	sxtb	r3, r3
 800aa24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa28:	d103      	bne.n	800aa32 <xQueueReceive+0x122>
 800aa2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa38:	b25b      	sxtb	r3, r3
 800aa3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa3e:	d103      	bne.n	800aa48 <xQueueReceive+0x138>
 800aa40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa42:	2200      	movs	r2, #0
 800aa44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aa48:	f7ff f9ec 	bl	8009e24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aa4c:	1d3a      	adds	r2, r7, #4
 800aa4e:	f107 0310 	add.w	r3, r7, #16
 800aa52:	4611      	mov	r1, r2
 800aa54:	4618      	mov	r0, r3
 800aa56:	f001 f8ad 	bl	800bbb4 <xTaskCheckForTimeOut>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d123      	bne.n	800aaa8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa62:	f000 fade 	bl	800b022 <prvIsQueueEmpty>
 800aa66:	4603      	mov	r3, r0
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d017      	beq.n	800aa9c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aa6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa6e:	3324      	adds	r3, #36	; 0x24
 800aa70:	687a      	ldr	r2, [r7, #4]
 800aa72:	4611      	mov	r1, r2
 800aa74:	4618      	mov	r0, r3
 800aa76:	f000 ffd3 	bl	800ba20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aa7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa7c:	f000 fa7f 	bl	800af7e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aa80:	f000 fdf0 	bl	800b664 <xTaskResumeAll>
 800aa84:	4603      	mov	r3, r0
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d189      	bne.n	800a99e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800aa8a:	4b10      	ldr	r3, [pc, #64]	; (800aacc <xQueueReceive+0x1bc>)
 800aa8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa90:	601a      	str	r2, [r3, #0]
 800aa92:	f3bf 8f4f 	dsb	sy
 800aa96:	f3bf 8f6f 	isb	sy
 800aa9a:	e780      	b.n	800a99e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800aa9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa9e:	f000 fa6e 	bl	800af7e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aaa2:	f000 fddf 	bl	800b664 <xTaskResumeAll>
 800aaa6:	e77a      	b.n	800a99e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800aaa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aaaa:	f000 fa68 	bl	800af7e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aaae:	f000 fdd9 	bl	800b664 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aab2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aab4:	f000 fab5 	bl	800b022 <prvIsQueueEmpty>
 800aab8:	4603      	mov	r3, r0
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	f43f af6f 	beq.w	800a99e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aac0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aac2:	4618      	mov	r0, r3
 800aac4:	3730      	adds	r7, #48	; 0x30
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bd80      	pop	{r7, pc}
 800aaca:	bf00      	nop
 800aacc:	e000ed04 	.word	0xe000ed04

0800aad0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b08e      	sub	sp, #56	; 0x38
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800aada:	2300      	movs	r3, #0
 800aadc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800aae2:	2300      	movs	r3, #0
 800aae4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d10a      	bne.n	800ab02 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800aaec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf0:	f383 8811 	msr	BASEPRI, r3
 800aaf4:	f3bf 8f6f 	isb	sy
 800aaf8:	f3bf 8f4f 	dsb	sy
 800aafc:	623b      	str	r3, [r7, #32]
}
 800aafe:	bf00      	nop
 800ab00:	e7fe      	b.n	800ab00 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ab02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d00a      	beq.n	800ab20 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800ab0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab0e:	f383 8811 	msr	BASEPRI, r3
 800ab12:	f3bf 8f6f 	isb	sy
 800ab16:	f3bf 8f4f 	dsb	sy
 800ab1a:	61fb      	str	r3, [r7, #28]
}
 800ab1c:	bf00      	nop
 800ab1e:	e7fe      	b.n	800ab1e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ab20:	f001 f9a0 	bl	800be64 <xTaskGetSchedulerState>
 800ab24:	4603      	mov	r3, r0
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d102      	bne.n	800ab30 <xQueueSemaphoreTake+0x60>
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d101      	bne.n	800ab34 <xQueueSemaphoreTake+0x64>
 800ab30:	2301      	movs	r3, #1
 800ab32:	e000      	b.n	800ab36 <xQueueSemaphoreTake+0x66>
 800ab34:	2300      	movs	r3, #0
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d10a      	bne.n	800ab50 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800ab3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab3e:	f383 8811 	msr	BASEPRI, r3
 800ab42:	f3bf 8f6f 	isb	sy
 800ab46:	f3bf 8f4f 	dsb	sy
 800ab4a:	61bb      	str	r3, [r7, #24]
}
 800ab4c:	bf00      	nop
 800ab4e:	e7fe      	b.n	800ab4e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ab50:	f7ff f938 	bl	8009dc4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ab54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab58:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ab5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d024      	beq.n	800abaa <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ab60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab62:	1e5a      	subs	r2, r3, #1
 800ab64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab66:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ab68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d104      	bne.n	800ab7a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ab70:	f001 faee 	bl	800c150 <pvTaskIncrementMutexHeldCount>
 800ab74:	4602      	mov	r2, r0
 800ab76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab78:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab7c:	691b      	ldr	r3, [r3, #16]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d00f      	beq.n	800aba2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab84:	3310      	adds	r3, #16
 800ab86:	4618      	mov	r0, r3
 800ab88:	f000 ff9a 	bl	800bac0 <xTaskRemoveFromEventList>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d007      	beq.n	800aba2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ab92:	4b54      	ldr	r3, [pc, #336]	; (800ace4 <xQueueSemaphoreTake+0x214>)
 800ab94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab98:	601a      	str	r2, [r3, #0]
 800ab9a:	f3bf 8f4f 	dsb	sy
 800ab9e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aba2:	f7ff f93f 	bl	8009e24 <vPortExitCritical>
				return pdPASS;
 800aba6:	2301      	movs	r3, #1
 800aba8:	e097      	b.n	800acda <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d111      	bne.n	800abd4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800abb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d00a      	beq.n	800abcc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800abb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abba:	f383 8811 	msr	BASEPRI, r3
 800abbe:	f3bf 8f6f 	isb	sy
 800abc2:	f3bf 8f4f 	dsb	sy
 800abc6:	617b      	str	r3, [r7, #20]
}
 800abc8:	bf00      	nop
 800abca:	e7fe      	b.n	800abca <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800abcc:	f7ff f92a 	bl	8009e24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800abd0:	2300      	movs	r3, #0
 800abd2:	e082      	b.n	800acda <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800abd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d106      	bne.n	800abe8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800abda:	f107 030c 	add.w	r3, r7, #12
 800abde:	4618      	mov	r0, r3
 800abe0:	f000 ffd2 	bl	800bb88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800abe4:	2301      	movs	r3, #1
 800abe6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800abe8:	f7ff f91c 	bl	8009e24 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800abec:	f000 fd2c 	bl	800b648 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800abf0:	f7ff f8e8 	bl	8009dc4 <vPortEnterCritical>
 800abf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abf6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800abfa:	b25b      	sxtb	r3, r3
 800abfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac00:	d103      	bne.n	800ac0a <xQueueSemaphoreTake+0x13a>
 800ac02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac04:	2200      	movs	r2, #0
 800ac06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac10:	b25b      	sxtb	r3, r3
 800ac12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac16:	d103      	bne.n	800ac20 <xQueueSemaphoreTake+0x150>
 800ac18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac20:	f7ff f900 	bl	8009e24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ac24:	463a      	mov	r2, r7
 800ac26:	f107 030c 	add.w	r3, r7, #12
 800ac2a:	4611      	mov	r1, r2
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f000 ffc1 	bl	800bbb4 <xTaskCheckForTimeOut>
 800ac32:	4603      	mov	r3, r0
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d132      	bne.n	800ac9e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac3a:	f000 f9f2 	bl	800b022 <prvIsQueueEmpty>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d026      	beq.n	800ac92 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ac44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d109      	bne.n	800ac60 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800ac4c:	f7ff f8ba 	bl	8009dc4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ac50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac52:	689b      	ldr	r3, [r3, #8]
 800ac54:	4618      	mov	r0, r3
 800ac56:	f001 f923 	bl	800bea0 <xTaskPriorityInherit>
 800ac5a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ac5c:	f7ff f8e2 	bl	8009e24 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ac60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac62:	3324      	adds	r3, #36	; 0x24
 800ac64:	683a      	ldr	r2, [r7, #0]
 800ac66:	4611      	mov	r1, r2
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f000 fed9 	bl	800ba20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ac6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac70:	f000 f985 	bl	800af7e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ac74:	f000 fcf6 	bl	800b664 <xTaskResumeAll>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	f47f af68 	bne.w	800ab50 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800ac80:	4b18      	ldr	r3, [pc, #96]	; (800ace4 <xQueueSemaphoreTake+0x214>)
 800ac82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac86:	601a      	str	r2, [r3, #0]
 800ac88:	f3bf 8f4f 	dsb	sy
 800ac8c:	f3bf 8f6f 	isb	sy
 800ac90:	e75e      	b.n	800ab50 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ac92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac94:	f000 f973 	bl	800af7e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ac98:	f000 fce4 	bl	800b664 <xTaskResumeAll>
 800ac9c:	e758      	b.n	800ab50 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ac9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aca0:	f000 f96d 	bl	800af7e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aca4:	f000 fcde 	bl	800b664 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aca8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800acaa:	f000 f9ba 	bl	800b022 <prvIsQueueEmpty>
 800acae:	4603      	mov	r3, r0
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	f43f af4d 	beq.w	800ab50 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800acb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d00d      	beq.n	800acd8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800acbc:	f7ff f882 	bl	8009dc4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800acc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800acc2:	f000 f8b4 	bl	800ae2e <prvGetDisinheritPriorityAfterTimeout>
 800acc6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800acc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acca:	689b      	ldr	r3, [r3, #8]
 800accc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800acce:	4618      	mov	r0, r3
 800acd0:	f001 f9bc 	bl	800c04c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800acd4:	f7ff f8a6 	bl	8009e24 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800acd8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3738      	adds	r7, #56	; 0x38
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}
 800ace2:	bf00      	nop
 800ace4:	e000ed04 	.word	0xe000ed04

0800ace8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b08e      	sub	sp, #56	; 0x38
 800acec:	af00      	add	r7, sp, #0
 800acee:	60f8      	str	r0, [r7, #12]
 800acf0:	60b9      	str	r1, [r7, #8]
 800acf2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800acf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d10a      	bne.n	800ad14 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800acfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad02:	f383 8811 	msr	BASEPRI, r3
 800ad06:	f3bf 8f6f 	isb	sy
 800ad0a:	f3bf 8f4f 	dsb	sy
 800ad0e:	623b      	str	r3, [r7, #32]
}
 800ad10:	bf00      	nop
 800ad12:	e7fe      	b.n	800ad12 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d103      	bne.n	800ad22 <xQueueReceiveFromISR+0x3a>
 800ad1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d101      	bne.n	800ad26 <xQueueReceiveFromISR+0x3e>
 800ad22:	2301      	movs	r3, #1
 800ad24:	e000      	b.n	800ad28 <xQueueReceiveFromISR+0x40>
 800ad26:	2300      	movs	r3, #0
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d10a      	bne.n	800ad42 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800ad2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad30:	f383 8811 	msr	BASEPRI, r3
 800ad34:	f3bf 8f6f 	isb	sy
 800ad38:	f3bf 8f4f 	dsb	sy
 800ad3c:	61fb      	str	r3, [r7, #28]
}
 800ad3e:	bf00      	nop
 800ad40:	e7fe      	b.n	800ad40 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ad42:	f7ff f921 	bl	8009f88 <vPortValidateInterruptPriority>
	__asm volatile
 800ad46:	f3ef 8211 	mrs	r2, BASEPRI
 800ad4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad4e:	f383 8811 	msr	BASEPRI, r3
 800ad52:	f3bf 8f6f 	isb	sy
 800ad56:	f3bf 8f4f 	dsb	sy
 800ad5a:	61ba      	str	r2, [r7, #24]
 800ad5c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ad5e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ad60:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad66:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ad68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d02f      	beq.n	800adce <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ad6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ad78:	68b9      	ldr	r1, [r7, #8]
 800ad7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad7c:	f000 f8d9 	bl	800af32 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ad80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad82:	1e5a      	subs	r2, r3, #1
 800ad84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad86:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ad88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ad8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad90:	d112      	bne.n	800adb8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad94:	691b      	ldr	r3, [r3, #16]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d016      	beq.n	800adc8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad9c:	3310      	adds	r3, #16
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f000 fe8e 	bl	800bac0 <xTaskRemoveFromEventList>
 800ada4:	4603      	mov	r3, r0
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d00e      	beq.n	800adc8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d00b      	beq.n	800adc8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2201      	movs	r2, #1
 800adb4:	601a      	str	r2, [r3, #0]
 800adb6:	e007      	b.n	800adc8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800adb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800adbc:	3301      	adds	r3, #1
 800adbe:	b2db      	uxtb	r3, r3
 800adc0:	b25a      	sxtb	r2, r3
 800adc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800adc8:	2301      	movs	r3, #1
 800adca:	637b      	str	r3, [r7, #52]	; 0x34
 800adcc:	e001      	b.n	800add2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800adce:	2300      	movs	r3, #0
 800add0:	637b      	str	r3, [r7, #52]	; 0x34
 800add2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800add4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800add6:	693b      	ldr	r3, [r7, #16]
 800add8:	f383 8811 	msr	BASEPRI, r3
}
 800addc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800adde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ade0:	4618      	mov	r0, r3
 800ade2:	3738      	adds	r7, #56	; 0x38
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}

0800ade8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b084      	sub	sp, #16
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d10a      	bne.n	800ae10 <vQueueDelete+0x28>
	__asm volatile
 800adfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adfe:	f383 8811 	msr	BASEPRI, r3
 800ae02:	f3bf 8f6f 	isb	sy
 800ae06:	f3bf 8f4f 	dsb	sy
 800ae0a:	60bb      	str	r3, [r7, #8]
}
 800ae0c:	bf00      	nop
 800ae0e:	e7fe      	b.n	800ae0e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ae10:	68f8      	ldr	r0, [r7, #12]
 800ae12:	f000 f95f 	bl	800b0d4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d102      	bne.n	800ae26 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800ae20:	68f8      	ldr	r0, [r7, #12]
 800ae22:	f7fe fcd1 	bl	80097c8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ae26:	bf00      	nop
 800ae28:	3710      	adds	r7, #16
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}

0800ae2e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ae2e:	b480      	push	{r7}
 800ae30:	b085      	sub	sp, #20
 800ae32:	af00      	add	r7, sp, #0
 800ae34:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d006      	beq.n	800ae4c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800ae48:	60fb      	str	r3, [r7, #12]
 800ae4a:	e001      	b.n	800ae50 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ae50:	68fb      	ldr	r3, [r7, #12]
	}
 800ae52:	4618      	mov	r0, r3
 800ae54:	3714      	adds	r7, #20
 800ae56:	46bd      	mov	sp, r7
 800ae58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5c:	4770      	bx	lr

0800ae5e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ae5e:	b580      	push	{r7, lr}
 800ae60:	b086      	sub	sp, #24
 800ae62:	af00      	add	r7, sp, #0
 800ae64:	60f8      	str	r0, [r7, #12]
 800ae66:	60b9      	str	r1, [r7, #8]
 800ae68:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae72:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d10d      	bne.n	800ae98 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d14d      	bne.n	800af20 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	689b      	ldr	r3, [r3, #8]
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f001 f871 	bl	800bf70 <xTaskPriorityDisinherit>
 800ae8e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	2200      	movs	r2, #0
 800ae94:	609a      	str	r2, [r3, #8]
 800ae96:	e043      	b.n	800af20 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d119      	bne.n	800aed2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	6858      	ldr	r0, [r3, #4]
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aea6:	461a      	mov	r2, r3
 800aea8:	68b9      	ldr	r1, [r7, #8]
 800aeaa:	f00b ff88 	bl	8016dbe <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	685a      	ldr	r2, [r3, #4]
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeb6:	441a      	add	r2, r3
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	685a      	ldr	r2, [r3, #4]
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	689b      	ldr	r3, [r3, #8]
 800aec4:	429a      	cmp	r2, r3
 800aec6:	d32b      	bcc.n	800af20 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	681a      	ldr	r2, [r3, #0]
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	605a      	str	r2, [r3, #4]
 800aed0:	e026      	b.n	800af20 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	68d8      	ldr	r0, [r3, #12]
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeda:	461a      	mov	r2, r3
 800aedc:	68b9      	ldr	r1, [r7, #8]
 800aede:	f00b ff6e 	bl	8016dbe <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	68da      	ldr	r2, [r3, #12]
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeea:	425b      	negs	r3, r3
 800aeec:	441a      	add	r2, r3
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	68da      	ldr	r2, [r3, #12]
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	429a      	cmp	r2, r3
 800aefc:	d207      	bcs.n	800af0e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	689a      	ldr	r2, [r3, #8]
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af06:	425b      	negs	r3, r3
 800af08:	441a      	add	r2, r3
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2b02      	cmp	r3, #2
 800af12:	d105      	bne.n	800af20 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d002      	beq.n	800af20 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800af1a:	693b      	ldr	r3, [r7, #16]
 800af1c:	3b01      	subs	r3, #1
 800af1e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	1c5a      	adds	r2, r3, #1
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800af28:	697b      	ldr	r3, [r7, #20]
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	3718      	adds	r7, #24
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}

0800af32 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800af32:	b580      	push	{r7, lr}
 800af34:	b082      	sub	sp, #8
 800af36:	af00      	add	r7, sp, #0
 800af38:	6078      	str	r0, [r7, #4]
 800af3a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af40:	2b00      	cmp	r3, #0
 800af42:	d018      	beq.n	800af76 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	68da      	ldr	r2, [r3, #12]
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af4c:	441a      	add	r2, r3
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	68da      	ldr	r2, [r3, #12]
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	689b      	ldr	r3, [r3, #8]
 800af5a:	429a      	cmp	r2, r3
 800af5c:	d303      	bcc.n	800af66 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681a      	ldr	r2, [r3, #0]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	68d9      	ldr	r1, [r3, #12]
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af6e:	461a      	mov	r2, r3
 800af70:	6838      	ldr	r0, [r7, #0]
 800af72:	f00b ff24 	bl	8016dbe <memcpy>
	}
}
 800af76:	bf00      	nop
 800af78:	3708      	adds	r7, #8
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}

0800af7e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800af7e:	b580      	push	{r7, lr}
 800af80:	b084      	sub	sp, #16
 800af82:	af00      	add	r7, sp, #0
 800af84:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800af86:	f7fe ff1d 	bl	8009dc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af90:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800af92:	e011      	b.n	800afb8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d012      	beq.n	800afc2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	3324      	adds	r3, #36	; 0x24
 800afa0:	4618      	mov	r0, r3
 800afa2:	f000 fd8d 	bl	800bac0 <xTaskRemoveFromEventList>
 800afa6:	4603      	mov	r3, r0
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d001      	beq.n	800afb0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800afac:	f000 fe64 	bl	800bc78 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800afb0:	7bfb      	ldrb	r3, [r7, #15]
 800afb2:	3b01      	subs	r3, #1
 800afb4:	b2db      	uxtb	r3, r3
 800afb6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800afb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	dce9      	bgt.n	800af94 <prvUnlockQueue+0x16>
 800afc0:	e000      	b.n	800afc4 <prvUnlockQueue+0x46>
					break;
 800afc2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	22ff      	movs	r2, #255	; 0xff
 800afc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800afcc:	f7fe ff2a 	bl	8009e24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800afd0:	f7fe fef8 	bl	8009dc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800afda:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800afdc:	e011      	b.n	800b002 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	691b      	ldr	r3, [r3, #16]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d012      	beq.n	800b00c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	3310      	adds	r3, #16
 800afea:	4618      	mov	r0, r3
 800afec:	f000 fd68 	bl	800bac0 <xTaskRemoveFromEventList>
 800aff0:	4603      	mov	r3, r0
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d001      	beq.n	800affa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800aff6:	f000 fe3f 	bl	800bc78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800affa:	7bbb      	ldrb	r3, [r7, #14]
 800affc:	3b01      	subs	r3, #1
 800affe:	b2db      	uxtb	r3, r3
 800b000:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b002:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b006:	2b00      	cmp	r3, #0
 800b008:	dce9      	bgt.n	800afde <prvUnlockQueue+0x60>
 800b00a:	e000      	b.n	800b00e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b00c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	22ff      	movs	r2, #255	; 0xff
 800b012:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b016:	f7fe ff05 	bl	8009e24 <vPortExitCritical>
}
 800b01a:	bf00      	nop
 800b01c:	3710      	adds	r7, #16
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}

0800b022 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b022:	b580      	push	{r7, lr}
 800b024:	b084      	sub	sp, #16
 800b026:	af00      	add	r7, sp, #0
 800b028:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b02a:	f7fe fecb 	bl	8009dc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b032:	2b00      	cmp	r3, #0
 800b034:	d102      	bne.n	800b03c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b036:	2301      	movs	r3, #1
 800b038:	60fb      	str	r3, [r7, #12]
 800b03a:	e001      	b.n	800b040 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b03c:	2300      	movs	r3, #0
 800b03e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b040:	f7fe fef0 	bl	8009e24 <vPortExitCritical>

	return xReturn;
 800b044:	68fb      	ldr	r3, [r7, #12]
}
 800b046:	4618      	mov	r0, r3
 800b048:	3710      	adds	r7, #16
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}

0800b04e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b04e:	b580      	push	{r7, lr}
 800b050:	b084      	sub	sp, #16
 800b052:	af00      	add	r7, sp, #0
 800b054:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b056:	f7fe feb5 	bl	8009dc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b062:	429a      	cmp	r2, r3
 800b064:	d102      	bne.n	800b06c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b066:	2301      	movs	r3, #1
 800b068:	60fb      	str	r3, [r7, #12]
 800b06a:	e001      	b.n	800b070 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b06c:	2300      	movs	r3, #0
 800b06e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b070:	f7fe fed8 	bl	8009e24 <vPortExitCritical>

	return xReturn;
 800b074:	68fb      	ldr	r3, [r7, #12]
}
 800b076:	4618      	mov	r0, r3
 800b078:	3710      	adds	r7, #16
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}
	...

0800b080 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b080:	b480      	push	{r7}
 800b082:	b085      	sub	sp, #20
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b08a:	2300      	movs	r3, #0
 800b08c:	60fb      	str	r3, [r7, #12]
 800b08e:	e014      	b.n	800b0ba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b090:	4a0f      	ldr	r2, [pc, #60]	; (800b0d0 <vQueueAddToRegistry+0x50>)
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d10b      	bne.n	800b0b4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b09c:	490c      	ldr	r1, [pc, #48]	; (800b0d0 <vQueueAddToRegistry+0x50>)
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	683a      	ldr	r2, [r7, #0]
 800b0a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b0a6:	4a0a      	ldr	r2, [pc, #40]	; (800b0d0 <vQueueAddToRegistry+0x50>)
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	00db      	lsls	r3, r3, #3
 800b0ac:	4413      	add	r3, r2
 800b0ae:	687a      	ldr	r2, [r7, #4]
 800b0b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b0b2:	e006      	b.n	800b0c2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	3301      	adds	r3, #1
 800b0b8:	60fb      	str	r3, [r7, #12]
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	2b07      	cmp	r3, #7
 800b0be:	d9e7      	bls.n	800b090 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b0c0:	bf00      	nop
 800b0c2:	bf00      	nop
 800b0c4:	3714      	adds	r7, #20
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0cc:	4770      	bx	lr
 800b0ce:	bf00      	nop
 800b0d0:	24011cbc 	.word	0x24011cbc

0800b0d4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b085      	sub	sp, #20
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b0dc:	2300      	movs	r3, #0
 800b0de:	60fb      	str	r3, [r7, #12]
 800b0e0:	e016      	b.n	800b110 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b0e2:	4a10      	ldr	r2, [pc, #64]	; (800b124 <vQueueUnregisterQueue+0x50>)
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	00db      	lsls	r3, r3, #3
 800b0e8:	4413      	add	r3, r2
 800b0ea:	685b      	ldr	r3, [r3, #4]
 800b0ec:	687a      	ldr	r2, [r7, #4]
 800b0ee:	429a      	cmp	r2, r3
 800b0f0:	d10b      	bne.n	800b10a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b0f2:	4a0c      	ldr	r2, [pc, #48]	; (800b124 <vQueueUnregisterQueue+0x50>)
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	2100      	movs	r1, #0
 800b0f8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b0fc:	4a09      	ldr	r2, [pc, #36]	; (800b124 <vQueueUnregisterQueue+0x50>)
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	00db      	lsls	r3, r3, #3
 800b102:	4413      	add	r3, r2
 800b104:	2200      	movs	r2, #0
 800b106:	605a      	str	r2, [r3, #4]
				break;
 800b108:	e006      	b.n	800b118 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	3301      	adds	r3, #1
 800b10e:	60fb      	str	r3, [r7, #12]
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	2b07      	cmp	r3, #7
 800b114:	d9e5      	bls.n	800b0e2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b116:	bf00      	nop
 800b118:	bf00      	nop
 800b11a:	3714      	adds	r7, #20
 800b11c:	46bd      	mov	sp, r7
 800b11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b122:	4770      	bx	lr
 800b124:	24011cbc 	.word	0x24011cbc

0800b128 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b086      	sub	sp, #24
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	60f8      	str	r0, [r7, #12]
 800b130:	60b9      	str	r1, [r7, #8]
 800b132:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b138:	f7fe fe44 	bl	8009dc4 <vPortEnterCritical>
 800b13c:	697b      	ldr	r3, [r7, #20]
 800b13e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b142:	b25b      	sxtb	r3, r3
 800b144:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b148:	d103      	bne.n	800b152 <vQueueWaitForMessageRestricted+0x2a>
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	2200      	movs	r2, #0
 800b14e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b152:	697b      	ldr	r3, [r7, #20]
 800b154:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b158:	b25b      	sxtb	r3, r3
 800b15a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b15e:	d103      	bne.n	800b168 <vQueueWaitForMessageRestricted+0x40>
 800b160:	697b      	ldr	r3, [r7, #20]
 800b162:	2200      	movs	r2, #0
 800b164:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b168:	f7fe fe5c 	bl	8009e24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b170:	2b00      	cmp	r3, #0
 800b172:	d106      	bne.n	800b182 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b174:	697b      	ldr	r3, [r7, #20]
 800b176:	3324      	adds	r3, #36	; 0x24
 800b178:	687a      	ldr	r2, [r7, #4]
 800b17a:	68b9      	ldr	r1, [r7, #8]
 800b17c:	4618      	mov	r0, r3
 800b17e:	f000 fc73 	bl	800ba68 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b182:	6978      	ldr	r0, [r7, #20]
 800b184:	f7ff fefb 	bl	800af7e <prvUnlockQueue>
	}
 800b188:	bf00      	nop
 800b18a:	3718      	adds	r7, #24
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}

0800b190 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b190:	b580      	push	{r7, lr}
 800b192:	b08e      	sub	sp, #56	; 0x38
 800b194:	af04      	add	r7, sp, #16
 800b196:	60f8      	str	r0, [r7, #12]
 800b198:	60b9      	str	r1, [r7, #8]
 800b19a:	607a      	str	r2, [r7, #4]
 800b19c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b19e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d10a      	bne.n	800b1ba <xTaskCreateStatic+0x2a>
	__asm volatile
 800b1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a8:	f383 8811 	msr	BASEPRI, r3
 800b1ac:	f3bf 8f6f 	isb	sy
 800b1b0:	f3bf 8f4f 	dsb	sy
 800b1b4:	623b      	str	r3, [r7, #32]
}
 800b1b6:	bf00      	nop
 800b1b8:	e7fe      	b.n	800b1b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b1ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d10a      	bne.n	800b1d6 <xTaskCreateStatic+0x46>
	__asm volatile
 800b1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1c4:	f383 8811 	msr	BASEPRI, r3
 800b1c8:	f3bf 8f6f 	isb	sy
 800b1cc:	f3bf 8f4f 	dsb	sy
 800b1d0:	61fb      	str	r3, [r7, #28]
}
 800b1d2:	bf00      	nop
 800b1d4:	e7fe      	b.n	800b1d4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b1d6:	23bc      	movs	r3, #188	; 0xbc
 800b1d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b1da:	693b      	ldr	r3, [r7, #16]
 800b1dc:	2bbc      	cmp	r3, #188	; 0xbc
 800b1de:	d00a      	beq.n	800b1f6 <xTaskCreateStatic+0x66>
	__asm volatile
 800b1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1e4:	f383 8811 	msr	BASEPRI, r3
 800b1e8:	f3bf 8f6f 	isb	sy
 800b1ec:	f3bf 8f4f 	dsb	sy
 800b1f0:	61bb      	str	r3, [r7, #24]
}
 800b1f2:	bf00      	nop
 800b1f4:	e7fe      	b.n	800b1f4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b1f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d01e      	beq.n	800b23c <xTaskCreateStatic+0xac>
 800b1fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b200:	2b00      	cmp	r3, #0
 800b202:	d01b      	beq.n	800b23c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b206:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b20a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b20c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b210:	2202      	movs	r2, #2
 800b212:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b216:	2300      	movs	r3, #0
 800b218:	9303      	str	r3, [sp, #12]
 800b21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b21c:	9302      	str	r3, [sp, #8]
 800b21e:	f107 0314 	add.w	r3, r7, #20
 800b222:	9301      	str	r3, [sp, #4]
 800b224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b226:	9300      	str	r3, [sp, #0]
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	687a      	ldr	r2, [r7, #4]
 800b22c:	68b9      	ldr	r1, [r7, #8]
 800b22e:	68f8      	ldr	r0, [r7, #12]
 800b230:	f000 f850 	bl	800b2d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b234:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b236:	f000 f8f3 	bl	800b420 <prvAddNewTaskToReadyList>
 800b23a:	e001      	b.n	800b240 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b23c:	2300      	movs	r3, #0
 800b23e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b240:	697b      	ldr	r3, [r7, #20]
	}
 800b242:	4618      	mov	r0, r3
 800b244:	3728      	adds	r7, #40	; 0x28
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}

0800b24a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b24a:	b580      	push	{r7, lr}
 800b24c:	b08c      	sub	sp, #48	; 0x30
 800b24e:	af04      	add	r7, sp, #16
 800b250:	60f8      	str	r0, [r7, #12]
 800b252:	60b9      	str	r1, [r7, #8]
 800b254:	603b      	str	r3, [r7, #0]
 800b256:	4613      	mov	r3, r2
 800b258:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b25a:	88fb      	ldrh	r3, [r7, #6]
 800b25c:	009b      	lsls	r3, r3, #2
 800b25e:	4618      	mov	r0, r3
 800b260:	f7fe f9e6 	bl	8009630 <pvPortMalloc>
 800b264:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d00e      	beq.n	800b28a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b26c:	20bc      	movs	r0, #188	; 0xbc
 800b26e:	f7fe f9df 	bl	8009630 <pvPortMalloc>
 800b272:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b274:	69fb      	ldr	r3, [r7, #28]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d003      	beq.n	800b282 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b27a:	69fb      	ldr	r3, [r7, #28]
 800b27c:	697a      	ldr	r2, [r7, #20]
 800b27e:	631a      	str	r2, [r3, #48]	; 0x30
 800b280:	e005      	b.n	800b28e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b282:	6978      	ldr	r0, [r7, #20]
 800b284:	f7fe faa0 	bl	80097c8 <vPortFree>
 800b288:	e001      	b.n	800b28e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b28a:	2300      	movs	r3, #0
 800b28c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b28e:	69fb      	ldr	r3, [r7, #28]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d017      	beq.n	800b2c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b294:	69fb      	ldr	r3, [r7, #28]
 800b296:	2200      	movs	r2, #0
 800b298:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b29c:	88fa      	ldrh	r2, [r7, #6]
 800b29e:	2300      	movs	r3, #0
 800b2a0:	9303      	str	r3, [sp, #12]
 800b2a2:	69fb      	ldr	r3, [r7, #28]
 800b2a4:	9302      	str	r3, [sp, #8]
 800b2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2a8:	9301      	str	r3, [sp, #4]
 800b2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ac:	9300      	str	r3, [sp, #0]
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	68b9      	ldr	r1, [r7, #8]
 800b2b2:	68f8      	ldr	r0, [r7, #12]
 800b2b4:	f000 f80e 	bl	800b2d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b2b8:	69f8      	ldr	r0, [r7, #28]
 800b2ba:	f000 f8b1 	bl	800b420 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b2be:	2301      	movs	r3, #1
 800b2c0:	61bb      	str	r3, [r7, #24]
 800b2c2:	e002      	b.n	800b2ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b2c4:	f04f 33ff 	mov.w	r3, #4294967295
 800b2c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b2ca:	69bb      	ldr	r3, [r7, #24]
	}
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	3720      	adds	r7, #32
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd80      	pop	{r7, pc}

0800b2d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b088      	sub	sp, #32
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	60f8      	str	r0, [r7, #12]
 800b2dc:	60b9      	str	r1, [r7, #8]
 800b2de:	607a      	str	r2, [r7, #4]
 800b2e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	009b      	lsls	r3, r3, #2
 800b2ea:	461a      	mov	r2, r3
 800b2ec:	21a5      	movs	r1, #165	; 0xa5
 800b2ee:	f00b fd74 	bl	8016dda <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b2f6:	6879      	ldr	r1, [r7, #4]
 800b2f8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b2fc:	440b      	add	r3, r1
 800b2fe:	009b      	lsls	r3, r3, #2
 800b300:	4413      	add	r3, r2
 800b302:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b304:	69bb      	ldr	r3, [r7, #24]
 800b306:	f023 0307 	bic.w	r3, r3, #7
 800b30a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b30c:	69bb      	ldr	r3, [r7, #24]
 800b30e:	f003 0307 	and.w	r3, r3, #7
 800b312:	2b00      	cmp	r3, #0
 800b314:	d00a      	beq.n	800b32c <prvInitialiseNewTask+0x58>
	__asm volatile
 800b316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b31a:	f383 8811 	msr	BASEPRI, r3
 800b31e:	f3bf 8f6f 	isb	sy
 800b322:	f3bf 8f4f 	dsb	sy
 800b326:	617b      	str	r3, [r7, #20]
}
 800b328:	bf00      	nop
 800b32a:	e7fe      	b.n	800b32a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d01f      	beq.n	800b372 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b332:	2300      	movs	r3, #0
 800b334:	61fb      	str	r3, [r7, #28]
 800b336:	e012      	b.n	800b35e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b338:	68ba      	ldr	r2, [r7, #8]
 800b33a:	69fb      	ldr	r3, [r7, #28]
 800b33c:	4413      	add	r3, r2
 800b33e:	7819      	ldrb	r1, [r3, #0]
 800b340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b342:	69fb      	ldr	r3, [r7, #28]
 800b344:	4413      	add	r3, r2
 800b346:	3334      	adds	r3, #52	; 0x34
 800b348:	460a      	mov	r2, r1
 800b34a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b34c:	68ba      	ldr	r2, [r7, #8]
 800b34e:	69fb      	ldr	r3, [r7, #28]
 800b350:	4413      	add	r3, r2
 800b352:	781b      	ldrb	r3, [r3, #0]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d006      	beq.n	800b366 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b358:	69fb      	ldr	r3, [r7, #28]
 800b35a:	3301      	adds	r3, #1
 800b35c:	61fb      	str	r3, [r7, #28]
 800b35e:	69fb      	ldr	r3, [r7, #28]
 800b360:	2b0f      	cmp	r3, #15
 800b362:	d9e9      	bls.n	800b338 <prvInitialiseNewTask+0x64>
 800b364:	e000      	b.n	800b368 <prvInitialiseNewTask+0x94>
			{
				break;
 800b366:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b36a:	2200      	movs	r2, #0
 800b36c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b370:	e003      	b.n	800b37a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b374:	2200      	movs	r2, #0
 800b376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b37c:	2b37      	cmp	r3, #55	; 0x37
 800b37e:	d901      	bls.n	800b384 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b380:	2337      	movs	r3, #55	; 0x37
 800b382:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b386:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b388:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b38c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b38e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b392:	2200      	movs	r2, #0
 800b394:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b398:	3304      	adds	r3, #4
 800b39a:	4618      	mov	r0, r3
 800b39c:	f7fe fb52 	bl	8009a44 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a2:	3318      	adds	r3, #24
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	f7fe fb4d 	bl	8009a44 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b3b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b3c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d2:	3354      	adds	r3, #84	; 0x54
 800b3d4:	2260      	movs	r2, #96	; 0x60
 800b3d6:	2100      	movs	r1, #0
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f00b fcfe 	bl	8016dda <memset>
 800b3de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3e0:	4a0c      	ldr	r2, [pc, #48]	; (800b414 <prvInitialiseNewTask+0x140>)
 800b3e2:	659a      	str	r2, [r3, #88]	; 0x58
 800b3e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3e6:	4a0c      	ldr	r2, [pc, #48]	; (800b418 <prvInitialiseNewTask+0x144>)
 800b3e8:	65da      	str	r2, [r3, #92]	; 0x5c
 800b3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ec:	4a0b      	ldr	r2, [pc, #44]	; (800b41c <prvInitialiseNewTask+0x148>)
 800b3ee:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b3f0:	683a      	ldr	r2, [r7, #0]
 800b3f2:	68f9      	ldr	r1, [r7, #12]
 800b3f4:	69b8      	ldr	r0, [r7, #24]
 800b3f6:	f7fe fbb9 	bl	8009b6c <pxPortInitialiseStack>
 800b3fa:	4602      	mov	r2, r0
 800b3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3fe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b402:	2b00      	cmp	r3, #0
 800b404:	d002      	beq.n	800b40c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b40a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b40c:	bf00      	nop
 800b40e:	3720      	adds	r7, #32
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}
 800b414:	0801ae14 	.word	0x0801ae14
 800b418:	0801ae34 	.word	0x0801ae34
 800b41c:	0801adf4 	.word	0x0801adf4

0800b420 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b082      	sub	sp, #8
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b428:	f7fe fccc 	bl	8009dc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b42c:	4b2d      	ldr	r3, [pc, #180]	; (800b4e4 <prvAddNewTaskToReadyList+0xc4>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	3301      	adds	r3, #1
 800b432:	4a2c      	ldr	r2, [pc, #176]	; (800b4e4 <prvAddNewTaskToReadyList+0xc4>)
 800b434:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b436:	4b2c      	ldr	r3, [pc, #176]	; (800b4e8 <prvAddNewTaskToReadyList+0xc8>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d109      	bne.n	800b452 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b43e:	4a2a      	ldr	r2, [pc, #168]	; (800b4e8 <prvAddNewTaskToReadyList+0xc8>)
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b444:	4b27      	ldr	r3, [pc, #156]	; (800b4e4 <prvAddNewTaskToReadyList+0xc4>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	2b01      	cmp	r3, #1
 800b44a:	d110      	bne.n	800b46e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b44c:	f000 fc38 	bl	800bcc0 <prvInitialiseTaskLists>
 800b450:	e00d      	b.n	800b46e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b452:	4b26      	ldr	r3, [pc, #152]	; (800b4ec <prvAddNewTaskToReadyList+0xcc>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d109      	bne.n	800b46e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b45a:	4b23      	ldr	r3, [pc, #140]	; (800b4e8 <prvAddNewTaskToReadyList+0xc8>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b464:	429a      	cmp	r2, r3
 800b466:	d802      	bhi.n	800b46e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b468:	4a1f      	ldr	r2, [pc, #124]	; (800b4e8 <prvAddNewTaskToReadyList+0xc8>)
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b46e:	4b20      	ldr	r3, [pc, #128]	; (800b4f0 <prvAddNewTaskToReadyList+0xd0>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	3301      	adds	r3, #1
 800b474:	4a1e      	ldr	r2, [pc, #120]	; (800b4f0 <prvAddNewTaskToReadyList+0xd0>)
 800b476:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b478:	4b1d      	ldr	r3, [pc, #116]	; (800b4f0 <prvAddNewTaskToReadyList+0xd0>)
 800b47a:	681a      	ldr	r2, [r3, #0]
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b484:	4b1b      	ldr	r3, [pc, #108]	; (800b4f4 <prvAddNewTaskToReadyList+0xd4>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	429a      	cmp	r2, r3
 800b48a:	d903      	bls.n	800b494 <prvAddNewTaskToReadyList+0x74>
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b490:	4a18      	ldr	r2, [pc, #96]	; (800b4f4 <prvAddNewTaskToReadyList+0xd4>)
 800b492:	6013      	str	r3, [r2, #0]
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b498:	4613      	mov	r3, r2
 800b49a:	009b      	lsls	r3, r3, #2
 800b49c:	4413      	add	r3, r2
 800b49e:	009b      	lsls	r3, r3, #2
 800b4a0:	4a15      	ldr	r2, [pc, #84]	; (800b4f8 <prvAddNewTaskToReadyList+0xd8>)
 800b4a2:	441a      	add	r2, r3
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	3304      	adds	r3, #4
 800b4a8:	4619      	mov	r1, r3
 800b4aa:	4610      	mov	r0, r2
 800b4ac:	f7fe fad7 	bl	8009a5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b4b0:	f7fe fcb8 	bl	8009e24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b4b4:	4b0d      	ldr	r3, [pc, #52]	; (800b4ec <prvAddNewTaskToReadyList+0xcc>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d00e      	beq.n	800b4da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b4bc:	4b0a      	ldr	r3, [pc, #40]	; (800b4e8 <prvAddNewTaskToReadyList+0xc8>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4c6:	429a      	cmp	r2, r3
 800b4c8:	d207      	bcs.n	800b4da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b4ca:	4b0c      	ldr	r3, [pc, #48]	; (800b4fc <prvAddNewTaskToReadyList+0xdc>)
 800b4cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4d0:	601a      	str	r2, [r3, #0]
 800b4d2:	f3bf 8f4f 	dsb	sy
 800b4d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b4da:	bf00      	nop
 800b4dc:	3708      	adds	r7, #8
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bd80      	pop	{r7, pc}
 800b4e2:	bf00      	nop
 800b4e4:	240121d0 	.word	0x240121d0
 800b4e8:	24011cfc 	.word	0x24011cfc
 800b4ec:	240121dc 	.word	0x240121dc
 800b4f0:	240121ec 	.word	0x240121ec
 800b4f4:	240121d8 	.word	0x240121d8
 800b4f8:	24011d00 	.word	0x24011d00
 800b4fc:	e000ed04 	.word	0xe000ed04

0800b500 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b500:	b580      	push	{r7, lr}
 800b502:	b084      	sub	sp, #16
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b508:	2300      	movs	r3, #0
 800b50a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d017      	beq.n	800b542 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b512:	4b13      	ldr	r3, [pc, #76]	; (800b560 <vTaskDelay+0x60>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d00a      	beq.n	800b530 <vTaskDelay+0x30>
	__asm volatile
 800b51a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b51e:	f383 8811 	msr	BASEPRI, r3
 800b522:	f3bf 8f6f 	isb	sy
 800b526:	f3bf 8f4f 	dsb	sy
 800b52a:	60bb      	str	r3, [r7, #8]
}
 800b52c:	bf00      	nop
 800b52e:	e7fe      	b.n	800b52e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b530:	f000 f88a 	bl	800b648 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b534:	2100      	movs	r1, #0
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f000 fe1e 	bl	800c178 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b53c:	f000 f892 	bl	800b664 <xTaskResumeAll>
 800b540:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d107      	bne.n	800b558 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b548:	4b06      	ldr	r3, [pc, #24]	; (800b564 <vTaskDelay+0x64>)
 800b54a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b54e:	601a      	str	r2, [r3, #0]
 800b550:	f3bf 8f4f 	dsb	sy
 800b554:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b558:	bf00      	nop
 800b55a:	3710      	adds	r7, #16
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}
 800b560:	240121f8 	.word	0x240121f8
 800b564:	e000ed04 	.word	0xe000ed04

0800b568 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b08a      	sub	sp, #40	; 0x28
 800b56c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b56e:	2300      	movs	r3, #0
 800b570:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b572:	2300      	movs	r3, #0
 800b574:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b576:	463a      	mov	r2, r7
 800b578:	1d39      	adds	r1, r7, #4
 800b57a:	f107 0308 	add.w	r3, r7, #8
 800b57e:	4618      	mov	r0, r3
 800b580:	f7fe f822 	bl	80095c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b584:	6839      	ldr	r1, [r7, #0]
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	68ba      	ldr	r2, [r7, #8]
 800b58a:	9202      	str	r2, [sp, #8]
 800b58c:	9301      	str	r3, [sp, #4]
 800b58e:	2300      	movs	r3, #0
 800b590:	9300      	str	r3, [sp, #0]
 800b592:	2300      	movs	r3, #0
 800b594:	460a      	mov	r2, r1
 800b596:	4924      	ldr	r1, [pc, #144]	; (800b628 <vTaskStartScheduler+0xc0>)
 800b598:	4824      	ldr	r0, [pc, #144]	; (800b62c <vTaskStartScheduler+0xc4>)
 800b59a:	f7ff fdf9 	bl	800b190 <xTaskCreateStatic>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	4a23      	ldr	r2, [pc, #140]	; (800b630 <vTaskStartScheduler+0xc8>)
 800b5a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b5a4:	4b22      	ldr	r3, [pc, #136]	; (800b630 <vTaskStartScheduler+0xc8>)
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d002      	beq.n	800b5b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	617b      	str	r3, [r7, #20]
 800b5b0:	e001      	b.n	800b5b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	2b01      	cmp	r3, #1
 800b5ba:	d102      	bne.n	800b5c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b5bc:	f000 fe30 	bl	800c220 <xTimerCreateTimerTask>
 800b5c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	2b01      	cmp	r3, #1
 800b5c6:	d11b      	bne.n	800b600 <vTaskStartScheduler+0x98>
	__asm volatile
 800b5c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5cc:	f383 8811 	msr	BASEPRI, r3
 800b5d0:	f3bf 8f6f 	isb	sy
 800b5d4:	f3bf 8f4f 	dsb	sy
 800b5d8:	613b      	str	r3, [r7, #16]
}
 800b5da:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b5dc:	4b15      	ldr	r3, [pc, #84]	; (800b634 <vTaskStartScheduler+0xcc>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	3354      	adds	r3, #84	; 0x54
 800b5e2:	4a15      	ldr	r2, [pc, #84]	; (800b638 <vTaskStartScheduler+0xd0>)
 800b5e4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b5e6:	4b15      	ldr	r3, [pc, #84]	; (800b63c <vTaskStartScheduler+0xd4>)
 800b5e8:	f04f 32ff 	mov.w	r2, #4294967295
 800b5ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b5ee:	4b14      	ldr	r3, [pc, #80]	; (800b640 <vTaskStartScheduler+0xd8>)
 800b5f0:	2201      	movs	r2, #1
 800b5f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b5f4:	4b13      	ldr	r3, [pc, #76]	; (800b644 <vTaskStartScheduler+0xdc>)
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b5fa:	f7fe fb41 	bl	8009c80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b5fe:	e00e      	b.n	800b61e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b600:	697b      	ldr	r3, [r7, #20]
 800b602:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b606:	d10a      	bne.n	800b61e <vTaskStartScheduler+0xb6>
	__asm volatile
 800b608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b60c:	f383 8811 	msr	BASEPRI, r3
 800b610:	f3bf 8f6f 	isb	sy
 800b614:	f3bf 8f4f 	dsb	sy
 800b618:	60fb      	str	r3, [r7, #12]
}
 800b61a:	bf00      	nop
 800b61c:	e7fe      	b.n	800b61c <vTaskStartScheduler+0xb4>
}
 800b61e:	bf00      	nop
 800b620:	3718      	adds	r7, #24
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}
 800b626:	bf00      	nop
 800b628:	08017df4 	.word	0x08017df4
 800b62c:	0800bc91 	.word	0x0800bc91
 800b630:	240121f4 	.word	0x240121f4
 800b634:	24011cfc 	.word	0x24011cfc
 800b638:	24000034 	.word	0x24000034
 800b63c:	240121f0 	.word	0x240121f0
 800b640:	240121dc 	.word	0x240121dc
 800b644:	240121d4 	.word	0x240121d4

0800b648 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b648:	b480      	push	{r7}
 800b64a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b64c:	4b04      	ldr	r3, [pc, #16]	; (800b660 <vTaskSuspendAll+0x18>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	3301      	adds	r3, #1
 800b652:	4a03      	ldr	r2, [pc, #12]	; (800b660 <vTaskSuspendAll+0x18>)
 800b654:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b656:	bf00      	nop
 800b658:	46bd      	mov	sp, r7
 800b65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65e:	4770      	bx	lr
 800b660:	240121f8 	.word	0x240121f8

0800b664 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b084      	sub	sp, #16
 800b668:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b66a:	2300      	movs	r3, #0
 800b66c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b66e:	2300      	movs	r3, #0
 800b670:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b672:	4b42      	ldr	r3, [pc, #264]	; (800b77c <xTaskResumeAll+0x118>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d10a      	bne.n	800b690 <xTaskResumeAll+0x2c>
	__asm volatile
 800b67a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b67e:	f383 8811 	msr	BASEPRI, r3
 800b682:	f3bf 8f6f 	isb	sy
 800b686:	f3bf 8f4f 	dsb	sy
 800b68a:	603b      	str	r3, [r7, #0]
}
 800b68c:	bf00      	nop
 800b68e:	e7fe      	b.n	800b68e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b690:	f7fe fb98 	bl	8009dc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b694:	4b39      	ldr	r3, [pc, #228]	; (800b77c <xTaskResumeAll+0x118>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	3b01      	subs	r3, #1
 800b69a:	4a38      	ldr	r2, [pc, #224]	; (800b77c <xTaskResumeAll+0x118>)
 800b69c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b69e:	4b37      	ldr	r3, [pc, #220]	; (800b77c <xTaskResumeAll+0x118>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d162      	bne.n	800b76c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b6a6:	4b36      	ldr	r3, [pc, #216]	; (800b780 <xTaskResumeAll+0x11c>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d05e      	beq.n	800b76c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b6ae:	e02f      	b.n	800b710 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6b0:	4b34      	ldr	r3, [pc, #208]	; (800b784 <xTaskResumeAll+0x120>)
 800b6b2:	68db      	ldr	r3, [r3, #12]
 800b6b4:	68db      	ldr	r3, [r3, #12]
 800b6b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	3318      	adds	r3, #24
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f7fe fa2b 	bl	8009b18 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	3304      	adds	r3, #4
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f7fe fa26 	bl	8009b18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6d0:	4b2d      	ldr	r3, [pc, #180]	; (800b788 <xTaskResumeAll+0x124>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	429a      	cmp	r2, r3
 800b6d6:	d903      	bls.n	800b6e0 <xTaskResumeAll+0x7c>
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6dc:	4a2a      	ldr	r2, [pc, #168]	; (800b788 <xTaskResumeAll+0x124>)
 800b6de:	6013      	str	r3, [r2, #0]
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6e4:	4613      	mov	r3, r2
 800b6e6:	009b      	lsls	r3, r3, #2
 800b6e8:	4413      	add	r3, r2
 800b6ea:	009b      	lsls	r3, r3, #2
 800b6ec:	4a27      	ldr	r2, [pc, #156]	; (800b78c <xTaskResumeAll+0x128>)
 800b6ee:	441a      	add	r2, r3
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	3304      	adds	r3, #4
 800b6f4:	4619      	mov	r1, r3
 800b6f6:	4610      	mov	r0, r2
 800b6f8:	f7fe f9b1 	bl	8009a5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b700:	4b23      	ldr	r3, [pc, #140]	; (800b790 <xTaskResumeAll+0x12c>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b706:	429a      	cmp	r2, r3
 800b708:	d302      	bcc.n	800b710 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b70a:	4b22      	ldr	r3, [pc, #136]	; (800b794 <xTaskResumeAll+0x130>)
 800b70c:	2201      	movs	r2, #1
 800b70e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b710:	4b1c      	ldr	r3, [pc, #112]	; (800b784 <xTaskResumeAll+0x120>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d1cb      	bne.n	800b6b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d001      	beq.n	800b722 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b71e:	f000 fb71 	bl	800be04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b722:	4b1d      	ldr	r3, [pc, #116]	; (800b798 <xTaskResumeAll+0x134>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d010      	beq.n	800b750 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b72e:	f000 f859 	bl	800b7e4 <xTaskIncrementTick>
 800b732:	4603      	mov	r3, r0
 800b734:	2b00      	cmp	r3, #0
 800b736:	d002      	beq.n	800b73e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b738:	4b16      	ldr	r3, [pc, #88]	; (800b794 <xTaskResumeAll+0x130>)
 800b73a:	2201      	movs	r2, #1
 800b73c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	3b01      	subs	r3, #1
 800b742:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d1f1      	bne.n	800b72e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b74a:	4b13      	ldr	r3, [pc, #76]	; (800b798 <xTaskResumeAll+0x134>)
 800b74c:	2200      	movs	r2, #0
 800b74e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b750:	4b10      	ldr	r3, [pc, #64]	; (800b794 <xTaskResumeAll+0x130>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d009      	beq.n	800b76c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b758:	2301      	movs	r3, #1
 800b75a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b75c:	4b0f      	ldr	r3, [pc, #60]	; (800b79c <xTaskResumeAll+0x138>)
 800b75e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b762:	601a      	str	r2, [r3, #0]
 800b764:	f3bf 8f4f 	dsb	sy
 800b768:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b76c:	f7fe fb5a 	bl	8009e24 <vPortExitCritical>

	return xAlreadyYielded;
 800b770:	68bb      	ldr	r3, [r7, #8]
}
 800b772:	4618      	mov	r0, r3
 800b774:	3710      	adds	r7, #16
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}
 800b77a:	bf00      	nop
 800b77c:	240121f8 	.word	0x240121f8
 800b780:	240121d0 	.word	0x240121d0
 800b784:	24012190 	.word	0x24012190
 800b788:	240121d8 	.word	0x240121d8
 800b78c:	24011d00 	.word	0x24011d00
 800b790:	24011cfc 	.word	0x24011cfc
 800b794:	240121e4 	.word	0x240121e4
 800b798:	240121e0 	.word	0x240121e0
 800b79c:	e000ed04 	.word	0xe000ed04

0800b7a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b7a0:	b480      	push	{r7}
 800b7a2:	b083      	sub	sp, #12
 800b7a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b7a6:	4b05      	ldr	r3, [pc, #20]	; (800b7bc <xTaskGetTickCount+0x1c>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b7ac:	687b      	ldr	r3, [r7, #4]
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	370c      	adds	r7, #12
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b8:	4770      	bx	lr
 800b7ba:	bf00      	nop
 800b7bc:	240121d4 	.word	0x240121d4

0800b7c0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b082      	sub	sp, #8
 800b7c4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b7c6:	f7fe fbdf 	bl	8009f88 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b7ce:	4b04      	ldr	r3, [pc, #16]	; (800b7e0 <xTaskGetTickCountFromISR+0x20>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b7d4:	683b      	ldr	r3, [r7, #0]
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	3708      	adds	r7, #8
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}
 800b7de:	bf00      	nop
 800b7e0:	240121d4 	.word	0x240121d4

0800b7e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b086      	sub	sp, #24
 800b7e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b7ee:	4b4f      	ldr	r3, [pc, #316]	; (800b92c <xTaskIncrementTick+0x148>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	f040 808f 	bne.w	800b916 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b7f8:	4b4d      	ldr	r3, [pc, #308]	; (800b930 <xTaskIncrementTick+0x14c>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	3301      	adds	r3, #1
 800b7fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b800:	4a4b      	ldr	r2, [pc, #300]	; (800b930 <xTaskIncrementTick+0x14c>)
 800b802:	693b      	ldr	r3, [r7, #16]
 800b804:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d120      	bne.n	800b84e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b80c:	4b49      	ldr	r3, [pc, #292]	; (800b934 <xTaskIncrementTick+0x150>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d00a      	beq.n	800b82c <xTaskIncrementTick+0x48>
	__asm volatile
 800b816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b81a:	f383 8811 	msr	BASEPRI, r3
 800b81e:	f3bf 8f6f 	isb	sy
 800b822:	f3bf 8f4f 	dsb	sy
 800b826:	603b      	str	r3, [r7, #0]
}
 800b828:	bf00      	nop
 800b82a:	e7fe      	b.n	800b82a <xTaskIncrementTick+0x46>
 800b82c:	4b41      	ldr	r3, [pc, #260]	; (800b934 <xTaskIncrementTick+0x150>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	60fb      	str	r3, [r7, #12]
 800b832:	4b41      	ldr	r3, [pc, #260]	; (800b938 <xTaskIncrementTick+0x154>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	4a3f      	ldr	r2, [pc, #252]	; (800b934 <xTaskIncrementTick+0x150>)
 800b838:	6013      	str	r3, [r2, #0]
 800b83a:	4a3f      	ldr	r2, [pc, #252]	; (800b938 <xTaskIncrementTick+0x154>)
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	6013      	str	r3, [r2, #0]
 800b840:	4b3e      	ldr	r3, [pc, #248]	; (800b93c <xTaskIncrementTick+0x158>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	3301      	adds	r3, #1
 800b846:	4a3d      	ldr	r2, [pc, #244]	; (800b93c <xTaskIncrementTick+0x158>)
 800b848:	6013      	str	r3, [r2, #0]
 800b84a:	f000 fadb 	bl	800be04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b84e:	4b3c      	ldr	r3, [pc, #240]	; (800b940 <xTaskIncrementTick+0x15c>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	693a      	ldr	r2, [r7, #16]
 800b854:	429a      	cmp	r2, r3
 800b856:	d349      	bcc.n	800b8ec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b858:	4b36      	ldr	r3, [pc, #216]	; (800b934 <xTaskIncrementTick+0x150>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d104      	bne.n	800b86c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b862:	4b37      	ldr	r3, [pc, #220]	; (800b940 <xTaskIncrementTick+0x15c>)
 800b864:	f04f 32ff 	mov.w	r2, #4294967295
 800b868:	601a      	str	r2, [r3, #0]
					break;
 800b86a:	e03f      	b.n	800b8ec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b86c:	4b31      	ldr	r3, [pc, #196]	; (800b934 <xTaskIncrementTick+0x150>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	68db      	ldr	r3, [r3, #12]
 800b872:	68db      	ldr	r3, [r3, #12]
 800b874:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b876:	68bb      	ldr	r3, [r7, #8]
 800b878:	685b      	ldr	r3, [r3, #4]
 800b87a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b87c:	693a      	ldr	r2, [r7, #16]
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	429a      	cmp	r2, r3
 800b882:	d203      	bcs.n	800b88c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b884:	4a2e      	ldr	r2, [pc, #184]	; (800b940 <xTaskIncrementTick+0x15c>)
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b88a:	e02f      	b.n	800b8ec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	3304      	adds	r3, #4
 800b890:	4618      	mov	r0, r3
 800b892:	f7fe f941 	bl	8009b18 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d004      	beq.n	800b8a8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	3318      	adds	r3, #24
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f7fe f938 	bl	8009b18 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8ac:	4b25      	ldr	r3, [pc, #148]	; (800b944 <xTaskIncrementTick+0x160>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	429a      	cmp	r2, r3
 800b8b2:	d903      	bls.n	800b8bc <xTaskIncrementTick+0xd8>
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8b8:	4a22      	ldr	r2, [pc, #136]	; (800b944 <xTaskIncrementTick+0x160>)
 800b8ba:	6013      	str	r3, [r2, #0]
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8c0:	4613      	mov	r3, r2
 800b8c2:	009b      	lsls	r3, r3, #2
 800b8c4:	4413      	add	r3, r2
 800b8c6:	009b      	lsls	r3, r3, #2
 800b8c8:	4a1f      	ldr	r2, [pc, #124]	; (800b948 <xTaskIncrementTick+0x164>)
 800b8ca:	441a      	add	r2, r3
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	3304      	adds	r3, #4
 800b8d0:	4619      	mov	r1, r3
 800b8d2:	4610      	mov	r0, r2
 800b8d4:	f7fe f8c3 	bl	8009a5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8dc:	4b1b      	ldr	r3, [pc, #108]	; (800b94c <xTaskIncrementTick+0x168>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8e2:	429a      	cmp	r2, r3
 800b8e4:	d3b8      	bcc.n	800b858 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b8ea:	e7b5      	b.n	800b858 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b8ec:	4b17      	ldr	r3, [pc, #92]	; (800b94c <xTaskIncrementTick+0x168>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8f2:	4915      	ldr	r1, [pc, #84]	; (800b948 <xTaskIncrementTick+0x164>)
 800b8f4:	4613      	mov	r3, r2
 800b8f6:	009b      	lsls	r3, r3, #2
 800b8f8:	4413      	add	r3, r2
 800b8fa:	009b      	lsls	r3, r3, #2
 800b8fc:	440b      	add	r3, r1
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	2b01      	cmp	r3, #1
 800b902:	d901      	bls.n	800b908 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b904:	2301      	movs	r3, #1
 800b906:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b908:	4b11      	ldr	r3, [pc, #68]	; (800b950 <xTaskIncrementTick+0x16c>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d007      	beq.n	800b920 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b910:	2301      	movs	r3, #1
 800b912:	617b      	str	r3, [r7, #20]
 800b914:	e004      	b.n	800b920 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b916:	4b0f      	ldr	r3, [pc, #60]	; (800b954 <xTaskIncrementTick+0x170>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	3301      	adds	r3, #1
 800b91c:	4a0d      	ldr	r2, [pc, #52]	; (800b954 <xTaskIncrementTick+0x170>)
 800b91e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b920:	697b      	ldr	r3, [r7, #20]
}
 800b922:	4618      	mov	r0, r3
 800b924:	3718      	adds	r7, #24
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}
 800b92a:	bf00      	nop
 800b92c:	240121f8 	.word	0x240121f8
 800b930:	240121d4 	.word	0x240121d4
 800b934:	24012188 	.word	0x24012188
 800b938:	2401218c 	.word	0x2401218c
 800b93c:	240121e8 	.word	0x240121e8
 800b940:	240121f0 	.word	0x240121f0
 800b944:	240121d8 	.word	0x240121d8
 800b948:	24011d00 	.word	0x24011d00
 800b94c:	24011cfc 	.word	0x24011cfc
 800b950:	240121e4 	.word	0x240121e4
 800b954:	240121e0 	.word	0x240121e0

0800b958 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b958:	b480      	push	{r7}
 800b95a:	b085      	sub	sp, #20
 800b95c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b95e:	4b2a      	ldr	r3, [pc, #168]	; (800ba08 <vTaskSwitchContext+0xb0>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d003      	beq.n	800b96e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b966:	4b29      	ldr	r3, [pc, #164]	; (800ba0c <vTaskSwitchContext+0xb4>)
 800b968:	2201      	movs	r2, #1
 800b96a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b96c:	e046      	b.n	800b9fc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b96e:	4b27      	ldr	r3, [pc, #156]	; (800ba0c <vTaskSwitchContext+0xb4>)
 800b970:	2200      	movs	r2, #0
 800b972:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b974:	4b26      	ldr	r3, [pc, #152]	; (800ba10 <vTaskSwitchContext+0xb8>)
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	60fb      	str	r3, [r7, #12]
 800b97a:	e010      	b.n	800b99e <vTaskSwitchContext+0x46>
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d10a      	bne.n	800b998 <vTaskSwitchContext+0x40>
	__asm volatile
 800b982:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b986:	f383 8811 	msr	BASEPRI, r3
 800b98a:	f3bf 8f6f 	isb	sy
 800b98e:	f3bf 8f4f 	dsb	sy
 800b992:	607b      	str	r3, [r7, #4]
}
 800b994:	bf00      	nop
 800b996:	e7fe      	b.n	800b996 <vTaskSwitchContext+0x3e>
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	3b01      	subs	r3, #1
 800b99c:	60fb      	str	r3, [r7, #12]
 800b99e:	491d      	ldr	r1, [pc, #116]	; (800ba14 <vTaskSwitchContext+0xbc>)
 800b9a0:	68fa      	ldr	r2, [r7, #12]
 800b9a2:	4613      	mov	r3, r2
 800b9a4:	009b      	lsls	r3, r3, #2
 800b9a6:	4413      	add	r3, r2
 800b9a8:	009b      	lsls	r3, r3, #2
 800b9aa:	440b      	add	r3, r1
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d0e4      	beq.n	800b97c <vTaskSwitchContext+0x24>
 800b9b2:	68fa      	ldr	r2, [r7, #12]
 800b9b4:	4613      	mov	r3, r2
 800b9b6:	009b      	lsls	r3, r3, #2
 800b9b8:	4413      	add	r3, r2
 800b9ba:	009b      	lsls	r3, r3, #2
 800b9bc:	4a15      	ldr	r2, [pc, #84]	; (800ba14 <vTaskSwitchContext+0xbc>)
 800b9be:	4413      	add	r3, r2
 800b9c0:	60bb      	str	r3, [r7, #8]
 800b9c2:	68bb      	ldr	r3, [r7, #8]
 800b9c4:	685b      	ldr	r3, [r3, #4]
 800b9c6:	685a      	ldr	r2, [r3, #4]
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	605a      	str	r2, [r3, #4]
 800b9cc:	68bb      	ldr	r3, [r7, #8]
 800b9ce:	685a      	ldr	r2, [r3, #4]
 800b9d0:	68bb      	ldr	r3, [r7, #8]
 800b9d2:	3308      	adds	r3, #8
 800b9d4:	429a      	cmp	r2, r3
 800b9d6:	d104      	bne.n	800b9e2 <vTaskSwitchContext+0x8a>
 800b9d8:	68bb      	ldr	r3, [r7, #8]
 800b9da:	685b      	ldr	r3, [r3, #4]
 800b9dc:	685a      	ldr	r2, [r3, #4]
 800b9de:	68bb      	ldr	r3, [r7, #8]
 800b9e0:	605a      	str	r2, [r3, #4]
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	685b      	ldr	r3, [r3, #4]
 800b9e6:	68db      	ldr	r3, [r3, #12]
 800b9e8:	4a0b      	ldr	r2, [pc, #44]	; (800ba18 <vTaskSwitchContext+0xc0>)
 800b9ea:	6013      	str	r3, [r2, #0]
 800b9ec:	4a08      	ldr	r2, [pc, #32]	; (800ba10 <vTaskSwitchContext+0xb8>)
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b9f2:	4b09      	ldr	r3, [pc, #36]	; (800ba18 <vTaskSwitchContext+0xc0>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	3354      	adds	r3, #84	; 0x54
 800b9f8:	4a08      	ldr	r2, [pc, #32]	; (800ba1c <vTaskSwitchContext+0xc4>)
 800b9fa:	6013      	str	r3, [r2, #0]
}
 800b9fc:	bf00      	nop
 800b9fe:	3714      	adds	r7, #20
 800ba00:	46bd      	mov	sp, r7
 800ba02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba06:	4770      	bx	lr
 800ba08:	240121f8 	.word	0x240121f8
 800ba0c:	240121e4 	.word	0x240121e4
 800ba10:	240121d8 	.word	0x240121d8
 800ba14:	24011d00 	.word	0x24011d00
 800ba18:	24011cfc 	.word	0x24011cfc
 800ba1c:	24000034 	.word	0x24000034

0800ba20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b084      	sub	sp, #16
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
 800ba28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d10a      	bne.n	800ba46 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ba30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba34:	f383 8811 	msr	BASEPRI, r3
 800ba38:	f3bf 8f6f 	isb	sy
 800ba3c:	f3bf 8f4f 	dsb	sy
 800ba40:	60fb      	str	r3, [r7, #12]
}
 800ba42:	bf00      	nop
 800ba44:	e7fe      	b.n	800ba44 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ba46:	4b07      	ldr	r3, [pc, #28]	; (800ba64 <vTaskPlaceOnEventList+0x44>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	3318      	adds	r3, #24
 800ba4c:	4619      	mov	r1, r3
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f7fe f829 	bl	8009aa6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ba54:	2101      	movs	r1, #1
 800ba56:	6838      	ldr	r0, [r7, #0]
 800ba58:	f000 fb8e 	bl	800c178 <prvAddCurrentTaskToDelayedList>
}
 800ba5c:	bf00      	nop
 800ba5e:	3710      	adds	r7, #16
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bd80      	pop	{r7, pc}
 800ba64:	24011cfc 	.word	0x24011cfc

0800ba68 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b086      	sub	sp, #24
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	60f8      	str	r0, [r7, #12]
 800ba70:	60b9      	str	r1, [r7, #8]
 800ba72:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d10a      	bne.n	800ba90 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ba7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba7e:	f383 8811 	msr	BASEPRI, r3
 800ba82:	f3bf 8f6f 	isb	sy
 800ba86:	f3bf 8f4f 	dsb	sy
 800ba8a:	617b      	str	r3, [r7, #20]
}
 800ba8c:	bf00      	nop
 800ba8e:	e7fe      	b.n	800ba8e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ba90:	4b0a      	ldr	r3, [pc, #40]	; (800babc <vTaskPlaceOnEventListRestricted+0x54>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	3318      	adds	r3, #24
 800ba96:	4619      	mov	r1, r3
 800ba98:	68f8      	ldr	r0, [r7, #12]
 800ba9a:	f7fd ffe0 	bl	8009a5e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d002      	beq.n	800baaa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800baa4:	f04f 33ff 	mov.w	r3, #4294967295
 800baa8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800baaa:	6879      	ldr	r1, [r7, #4]
 800baac:	68b8      	ldr	r0, [r7, #8]
 800baae:	f000 fb63 	bl	800c178 <prvAddCurrentTaskToDelayedList>
	}
 800bab2:	bf00      	nop
 800bab4:	3718      	adds	r7, #24
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}
 800baba:	bf00      	nop
 800babc:	24011cfc 	.word	0x24011cfc

0800bac0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b086      	sub	sp, #24
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	68db      	ldr	r3, [r3, #12]
 800bacc:	68db      	ldr	r3, [r3, #12]
 800bace:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bad0:	693b      	ldr	r3, [r7, #16]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d10a      	bne.n	800baec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bada:	f383 8811 	msr	BASEPRI, r3
 800bade:	f3bf 8f6f 	isb	sy
 800bae2:	f3bf 8f4f 	dsb	sy
 800bae6:	60fb      	str	r3, [r7, #12]
}
 800bae8:	bf00      	nop
 800baea:	e7fe      	b.n	800baea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800baec:	693b      	ldr	r3, [r7, #16]
 800baee:	3318      	adds	r3, #24
 800baf0:	4618      	mov	r0, r3
 800baf2:	f7fe f811 	bl	8009b18 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800baf6:	4b1e      	ldr	r3, [pc, #120]	; (800bb70 <xTaskRemoveFromEventList+0xb0>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d11d      	bne.n	800bb3a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	3304      	adds	r3, #4
 800bb02:	4618      	mov	r0, r3
 800bb04:	f7fe f808 	bl	8009b18 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bb08:	693b      	ldr	r3, [r7, #16]
 800bb0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb0c:	4b19      	ldr	r3, [pc, #100]	; (800bb74 <xTaskRemoveFromEventList+0xb4>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	429a      	cmp	r2, r3
 800bb12:	d903      	bls.n	800bb1c <xTaskRemoveFromEventList+0x5c>
 800bb14:	693b      	ldr	r3, [r7, #16]
 800bb16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb18:	4a16      	ldr	r2, [pc, #88]	; (800bb74 <xTaskRemoveFromEventList+0xb4>)
 800bb1a:	6013      	str	r3, [r2, #0]
 800bb1c:	693b      	ldr	r3, [r7, #16]
 800bb1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb20:	4613      	mov	r3, r2
 800bb22:	009b      	lsls	r3, r3, #2
 800bb24:	4413      	add	r3, r2
 800bb26:	009b      	lsls	r3, r3, #2
 800bb28:	4a13      	ldr	r2, [pc, #76]	; (800bb78 <xTaskRemoveFromEventList+0xb8>)
 800bb2a:	441a      	add	r2, r3
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	3304      	adds	r3, #4
 800bb30:	4619      	mov	r1, r3
 800bb32:	4610      	mov	r0, r2
 800bb34:	f7fd ff93 	bl	8009a5e <vListInsertEnd>
 800bb38:	e005      	b.n	800bb46 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bb3a:	693b      	ldr	r3, [r7, #16]
 800bb3c:	3318      	adds	r3, #24
 800bb3e:	4619      	mov	r1, r3
 800bb40:	480e      	ldr	r0, [pc, #56]	; (800bb7c <xTaskRemoveFromEventList+0xbc>)
 800bb42:	f7fd ff8c 	bl	8009a5e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bb46:	693b      	ldr	r3, [r7, #16]
 800bb48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb4a:	4b0d      	ldr	r3, [pc, #52]	; (800bb80 <xTaskRemoveFromEventList+0xc0>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb50:	429a      	cmp	r2, r3
 800bb52:	d905      	bls.n	800bb60 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bb54:	2301      	movs	r3, #1
 800bb56:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bb58:	4b0a      	ldr	r3, [pc, #40]	; (800bb84 <xTaskRemoveFromEventList+0xc4>)
 800bb5a:	2201      	movs	r2, #1
 800bb5c:	601a      	str	r2, [r3, #0]
 800bb5e:	e001      	b.n	800bb64 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bb60:	2300      	movs	r3, #0
 800bb62:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bb64:	697b      	ldr	r3, [r7, #20]
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3718      	adds	r7, #24
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}
 800bb6e:	bf00      	nop
 800bb70:	240121f8 	.word	0x240121f8
 800bb74:	240121d8 	.word	0x240121d8
 800bb78:	24011d00 	.word	0x24011d00
 800bb7c:	24012190 	.word	0x24012190
 800bb80:	24011cfc 	.word	0x24011cfc
 800bb84:	240121e4 	.word	0x240121e4

0800bb88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bb88:	b480      	push	{r7}
 800bb8a:	b083      	sub	sp, #12
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bb90:	4b06      	ldr	r3, [pc, #24]	; (800bbac <vTaskInternalSetTimeOutState+0x24>)
 800bb92:	681a      	ldr	r2, [r3, #0]
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bb98:	4b05      	ldr	r3, [pc, #20]	; (800bbb0 <vTaskInternalSetTimeOutState+0x28>)
 800bb9a:	681a      	ldr	r2, [r3, #0]
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	605a      	str	r2, [r3, #4]
}
 800bba0:	bf00      	nop
 800bba2:	370c      	adds	r7, #12
 800bba4:	46bd      	mov	sp, r7
 800bba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbaa:	4770      	bx	lr
 800bbac:	240121e8 	.word	0x240121e8
 800bbb0:	240121d4 	.word	0x240121d4

0800bbb4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b088      	sub	sp, #32
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
 800bbbc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d10a      	bne.n	800bbda <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bbc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc8:	f383 8811 	msr	BASEPRI, r3
 800bbcc:	f3bf 8f6f 	isb	sy
 800bbd0:	f3bf 8f4f 	dsb	sy
 800bbd4:	613b      	str	r3, [r7, #16]
}
 800bbd6:	bf00      	nop
 800bbd8:	e7fe      	b.n	800bbd8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d10a      	bne.n	800bbf6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bbe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbe4:	f383 8811 	msr	BASEPRI, r3
 800bbe8:	f3bf 8f6f 	isb	sy
 800bbec:	f3bf 8f4f 	dsb	sy
 800bbf0:	60fb      	str	r3, [r7, #12]
}
 800bbf2:	bf00      	nop
 800bbf4:	e7fe      	b.n	800bbf4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bbf6:	f7fe f8e5 	bl	8009dc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bbfa:	4b1d      	ldr	r3, [pc, #116]	; (800bc70 <xTaskCheckForTimeOut+0xbc>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	685b      	ldr	r3, [r3, #4]
 800bc04:	69ba      	ldr	r2, [r7, #24]
 800bc06:	1ad3      	subs	r3, r2, r3
 800bc08:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc12:	d102      	bne.n	800bc1a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bc14:	2300      	movs	r3, #0
 800bc16:	61fb      	str	r3, [r7, #28]
 800bc18:	e023      	b.n	800bc62 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681a      	ldr	r2, [r3, #0]
 800bc1e:	4b15      	ldr	r3, [pc, #84]	; (800bc74 <xTaskCheckForTimeOut+0xc0>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	429a      	cmp	r2, r3
 800bc24:	d007      	beq.n	800bc36 <xTaskCheckForTimeOut+0x82>
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	685b      	ldr	r3, [r3, #4]
 800bc2a:	69ba      	ldr	r2, [r7, #24]
 800bc2c:	429a      	cmp	r2, r3
 800bc2e:	d302      	bcc.n	800bc36 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bc30:	2301      	movs	r3, #1
 800bc32:	61fb      	str	r3, [r7, #28]
 800bc34:	e015      	b.n	800bc62 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	697a      	ldr	r2, [r7, #20]
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	d20b      	bcs.n	800bc58 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	681a      	ldr	r2, [r3, #0]
 800bc44:	697b      	ldr	r3, [r7, #20]
 800bc46:	1ad2      	subs	r2, r2, r3
 800bc48:	683b      	ldr	r3, [r7, #0]
 800bc4a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f7ff ff9b 	bl	800bb88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bc52:	2300      	movs	r3, #0
 800bc54:	61fb      	str	r3, [r7, #28]
 800bc56:	e004      	b.n	800bc62 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bc5e:	2301      	movs	r3, #1
 800bc60:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bc62:	f7fe f8df 	bl	8009e24 <vPortExitCritical>

	return xReturn;
 800bc66:	69fb      	ldr	r3, [r7, #28]
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	3720      	adds	r7, #32
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	bd80      	pop	{r7, pc}
 800bc70:	240121d4 	.word	0x240121d4
 800bc74:	240121e8 	.word	0x240121e8

0800bc78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bc78:	b480      	push	{r7}
 800bc7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bc7c:	4b03      	ldr	r3, [pc, #12]	; (800bc8c <vTaskMissedYield+0x14>)
 800bc7e:	2201      	movs	r2, #1
 800bc80:	601a      	str	r2, [r3, #0]
}
 800bc82:	bf00      	nop
 800bc84:	46bd      	mov	sp, r7
 800bc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8a:	4770      	bx	lr
 800bc8c:	240121e4 	.word	0x240121e4

0800bc90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b082      	sub	sp, #8
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bc98:	f000 f852 	bl	800bd40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bc9c:	4b06      	ldr	r3, [pc, #24]	; (800bcb8 <prvIdleTask+0x28>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	2b01      	cmp	r3, #1
 800bca2:	d9f9      	bls.n	800bc98 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bca4:	4b05      	ldr	r3, [pc, #20]	; (800bcbc <prvIdleTask+0x2c>)
 800bca6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcaa:	601a      	str	r2, [r3, #0]
 800bcac:	f3bf 8f4f 	dsb	sy
 800bcb0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bcb4:	e7f0      	b.n	800bc98 <prvIdleTask+0x8>
 800bcb6:	bf00      	nop
 800bcb8:	24011d00 	.word	0x24011d00
 800bcbc:	e000ed04 	.word	0xe000ed04

0800bcc0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b082      	sub	sp, #8
 800bcc4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	607b      	str	r3, [r7, #4]
 800bcca:	e00c      	b.n	800bce6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bccc:	687a      	ldr	r2, [r7, #4]
 800bcce:	4613      	mov	r3, r2
 800bcd0:	009b      	lsls	r3, r3, #2
 800bcd2:	4413      	add	r3, r2
 800bcd4:	009b      	lsls	r3, r3, #2
 800bcd6:	4a12      	ldr	r2, [pc, #72]	; (800bd20 <prvInitialiseTaskLists+0x60>)
 800bcd8:	4413      	add	r3, r2
 800bcda:	4618      	mov	r0, r3
 800bcdc:	f7fd fe92 	bl	8009a04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	3301      	adds	r3, #1
 800bce4:	607b      	str	r3, [r7, #4]
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2b37      	cmp	r3, #55	; 0x37
 800bcea:	d9ef      	bls.n	800bccc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bcec:	480d      	ldr	r0, [pc, #52]	; (800bd24 <prvInitialiseTaskLists+0x64>)
 800bcee:	f7fd fe89 	bl	8009a04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bcf2:	480d      	ldr	r0, [pc, #52]	; (800bd28 <prvInitialiseTaskLists+0x68>)
 800bcf4:	f7fd fe86 	bl	8009a04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bcf8:	480c      	ldr	r0, [pc, #48]	; (800bd2c <prvInitialiseTaskLists+0x6c>)
 800bcfa:	f7fd fe83 	bl	8009a04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bcfe:	480c      	ldr	r0, [pc, #48]	; (800bd30 <prvInitialiseTaskLists+0x70>)
 800bd00:	f7fd fe80 	bl	8009a04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bd04:	480b      	ldr	r0, [pc, #44]	; (800bd34 <prvInitialiseTaskLists+0x74>)
 800bd06:	f7fd fe7d 	bl	8009a04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bd0a:	4b0b      	ldr	r3, [pc, #44]	; (800bd38 <prvInitialiseTaskLists+0x78>)
 800bd0c:	4a05      	ldr	r2, [pc, #20]	; (800bd24 <prvInitialiseTaskLists+0x64>)
 800bd0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bd10:	4b0a      	ldr	r3, [pc, #40]	; (800bd3c <prvInitialiseTaskLists+0x7c>)
 800bd12:	4a05      	ldr	r2, [pc, #20]	; (800bd28 <prvInitialiseTaskLists+0x68>)
 800bd14:	601a      	str	r2, [r3, #0]
}
 800bd16:	bf00      	nop
 800bd18:	3708      	adds	r7, #8
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd80      	pop	{r7, pc}
 800bd1e:	bf00      	nop
 800bd20:	24011d00 	.word	0x24011d00
 800bd24:	24012160 	.word	0x24012160
 800bd28:	24012174 	.word	0x24012174
 800bd2c:	24012190 	.word	0x24012190
 800bd30:	240121a4 	.word	0x240121a4
 800bd34:	240121bc 	.word	0x240121bc
 800bd38:	24012188 	.word	0x24012188
 800bd3c:	2401218c 	.word	0x2401218c

0800bd40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b082      	sub	sp, #8
 800bd44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bd46:	e019      	b.n	800bd7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bd48:	f7fe f83c 	bl	8009dc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd4c:	4b10      	ldr	r3, [pc, #64]	; (800bd90 <prvCheckTasksWaitingTermination+0x50>)
 800bd4e:	68db      	ldr	r3, [r3, #12]
 800bd50:	68db      	ldr	r3, [r3, #12]
 800bd52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	3304      	adds	r3, #4
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f7fd fedd 	bl	8009b18 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bd5e:	4b0d      	ldr	r3, [pc, #52]	; (800bd94 <prvCheckTasksWaitingTermination+0x54>)
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	3b01      	subs	r3, #1
 800bd64:	4a0b      	ldr	r2, [pc, #44]	; (800bd94 <prvCheckTasksWaitingTermination+0x54>)
 800bd66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bd68:	4b0b      	ldr	r3, [pc, #44]	; (800bd98 <prvCheckTasksWaitingTermination+0x58>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	3b01      	subs	r3, #1
 800bd6e:	4a0a      	ldr	r2, [pc, #40]	; (800bd98 <prvCheckTasksWaitingTermination+0x58>)
 800bd70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bd72:	f7fe f857 	bl	8009e24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bd76:	6878      	ldr	r0, [r7, #4]
 800bd78:	f000 f810 	bl	800bd9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bd7c:	4b06      	ldr	r3, [pc, #24]	; (800bd98 <prvCheckTasksWaitingTermination+0x58>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d1e1      	bne.n	800bd48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bd84:	bf00      	nop
 800bd86:	bf00      	nop
 800bd88:	3708      	adds	r7, #8
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bd80      	pop	{r7, pc}
 800bd8e:	bf00      	nop
 800bd90:	240121a4 	.word	0x240121a4
 800bd94:	240121d0 	.word	0x240121d0
 800bd98:	240121b8 	.word	0x240121b8

0800bd9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b084      	sub	sp, #16
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	3354      	adds	r3, #84	; 0x54
 800bda8:	4618      	mov	r0, r3
 800bdaa:	f00b f917 	bl	8016fdc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d108      	bne.n	800bdca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	f7fd fd03 	bl	80097c8 <vPortFree>
				vPortFree( pxTCB );
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f7fd fd00 	bl	80097c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bdc8:	e018      	b.n	800bdfc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bdd0:	2b01      	cmp	r3, #1
 800bdd2:	d103      	bne.n	800bddc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800bdd4:	6878      	ldr	r0, [r7, #4]
 800bdd6:	f7fd fcf7 	bl	80097c8 <vPortFree>
	}
 800bdda:	e00f      	b.n	800bdfc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bde2:	2b02      	cmp	r3, #2
 800bde4:	d00a      	beq.n	800bdfc <prvDeleteTCB+0x60>
	__asm volatile
 800bde6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdea:	f383 8811 	msr	BASEPRI, r3
 800bdee:	f3bf 8f6f 	isb	sy
 800bdf2:	f3bf 8f4f 	dsb	sy
 800bdf6:	60fb      	str	r3, [r7, #12]
}
 800bdf8:	bf00      	nop
 800bdfa:	e7fe      	b.n	800bdfa <prvDeleteTCB+0x5e>
	}
 800bdfc:	bf00      	nop
 800bdfe:	3710      	adds	r7, #16
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}

0800be04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800be04:	b480      	push	{r7}
 800be06:	b083      	sub	sp, #12
 800be08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be0a:	4b0c      	ldr	r3, [pc, #48]	; (800be3c <prvResetNextTaskUnblockTime+0x38>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d104      	bne.n	800be1e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800be14:	4b0a      	ldr	r3, [pc, #40]	; (800be40 <prvResetNextTaskUnblockTime+0x3c>)
 800be16:	f04f 32ff 	mov.w	r2, #4294967295
 800be1a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800be1c:	e008      	b.n	800be30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be1e:	4b07      	ldr	r3, [pc, #28]	; (800be3c <prvResetNextTaskUnblockTime+0x38>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	68db      	ldr	r3, [r3, #12]
 800be24:	68db      	ldr	r3, [r3, #12]
 800be26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	685b      	ldr	r3, [r3, #4]
 800be2c:	4a04      	ldr	r2, [pc, #16]	; (800be40 <prvResetNextTaskUnblockTime+0x3c>)
 800be2e:	6013      	str	r3, [r2, #0]
}
 800be30:	bf00      	nop
 800be32:	370c      	adds	r7, #12
 800be34:	46bd      	mov	sp, r7
 800be36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3a:	4770      	bx	lr
 800be3c:	24012188 	.word	0x24012188
 800be40:	240121f0 	.word	0x240121f0

0800be44 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800be44:	b480      	push	{r7}
 800be46:	b083      	sub	sp, #12
 800be48:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800be4a:	4b05      	ldr	r3, [pc, #20]	; (800be60 <xTaskGetCurrentTaskHandle+0x1c>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800be50:	687b      	ldr	r3, [r7, #4]
	}
 800be52:	4618      	mov	r0, r3
 800be54:	370c      	adds	r7, #12
 800be56:	46bd      	mov	sp, r7
 800be58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5c:	4770      	bx	lr
 800be5e:	bf00      	nop
 800be60:	24011cfc 	.word	0x24011cfc

0800be64 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800be64:	b480      	push	{r7}
 800be66:	b083      	sub	sp, #12
 800be68:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800be6a:	4b0b      	ldr	r3, [pc, #44]	; (800be98 <xTaskGetSchedulerState+0x34>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d102      	bne.n	800be78 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800be72:	2301      	movs	r3, #1
 800be74:	607b      	str	r3, [r7, #4]
 800be76:	e008      	b.n	800be8a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be78:	4b08      	ldr	r3, [pc, #32]	; (800be9c <xTaskGetSchedulerState+0x38>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d102      	bne.n	800be86 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800be80:	2302      	movs	r3, #2
 800be82:	607b      	str	r3, [r7, #4]
 800be84:	e001      	b.n	800be8a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800be86:	2300      	movs	r3, #0
 800be88:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800be8a:	687b      	ldr	r3, [r7, #4]
	}
 800be8c:	4618      	mov	r0, r3
 800be8e:	370c      	adds	r7, #12
 800be90:	46bd      	mov	sp, r7
 800be92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be96:	4770      	bx	lr
 800be98:	240121dc 	.word	0x240121dc
 800be9c:	240121f8 	.word	0x240121f8

0800bea0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b084      	sub	sp, #16
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800beac:	2300      	movs	r3, #0
 800beae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d051      	beq.n	800bf5a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800beba:	4b2a      	ldr	r3, [pc, #168]	; (800bf64 <xTaskPriorityInherit+0xc4>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bec0:	429a      	cmp	r2, r3
 800bec2:	d241      	bcs.n	800bf48 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	699b      	ldr	r3, [r3, #24]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	db06      	blt.n	800beda <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800becc:	4b25      	ldr	r3, [pc, #148]	; (800bf64 <xTaskPriorityInherit+0xc4>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bed2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	6959      	ldr	r1, [r3, #20]
 800bede:	68bb      	ldr	r3, [r7, #8]
 800bee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bee2:	4613      	mov	r3, r2
 800bee4:	009b      	lsls	r3, r3, #2
 800bee6:	4413      	add	r3, r2
 800bee8:	009b      	lsls	r3, r3, #2
 800beea:	4a1f      	ldr	r2, [pc, #124]	; (800bf68 <xTaskPriorityInherit+0xc8>)
 800beec:	4413      	add	r3, r2
 800beee:	4299      	cmp	r1, r3
 800bef0:	d122      	bne.n	800bf38 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	3304      	adds	r3, #4
 800bef6:	4618      	mov	r0, r3
 800bef8:	f7fd fe0e 	bl	8009b18 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800befc:	4b19      	ldr	r3, [pc, #100]	; (800bf64 <xTaskPriorityInherit+0xc4>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf0a:	4b18      	ldr	r3, [pc, #96]	; (800bf6c <xTaskPriorityInherit+0xcc>)
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	429a      	cmp	r2, r3
 800bf10:	d903      	bls.n	800bf1a <xTaskPriorityInherit+0x7a>
 800bf12:	68bb      	ldr	r3, [r7, #8]
 800bf14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf16:	4a15      	ldr	r2, [pc, #84]	; (800bf6c <xTaskPriorityInherit+0xcc>)
 800bf18:	6013      	str	r3, [r2, #0]
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf1e:	4613      	mov	r3, r2
 800bf20:	009b      	lsls	r3, r3, #2
 800bf22:	4413      	add	r3, r2
 800bf24:	009b      	lsls	r3, r3, #2
 800bf26:	4a10      	ldr	r2, [pc, #64]	; (800bf68 <xTaskPriorityInherit+0xc8>)
 800bf28:	441a      	add	r2, r3
 800bf2a:	68bb      	ldr	r3, [r7, #8]
 800bf2c:	3304      	adds	r3, #4
 800bf2e:	4619      	mov	r1, r3
 800bf30:	4610      	mov	r0, r2
 800bf32:	f7fd fd94 	bl	8009a5e <vListInsertEnd>
 800bf36:	e004      	b.n	800bf42 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bf38:	4b0a      	ldr	r3, [pc, #40]	; (800bf64 <xTaskPriorityInherit+0xc4>)
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bf42:	2301      	movs	r3, #1
 800bf44:	60fb      	str	r3, [r7, #12]
 800bf46:	e008      	b.n	800bf5a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bf4c:	4b05      	ldr	r3, [pc, #20]	; (800bf64 <xTaskPriorityInherit+0xc4>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf52:	429a      	cmp	r2, r3
 800bf54:	d201      	bcs.n	800bf5a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bf56:	2301      	movs	r3, #1
 800bf58:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bf5a:	68fb      	ldr	r3, [r7, #12]
	}
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	3710      	adds	r7, #16
 800bf60:	46bd      	mov	sp, r7
 800bf62:	bd80      	pop	{r7, pc}
 800bf64:	24011cfc 	.word	0x24011cfc
 800bf68:	24011d00 	.word	0x24011d00
 800bf6c:	240121d8 	.word	0x240121d8

0800bf70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b086      	sub	sp, #24
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d056      	beq.n	800c034 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bf86:	4b2e      	ldr	r3, [pc, #184]	; (800c040 <xTaskPriorityDisinherit+0xd0>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	693a      	ldr	r2, [r7, #16]
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	d00a      	beq.n	800bfa6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bf90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf94:	f383 8811 	msr	BASEPRI, r3
 800bf98:	f3bf 8f6f 	isb	sy
 800bf9c:	f3bf 8f4f 	dsb	sy
 800bfa0:	60fb      	str	r3, [r7, #12]
}
 800bfa2:	bf00      	nop
 800bfa4:	e7fe      	b.n	800bfa4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bfa6:	693b      	ldr	r3, [r7, #16]
 800bfa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d10a      	bne.n	800bfc4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bfae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb2:	f383 8811 	msr	BASEPRI, r3
 800bfb6:	f3bf 8f6f 	isb	sy
 800bfba:	f3bf 8f4f 	dsb	sy
 800bfbe:	60bb      	str	r3, [r7, #8]
}
 800bfc0:	bf00      	nop
 800bfc2:	e7fe      	b.n	800bfc2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bfc4:	693b      	ldr	r3, [r7, #16]
 800bfc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfc8:	1e5a      	subs	r2, r3, #1
 800bfca:	693b      	ldr	r3, [r7, #16]
 800bfcc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bfce:	693b      	ldr	r3, [r7, #16]
 800bfd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfd2:	693b      	ldr	r3, [r7, #16]
 800bfd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	d02c      	beq.n	800c034 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bfda:	693b      	ldr	r3, [r7, #16]
 800bfdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d128      	bne.n	800c034 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bfe2:	693b      	ldr	r3, [r7, #16]
 800bfe4:	3304      	adds	r3, #4
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f7fd fd96 	bl	8009b18 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bfec:	693b      	ldr	r3, [r7, #16]
 800bfee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bff0:	693b      	ldr	r3, [r7, #16]
 800bff2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bff4:	693b      	ldr	r3, [r7, #16]
 800bff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bff8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bffc:	693b      	ldr	r3, [r7, #16]
 800bffe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c000:	693b      	ldr	r3, [r7, #16]
 800c002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c004:	4b0f      	ldr	r3, [pc, #60]	; (800c044 <xTaskPriorityDisinherit+0xd4>)
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	429a      	cmp	r2, r3
 800c00a:	d903      	bls.n	800c014 <xTaskPriorityDisinherit+0xa4>
 800c00c:	693b      	ldr	r3, [r7, #16]
 800c00e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c010:	4a0c      	ldr	r2, [pc, #48]	; (800c044 <xTaskPriorityDisinherit+0xd4>)
 800c012:	6013      	str	r3, [r2, #0]
 800c014:	693b      	ldr	r3, [r7, #16]
 800c016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c018:	4613      	mov	r3, r2
 800c01a:	009b      	lsls	r3, r3, #2
 800c01c:	4413      	add	r3, r2
 800c01e:	009b      	lsls	r3, r3, #2
 800c020:	4a09      	ldr	r2, [pc, #36]	; (800c048 <xTaskPriorityDisinherit+0xd8>)
 800c022:	441a      	add	r2, r3
 800c024:	693b      	ldr	r3, [r7, #16]
 800c026:	3304      	adds	r3, #4
 800c028:	4619      	mov	r1, r3
 800c02a:	4610      	mov	r0, r2
 800c02c:	f7fd fd17 	bl	8009a5e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c030:	2301      	movs	r3, #1
 800c032:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c034:	697b      	ldr	r3, [r7, #20]
	}
 800c036:	4618      	mov	r0, r3
 800c038:	3718      	adds	r7, #24
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}
 800c03e:	bf00      	nop
 800c040:	24011cfc 	.word	0x24011cfc
 800c044:	240121d8 	.word	0x240121d8
 800c048:	24011d00 	.word	0x24011d00

0800c04c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b088      	sub	sp, #32
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
 800c054:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c05a:	2301      	movs	r3, #1
 800c05c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d06a      	beq.n	800c13a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c064:	69bb      	ldr	r3, [r7, #24]
 800c066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d10a      	bne.n	800c082 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c06c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c070:	f383 8811 	msr	BASEPRI, r3
 800c074:	f3bf 8f6f 	isb	sy
 800c078:	f3bf 8f4f 	dsb	sy
 800c07c:	60fb      	str	r3, [r7, #12]
}
 800c07e:	bf00      	nop
 800c080:	e7fe      	b.n	800c080 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c082:	69bb      	ldr	r3, [r7, #24]
 800c084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c086:	683a      	ldr	r2, [r7, #0]
 800c088:	429a      	cmp	r2, r3
 800c08a:	d902      	bls.n	800c092 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	61fb      	str	r3, [r7, #28]
 800c090:	e002      	b.n	800c098 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c092:	69bb      	ldr	r3, [r7, #24]
 800c094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c096:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c098:	69bb      	ldr	r3, [r7, #24]
 800c09a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c09c:	69fa      	ldr	r2, [r7, #28]
 800c09e:	429a      	cmp	r2, r3
 800c0a0:	d04b      	beq.n	800c13a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c0a2:	69bb      	ldr	r3, [r7, #24]
 800c0a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0a6:	697a      	ldr	r2, [r7, #20]
 800c0a8:	429a      	cmp	r2, r3
 800c0aa:	d146      	bne.n	800c13a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c0ac:	4b25      	ldr	r3, [pc, #148]	; (800c144 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	69ba      	ldr	r2, [r7, #24]
 800c0b2:	429a      	cmp	r2, r3
 800c0b4:	d10a      	bne.n	800c0cc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c0b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ba:	f383 8811 	msr	BASEPRI, r3
 800c0be:	f3bf 8f6f 	isb	sy
 800c0c2:	f3bf 8f4f 	dsb	sy
 800c0c6:	60bb      	str	r3, [r7, #8]
}
 800c0c8:	bf00      	nop
 800c0ca:	e7fe      	b.n	800c0ca <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c0cc:	69bb      	ldr	r3, [r7, #24]
 800c0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0d0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c0d2:	69bb      	ldr	r3, [r7, #24]
 800c0d4:	69fa      	ldr	r2, [r7, #28]
 800c0d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c0d8:	69bb      	ldr	r3, [r7, #24]
 800c0da:	699b      	ldr	r3, [r3, #24]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	db04      	blt.n	800c0ea <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c0e0:	69fb      	ldr	r3, [r7, #28]
 800c0e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c0e6:	69bb      	ldr	r3, [r7, #24]
 800c0e8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c0ea:	69bb      	ldr	r3, [r7, #24]
 800c0ec:	6959      	ldr	r1, [r3, #20]
 800c0ee:	693a      	ldr	r2, [r7, #16]
 800c0f0:	4613      	mov	r3, r2
 800c0f2:	009b      	lsls	r3, r3, #2
 800c0f4:	4413      	add	r3, r2
 800c0f6:	009b      	lsls	r3, r3, #2
 800c0f8:	4a13      	ldr	r2, [pc, #76]	; (800c148 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c0fa:	4413      	add	r3, r2
 800c0fc:	4299      	cmp	r1, r3
 800c0fe:	d11c      	bne.n	800c13a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c100:	69bb      	ldr	r3, [r7, #24]
 800c102:	3304      	adds	r3, #4
 800c104:	4618      	mov	r0, r3
 800c106:	f7fd fd07 	bl	8009b18 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c10a:	69bb      	ldr	r3, [r7, #24]
 800c10c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c10e:	4b0f      	ldr	r3, [pc, #60]	; (800c14c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	429a      	cmp	r2, r3
 800c114:	d903      	bls.n	800c11e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800c116:	69bb      	ldr	r3, [r7, #24]
 800c118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c11a:	4a0c      	ldr	r2, [pc, #48]	; (800c14c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c11c:	6013      	str	r3, [r2, #0]
 800c11e:	69bb      	ldr	r3, [r7, #24]
 800c120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c122:	4613      	mov	r3, r2
 800c124:	009b      	lsls	r3, r3, #2
 800c126:	4413      	add	r3, r2
 800c128:	009b      	lsls	r3, r3, #2
 800c12a:	4a07      	ldr	r2, [pc, #28]	; (800c148 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c12c:	441a      	add	r2, r3
 800c12e:	69bb      	ldr	r3, [r7, #24]
 800c130:	3304      	adds	r3, #4
 800c132:	4619      	mov	r1, r3
 800c134:	4610      	mov	r0, r2
 800c136:	f7fd fc92 	bl	8009a5e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c13a:	bf00      	nop
 800c13c:	3720      	adds	r7, #32
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}
 800c142:	bf00      	nop
 800c144:	24011cfc 	.word	0x24011cfc
 800c148:	24011d00 	.word	0x24011d00
 800c14c:	240121d8 	.word	0x240121d8

0800c150 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c150:	b480      	push	{r7}
 800c152:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c154:	4b07      	ldr	r3, [pc, #28]	; (800c174 <pvTaskIncrementMutexHeldCount+0x24>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d004      	beq.n	800c166 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c15c:	4b05      	ldr	r3, [pc, #20]	; (800c174 <pvTaskIncrementMutexHeldCount+0x24>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c162:	3201      	adds	r2, #1
 800c164:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800c166:	4b03      	ldr	r3, [pc, #12]	; (800c174 <pvTaskIncrementMutexHeldCount+0x24>)
 800c168:	681b      	ldr	r3, [r3, #0]
	}
 800c16a:	4618      	mov	r0, r3
 800c16c:	46bd      	mov	sp, r7
 800c16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c172:	4770      	bx	lr
 800c174:	24011cfc 	.word	0x24011cfc

0800c178 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b084      	sub	sp, #16
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
 800c180:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c182:	4b21      	ldr	r3, [pc, #132]	; (800c208 <prvAddCurrentTaskToDelayedList+0x90>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c188:	4b20      	ldr	r3, [pc, #128]	; (800c20c <prvAddCurrentTaskToDelayedList+0x94>)
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	3304      	adds	r3, #4
 800c18e:	4618      	mov	r0, r3
 800c190:	f7fd fcc2 	bl	8009b18 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c19a:	d10a      	bne.n	800c1b2 <prvAddCurrentTaskToDelayedList+0x3a>
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d007      	beq.n	800c1b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c1a2:	4b1a      	ldr	r3, [pc, #104]	; (800c20c <prvAddCurrentTaskToDelayedList+0x94>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	3304      	adds	r3, #4
 800c1a8:	4619      	mov	r1, r3
 800c1aa:	4819      	ldr	r0, [pc, #100]	; (800c210 <prvAddCurrentTaskToDelayedList+0x98>)
 800c1ac:	f7fd fc57 	bl	8009a5e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c1b0:	e026      	b.n	800c200 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c1b2:	68fa      	ldr	r2, [r7, #12]
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	4413      	add	r3, r2
 800c1b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c1ba:	4b14      	ldr	r3, [pc, #80]	; (800c20c <prvAddCurrentTaskToDelayedList+0x94>)
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	68ba      	ldr	r2, [r7, #8]
 800c1c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c1c2:	68ba      	ldr	r2, [r7, #8]
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	429a      	cmp	r2, r3
 800c1c8:	d209      	bcs.n	800c1de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c1ca:	4b12      	ldr	r3, [pc, #72]	; (800c214 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c1cc:	681a      	ldr	r2, [r3, #0]
 800c1ce:	4b0f      	ldr	r3, [pc, #60]	; (800c20c <prvAddCurrentTaskToDelayedList+0x94>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	3304      	adds	r3, #4
 800c1d4:	4619      	mov	r1, r3
 800c1d6:	4610      	mov	r0, r2
 800c1d8:	f7fd fc65 	bl	8009aa6 <vListInsert>
}
 800c1dc:	e010      	b.n	800c200 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c1de:	4b0e      	ldr	r3, [pc, #56]	; (800c218 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c1e0:	681a      	ldr	r2, [r3, #0]
 800c1e2:	4b0a      	ldr	r3, [pc, #40]	; (800c20c <prvAddCurrentTaskToDelayedList+0x94>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	3304      	adds	r3, #4
 800c1e8:	4619      	mov	r1, r3
 800c1ea:	4610      	mov	r0, r2
 800c1ec:	f7fd fc5b 	bl	8009aa6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c1f0:	4b0a      	ldr	r3, [pc, #40]	; (800c21c <prvAddCurrentTaskToDelayedList+0xa4>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	68ba      	ldr	r2, [r7, #8]
 800c1f6:	429a      	cmp	r2, r3
 800c1f8:	d202      	bcs.n	800c200 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c1fa:	4a08      	ldr	r2, [pc, #32]	; (800c21c <prvAddCurrentTaskToDelayedList+0xa4>)
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	6013      	str	r3, [r2, #0]
}
 800c200:	bf00      	nop
 800c202:	3710      	adds	r7, #16
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}
 800c208:	240121d4 	.word	0x240121d4
 800c20c:	24011cfc 	.word	0x24011cfc
 800c210:	240121bc 	.word	0x240121bc
 800c214:	2401218c 	.word	0x2401218c
 800c218:	24012188 	.word	0x24012188
 800c21c:	240121f0 	.word	0x240121f0

0800c220 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b08a      	sub	sp, #40	; 0x28
 800c224:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c226:	2300      	movs	r3, #0
 800c228:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c22a:	f000 fb07 	bl	800c83c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c22e:	4b1c      	ldr	r3, [pc, #112]	; (800c2a0 <xTimerCreateTimerTask+0x80>)
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d021      	beq.n	800c27a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c236:	2300      	movs	r3, #0
 800c238:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c23a:	2300      	movs	r3, #0
 800c23c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c23e:	1d3a      	adds	r2, r7, #4
 800c240:	f107 0108 	add.w	r1, r7, #8
 800c244:	f107 030c 	add.w	r3, r7, #12
 800c248:	4618      	mov	r0, r3
 800c24a:	f7fd f9d7 	bl	80095fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c24e:	6879      	ldr	r1, [r7, #4]
 800c250:	68bb      	ldr	r3, [r7, #8]
 800c252:	68fa      	ldr	r2, [r7, #12]
 800c254:	9202      	str	r2, [sp, #8]
 800c256:	9301      	str	r3, [sp, #4]
 800c258:	2302      	movs	r3, #2
 800c25a:	9300      	str	r3, [sp, #0]
 800c25c:	2300      	movs	r3, #0
 800c25e:	460a      	mov	r2, r1
 800c260:	4910      	ldr	r1, [pc, #64]	; (800c2a4 <xTimerCreateTimerTask+0x84>)
 800c262:	4811      	ldr	r0, [pc, #68]	; (800c2a8 <xTimerCreateTimerTask+0x88>)
 800c264:	f7fe ff94 	bl	800b190 <xTaskCreateStatic>
 800c268:	4603      	mov	r3, r0
 800c26a:	4a10      	ldr	r2, [pc, #64]	; (800c2ac <xTimerCreateTimerTask+0x8c>)
 800c26c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c26e:	4b0f      	ldr	r3, [pc, #60]	; (800c2ac <xTimerCreateTimerTask+0x8c>)
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d001      	beq.n	800c27a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c276:	2301      	movs	r3, #1
 800c278:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c27a:	697b      	ldr	r3, [r7, #20]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d10a      	bne.n	800c296 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c284:	f383 8811 	msr	BASEPRI, r3
 800c288:	f3bf 8f6f 	isb	sy
 800c28c:	f3bf 8f4f 	dsb	sy
 800c290:	613b      	str	r3, [r7, #16]
}
 800c292:	bf00      	nop
 800c294:	e7fe      	b.n	800c294 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c296:	697b      	ldr	r3, [r7, #20]
}
 800c298:	4618      	mov	r0, r3
 800c29a:	3718      	adds	r7, #24
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}
 800c2a0:	2401222c 	.word	0x2401222c
 800c2a4:	08017dfc 	.word	0x08017dfc
 800c2a8:	0800c3e5 	.word	0x0800c3e5
 800c2ac:	24012230 	.word	0x24012230

0800c2b0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b08a      	sub	sp, #40	; 0x28
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	60f8      	str	r0, [r7, #12]
 800c2b8:	60b9      	str	r1, [r7, #8]
 800c2ba:	607a      	str	r2, [r7, #4]
 800c2bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d10a      	bne.n	800c2de <xTimerGenericCommand+0x2e>
	__asm volatile
 800c2c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2cc:	f383 8811 	msr	BASEPRI, r3
 800c2d0:	f3bf 8f6f 	isb	sy
 800c2d4:	f3bf 8f4f 	dsb	sy
 800c2d8:	623b      	str	r3, [r7, #32]
}
 800c2da:	bf00      	nop
 800c2dc:	e7fe      	b.n	800c2dc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c2de:	4b1a      	ldr	r3, [pc, #104]	; (800c348 <xTimerGenericCommand+0x98>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d02a      	beq.n	800c33c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c2f2:	68bb      	ldr	r3, [r7, #8]
 800c2f4:	2b05      	cmp	r3, #5
 800c2f6:	dc18      	bgt.n	800c32a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c2f8:	f7ff fdb4 	bl	800be64 <xTaskGetSchedulerState>
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	2b02      	cmp	r3, #2
 800c300:	d109      	bne.n	800c316 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c302:	4b11      	ldr	r3, [pc, #68]	; (800c348 <xTimerGenericCommand+0x98>)
 800c304:	6818      	ldr	r0, [r3, #0]
 800c306:	f107 0110 	add.w	r1, r7, #16
 800c30a:	2300      	movs	r3, #0
 800c30c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c30e:	f7fe f8d9 	bl	800a4c4 <xQueueGenericSend>
 800c312:	6278      	str	r0, [r7, #36]	; 0x24
 800c314:	e012      	b.n	800c33c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c316:	4b0c      	ldr	r3, [pc, #48]	; (800c348 <xTimerGenericCommand+0x98>)
 800c318:	6818      	ldr	r0, [r3, #0]
 800c31a:	f107 0110 	add.w	r1, r7, #16
 800c31e:	2300      	movs	r3, #0
 800c320:	2200      	movs	r2, #0
 800c322:	f7fe f8cf 	bl	800a4c4 <xQueueGenericSend>
 800c326:	6278      	str	r0, [r7, #36]	; 0x24
 800c328:	e008      	b.n	800c33c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c32a:	4b07      	ldr	r3, [pc, #28]	; (800c348 <xTimerGenericCommand+0x98>)
 800c32c:	6818      	ldr	r0, [r3, #0]
 800c32e:	f107 0110 	add.w	r1, r7, #16
 800c332:	2300      	movs	r3, #0
 800c334:	683a      	ldr	r2, [r7, #0]
 800c336:	f7fe f9c3 	bl	800a6c0 <xQueueGenericSendFromISR>
 800c33a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c33e:	4618      	mov	r0, r3
 800c340:	3728      	adds	r7, #40	; 0x28
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}
 800c346:	bf00      	nop
 800c348:	2401222c 	.word	0x2401222c

0800c34c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b088      	sub	sp, #32
 800c350:	af02      	add	r7, sp, #8
 800c352:	6078      	str	r0, [r7, #4]
 800c354:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c356:	4b22      	ldr	r3, [pc, #136]	; (800c3e0 <prvProcessExpiredTimer+0x94>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	68db      	ldr	r3, [r3, #12]
 800c35c:	68db      	ldr	r3, [r3, #12]
 800c35e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c360:	697b      	ldr	r3, [r7, #20]
 800c362:	3304      	adds	r3, #4
 800c364:	4618      	mov	r0, r3
 800c366:	f7fd fbd7 	bl	8009b18 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c36a:	697b      	ldr	r3, [r7, #20]
 800c36c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c370:	f003 0304 	and.w	r3, r3, #4
 800c374:	2b00      	cmp	r3, #0
 800c376:	d022      	beq.n	800c3be <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c378:	697b      	ldr	r3, [r7, #20]
 800c37a:	699a      	ldr	r2, [r3, #24]
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	18d1      	adds	r1, r2, r3
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	683a      	ldr	r2, [r7, #0]
 800c384:	6978      	ldr	r0, [r7, #20]
 800c386:	f000 f8d1 	bl	800c52c <prvInsertTimerInActiveList>
 800c38a:	4603      	mov	r3, r0
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d01f      	beq.n	800c3d0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c390:	2300      	movs	r3, #0
 800c392:	9300      	str	r3, [sp, #0]
 800c394:	2300      	movs	r3, #0
 800c396:	687a      	ldr	r2, [r7, #4]
 800c398:	2100      	movs	r1, #0
 800c39a:	6978      	ldr	r0, [r7, #20]
 800c39c:	f7ff ff88 	bl	800c2b0 <xTimerGenericCommand>
 800c3a0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c3a2:	693b      	ldr	r3, [r7, #16]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d113      	bne.n	800c3d0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c3a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ac:	f383 8811 	msr	BASEPRI, r3
 800c3b0:	f3bf 8f6f 	isb	sy
 800c3b4:	f3bf 8f4f 	dsb	sy
 800c3b8:	60fb      	str	r3, [r7, #12]
}
 800c3ba:	bf00      	nop
 800c3bc:	e7fe      	b.n	800c3bc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c3be:	697b      	ldr	r3, [r7, #20]
 800c3c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3c4:	f023 0301 	bic.w	r3, r3, #1
 800c3c8:	b2da      	uxtb	r2, r3
 800c3ca:	697b      	ldr	r3, [r7, #20]
 800c3cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c3d0:	697b      	ldr	r3, [r7, #20]
 800c3d2:	6a1b      	ldr	r3, [r3, #32]
 800c3d4:	6978      	ldr	r0, [r7, #20]
 800c3d6:	4798      	blx	r3
}
 800c3d8:	bf00      	nop
 800c3da:	3718      	adds	r7, #24
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}
 800c3e0:	24012224 	.word	0x24012224

0800c3e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b084      	sub	sp, #16
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c3ec:	f107 0308 	add.w	r3, r7, #8
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f000 f857 	bl	800c4a4 <prvGetNextExpireTime>
 800c3f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	4619      	mov	r1, r3
 800c3fc:	68f8      	ldr	r0, [r7, #12]
 800c3fe:	f000 f803 	bl	800c408 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c402:	f000 f8d5 	bl	800c5b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c406:	e7f1      	b.n	800c3ec <prvTimerTask+0x8>

0800c408 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b084      	sub	sp, #16
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
 800c410:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c412:	f7ff f919 	bl	800b648 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c416:	f107 0308 	add.w	r3, r7, #8
 800c41a:	4618      	mov	r0, r3
 800c41c:	f000 f866 	bl	800c4ec <prvSampleTimeNow>
 800c420:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c422:	68bb      	ldr	r3, [r7, #8]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d130      	bne.n	800c48a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d10a      	bne.n	800c444 <prvProcessTimerOrBlockTask+0x3c>
 800c42e:	687a      	ldr	r2, [r7, #4]
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	429a      	cmp	r2, r3
 800c434:	d806      	bhi.n	800c444 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c436:	f7ff f915 	bl	800b664 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c43a:	68f9      	ldr	r1, [r7, #12]
 800c43c:	6878      	ldr	r0, [r7, #4]
 800c43e:	f7ff ff85 	bl	800c34c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c442:	e024      	b.n	800c48e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c444:	683b      	ldr	r3, [r7, #0]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d008      	beq.n	800c45c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c44a:	4b13      	ldr	r3, [pc, #76]	; (800c498 <prvProcessTimerOrBlockTask+0x90>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d101      	bne.n	800c458 <prvProcessTimerOrBlockTask+0x50>
 800c454:	2301      	movs	r3, #1
 800c456:	e000      	b.n	800c45a <prvProcessTimerOrBlockTask+0x52>
 800c458:	2300      	movs	r3, #0
 800c45a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c45c:	4b0f      	ldr	r3, [pc, #60]	; (800c49c <prvProcessTimerOrBlockTask+0x94>)
 800c45e:	6818      	ldr	r0, [r3, #0]
 800c460:	687a      	ldr	r2, [r7, #4]
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	1ad3      	subs	r3, r2, r3
 800c466:	683a      	ldr	r2, [r7, #0]
 800c468:	4619      	mov	r1, r3
 800c46a:	f7fe fe5d 	bl	800b128 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c46e:	f7ff f8f9 	bl	800b664 <xTaskResumeAll>
 800c472:	4603      	mov	r3, r0
 800c474:	2b00      	cmp	r3, #0
 800c476:	d10a      	bne.n	800c48e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c478:	4b09      	ldr	r3, [pc, #36]	; (800c4a0 <prvProcessTimerOrBlockTask+0x98>)
 800c47a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c47e:	601a      	str	r2, [r3, #0]
 800c480:	f3bf 8f4f 	dsb	sy
 800c484:	f3bf 8f6f 	isb	sy
}
 800c488:	e001      	b.n	800c48e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c48a:	f7ff f8eb 	bl	800b664 <xTaskResumeAll>
}
 800c48e:	bf00      	nop
 800c490:	3710      	adds	r7, #16
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}
 800c496:	bf00      	nop
 800c498:	24012228 	.word	0x24012228
 800c49c:	2401222c 	.word	0x2401222c
 800c4a0:	e000ed04 	.word	0xe000ed04

0800c4a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c4a4:	b480      	push	{r7}
 800c4a6:	b085      	sub	sp, #20
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c4ac:	4b0e      	ldr	r3, [pc, #56]	; (800c4e8 <prvGetNextExpireTime+0x44>)
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d101      	bne.n	800c4ba <prvGetNextExpireTime+0x16>
 800c4b6:	2201      	movs	r2, #1
 800c4b8:	e000      	b.n	800c4bc <prvGetNextExpireTime+0x18>
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d105      	bne.n	800c4d4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c4c8:	4b07      	ldr	r3, [pc, #28]	; (800c4e8 <prvGetNextExpireTime+0x44>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	68db      	ldr	r3, [r3, #12]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	60fb      	str	r3, [r7, #12]
 800c4d2:	e001      	b.n	800c4d8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3714      	adds	r7, #20
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e4:	4770      	bx	lr
 800c4e6:	bf00      	nop
 800c4e8:	24012224 	.word	0x24012224

0800c4ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b084      	sub	sp, #16
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c4f4:	f7ff f954 	bl	800b7a0 <xTaskGetTickCount>
 800c4f8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c4fa:	4b0b      	ldr	r3, [pc, #44]	; (800c528 <prvSampleTimeNow+0x3c>)
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	68fa      	ldr	r2, [r7, #12]
 800c500:	429a      	cmp	r2, r3
 800c502:	d205      	bcs.n	800c510 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c504:	f000 f936 	bl	800c774 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2201      	movs	r2, #1
 800c50c:	601a      	str	r2, [r3, #0]
 800c50e:	e002      	b.n	800c516 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2200      	movs	r2, #0
 800c514:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c516:	4a04      	ldr	r2, [pc, #16]	; (800c528 <prvSampleTimeNow+0x3c>)
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c51c:	68fb      	ldr	r3, [r7, #12]
}
 800c51e:	4618      	mov	r0, r3
 800c520:	3710      	adds	r7, #16
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}
 800c526:	bf00      	nop
 800c528:	24012234 	.word	0x24012234

0800c52c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b086      	sub	sp, #24
 800c530:	af00      	add	r7, sp, #0
 800c532:	60f8      	str	r0, [r7, #12]
 800c534:	60b9      	str	r1, [r7, #8]
 800c536:	607a      	str	r2, [r7, #4]
 800c538:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c53a:	2300      	movs	r3, #0
 800c53c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	68ba      	ldr	r2, [r7, #8]
 800c542:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	68fa      	ldr	r2, [r7, #12]
 800c548:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c54a:	68ba      	ldr	r2, [r7, #8]
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	429a      	cmp	r2, r3
 800c550:	d812      	bhi.n	800c578 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c552:	687a      	ldr	r2, [r7, #4]
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	1ad2      	subs	r2, r2, r3
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	699b      	ldr	r3, [r3, #24]
 800c55c:	429a      	cmp	r2, r3
 800c55e:	d302      	bcc.n	800c566 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c560:	2301      	movs	r3, #1
 800c562:	617b      	str	r3, [r7, #20]
 800c564:	e01b      	b.n	800c59e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c566:	4b10      	ldr	r3, [pc, #64]	; (800c5a8 <prvInsertTimerInActiveList+0x7c>)
 800c568:	681a      	ldr	r2, [r3, #0]
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	3304      	adds	r3, #4
 800c56e:	4619      	mov	r1, r3
 800c570:	4610      	mov	r0, r2
 800c572:	f7fd fa98 	bl	8009aa6 <vListInsert>
 800c576:	e012      	b.n	800c59e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c578:	687a      	ldr	r2, [r7, #4]
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	429a      	cmp	r2, r3
 800c57e:	d206      	bcs.n	800c58e <prvInsertTimerInActiveList+0x62>
 800c580:	68ba      	ldr	r2, [r7, #8]
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	429a      	cmp	r2, r3
 800c586:	d302      	bcc.n	800c58e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c588:	2301      	movs	r3, #1
 800c58a:	617b      	str	r3, [r7, #20]
 800c58c:	e007      	b.n	800c59e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c58e:	4b07      	ldr	r3, [pc, #28]	; (800c5ac <prvInsertTimerInActiveList+0x80>)
 800c590:	681a      	ldr	r2, [r3, #0]
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	3304      	adds	r3, #4
 800c596:	4619      	mov	r1, r3
 800c598:	4610      	mov	r0, r2
 800c59a:	f7fd fa84 	bl	8009aa6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c59e:	697b      	ldr	r3, [r7, #20]
}
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	3718      	adds	r7, #24
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	bd80      	pop	{r7, pc}
 800c5a8:	24012228 	.word	0x24012228
 800c5ac:	24012224 	.word	0x24012224

0800c5b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b08e      	sub	sp, #56	; 0x38
 800c5b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c5b6:	e0ca      	b.n	800c74e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	da18      	bge.n	800c5f0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c5be:	1d3b      	adds	r3, r7, #4
 800c5c0:	3304      	adds	r3, #4
 800c5c2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d10a      	bne.n	800c5e0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ce:	f383 8811 	msr	BASEPRI, r3
 800c5d2:	f3bf 8f6f 	isb	sy
 800c5d6:	f3bf 8f4f 	dsb	sy
 800c5da:	61fb      	str	r3, [r7, #28]
}
 800c5dc:	bf00      	nop
 800c5de:	e7fe      	b.n	800c5de <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c5e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c5e6:	6850      	ldr	r0, [r2, #4]
 800c5e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c5ea:	6892      	ldr	r2, [r2, #8]
 800c5ec:	4611      	mov	r1, r2
 800c5ee:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	f2c0 80aa 	blt.w	800c74c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c5fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5fe:	695b      	ldr	r3, [r3, #20]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d004      	beq.n	800c60e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c606:	3304      	adds	r3, #4
 800c608:	4618      	mov	r0, r3
 800c60a:	f7fd fa85 	bl	8009b18 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c60e:	463b      	mov	r3, r7
 800c610:	4618      	mov	r0, r3
 800c612:	f7ff ff6b 	bl	800c4ec <prvSampleTimeNow>
 800c616:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2b09      	cmp	r3, #9
 800c61c:	f200 8097 	bhi.w	800c74e <prvProcessReceivedCommands+0x19e>
 800c620:	a201      	add	r2, pc, #4	; (adr r2, 800c628 <prvProcessReceivedCommands+0x78>)
 800c622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c626:	bf00      	nop
 800c628:	0800c651 	.word	0x0800c651
 800c62c:	0800c651 	.word	0x0800c651
 800c630:	0800c651 	.word	0x0800c651
 800c634:	0800c6c5 	.word	0x0800c6c5
 800c638:	0800c6d9 	.word	0x0800c6d9
 800c63c:	0800c723 	.word	0x0800c723
 800c640:	0800c651 	.word	0x0800c651
 800c644:	0800c651 	.word	0x0800c651
 800c648:	0800c6c5 	.word	0x0800c6c5
 800c64c:	0800c6d9 	.word	0x0800c6d9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c652:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c656:	f043 0301 	orr.w	r3, r3, #1
 800c65a:	b2da      	uxtb	r2, r3
 800c65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c65e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c662:	68ba      	ldr	r2, [r7, #8]
 800c664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c666:	699b      	ldr	r3, [r3, #24]
 800c668:	18d1      	adds	r1, r2, r3
 800c66a:	68bb      	ldr	r3, [r7, #8]
 800c66c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c66e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c670:	f7ff ff5c 	bl	800c52c <prvInsertTimerInActiveList>
 800c674:	4603      	mov	r3, r0
 800c676:	2b00      	cmp	r3, #0
 800c678:	d069      	beq.n	800c74e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c67c:	6a1b      	ldr	r3, [r3, #32]
 800c67e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c680:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c684:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c688:	f003 0304 	and.w	r3, r3, #4
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d05e      	beq.n	800c74e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c690:	68ba      	ldr	r2, [r7, #8]
 800c692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c694:	699b      	ldr	r3, [r3, #24]
 800c696:	441a      	add	r2, r3
 800c698:	2300      	movs	r3, #0
 800c69a:	9300      	str	r3, [sp, #0]
 800c69c:	2300      	movs	r3, #0
 800c69e:	2100      	movs	r1, #0
 800c6a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6a2:	f7ff fe05 	bl	800c2b0 <xTimerGenericCommand>
 800c6a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c6a8:	6a3b      	ldr	r3, [r7, #32]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d14f      	bne.n	800c74e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6b2:	f383 8811 	msr	BASEPRI, r3
 800c6b6:	f3bf 8f6f 	isb	sy
 800c6ba:	f3bf 8f4f 	dsb	sy
 800c6be:	61bb      	str	r3, [r7, #24]
}
 800c6c0:	bf00      	nop
 800c6c2:	e7fe      	b.n	800c6c2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c6ca:	f023 0301 	bic.w	r3, r3, #1
 800c6ce:	b2da      	uxtb	r2, r3
 800c6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c6d6:	e03a      	b.n	800c74e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c6de:	f043 0301 	orr.w	r3, r3, #1
 800c6e2:	b2da      	uxtb	r2, r3
 800c6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c6ea:	68ba      	ldr	r2, [r7, #8]
 800c6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ee:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f2:	699b      	ldr	r3, [r3, #24]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d10a      	bne.n	800c70e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c6f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6fc:	f383 8811 	msr	BASEPRI, r3
 800c700:	f3bf 8f6f 	isb	sy
 800c704:	f3bf 8f4f 	dsb	sy
 800c708:	617b      	str	r3, [r7, #20]
}
 800c70a:	bf00      	nop
 800c70c:	e7fe      	b.n	800c70c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c710:	699a      	ldr	r2, [r3, #24]
 800c712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c714:	18d1      	adds	r1, r2, r3
 800c716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c71a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c71c:	f7ff ff06 	bl	800c52c <prvInsertTimerInActiveList>
					break;
 800c720:	e015      	b.n	800c74e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c724:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c728:	f003 0302 	and.w	r3, r3, #2
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d103      	bne.n	800c738 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c730:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c732:	f7fd f849 	bl	80097c8 <vPortFree>
 800c736:	e00a      	b.n	800c74e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c73a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c73e:	f023 0301 	bic.w	r3, r3, #1
 800c742:	b2da      	uxtb	r2, r3
 800c744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c746:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c74a:	e000      	b.n	800c74e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c74c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c74e:	4b08      	ldr	r3, [pc, #32]	; (800c770 <prvProcessReceivedCommands+0x1c0>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	1d39      	adds	r1, r7, #4
 800c754:	2200      	movs	r2, #0
 800c756:	4618      	mov	r0, r3
 800c758:	f7fe f8da 	bl	800a910 <xQueueReceive>
 800c75c:	4603      	mov	r3, r0
 800c75e:	2b00      	cmp	r3, #0
 800c760:	f47f af2a 	bne.w	800c5b8 <prvProcessReceivedCommands+0x8>
	}
}
 800c764:	bf00      	nop
 800c766:	bf00      	nop
 800c768:	3730      	adds	r7, #48	; 0x30
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bd80      	pop	{r7, pc}
 800c76e:	bf00      	nop
 800c770:	2401222c 	.word	0x2401222c

0800c774 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b088      	sub	sp, #32
 800c778:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c77a:	e048      	b.n	800c80e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c77c:	4b2d      	ldr	r3, [pc, #180]	; (800c834 <prvSwitchTimerLists+0xc0>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	68db      	ldr	r3, [r3, #12]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c786:	4b2b      	ldr	r3, [pc, #172]	; (800c834 <prvSwitchTimerLists+0xc0>)
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	68db      	ldr	r3, [r3, #12]
 800c78c:	68db      	ldr	r3, [r3, #12]
 800c78e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	3304      	adds	r3, #4
 800c794:	4618      	mov	r0, r3
 800c796:	f7fd f9bf 	bl	8009b18 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	6a1b      	ldr	r3, [r3, #32]
 800c79e:	68f8      	ldr	r0, [r7, #12]
 800c7a0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7a8:	f003 0304 	and.w	r3, r3, #4
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d02e      	beq.n	800c80e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	699b      	ldr	r3, [r3, #24]
 800c7b4:	693a      	ldr	r2, [r7, #16]
 800c7b6:	4413      	add	r3, r2
 800c7b8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c7ba:	68ba      	ldr	r2, [r7, #8]
 800c7bc:	693b      	ldr	r3, [r7, #16]
 800c7be:	429a      	cmp	r2, r3
 800c7c0:	d90e      	bls.n	800c7e0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	68ba      	ldr	r2, [r7, #8]
 800c7c6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	68fa      	ldr	r2, [r7, #12]
 800c7cc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c7ce:	4b19      	ldr	r3, [pc, #100]	; (800c834 <prvSwitchTimerLists+0xc0>)
 800c7d0:	681a      	ldr	r2, [r3, #0]
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	3304      	adds	r3, #4
 800c7d6:	4619      	mov	r1, r3
 800c7d8:	4610      	mov	r0, r2
 800c7da:	f7fd f964 	bl	8009aa6 <vListInsert>
 800c7de:	e016      	b.n	800c80e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	9300      	str	r3, [sp, #0]
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	693a      	ldr	r2, [r7, #16]
 800c7e8:	2100      	movs	r1, #0
 800c7ea:	68f8      	ldr	r0, [r7, #12]
 800c7ec:	f7ff fd60 	bl	800c2b0 <xTimerGenericCommand>
 800c7f0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d10a      	bne.n	800c80e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c7f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7fc:	f383 8811 	msr	BASEPRI, r3
 800c800:	f3bf 8f6f 	isb	sy
 800c804:	f3bf 8f4f 	dsb	sy
 800c808:	603b      	str	r3, [r7, #0]
}
 800c80a:	bf00      	nop
 800c80c:	e7fe      	b.n	800c80c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c80e:	4b09      	ldr	r3, [pc, #36]	; (800c834 <prvSwitchTimerLists+0xc0>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d1b1      	bne.n	800c77c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c818:	4b06      	ldr	r3, [pc, #24]	; (800c834 <prvSwitchTimerLists+0xc0>)
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c81e:	4b06      	ldr	r3, [pc, #24]	; (800c838 <prvSwitchTimerLists+0xc4>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	4a04      	ldr	r2, [pc, #16]	; (800c834 <prvSwitchTimerLists+0xc0>)
 800c824:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c826:	4a04      	ldr	r2, [pc, #16]	; (800c838 <prvSwitchTimerLists+0xc4>)
 800c828:	697b      	ldr	r3, [r7, #20]
 800c82a:	6013      	str	r3, [r2, #0]
}
 800c82c:	bf00      	nop
 800c82e:	3718      	adds	r7, #24
 800c830:	46bd      	mov	sp, r7
 800c832:	bd80      	pop	{r7, pc}
 800c834:	24012224 	.word	0x24012224
 800c838:	24012228 	.word	0x24012228

0800c83c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b082      	sub	sp, #8
 800c840:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c842:	f7fd fabf 	bl	8009dc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c846:	4b15      	ldr	r3, [pc, #84]	; (800c89c <prvCheckForValidListAndQueue+0x60>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d120      	bne.n	800c890 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c84e:	4814      	ldr	r0, [pc, #80]	; (800c8a0 <prvCheckForValidListAndQueue+0x64>)
 800c850:	f7fd f8d8 	bl	8009a04 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c854:	4813      	ldr	r0, [pc, #76]	; (800c8a4 <prvCheckForValidListAndQueue+0x68>)
 800c856:	f7fd f8d5 	bl	8009a04 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c85a:	4b13      	ldr	r3, [pc, #76]	; (800c8a8 <prvCheckForValidListAndQueue+0x6c>)
 800c85c:	4a10      	ldr	r2, [pc, #64]	; (800c8a0 <prvCheckForValidListAndQueue+0x64>)
 800c85e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c860:	4b12      	ldr	r3, [pc, #72]	; (800c8ac <prvCheckForValidListAndQueue+0x70>)
 800c862:	4a10      	ldr	r2, [pc, #64]	; (800c8a4 <prvCheckForValidListAndQueue+0x68>)
 800c864:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c866:	2300      	movs	r3, #0
 800c868:	9300      	str	r3, [sp, #0]
 800c86a:	4b11      	ldr	r3, [pc, #68]	; (800c8b0 <prvCheckForValidListAndQueue+0x74>)
 800c86c:	4a11      	ldr	r2, [pc, #68]	; (800c8b4 <prvCheckForValidListAndQueue+0x78>)
 800c86e:	2110      	movs	r1, #16
 800c870:	200a      	movs	r0, #10
 800c872:	f7fd fc31 	bl	800a0d8 <xQueueGenericCreateStatic>
 800c876:	4603      	mov	r3, r0
 800c878:	4a08      	ldr	r2, [pc, #32]	; (800c89c <prvCheckForValidListAndQueue+0x60>)
 800c87a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c87c:	4b07      	ldr	r3, [pc, #28]	; (800c89c <prvCheckForValidListAndQueue+0x60>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d005      	beq.n	800c890 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c884:	4b05      	ldr	r3, [pc, #20]	; (800c89c <prvCheckForValidListAndQueue+0x60>)
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	490b      	ldr	r1, [pc, #44]	; (800c8b8 <prvCheckForValidListAndQueue+0x7c>)
 800c88a:	4618      	mov	r0, r3
 800c88c:	f7fe fbf8 	bl	800b080 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c890:	f7fd fac8 	bl	8009e24 <vPortExitCritical>
}
 800c894:	bf00      	nop
 800c896:	46bd      	mov	sp, r7
 800c898:	bd80      	pop	{r7, pc}
 800c89a:	bf00      	nop
 800c89c:	2401222c 	.word	0x2401222c
 800c8a0:	240121fc 	.word	0x240121fc
 800c8a4:	24012210 	.word	0x24012210
 800c8a8:	24012224 	.word	0x24012224
 800c8ac:	24012228 	.word	0x24012228
 800c8b0:	240122d8 	.word	0x240122d8
 800c8b4:	24012238 	.word	0x24012238
 800c8b8:	08017e04 	.word	0x08017e04

0800c8bc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c8bc:	b480      	push	{r7}
 800c8be:	b083      	sub	sp, #12
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800c8c6:	88fb      	ldrh	r3, [r7, #6]
 800c8c8:	021b      	lsls	r3, r3, #8
 800c8ca:	b21a      	sxth	r2, r3
 800c8cc:	88fb      	ldrh	r3, [r7, #6]
 800c8ce:	0a1b      	lsrs	r3, r3, #8
 800c8d0:	b29b      	uxth	r3, r3
 800c8d2:	b21b      	sxth	r3, r3
 800c8d4:	4313      	orrs	r3, r2
 800c8d6:	b21b      	sxth	r3, r3
 800c8d8:	b29b      	uxth	r3, r3
}
 800c8da:	4618      	mov	r0, r3
 800c8dc:	370c      	adds	r7, #12
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e4:	4770      	bx	lr

0800c8e6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c8e6:	b480      	push	{r7}
 800c8e8:	b083      	sub	sp, #12
 800c8ea:	af00      	add	r7, sp, #0
 800c8ec:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	061a      	lsls	r2, r3, #24
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	021b      	lsls	r3, r3, #8
 800c8f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c8fa:	431a      	orrs	r2, r3
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	0a1b      	lsrs	r3, r3, #8
 800c900:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c904:	431a      	orrs	r2, r3
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	0e1b      	lsrs	r3, r3, #24
 800c90a:	4313      	orrs	r3, r2
}
 800c90c:	4618      	mov	r0, r3
 800c90e:	370c      	adds	r7, #12
 800c910:	46bd      	mov	sp, r7
 800c912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c916:	4770      	bx	lr

0800c918 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b082      	sub	sp, #8
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800c920:	4915      	ldr	r1, [pc, #84]	; (800c978 <etharp_free_entry+0x60>)
 800c922:	687a      	ldr	r2, [r7, #4]
 800c924:	4613      	mov	r3, r2
 800c926:	005b      	lsls	r3, r3, #1
 800c928:	4413      	add	r3, r2
 800c92a:	00db      	lsls	r3, r3, #3
 800c92c:	440b      	add	r3, r1
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d013      	beq.n	800c95c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800c934:	4910      	ldr	r1, [pc, #64]	; (800c978 <etharp_free_entry+0x60>)
 800c936:	687a      	ldr	r2, [r7, #4]
 800c938:	4613      	mov	r3, r2
 800c93a:	005b      	lsls	r3, r3, #1
 800c93c:	4413      	add	r3, r2
 800c93e:	00db      	lsls	r3, r3, #3
 800c940:	440b      	add	r3, r1
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	4618      	mov	r0, r3
 800c946:	f003 ff4f 	bl	80107e8 <pbuf_free>
    arp_table[i].q = NULL;
 800c94a:	490b      	ldr	r1, [pc, #44]	; (800c978 <etharp_free_entry+0x60>)
 800c94c:	687a      	ldr	r2, [r7, #4]
 800c94e:	4613      	mov	r3, r2
 800c950:	005b      	lsls	r3, r3, #1
 800c952:	4413      	add	r3, r2
 800c954:	00db      	lsls	r3, r3, #3
 800c956:	440b      	add	r3, r1
 800c958:	2200      	movs	r2, #0
 800c95a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c95c:	4906      	ldr	r1, [pc, #24]	; (800c978 <etharp_free_entry+0x60>)
 800c95e:	687a      	ldr	r2, [r7, #4]
 800c960:	4613      	mov	r3, r2
 800c962:	005b      	lsls	r3, r3, #1
 800c964:	4413      	add	r3, r2
 800c966:	00db      	lsls	r3, r3, #3
 800c968:	440b      	add	r3, r1
 800c96a:	3314      	adds	r3, #20
 800c96c:	2200      	movs	r2, #0
 800c96e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800c970:	bf00      	nop
 800c972:	3708      	adds	r7, #8
 800c974:	46bd      	mov	sp, r7
 800c976:	bd80      	pop	{r7, pc}
 800c978:	24012328 	.word	0x24012328

0800c97c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b082      	sub	sp, #8
 800c980:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c982:	2300      	movs	r3, #0
 800c984:	607b      	str	r3, [r7, #4]
 800c986:	e096      	b.n	800cab6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800c988:	494f      	ldr	r1, [pc, #316]	; (800cac8 <etharp_tmr+0x14c>)
 800c98a:	687a      	ldr	r2, [r7, #4]
 800c98c:	4613      	mov	r3, r2
 800c98e:	005b      	lsls	r3, r3, #1
 800c990:	4413      	add	r3, r2
 800c992:	00db      	lsls	r3, r3, #3
 800c994:	440b      	add	r3, r1
 800c996:	3314      	adds	r3, #20
 800c998:	781b      	ldrb	r3, [r3, #0]
 800c99a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800c99c:	78fb      	ldrb	r3, [r7, #3]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	f000 8086 	beq.w	800cab0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800c9a4:	4948      	ldr	r1, [pc, #288]	; (800cac8 <etharp_tmr+0x14c>)
 800c9a6:	687a      	ldr	r2, [r7, #4]
 800c9a8:	4613      	mov	r3, r2
 800c9aa:	005b      	lsls	r3, r3, #1
 800c9ac:	4413      	add	r3, r2
 800c9ae:	00db      	lsls	r3, r3, #3
 800c9b0:	440b      	add	r3, r1
 800c9b2:	3312      	adds	r3, #18
 800c9b4:	881b      	ldrh	r3, [r3, #0]
 800c9b6:	3301      	adds	r3, #1
 800c9b8:	b298      	uxth	r0, r3
 800c9ba:	4943      	ldr	r1, [pc, #268]	; (800cac8 <etharp_tmr+0x14c>)
 800c9bc:	687a      	ldr	r2, [r7, #4]
 800c9be:	4613      	mov	r3, r2
 800c9c0:	005b      	lsls	r3, r3, #1
 800c9c2:	4413      	add	r3, r2
 800c9c4:	00db      	lsls	r3, r3, #3
 800c9c6:	440b      	add	r3, r1
 800c9c8:	3312      	adds	r3, #18
 800c9ca:	4602      	mov	r2, r0
 800c9cc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c9ce:	493e      	ldr	r1, [pc, #248]	; (800cac8 <etharp_tmr+0x14c>)
 800c9d0:	687a      	ldr	r2, [r7, #4]
 800c9d2:	4613      	mov	r3, r2
 800c9d4:	005b      	lsls	r3, r3, #1
 800c9d6:	4413      	add	r3, r2
 800c9d8:	00db      	lsls	r3, r3, #3
 800c9da:	440b      	add	r3, r1
 800c9dc:	3312      	adds	r3, #18
 800c9de:	881b      	ldrh	r3, [r3, #0]
 800c9e0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800c9e4:	d215      	bcs.n	800ca12 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c9e6:	4938      	ldr	r1, [pc, #224]	; (800cac8 <etharp_tmr+0x14c>)
 800c9e8:	687a      	ldr	r2, [r7, #4]
 800c9ea:	4613      	mov	r3, r2
 800c9ec:	005b      	lsls	r3, r3, #1
 800c9ee:	4413      	add	r3, r2
 800c9f0:	00db      	lsls	r3, r3, #3
 800c9f2:	440b      	add	r3, r1
 800c9f4:	3314      	adds	r3, #20
 800c9f6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c9f8:	2b01      	cmp	r3, #1
 800c9fa:	d10e      	bne.n	800ca1a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800c9fc:	4932      	ldr	r1, [pc, #200]	; (800cac8 <etharp_tmr+0x14c>)
 800c9fe:	687a      	ldr	r2, [r7, #4]
 800ca00:	4613      	mov	r3, r2
 800ca02:	005b      	lsls	r3, r3, #1
 800ca04:	4413      	add	r3, r2
 800ca06:	00db      	lsls	r3, r3, #3
 800ca08:	440b      	add	r3, r1
 800ca0a:	3312      	adds	r3, #18
 800ca0c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ca0e:	2b04      	cmp	r3, #4
 800ca10:	d903      	bls.n	800ca1a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800ca12:	6878      	ldr	r0, [r7, #4]
 800ca14:	f7ff ff80 	bl	800c918 <etharp_free_entry>
 800ca18:	e04a      	b.n	800cab0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800ca1a:	492b      	ldr	r1, [pc, #172]	; (800cac8 <etharp_tmr+0x14c>)
 800ca1c:	687a      	ldr	r2, [r7, #4]
 800ca1e:	4613      	mov	r3, r2
 800ca20:	005b      	lsls	r3, r3, #1
 800ca22:	4413      	add	r3, r2
 800ca24:	00db      	lsls	r3, r3, #3
 800ca26:	440b      	add	r3, r1
 800ca28:	3314      	adds	r3, #20
 800ca2a:	781b      	ldrb	r3, [r3, #0]
 800ca2c:	2b03      	cmp	r3, #3
 800ca2e:	d10a      	bne.n	800ca46 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800ca30:	4925      	ldr	r1, [pc, #148]	; (800cac8 <etharp_tmr+0x14c>)
 800ca32:	687a      	ldr	r2, [r7, #4]
 800ca34:	4613      	mov	r3, r2
 800ca36:	005b      	lsls	r3, r3, #1
 800ca38:	4413      	add	r3, r2
 800ca3a:	00db      	lsls	r3, r3, #3
 800ca3c:	440b      	add	r3, r1
 800ca3e:	3314      	adds	r3, #20
 800ca40:	2204      	movs	r2, #4
 800ca42:	701a      	strb	r2, [r3, #0]
 800ca44:	e034      	b.n	800cab0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800ca46:	4920      	ldr	r1, [pc, #128]	; (800cac8 <etharp_tmr+0x14c>)
 800ca48:	687a      	ldr	r2, [r7, #4]
 800ca4a:	4613      	mov	r3, r2
 800ca4c:	005b      	lsls	r3, r3, #1
 800ca4e:	4413      	add	r3, r2
 800ca50:	00db      	lsls	r3, r3, #3
 800ca52:	440b      	add	r3, r1
 800ca54:	3314      	adds	r3, #20
 800ca56:	781b      	ldrb	r3, [r3, #0]
 800ca58:	2b04      	cmp	r3, #4
 800ca5a:	d10a      	bne.n	800ca72 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800ca5c:	491a      	ldr	r1, [pc, #104]	; (800cac8 <etharp_tmr+0x14c>)
 800ca5e:	687a      	ldr	r2, [r7, #4]
 800ca60:	4613      	mov	r3, r2
 800ca62:	005b      	lsls	r3, r3, #1
 800ca64:	4413      	add	r3, r2
 800ca66:	00db      	lsls	r3, r3, #3
 800ca68:	440b      	add	r3, r1
 800ca6a:	3314      	adds	r3, #20
 800ca6c:	2202      	movs	r2, #2
 800ca6e:	701a      	strb	r2, [r3, #0]
 800ca70:	e01e      	b.n	800cab0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ca72:	4915      	ldr	r1, [pc, #84]	; (800cac8 <etharp_tmr+0x14c>)
 800ca74:	687a      	ldr	r2, [r7, #4]
 800ca76:	4613      	mov	r3, r2
 800ca78:	005b      	lsls	r3, r3, #1
 800ca7a:	4413      	add	r3, r2
 800ca7c:	00db      	lsls	r3, r3, #3
 800ca7e:	440b      	add	r3, r1
 800ca80:	3314      	adds	r3, #20
 800ca82:	781b      	ldrb	r3, [r3, #0]
 800ca84:	2b01      	cmp	r3, #1
 800ca86:	d113      	bne.n	800cab0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800ca88:	490f      	ldr	r1, [pc, #60]	; (800cac8 <etharp_tmr+0x14c>)
 800ca8a:	687a      	ldr	r2, [r7, #4]
 800ca8c:	4613      	mov	r3, r2
 800ca8e:	005b      	lsls	r3, r3, #1
 800ca90:	4413      	add	r3, r2
 800ca92:	00db      	lsls	r3, r3, #3
 800ca94:	440b      	add	r3, r1
 800ca96:	3308      	adds	r3, #8
 800ca98:	6818      	ldr	r0, [r3, #0]
 800ca9a:	687a      	ldr	r2, [r7, #4]
 800ca9c:	4613      	mov	r3, r2
 800ca9e:	005b      	lsls	r3, r3, #1
 800caa0:	4413      	add	r3, r2
 800caa2:	00db      	lsls	r3, r3, #3
 800caa4:	4a08      	ldr	r2, [pc, #32]	; (800cac8 <etharp_tmr+0x14c>)
 800caa6:	4413      	add	r3, r2
 800caa8:	3304      	adds	r3, #4
 800caaa:	4619      	mov	r1, r3
 800caac:	f000 fe6e 	bl	800d78c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	3301      	adds	r3, #1
 800cab4:	607b      	str	r3, [r7, #4]
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2b09      	cmp	r3, #9
 800caba:	f77f af65 	ble.w	800c988 <etharp_tmr+0xc>
      }
    }
  }
}
 800cabe:	bf00      	nop
 800cac0:	bf00      	nop
 800cac2:	3708      	adds	r7, #8
 800cac4:	46bd      	mov	sp, r7
 800cac6:	bd80      	pop	{r7, pc}
 800cac8:	24012328 	.word	0x24012328

0800cacc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b08a      	sub	sp, #40	; 0x28
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	60f8      	str	r0, [r7, #12]
 800cad4:	460b      	mov	r3, r1
 800cad6:	607a      	str	r2, [r7, #4]
 800cad8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800cada:	230a      	movs	r3, #10
 800cadc:	84fb      	strh	r3, [r7, #38]	; 0x26
 800cade:	230a      	movs	r3, #10
 800cae0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800cae2:	230a      	movs	r3, #10
 800cae4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800cae6:	2300      	movs	r3, #0
 800cae8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800caea:	230a      	movs	r3, #10
 800caec:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800caee:	2300      	movs	r3, #0
 800caf0:	83bb      	strh	r3, [r7, #28]
 800caf2:	2300      	movs	r3, #0
 800caf4:	837b      	strh	r3, [r7, #26]
 800caf6:	2300      	movs	r3, #0
 800caf8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cafa:	2300      	movs	r3, #0
 800cafc:	843b      	strh	r3, [r7, #32]
 800cafe:	e0ae      	b.n	800cc5e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800cb00:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cb04:	49a6      	ldr	r1, [pc, #664]	; (800cda0 <etharp_find_entry+0x2d4>)
 800cb06:	4613      	mov	r3, r2
 800cb08:	005b      	lsls	r3, r3, #1
 800cb0a:	4413      	add	r3, r2
 800cb0c:	00db      	lsls	r3, r3, #3
 800cb0e:	440b      	add	r3, r1
 800cb10:	3314      	adds	r3, #20
 800cb12:	781b      	ldrb	r3, [r3, #0]
 800cb14:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800cb16:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800cb1a:	2b0a      	cmp	r3, #10
 800cb1c:	d105      	bne.n	800cb2a <etharp_find_entry+0x5e>
 800cb1e:	7dfb      	ldrb	r3, [r7, #23]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d102      	bne.n	800cb2a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800cb24:	8c3b      	ldrh	r3, [r7, #32]
 800cb26:	847b      	strh	r3, [r7, #34]	; 0x22
 800cb28:	e095      	b.n	800cc56 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800cb2a:	7dfb      	ldrb	r3, [r7, #23]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	f000 8092 	beq.w	800cc56 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800cb32:	7dfb      	ldrb	r3, [r7, #23]
 800cb34:	2b01      	cmp	r3, #1
 800cb36:	d009      	beq.n	800cb4c <etharp_find_entry+0x80>
 800cb38:	7dfb      	ldrb	r3, [r7, #23]
 800cb3a:	2b01      	cmp	r3, #1
 800cb3c:	d806      	bhi.n	800cb4c <etharp_find_entry+0x80>
 800cb3e:	4b99      	ldr	r3, [pc, #612]	; (800cda4 <etharp_find_entry+0x2d8>)
 800cb40:	f240 1223 	movw	r2, #291	; 0x123
 800cb44:	4998      	ldr	r1, [pc, #608]	; (800cda8 <etharp_find_entry+0x2dc>)
 800cb46:	4899      	ldr	r0, [pc, #612]	; (800cdac <etharp_find_entry+0x2e0>)
 800cb48:	f00a f9e4 	bl	8016f14 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d020      	beq.n	800cb94 <etharp_find_entry+0xc8>
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	6819      	ldr	r1, [r3, #0]
 800cb56:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cb5a:	4891      	ldr	r0, [pc, #580]	; (800cda0 <etharp_find_entry+0x2d4>)
 800cb5c:	4613      	mov	r3, r2
 800cb5e:	005b      	lsls	r3, r3, #1
 800cb60:	4413      	add	r3, r2
 800cb62:	00db      	lsls	r3, r3, #3
 800cb64:	4403      	add	r3, r0
 800cb66:	3304      	adds	r3, #4
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	4299      	cmp	r1, r3
 800cb6c:	d112      	bne.n	800cb94 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d00c      	beq.n	800cb8e <etharp_find_entry+0xc2>
 800cb74:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cb78:	4989      	ldr	r1, [pc, #548]	; (800cda0 <etharp_find_entry+0x2d4>)
 800cb7a:	4613      	mov	r3, r2
 800cb7c:	005b      	lsls	r3, r3, #1
 800cb7e:	4413      	add	r3, r2
 800cb80:	00db      	lsls	r3, r3, #3
 800cb82:	440b      	add	r3, r1
 800cb84:	3308      	adds	r3, #8
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	687a      	ldr	r2, [r7, #4]
 800cb8a:	429a      	cmp	r2, r3
 800cb8c:	d102      	bne.n	800cb94 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800cb8e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cb92:	e100      	b.n	800cd96 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800cb94:	7dfb      	ldrb	r3, [r7, #23]
 800cb96:	2b01      	cmp	r3, #1
 800cb98:	d140      	bne.n	800cc1c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800cb9a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cb9e:	4980      	ldr	r1, [pc, #512]	; (800cda0 <etharp_find_entry+0x2d4>)
 800cba0:	4613      	mov	r3, r2
 800cba2:	005b      	lsls	r3, r3, #1
 800cba4:	4413      	add	r3, r2
 800cba6:	00db      	lsls	r3, r3, #3
 800cba8:	440b      	add	r3, r1
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d01a      	beq.n	800cbe6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800cbb0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cbb4:	497a      	ldr	r1, [pc, #488]	; (800cda0 <etharp_find_entry+0x2d4>)
 800cbb6:	4613      	mov	r3, r2
 800cbb8:	005b      	lsls	r3, r3, #1
 800cbba:	4413      	add	r3, r2
 800cbbc:	00db      	lsls	r3, r3, #3
 800cbbe:	440b      	add	r3, r1
 800cbc0:	3312      	adds	r3, #18
 800cbc2:	881b      	ldrh	r3, [r3, #0]
 800cbc4:	8bba      	ldrh	r2, [r7, #28]
 800cbc6:	429a      	cmp	r2, r3
 800cbc8:	d845      	bhi.n	800cc56 <etharp_find_entry+0x18a>
            old_queue = i;
 800cbca:	8c3b      	ldrh	r3, [r7, #32]
 800cbcc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800cbce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cbd2:	4973      	ldr	r1, [pc, #460]	; (800cda0 <etharp_find_entry+0x2d4>)
 800cbd4:	4613      	mov	r3, r2
 800cbd6:	005b      	lsls	r3, r3, #1
 800cbd8:	4413      	add	r3, r2
 800cbda:	00db      	lsls	r3, r3, #3
 800cbdc:	440b      	add	r3, r1
 800cbde:	3312      	adds	r3, #18
 800cbe0:	881b      	ldrh	r3, [r3, #0]
 800cbe2:	83bb      	strh	r3, [r7, #28]
 800cbe4:	e037      	b.n	800cc56 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800cbe6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cbea:	496d      	ldr	r1, [pc, #436]	; (800cda0 <etharp_find_entry+0x2d4>)
 800cbec:	4613      	mov	r3, r2
 800cbee:	005b      	lsls	r3, r3, #1
 800cbf0:	4413      	add	r3, r2
 800cbf2:	00db      	lsls	r3, r3, #3
 800cbf4:	440b      	add	r3, r1
 800cbf6:	3312      	adds	r3, #18
 800cbf8:	881b      	ldrh	r3, [r3, #0]
 800cbfa:	8b7a      	ldrh	r2, [r7, #26]
 800cbfc:	429a      	cmp	r2, r3
 800cbfe:	d82a      	bhi.n	800cc56 <etharp_find_entry+0x18a>
            old_pending = i;
 800cc00:	8c3b      	ldrh	r3, [r7, #32]
 800cc02:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800cc04:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cc08:	4965      	ldr	r1, [pc, #404]	; (800cda0 <etharp_find_entry+0x2d4>)
 800cc0a:	4613      	mov	r3, r2
 800cc0c:	005b      	lsls	r3, r3, #1
 800cc0e:	4413      	add	r3, r2
 800cc10:	00db      	lsls	r3, r3, #3
 800cc12:	440b      	add	r3, r1
 800cc14:	3312      	adds	r3, #18
 800cc16:	881b      	ldrh	r3, [r3, #0]
 800cc18:	837b      	strh	r3, [r7, #26]
 800cc1a:	e01c      	b.n	800cc56 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800cc1c:	7dfb      	ldrb	r3, [r7, #23]
 800cc1e:	2b01      	cmp	r3, #1
 800cc20:	d919      	bls.n	800cc56 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800cc22:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cc26:	495e      	ldr	r1, [pc, #376]	; (800cda0 <etharp_find_entry+0x2d4>)
 800cc28:	4613      	mov	r3, r2
 800cc2a:	005b      	lsls	r3, r3, #1
 800cc2c:	4413      	add	r3, r2
 800cc2e:	00db      	lsls	r3, r3, #3
 800cc30:	440b      	add	r3, r1
 800cc32:	3312      	adds	r3, #18
 800cc34:	881b      	ldrh	r3, [r3, #0]
 800cc36:	8b3a      	ldrh	r2, [r7, #24]
 800cc38:	429a      	cmp	r2, r3
 800cc3a:	d80c      	bhi.n	800cc56 <etharp_find_entry+0x18a>
            old_stable = i;
 800cc3c:	8c3b      	ldrh	r3, [r7, #32]
 800cc3e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800cc40:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cc44:	4956      	ldr	r1, [pc, #344]	; (800cda0 <etharp_find_entry+0x2d4>)
 800cc46:	4613      	mov	r3, r2
 800cc48:	005b      	lsls	r3, r3, #1
 800cc4a:	4413      	add	r3, r2
 800cc4c:	00db      	lsls	r3, r3, #3
 800cc4e:	440b      	add	r3, r1
 800cc50:	3312      	adds	r3, #18
 800cc52:	881b      	ldrh	r3, [r3, #0]
 800cc54:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cc56:	8c3b      	ldrh	r3, [r7, #32]
 800cc58:	3301      	adds	r3, #1
 800cc5a:	b29b      	uxth	r3, r3
 800cc5c:	843b      	strh	r3, [r7, #32]
 800cc5e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cc62:	2b09      	cmp	r3, #9
 800cc64:	f77f af4c 	ble.w	800cb00 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800cc68:	7afb      	ldrb	r3, [r7, #11]
 800cc6a:	f003 0302 	and.w	r3, r3, #2
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d108      	bne.n	800cc84 <etharp_find_entry+0x1b8>
 800cc72:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800cc76:	2b0a      	cmp	r3, #10
 800cc78:	d107      	bne.n	800cc8a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800cc7a:	7afb      	ldrb	r3, [r7, #11]
 800cc7c:	f003 0301 	and.w	r3, r3, #1
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d102      	bne.n	800cc8a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800cc84:	f04f 33ff 	mov.w	r3, #4294967295
 800cc88:	e085      	b.n	800cd96 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800cc8a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800cc8e:	2b09      	cmp	r3, #9
 800cc90:	dc02      	bgt.n	800cc98 <etharp_find_entry+0x1cc>
    i = empty;
 800cc92:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cc94:	843b      	strh	r3, [r7, #32]
 800cc96:	e039      	b.n	800cd0c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800cc98:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800cc9c:	2b09      	cmp	r3, #9
 800cc9e:	dc14      	bgt.n	800ccca <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800cca0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cca2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800cca4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cca8:	493d      	ldr	r1, [pc, #244]	; (800cda0 <etharp_find_entry+0x2d4>)
 800ccaa:	4613      	mov	r3, r2
 800ccac:	005b      	lsls	r3, r3, #1
 800ccae:	4413      	add	r3, r2
 800ccb0:	00db      	lsls	r3, r3, #3
 800ccb2:	440b      	add	r3, r1
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d018      	beq.n	800ccec <etharp_find_entry+0x220>
 800ccba:	4b3a      	ldr	r3, [pc, #232]	; (800cda4 <etharp_find_entry+0x2d8>)
 800ccbc:	f240 126d 	movw	r2, #365	; 0x16d
 800ccc0:	493b      	ldr	r1, [pc, #236]	; (800cdb0 <etharp_find_entry+0x2e4>)
 800ccc2:	483a      	ldr	r0, [pc, #232]	; (800cdac <etharp_find_entry+0x2e0>)
 800ccc4:	f00a f926 	bl	8016f14 <iprintf>
 800ccc8:	e010      	b.n	800ccec <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800ccca:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ccce:	2b09      	cmp	r3, #9
 800ccd0:	dc02      	bgt.n	800ccd8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800ccd2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ccd4:	843b      	strh	r3, [r7, #32]
 800ccd6:	e009      	b.n	800ccec <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800ccd8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ccdc:	2b09      	cmp	r3, #9
 800ccde:	dc02      	bgt.n	800cce6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800cce0:	8bfb      	ldrh	r3, [r7, #30]
 800cce2:	843b      	strh	r3, [r7, #32]
 800cce4:	e002      	b.n	800ccec <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800cce6:	f04f 33ff 	mov.w	r3, #4294967295
 800ccea:	e054      	b.n	800cd96 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ccec:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ccf0:	2b09      	cmp	r3, #9
 800ccf2:	dd06      	ble.n	800cd02 <etharp_find_entry+0x236>
 800ccf4:	4b2b      	ldr	r3, [pc, #172]	; (800cda4 <etharp_find_entry+0x2d8>)
 800ccf6:	f240 127f 	movw	r2, #383	; 0x17f
 800ccfa:	492e      	ldr	r1, [pc, #184]	; (800cdb4 <etharp_find_entry+0x2e8>)
 800ccfc:	482b      	ldr	r0, [pc, #172]	; (800cdac <etharp_find_entry+0x2e0>)
 800ccfe:	f00a f909 	bl	8016f14 <iprintf>
    etharp_free_entry(i);
 800cd02:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cd06:	4618      	mov	r0, r3
 800cd08:	f7ff fe06 	bl	800c918 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800cd0c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cd10:	2b09      	cmp	r3, #9
 800cd12:	dd06      	ble.n	800cd22 <etharp_find_entry+0x256>
 800cd14:	4b23      	ldr	r3, [pc, #140]	; (800cda4 <etharp_find_entry+0x2d8>)
 800cd16:	f240 1283 	movw	r2, #387	; 0x183
 800cd1a:	4926      	ldr	r1, [pc, #152]	; (800cdb4 <etharp_find_entry+0x2e8>)
 800cd1c:	4823      	ldr	r0, [pc, #140]	; (800cdac <etharp_find_entry+0x2e0>)
 800cd1e:	f00a f8f9 	bl	8016f14 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800cd22:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cd26:	491e      	ldr	r1, [pc, #120]	; (800cda0 <etharp_find_entry+0x2d4>)
 800cd28:	4613      	mov	r3, r2
 800cd2a:	005b      	lsls	r3, r3, #1
 800cd2c:	4413      	add	r3, r2
 800cd2e:	00db      	lsls	r3, r3, #3
 800cd30:	440b      	add	r3, r1
 800cd32:	3314      	adds	r3, #20
 800cd34:	781b      	ldrb	r3, [r3, #0]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d006      	beq.n	800cd48 <etharp_find_entry+0x27c>
 800cd3a:	4b1a      	ldr	r3, [pc, #104]	; (800cda4 <etharp_find_entry+0x2d8>)
 800cd3c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800cd40:	491d      	ldr	r1, [pc, #116]	; (800cdb8 <etharp_find_entry+0x2ec>)
 800cd42:	481a      	ldr	r0, [pc, #104]	; (800cdac <etharp_find_entry+0x2e0>)
 800cd44:	f00a f8e6 	bl	8016f14 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d00b      	beq.n	800cd66 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800cd4e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	6819      	ldr	r1, [r3, #0]
 800cd56:	4812      	ldr	r0, [pc, #72]	; (800cda0 <etharp_find_entry+0x2d4>)
 800cd58:	4613      	mov	r3, r2
 800cd5a:	005b      	lsls	r3, r3, #1
 800cd5c:	4413      	add	r3, r2
 800cd5e:	00db      	lsls	r3, r3, #3
 800cd60:	4403      	add	r3, r0
 800cd62:	3304      	adds	r3, #4
 800cd64:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800cd66:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cd6a:	490d      	ldr	r1, [pc, #52]	; (800cda0 <etharp_find_entry+0x2d4>)
 800cd6c:	4613      	mov	r3, r2
 800cd6e:	005b      	lsls	r3, r3, #1
 800cd70:	4413      	add	r3, r2
 800cd72:	00db      	lsls	r3, r3, #3
 800cd74:	440b      	add	r3, r1
 800cd76:	3312      	adds	r3, #18
 800cd78:	2200      	movs	r2, #0
 800cd7a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800cd7c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cd80:	4907      	ldr	r1, [pc, #28]	; (800cda0 <etharp_find_entry+0x2d4>)
 800cd82:	4613      	mov	r3, r2
 800cd84:	005b      	lsls	r3, r3, #1
 800cd86:	4413      	add	r3, r2
 800cd88:	00db      	lsls	r3, r3, #3
 800cd8a:	440b      	add	r3, r1
 800cd8c:	3308      	adds	r3, #8
 800cd8e:	687a      	ldr	r2, [r7, #4]
 800cd90:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800cd92:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800cd96:	4618      	mov	r0, r3
 800cd98:	3728      	adds	r7, #40	; 0x28
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}
 800cd9e:	bf00      	nop
 800cda0:	24012328 	.word	0x24012328
 800cda4:	08017e0c 	.word	0x08017e0c
 800cda8:	08017e84 	.word	0x08017e84
 800cdac:	08017ec4 	.word	0x08017ec4
 800cdb0:	08017eec 	.word	0x08017eec
 800cdb4:	08017f04 	.word	0x08017f04
 800cdb8:	08017f18 	.word	0x08017f18

0800cdbc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b088      	sub	sp, #32
 800cdc0:	af02      	add	r7, sp, #8
 800cdc2:	60f8      	str	r0, [r7, #12]
 800cdc4:	60b9      	str	r1, [r7, #8]
 800cdc6:	607a      	str	r2, [r7, #4]
 800cdc8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cdd0:	2b06      	cmp	r3, #6
 800cdd2:	d006      	beq.n	800cde2 <etharp_update_arp_entry+0x26>
 800cdd4:	4b48      	ldr	r3, [pc, #288]	; (800cef8 <etharp_update_arp_entry+0x13c>)
 800cdd6:	f240 12a9 	movw	r2, #425	; 0x1a9
 800cdda:	4948      	ldr	r1, [pc, #288]	; (800cefc <etharp_update_arp_entry+0x140>)
 800cddc:	4848      	ldr	r0, [pc, #288]	; (800cf00 <etharp_update_arp_entry+0x144>)
 800cdde:	f00a f899 	bl	8016f14 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d012      	beq.n	800ce0e <etharp_update_arp_entry+0x52>
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d00e      	beq.n	800ce0e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	68f9      	ldr	r1, [r7, #12]
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f001 face 	bl	800e398 <ip4_addr_isbroadcast_u32>
 800cdfc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d105      	bne.n	800ce0e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800ce0a:	2be0      	cmp	r3, #224	; 0xe0
 800ce0c:	d102      	bne.n	800ce14 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800ce0e:	f06f 030f 	mvn.w	r3, #15
 800ce12:	e06c      	b.n	800ceee <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800ce14:	78fb      	ldrb	r3, [r7, #3]
 800ce16:	68fa      	ldr	r2, [r7, #12]
 800ce18:	4619      	mov	r1, r3
 800ce1a:	68b8      	ldr	r0, [r7, #8]
 800ce1c:	f7ff fe56 	bl	800cacc <etharp_find_entry>
 800ce20:	4603      	mov	r3, r0
 800ce22:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800ce24:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	da02      	bge.n	800ce32 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800ce2c:	8afb      	ldrh	r3, [r7, #22]
 800ce2e:	b25b      	sxtb	r3, r3
 800ce30:	e05d      	b.n	800ceee <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800ce32:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ce36:	4933      	ldr	r1, [pc, #204]	; (800cf04 <etharp_update_arp_entry+0x148>)
 800ce38:	4613      	mov	r3, r2
 800ce3a:	005b      	lsls	r3, r3, #1
 800ce3c:	4413      	add	r3, r2
 800ce3e:	00db      	lsls	r3, r3, #3
 800ce40:	440b      	add	r3, r1
 800ce42:	3314      	adds	r3, #20
 800ce44:	2202      	movs	r2, #2
 800ce46:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800ce48:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ce4c:	492d      	ldr	r1, [pc, #180]	; (800cf04 <etharp_update_arp_entry+0x148>)
 800ce4e:	4613      	mov	r3, r2
 800ce50:	005b      	lsls	r3, r3, #1
 800ce52:	4413      	add	r3, r2
 800ce54:	00db      	lsls	r3, r3, #3
 800ce56:	440b      	add	r3, r1
 800ce58:	3308      	adds	r3, #8
 800ce5a:	68fa      	ldr	r2, [r7, #12]
 800ce5c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800ce5e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ce62:	4613      	mov	r3, r2
 800ce64:	005b      	lsls	r3, r3, #1
 800ce66:	4413      	add	r3, r2
 800ce68:	00db      	lsls	r3, r3, #3
 800ce6a:	3308      	adds	r3, #8
 800ce6c:	4a25      	ldr	r2, [pc, #148]	; (800cf04 <etharp_update_arp_entry+0x148>)
 800ce6e:	4413      	add	r3, r2
 800ce70:	3304      	adds	r3, #4
 800ce72:	2206      	movs	r2, #6
 800ce74:	6879      	ldr	r1, [r7, #4]
 800ce76:	4618      	mov	r0, r3
 800ce78:	f009 ffa1 	bl	8016dbe <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800ce7c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ce80:	4920      	ldr	r1, [pc, #128]	; (800cf04 <etharp_update_arp_entry+0x148>)
 800ce82:	4613      	mov	r3, r2
 800ce84:	005b      	lsls	r3, r3, #1
 800ce86:	4413      	add	r3, r2
 800ce88:	00db      	lsls	r3, r3, #3
 800ce8a:	440b      	add	r3, r1
 800ce8c:	3312      	adds	r3, #18
 800ce8e:	2200      	movs	r2, #0
 800ce90:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800ce92:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ce96:	491b      	ldr	r1, [pc, #108]	; (800cf04 <etharp_update_arp_entry+0x148>)
 800ce98:	4613      	mov	r3, r2
 800ce9a:	005b      	lsls	r3, r3, #1
 800ce9c:	4413      	add	r3, r2
 800ce9e:	00db      	lsls	r3, r3, #3
 800cea0:	440b      	add	r3, r1
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d021      	beq.n	800ceec <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800cea8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ceac:	4915      	ldr	r1, [pc, #84]	; (800cf04 <etharp_update_arp_entry+0x148>)
 800ceae:	4613      	mov	r3, r2
 800ceb0:	005b      	lsls	r3, r3, #1
 800ceb2:	4413      	add	r3, r2
 800ceb4:	00db      	lsls	r3, r3, #3
 800ceb6:	440b      	add	r3, r1
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800cebc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cec0:	4910      	ldr	r1, [pc, #64]	; (800cf04 <etharp_update_arp_entry+0x148>)
 800cec2:	4613      	mov	r3, r2
 800cec4:	005b      	lsls	r3, r3, #1
 800cec6:	4413      	add	r3, r2
 800cec8:	00db      	lsls	r3, r3, #3
 800ceca:	440b      	add	r3, r1
 800cecc:	2200      	movs	r2, #0
 800cece:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800ced6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ceda:	9300      	str	r3, [sp, #0]
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	6939      	ldr	r1, [r7, #16]
 800cee0:	68f8      	ldr	r0, [r7, #12]
 800cee2:	f000 fcf3 	bl	800d8cc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800cee6:	6938      	ldr	r0, [r7, #16]
 800cee8:	f003 fc7e 	bl	80107e8 <pbuf_free>
  }
  return ERR_OK;
 800ceec:	2300      	movs	r3, #0
}
 800ceee:	4618      	mov	r0, r3
 800cef0:	3718      	adds	r7, #24
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}
 800cef6:	bf00      	nop
 800cef8:	08017e0c 	.word	0x08017e0c
 800cefc:	08017f44 	.word	0x08017f44
 800cf00:	08017ec4 	.word	0x08017ec4
 800cf04:	24012328 	.word	0x24012328

0800cf08 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b084      	sub	sp, #16
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cf10:	2300      	movs	r3, #0
 800cf12:	60fb      	str	r3, [r7, #12]
 800cf14:	e01e      	b.n	800cf54 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800cf16:	4913      	ldr	r1, [pc, #76]	; (800cf64 <etharp_cleanup_netif+0x5c>)
 800cf18:	68fa      	ldr	r2, [r7, #12]
 800cf1a:	4613      	mov	r3, r2
 800cf1c:	005b      	lsls	r3, r3, #1
 800cf1e:	4413      	add	r3, r2
 800cf20:	00db      	lsls	r3, r3, #3
 800cf22:	440b      	add	r3, r1
 800cf24:	3314      	adds	r3, #20
 800cf26:	781b      	ldrb	r3, [r3, #0]
 800cf28:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800cf2a:	7afb      	ldrb	r3, [r7, #11]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d00e      	beq.n	800cf4e <etharp_cleanup_netif+0x46>
 800cf30:	490c      	ldr	r1, [pc, #48]	; (800cf64 <etharp_cleanup_netif+0x5c>)
 800cf32:	68fa      	ldr	r2, [r7, #12]
 800cf34:	4613      	mov	r3, r2
 800cf36:	005b      	lsls	r3, r3, #1
 800cf38:	4413      	add	r3, r2
 800cf3a:	00db      	lsls	r3, r3, #3
 800cf3c:	440b      	add	r3, r1
 800cf3e:	3308      	adds	r3, #8
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	687a      	ldr	r2, [r7, #4]
 800cf44:	429a      	cmp	r2, r3
 800cf46:	d102      	bne.n	800cf4e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800cf48:	68f8      	ldr	r0, [r7, #12]
 800cf4a:	f7ff fce5 	bl	800c918 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	3301      	adds	r3, #1
 800cf52:	60fb      	str	r3, [r7, #12]
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	2b09      	cmp	r3, #9
 800cf58:	dddd      	ble.n	800cf16 <etharp_cleanup_netif+0xe>
    }
  }
}
 800cf5a:	bf00      	nop
 800cf5c:	bf00      	nop
 800cf5e:	3710      	adds	r7, #16
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bd80      	pop	{r7, pc}
 800cf64:	24012328 	.word	0x24012328

0800cf68 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800cf68:	b5b0      	push	{r4, r5, r7, lr}
 800cf6a:	b08a      	sub	sp, #40	; 0x28
 800cf6c:	af04      	add	r7, sp, #16
 800cf6e:	6078      	str	r0, [r7, #4]
 800cf70:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d107      	bne.n	800cf88 <etharp_input+0x20>
 800cf78:	4b3d      	ldr	r3, [pc, #244]	; (800d070 <etharp_input+0x108>)
 800cf7a:	f240 228a 	movw	r2, #650	; 0x28a
 800cf7e:	493d      	ldr	r1, [pc, #244]	; (800d074 <etharp_input+0x10c>)
 800cf80:	483d      	ldr	r0, [pc, #244]	; (800d078 <etharp_input+0x110>)
 800cf82:	f009 ffc7 	bl	8016f14 <iprintf>
 800cf86:	e06f      	b.n	800d068 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	685b      	ldr	r3, [r3, #4]
 800cf8c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800cf8e:	693b      	ldr	r3, [r7, #16]
 800cf90:	881b      	ldrh	r3, [r3, #0]
 800cf92:	b29b      	uxth	r3, r3
 800cf94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf98:	d10c      	bne.n	800cfb4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800cf9a:	693b      	ldr	r3, [r7, #16]
 800cf9c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800cf9e:	2b06      	cmp	r3, #6
 800cfa0:	d108      	bne.n	800cfb4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800cfa2:	693b      	ldr	r3, [r7, #16]
 800cfa4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800cfa6:	2b04      	cmp	r3, #4
 800cfa8:	d104      	bne.n	800cfb4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800cfaa:	693b      	ldr	r3, [r7, #16]
 800cfac:	885b      	ldrh	r3, [r3, #2]
 800cfae:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800cfb0:	2b08      	cmp	r3, #8
 800cfb2:	d003      	beq.n	800cfbc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800cfb4:	6878      	ldr	r0, [r7, #4]
 800cfb6:	f003 fc17 	bl	80107e8 <pbuf_free>
    return;
 800cfba:	e055      	b.n	800d068 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800cfbc:	693b      	ldr	r3, [r7, #16]
 800cfbe:	330e      	adds	r3, #14
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800cfc4:	693b      	ldr	r3, [r7, #16]
 800cfc6:	3318      	adds	r3, #24
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	3304      	adds	r3, #4
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d102      	bne.n	800cfdc <etharp_input+0x74>
    for_us = 0;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	75fb      	strb	r3, [r7, #23]
 800cfda:	e009      	b.n	800cff0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800cfdc:	68ba      	ldr	r2, [r7, #8]
 800cfde:	683b      	ldr	r3, [r7, #0]
 800cfe0:	3304      	adds	r3, #4
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	429a      	cmp	r2, r3
 800cfe6:	bf0c      	ite	eq
 800cfe8:	2301      	moveq	r3, #1
 800cfea:	2300      	movne	r3, #0
 800cfec:	b2db      	uxtb	r3, r3
 800cfee:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800cff0:	693b      	ldr	r3, [r7, #16]
 800cff2:	f103 0208 	add.w	r2, r3, #8
 800cff6:	7dfb      	ldrb	r3, [r7, #23]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d001      	beq.n	800d000 <etharp_input+0x98>
 800cffc:	2301      	movs	r3, #1
 800cffe:	e000      	b.n	800d002 <etharp_input+0x9a>
 800d000:	2302      	movs	r3, #2
 800d002:	f107 010c 	add.w	r1, r7, #12
 800d006:	6838      	ldr	r0, [r7, #0]
 800d008:	f7ff fed8 	bl	800cdbc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800d00c:	693b      	ldr	r3, [r7, #16]
 800d00e:	88db      	ldrh	r3, [r3, #6]
 800d010:	b29b      	uxth	r3, r3
 800d012:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d016:	d003      	beq.n	800d020 <etharp_input+0xb8>
 800d018:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d01c:	d01e      	beq.n	800d05c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800d01e:	e020      	b.n	800d062 <etharp_input+0xfa>
      if (for_us) {
 800d020:	7dfb      	ldrb	r3, [r7, #23]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d01c      	beq.n	800d060 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800d02c:	693b      	ldr	r3, [r7, #16]
 800d02e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800d032:	683b      	ldr	r3, [r7, #0]
 800d034:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800d03c:	693a      	ldr	r2, [r7, #16]
 800d03e:	3208      	adds	r2, #8
        etharp_raw(netif,
 800d040:	2102      	movs	r1, #2
 800d042:	9103      	str	r1, [sp, #12]
 800d044:	f107 010c 	add.w	r1, r7, #12
 800d048:	9102      	str	r1, [sp, #8]
 800d04a:	9201      	str	r2, [sp, #4]
 800d04c:	9300      	str	r3, [sp, #0]
 800d04e:	462b      	mov	r3, r5
 800d050:	4622      	mov	r2, r4
 800d052:	4601      	mov	r1, r0
 800d054:	6838      	ldr	r0, [r7, #0]
 800d056:	f000 faeb 	bl	800d630 <etharp_raw>
      break;
 800d05a:	e001      	b.n	800d060 <etharp_input+0xf8>
      break;
 800d05c:	bf00      	nop
 800d05e:	e000      	b.n	800d062 <etharp_input+0xfa>
      break;
 800d060:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800d062:	6878      	ldr	r0, [r7, #4]
 800d064:	f003 fbc0 	bl	80107e8 <pbuf_free>
}
 800d068:	3718      	adds	r7, #24
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bdb0      	pop	{r4, r5, r7, pc}
 800d06e:	bf00      	nop
 800d070:	08017e0c 	.word	0x08017e0c
 800d074:	08017f9c 	.word	0x08017f9c
 800d078:	08017ec4 	.word	0x08017ec4

0800d07c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b086      	sub	sp, #24
 800d080:	af02      	add	r7, sp, #8
 800d082:	60f8      	str	r0, [r7, #12]
 800d084:	60b9      	str	r1, [r7, #8]
 800d086:	4613      	mov	r3, r2
 800d088:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800d08a:	79fa      	ldrb	r2, [r7, #7]
 800d08c:	4944      	ldr	r1, [pc, #272]	; (800d1a0 <etharp_output_to_arp_index+0x124>)
 800d08e:	4613      	mov	r3, r2
 800d090:	005b      	lsls	r3, r3, #1
 800d092:	4413      	add	r3, r2
 800d094:	00db      	lsls	r3, r3, #3
 800d096:	440b      	add	r3, r1
 800d098:	3314      	adds	r3, #20
 800d09a:	781b      	ldrb	r3, [r3, #0]
 800d09c:	2b01      	cmp	r3, #1
 800d09e:	d806      	bhi.n	800d0ae <etharp_output_to_arp_index+0x32>
 800d0a0:	4b40      	ldr	r3, [pc, #256]	; (800d1a4 <etharp_output_to_arp_index+0x128>)
 800d0a2:	f240 22ee 	movw	r2, #750	; 0x2ee
 800d0a6:	4940      	ldr	r1, [pc, #256]	; (800d1a8 <etharp_output_to_arp_index+0x12c>)
 800d0a8:	4840      	ldr	r0, [pc, #256]	; (800d1ac <etharp_output_to_arp_index+0x130>)
 800d0aa:	f009 ff33 	bl	8016f14 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800d0ae:	79fa      	ldrb	r2, [r7, #7]
 800d0b0:	493b      	ldr	r1, [pc, #236]	; (800d1a0 <etharp_output_to_arp_index+0x124>)
 800d0b2:	4613      	mov	r3, r2
 800d0b4:	005b      	lsls	r3, r3, #1
 800d0b6:	4413      	add	r3, r2
 800d0b8:	00db      	lsls	r3, r3, #3
 800d0ba:	440b      	add	r3, r1
 800d0bc:	3314      	adds	r3, #20
 800d0be:	781b      	ldrb	r3, [r3, #0]
 800d0c0:	2b02      	cmp	r3, #2
 800d0c2:	d153      	bne.n	800d16c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800d0c4:	79fa      	ldrb	r2, [r7, #7]
 800d0c6:	4936      	ldr	r1, [pc, #216]	; (800d1a0 <etharp_output_to_arp_index+0x124>)
 800d0c8:	4613      	mov	r3, r2
 800d0ca:	005b      	lsls	r3, r3, #1
 800d0cc:	4413      	add	r3, r2
 800d0ce:	00db      	lsls	r3, r3, #3
 800d0d0:	440b      	add	r3, r1
 800d0d2:	3312      	adds	r3, #18
 800d0d4:	881b      	ldrh	r3, [r3, #0]
 800d0d6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800d0da:	d919      	bls.n	800d110 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800d0dc:	79fa      	ldrb	r2, [r7, #7]
 800d0de:	4613      	mov	r3, r2
 800d0e0:	005b      	lsls	r3, r3, #1
 800d0e2:	4413      	add	r3, r2
 800d0e4:	00db      	lsls	r3, r3, #3
 800d0e6:	4a2e      	ldr	r2, [pc, #184]	; (800d1a0 <etharp_output_to_arp_index+0x124>)
 800d0e8:	4413      	add	r3, r2
 800d0ea:	3304      	adds	r3, #4
 800d0ec:	4619      	mov	r1, r3
 800d0ee:	68f8      	ldr	r0, [r7, #12]
 800d0f0:	f000 fb4c 	bl	800d78c <etharp_request>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d138      	bne.n	800d16c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d0fa:	79fa      	ldrb	r2, [r7, #7]
 800d0fc:	4928      	ldr	r1, [pc, #160]	; (800d1a0 <etharp_output_to_arp_index+0x124>)
 800d0fe:	4613      	mov	r3, r2
 800d100:	005b      	lsls	r3, r3, #1
 800d102:	4413      	add	r3, r2
 800d104:	00db      	lsls	r3, r3, #3
 800d106:	440b      	add	r3, r1
 800d108:	3314      	adds	r3, #20
 800d10a:	2203      	movs	r2, #3
 800d10c:	701a      	strb	r2, [r3, #0]
 800d10e:	e02d      	b.n	800d16c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800d110:	79fa      	ldrb	r2, [r7, #7]
 800d112:	4923      	ldr	r1, [pc, #140]	; (800d1a0 <etharp_output_to_arp_index+0x124>)
 800d114:	4613      	mov	r3, r2
 800d116:	005b      	lsls	r3, r3, #1
 800d118:	4413      	add	r3, r2
 800d11a:	00db      	lsls	r3, r3, #3
 800d11c:	440b      	add	r3, r1
 800d11e:	3312      	adds	r3, #18
 800d120:	881b      	ldrh	r3, [r3, #0]
 800d122:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800d126:	d321      	bcc.n	800d16c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800d128:	79fa      	ldrb	r2, [r7, #7]
 800d12a:	4613      	mov	r3, r2
 800d12c:	005b      	lsls	r3, r3, #1
 800d12e:	4413      	add	r3, r2
 800d130:	00db      	lsls	r3, r3, #3
 800d132:	4a1b      	ldr	r2, [pc, #108]	; (800d1a0 <etharp_output_to_arp_index+0x124>)
 800d134:	4413      	add	r3, r2
 800d136:	1d19      	adds	r1, r3, #4
 800d138:	79fa      	ldrb	r2, [r7, #7]
 800d13a:	4613      	mov	r3, r2
 800d13c:	005b      	lsls	r3, r3, #1
 800d13e:	4413      	add	r3, r2
 800d140:	00db      	lsls	r3, r3, #3
 800d142:	3308      	adds	r3, #8
 800d144:	4a16      	ldr	r2, [pc, #88]	; (800d1a0 <etharp_output_to_arp_index+0x124>)
 800d146:	4413      	add	r3, r2
 800d148:	3304      	adds	r3, #4
 800d14a:	461a      	mov	r2, r3
 800d14c:	68f8      	ldr	r0, [r7, #12]
 800d14e:	f000 fafb 	bl	800d748 <etharp_request_dst>
 800d152:	4603      	mov	r3, r0
 800d154:	2b00      	cmp	r3, #0
 800d156:	d109      	bne.n	800d16c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d158:	79fa      	ldrb	r2, [r7, #7]
 800d15a:	4911      	ldr	r1, [pc, #68]	; (800d1a0 <etharp_output_to_arp_index+0x124>)
 800d15c:	4613      	mov	r3, r2
 800d15e:	005b      	lsls	r3, r3, #1
 800d160:	4413      	add	r3, r2
 800d162:	00db      	lsls	r3, r3, #3
 800d164:	440b      	add	r3, r1
 800d166:	3314      	adds	r3, #20
 800d168:	2203      	movs	r2, #3
 800d16a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800d172:	79fa      	ldrb	r2, [r7, #7]
 800d174:	4613      	mov	r3, r2
 800d176:	005b      	lsls	r3, r3, #1
 800d178:	4413      	add	r3, r2
 800d17a:	00db      	lsls	r3, r3, #3
 800d17c:	3308      	adds	r3, #8
 800d17e:	4a08      	ldr	r2, [pc, #32]	; (800d1a0 <etharp_output_to_arp_index+0x124>)
 800d180:	4413      	add	r3, r2
 800d182:	3304      	adds	r3, #4
 800d184:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d188:	9200      	str	r2, [sp, #0]
 800d18a:	460a      	mov	r2, r1
 800d18c:	68b9      	ldr	r1, [r7, #8]
 800d18e:	68f8      	ldr	r0, [r7, #12]
 800d190:	f000 fb9c 	bl	800d8cc <ethernet_output>
 800d194:	4603      	mov	r3, r0
}
 800d196:	4618      	mov	r0, r3
 800d198:	3710      	adds	r7, #16
 800d19a:	46bd      	mov	sp, r7
 800d19c:	bd80      	pop	{r7, pc}
 800d19e:	bf00      	nop
 800d1a0:	24012328 	.word	0x24012328
 800d1a4:	08017e0c 	.word	0x08017e0c
 800d1a8:	08017fbc 	.word	0x08017fbc
 800d1ac:	08017ec4 	.word	0x08017ec4

0800d1b0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b08a      	sub	sp, #40	; 0x28
 800d1b4:	af02      	add	r7, sp, #8
 800d1b6:	60f8      	str	r0, [r7, #12]
 800d1b8:	60b9      	str	r1, [r7, #8]
 800d1ba:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d106      	bne.n	800d1d4 <etharp_output+0x24>
 800d1c6:	4b73      	ldr	r3, [pc, #460]	; (800d394 <etharp_output+0x1e4>)
 800d1c8:	f240 321e 	movw	r2, #798	; 0x31e
 800d1cc:	4972      	ldr	r1, [pc, #456]	; (800d398 <etharp_output+0x1e8>)
 800d1ce:	4873      	ldr	r0, [pc, #460]	; (800d39c <etharp_output+0x1ec>)
 800d1d0:	f009 fea0 	bl	8016f14 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800d1d4:	68bb      	ldr	r3, [r7, #8]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d106      	bne.n	800d1e8 <etharp_output+0x38>
 800d1da:	4b6e      	ldr	r3, [pc, #440]	; (800d394 <etharp_output+0x1e4>)
 800d1dc:	f240 321f 	movw	r2, #799	; 0x31f
 800d1e0:	496f      	ldr	r1, [pc, #444]	; (800d3a0 <etharp_output+0x1f0>)
 800d1e2:	486e      	ldr	r0, [pc, #440]	; (800d39c <etharp_output+0x1ec>)
 800d1e4:	f009 fe96 	bl	8016f14 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d106      	bne.n	800d1fc <etharp_output+0x4c>
 800d1ee:	4b69      	ldr	r3, [pc, #420]	; (800d394 <etharp_output+0x1e4>)
 800d1f0:	f44f 7248 	mov.w	r2, #800	; 0x320
 800d1f4:	496b      	ldr	r1, [pc, #428]	; (800d3a4 <etharp_output+0x1f4>)
 800d1f6:	4869      	ldr	r0, [pc, #420]	; (800d39c <etharp_output+0x1ec>)
 800d1f8:	f009 fe8c 	bl	8016f14 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	68f9      	ldr	r1, [r7, #12]
 800d202:	4618      	mov	r0, r3
 800d204:	f001 f8c8 	bl	800e398 <ip4_addr_isbroadcast_u32>
 800d208:	4603      	mov	r3, r0
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d002      	beq.n	800d214 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800d20e:	4b66      	ldr	r3, [pc, #408]	; (800d3a8 <etharp_output+0x1f8>)
 800d210:	61fb      	str	r3, [r7, #28]
 800d212:	e0af      	b.n	800d374 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d21c:	2be0      	cmp	r3, #224	; 0xe0
 800d21e:	d118      	bne.n	800d252 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800d220:	2301      	movs	r3, #1
 800d222:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800d224:	2300      	movs	r3, #0
 800d226:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800d228:	235e      	movs	r3, #94	; 0x5e
 800d22a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	3301      	adds	r3, #1
 800d230:	781b      	ldrb	r3, [r3, #0]
 800d232:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d236:	b2db      	uxtb	r3, r3
 800d238:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	3302      	adds	r3, #2
 800d23e:	781b      	ldrb	r3, [r3, #0]
 800d240:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	3303      	adds	r3, #3
 800d246:	781b      	ldrb	r3, [r3, #0]
 800d248:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800d24a:	f107 0310 	add.w	r3, r7, #16
 800d24e:	61fb      	str	r3, [r7, #28]
 800d250:	e090      	b.n	800d374 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681a      	ldr	r2, [r3, #0]
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	3304      	adds	r3, #4
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	405a      	eors	r2, r3
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	3308      	adds	r3, #8
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	4013      	ands	r3, r2
 800d266:	2b00      	cmp	r3, #0
 800d268:	d012      	beq.n	800d290 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d270:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800d274:	4293      	cmp	r3, r2
 800d276:	d00b      	beq.n	800d290 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	330c      	adds	r3, #12
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d003      	beq.n	800d28a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	330c      	adds	r3, #12
 800d286:	61bb      	str	r3, [r7, #24]
 800d288:	e002      	b.n	800d290 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800d28a:	f06f 0303 	mvn.w	r3, #3
 800d28e:	e07d      	b.n	800d38c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d290:	4b46      	ldr	r3, [pc, #280]	; (800d3ac <etharp_output+0x1fc>)
 800d292:	781b      	ldrb	r3, [r3, #0]
 800d294:	4619      	mov	r1, r3
 800d296:	4a46      	ldr	r2, [pc, #280]	; (800d3b0 <etharp_output+0x200>)
 800d298:	460b      	mov	r3, r1
 800d29a:	005b      	lsls	r3, r3, #1
 800d29c:	440b      	add	r3, r1
 800d29e:	00db      	lsls	r3, r3, #3
 800d2a0:	4413      	add	r3, r2
 800d2a2:	3314      	adds	r3, #20
 800d2a4:	781b      	ldrb	r3, [r3, #0]
 800d2a6:	2b01      	cmp	r3, #1
 800d2a8:	d925      	bls.n	800d2f6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d2aa:	4b40      	ldr	r3, [pc, #256]	; (800d3ac <etharp_output+0x1fc>)
 800d2ac:	781b      	ldrb	r3, [r3, #0]
 800d2ae:	4619      	mov	r1, r3
 800d2b0:	4a3f      	ldr	r2, [pc, #252]	; (800d3b0 <etharp_output+0x200>)
 800d2b2:	460b      	mov	r3, r1
 800d2b4:	005b      	lsls	r3, r3, #1
 800d2b6:	440b      	add	r3, r1
 800d2b8:	00db      	lsls	r3, r3, #3
 800d2ba:	4413      	add	r3, r2
 800d2bc:	3308      	adds	r3, #8
 800d2be:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d2c0:	68fa      	ldr	r2, [r7, #12]
 800d2c2:	429a      	cmp	r2, r3
 800d2c4:	d117      	bne.n	800d2f6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800d2c6:	69bb      	ldr	r3, [r7, #24]
 800d2c8:	681a      	ldr	r2, [r3, #0]
 800d2ca:	4b38      	ldr	r3, [pc, #224]	; (800d3ac <etharp_output+0x1fc>)
 800d2cc:	781b      	ldrb	r3, [r3, #0]
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	4937      	ldr	r1, [pc, #220]	; (800d3b0 <etharp_output+0x200>)
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	005b      	lsls	r3, r3, #1
 800d2d6:	4403      	add	r3, r0
 800d2d8:	00db      	lsls	r3, r3, #3
 800d2da:	440b      	add	r3, r1
 800d2dc:	3304      	adds	r3, #4
 800d2de:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d2e0:	429a      	cmp	r2, r3
 800d2e2:	d108      	bne.n	800d2f6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800d2e4:	4b31      	ldr	r3, [pc, #196]	; (800d3ac <etharp_output+0x1fc>)
 800d2e6:	781b      	ldrb	r3, [r3, #0]
 800d2e8:	461a      	mov	r2, r3
 800d2ea:	68b9      	ldr	r1, [r7, #8]
 800d2ec:	68f8      	ldr	r0, [r7, #12]
 800d2ee:	f7ff fec5 	bl	800d07c <etharp_output_to_arp_index>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	e04a      	b.n	800d38c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	75fb      	strb	r3, [r7, #23]
 800d2fa:	e031      	b.n	800d360 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d2fc:	7dfa      	ldrb	r2, [r7, #23]
 800d2fe:	492c      	ldr	r1, [pc, #176]	; (800d3b0 <etharp_output+0x200>)
 800d300:	4613      	mov	r3, r2
 800d302:	005b      	lsls	r3, r3, #1
 800d304:	4413      	add	r3, r2
 800d306:	00db      	lsls	r3, r3, #3
 800d308:	440b      	add	r3, r1
 800d30a:	3314      	adds	r3, #20
 800d30c:	781b      	ldrb	r3, [r3, #0]
 800d30e:	2b01      	cmp	r3, #1
 800d310:	d923      	bls.n	800d35a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800d312:	7dfa      	ldrb	r2, [r7, #23]
 800d314:	4926      	ldr	r1, [pc, #152]	; (800d3b0 <etharp_output+0x200>)
 800d316:	4613      	mov	r3, r2
 800d318:	005b      	lsls	r3, r3, #1
 800d31a:	4413      	add	r3, r2
 800d31c:	00db      	lsls	r3, r3, #3
 800d31e:	440b      	add	r3, r1
 800d320:	3308      	adds	r3, #8
 800d322:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d324:	68fa      	ldr	r2, [r7, #12]
 800d326:	429a      	cmp	r2, r3
 800d328:	d117      	bne.n	800d35a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800d32a:	69bb      	ldr	r3, [r7, #24]
 800d32c:	6819      	ldr	r1, [r3, #0]
 800d32e:	7dfa      	ldrb	r2, [r7, #23]
 800d330:	481f      	ldr	r0, [pc, #124]	; (800d3b0 <etharp_output+0x200>)
 800d332:	4613      	mov	r3, r2
 800d334:	005b      	lsls	r3, r3, #1
 800d336:	4413      	add	r3, r2
 800d338:	00db      	lsls	r3, r3, #3
 800d33a:	4403      	add	r3, r0
 800d33c:	3304      	adds	r3, #4
 800d33e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800d340:	4299      	cmp	r1, r3
 800d342:	d10a      	bne.n	800d35a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800d344:	4a19      	ldr	r2, [pc, #100]	; (800d3ac <etharp_output+0x1fc>)
 800d346:	7dfb      	ldrb	r3, [r7, #23]
 800d348:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800d34a:	7dfb      	ldrb	r3, [r7, #23]
 800d34c:	461a      	mov	r2, r3
 800d34e:	68b9      	ldr	r1, [r7, #8]
 800d350:	68f8      	ldr	r0, [r7, #12]
 800d352:	f7ff fe93 	bl	800d07c <etharp_output_to_arp_index>
 800d356:	4603      	mov	r3, r0
 800d358:	e018      	b.n	800d38c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d35a:	7dfb      	ldrb	r3, [r7, #23]
 800d35c:	3301      	adds	r3, #1
 800d35e:	75fb      	strb	r3, [r7, #23]
 800d360:	7dfb      	ldrb	r3, [r7, #23]
 800d362:	2b09      	cmp	r3, #9
 800d364:	d9ca      	bls.n	800d2fc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800d366:	68ba      	ldr	r2, [r7, #8]
 800d368:	69b9      	ldr	r1, [r7, #24]
 800d36a:	68f8      	ldr	r0, [r7, #12]
 800d36c:	f000 f822 	bl	800d3b4 <etharp_query>
 800d370:	4603      	mov	r3, r0
 800d372:	e00b      	b.n	800d38c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800d37a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d37e:	9300      	str	r3, [sp, #0]
 800d380:	69fb      	ldr	r3, [r7, #28]
 800d382:	68b9      	ldr	r1, [r7, #8]
 800d384:	68f8      	ldr	r0, [r7, #12]
 800d386:	f000 faa1 	bl	800d8cc <ethernet_output>
 800d38a:	4603      	mov	r3, r0
}
 800d38c:	4618      	mov	r0, r3
 800d38e:	3720      	adds	r7, #32
 800d390:	46bd      	mov	sp, r7
 800d392:	bd80      	pop	{r7, pc}
 800d394:	08017e0c 	.word	0x08017e0c
 800d398:	08017f9c 	.word	0x08017f9c
 800d39c:	08017ec4 	.word	0x08017ec4
 800d3a0:	08017fec 	.word	0x08017fec
 800d3a4:	08017f8c 	.word	0x08017f8c
 800d3a8:	0801acd0 	.word	0x0801acd0
 800d3ac:	24012418 	.word	0x24012418
 800d3b0:	24012328 	.word	0x24012328

0800d3b4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b08c      	sub	sp, #48	; 0x30
 800d3b8:	af02      	add	r7, sp, #8
 800d3ba:	60f8      	str	r0, [r7, #12]
 800d3bc:	60b9      	str	r1, [r7, #8]
 800d3be:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	3326      	adds	r3, #38	; 0x26
 800d3c4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800d3c6:	23ff      	movs	r3, #255	; 0xff
 800d3c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	68f9      	ldr	r1, [r7, #12]
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	f000 ffde 	bl	800e398 <ip4_addr_isbroadcast_u32>
 800d3dc:	4603      	mov	r3, r0
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d10c      	bne.n	800d3fc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d3e2:	68bb      	ldr	r3, [r7, #8]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d3ea:	2be0      	cmp	r3, #224	; 0xe0
 800d3ec:	d006      	beq.n	800d3fc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d3ee:	68bb      	ldr	r3, [r7, #8]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d003      	beq.n	800d3fc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800d3f4:	68bb      	ldr	r3, [r7, #8]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d102      	bne.n	800d402 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d3fc:	f06f 030f 	mvn.w	r3, #15
 800d400:	e101      	b.n	800d606 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800d402:	68fa      	ldr	r2, [r7, #12]
 800d404:	2101      	movs	r1, #1
 800d406:	68b8      	ldr	r0, [r7, #8]
 800d408:	f7ff fb60 	bl	800cacc <etharp_find_entry>
 800d40c:	4603      	mov	r3, r0
 800d40e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800d410:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d414:	2b00      	cmp	r3, #0
 800d416:	da02      	bge.n	800d41e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800d418:	8a7b      	ldrh	r3, [r7, #18]
 800d41a:	b25b      	sxtb	r3, r3
 800d41c:	e0f3      	b.n	800d606 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800d41e:	8a7b      	ldrh	r3, [r7, #18]
 800d420:	2b7e      	cmp	r3, #126	; 0x7e
 800d422:	d906      	bls.n	800d432 <etharp_query+0x7e>
 800d424:	4b7a      	ldr	r3, [pc, #488]	; (800d610 <etharp_query+0x25c>)
 800d426:	f240 32c1 	movw	r2, #961	; 0x3c1
 800d42a:	497a      	ldr	r1, [pc, #488]	; (800d614 <etharp_query+0x260>)
 800d42c:	487a      	ldr	r0, [pc, #488]	; (800d618 <etharp_query+0x264>)
 800d42e:	f009 fd71 	bl	8016f14 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800d432:	8a7b      	ldrh	r3, [r7, #18]
 800d434:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800d436:	7c7a      	ldrb	r2, [r7, #17]
 800d438:	4978      	ldr	r1, [pc, #480]	; (800d61c <etharp_query+0x268>)
 800d43a:	4613      	mov	r3, r2
 800d43c:	005b      	lsls	r3, r3, #1
 800d43e:	4413      	add	r3, r2
 800d440:	00db      	lsls	r3, r3, #3
 800d442:	440b      	add	r3, r1
 800d444:	3314      	adds	r3, #20
 800d446:	781b      	ldrb	r3, [r3, #0]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d115      	bne.n	800d478 <etharp_query+0xc4>
    is_new_entry = 1;
 800d44c:	2301      	movs	r3, #1
 800d44e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800d450:	7c7a      	ldrb	r2, [r7, #17]
 800d452:	4972      	ldr	r1, [pc, #456]	; (800d61c <etharp_query+0x268>)
 800d454:	4613      	mov	r3, r2
 800d456:	005b      	lsls	r3, r3, #1
 800d458:	4413      	add	r3, r2
 800d45a:	00db      	lsls	r3, r3, #3
 800d45c:	440b      	add	r3, r1
 800d45e:	3314      	adds	r3, #20
 800d460:	2201      	movs	r2, #1
 800d462:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800d464:	7c7a      	ldrb	r2, [r7, #17]
 800d466:	496d      	ldr	r1, [pc, #436]	; (800d61c <etharp_query+0x268>)
 800d468:	4613      	mov	r3, r2
 800d46a:	005b      	lsls	r3, r3, #1
 800d46c:	4413      	add	r3, r2
 800d46e:	00db      	lsls	r3, r3, #3
 800d470:	440b      	add	r3, r1
 800d472:	3308      	adds	r3, #8
 800d474:	68fa      	ldr	r2, [r7, #12]
 800d476:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800d478:	7c7a      	ldrb	r2, [r7, #17]
 800d47a:	4968      	ldr	r1, [pc, #416]	; (800d61c <etharp_query+0x268>)
 800d47c:	4613      	mov	r3, r2
 800d47e:	005b      	lsls	r3, r3, #1
 800d480:	4413      	add	r3, r2
 800d482:	00db      	lsls	r3, r3, #3
 800d484:	440b      	add	r3, r1
 800d486:	3314      	adds	r3, #20
 800d488:	781b      	ldrb	r3, [r3, #0]
 800d48a:	2b01      	cmp	r3, #1
 800d48c:	d011      	beq.n	800d4b2 <etharp_query+0xfe>
 800d48e:	7c7a      	ldrb	r2, [r7, #17]
 800d490:	4962      	ldr	r1, [pc, #392]	; (800d61c <etharp_query+0x268>)
 800d492:	4613      	mov	r3, r2
 800d494:	005b      	lsls	r3, r3, #1
 800d496:	4413      	add	r3, r2
 800d498:	00db      	lsls	r3, r3, #3
 800d49a:	440b      	add	r3, r1
 800d49c:	3314      	adds	r3, #20
 800d49e:	781b      	ldrb	r3, [r3, #0]
 800d4a0:	2b01      	cmp	r3, #1
 800d4a2:	d806      	bhi.n	800d4b2 <etharp_query+0xfe>
 800d4a4:	4b5a      	ldr	r3, [pc, #360]	; (800d610 <etharp_query+0x25c>)
 800d4a6:	f240 32cd 	movw	r2, #973	; 0x3cd
 800d4aa:	495d      	ldr	r1, [pc, #372]	; (800d620 <etharp_query+0x26c>)
 800d4ac:	485a      	ldr	r0, [pc, #360]	; (800d618 <etharp_query+0x264>)
 800d4ae:	f009 fd31 	bl	8016f14 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800d4b2:	6a3b      	ldr	r3, [r7, #32]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d102      	bne.n	800d4be <etharp_query+0x10a>
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d10c      	bne.n	800d4d8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800d4be:	68b9      	ldr	r1, [r7, #8]
 800d4c0:	68f8      	ldr	r0, [r7, #12]
 800d4c2:	f000 f963 	bl	800d78c <etharp_request>
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d102      	bne.n	800d4d8 <etharp_query+0x124>
      return result;
 800d4d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d4d6:	e096      	b.n	800d606 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d106      	bne.n	800d4ec <etharp_query+0x138>
 800d4de:	4b4c      	ldr	r3, [pc, #304]	; (800d610 <etharp_query+0x25c>)
 800d4e0:	f240 32e1 	movw	r2, #993	; 0x3e1
 800d4e4:	494f      	ldr	r1, [pc, #316]	; (800d624 <etharp_query+0x270>)
 800d4e6:	484c      	ldr	r0, [pc, #304]	; (800d618 <etharp_query+0x264>)
 800d4e8:	f009 fd14 	bl	8016f14 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800d4ec:	7c7a      	ldrb	r2, [r7, #17]
 800d4ee:	494b      	ldr	r1, [pc, #300]	; (800d61c <etharp_query+0x268>)
 800d4f0:	4613      	mov	r3, r2
 800d4f2:	005b      	lsls	r3, r3, #1
 800d4f4:	4413      	add	r3, r2
 800d4f6:	00db      	lsls	r3, r3, #3
 800d4f8:	440b      	add	r3, r1
 800d4fa:	3314      	adds	r3, #20
 800d4fc:	781b      	ldrb	r3, [r3, #0]
 800d4fe:	2b01      	cmp	r3, #1
 800d500:	d917      	bls.n	800d532 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800d502:	4a49      	ldr	r2, [pc, #292]	; (800d628 <etharp_query+0x274>)
 800d504:	7c7b      	ldrb	r3, [r7, #17]
 800d506:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800d508:	7c7a      	ldrb	r2, [r7, #17]
 800d50a:	4613      	mov	r3, r2
 800d50c:	005b      	lsls	r3, r3, #1
 800d50e:	4413      	add	r3, r2
 800d510:	00db      	lsls	r3, r3, #3
 800d512:	3308      	adds	r3, #8
 800d514:	4a41      	ldr	r2, [pc, #260]	; (800d61c <etharp_query+0x268>)
 800d516:	4413      	add	r3, r2
 800d518:	3304      	adds	r3, #4
 800d51a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d51e:	9200      	str	r2, [sp, #0]
 800d520:	697a      	ldr	r2, [r7, #20]
 800d522:	6879      	ldr	r1, [r7, #4]
 800d524:	68f8      	ldr	r0, [r7, #12]
 800d526:	f000 f9d1 	bl	800d8cc <ethernet_output>
 800d52a:	4603      	mov	r3, r0
 800d52c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d530:	e067      	b.n	800d602 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d532:	7c7a      	ldrb	r2, [r7, #17]
 800d534:	4939      	ldr	r1, [pc, #228]	; (800d61c <etharp_query+0x268>)
 800d536:	4613      	mov	r3, r2
 800d538:	005b      	lsls	r3, r3, #1
 800d53a:	4413      	add	r3, r2
 800d53c:	00db      	lsls	r3, r3, #3
 800d53e:	440b      	add	r3, r1
 800d540:	3314      	adds	r3, #20
 800d542:	781b      	ldrb	r3, [r3, #0]
 800d544:	2b01      	cmp	r3, #1
 800d546:	d15c      	bne.n	800d602 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800d548:	2300      	movs	r3, #0
 800d54a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d550:	e01c      	b.n	800d58c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800d552:	69fb      	ldr	r3, [r7, #28]
 800d554:	895a      	ldrh	r2, [r3, #10]
 800d556:	69fb      	ldr	r3, [r7, #28]
 800d558:	891b      	ldrh	r3, [r3, #8]
 800d55a:	429a      	cmp	r2, r3
 800d55c:	d10a      	bne.n	800d574 <etharp_query+0x1c0>
 800d55e:	69fb      	ldr	r3, [r7, #28]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d006      	beq.n	800d574 <etharp_query+0x1c0>
 800d566:	4b2a      	ldr	r3, [pc, #168]	; (800d610 <etharp_query+0x25c>)
 800d568:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800d56c:	492f      	ldr	r1, [pc, #188]	; (800d62c <etharp_query+0x278>)
 800d56e:	482a      	ldr	r0, [pc, #168]	; (800d618 <etharp_query+0x264>)
 800d570:	f009 fcd0 	bl	8016f14 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800d574:	69fb      	ldr	r3, [r7, #28]
 800d576:	7b1b      	ldrb	r3, [r3, #12]
 800d578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d002      	beq.n	800d586 <etharp_query+0x1d2>
        copy_needed = 1;
 800d580:	2301      	movs	r3, #1
 800d582:	61bb      	str	r3, [r7, #24]
        break;
 800d584:	e005      	b.n	800d592 <etharp_query+0x1de>
      }
      p = p->next;
 800d586:	69fb      	ldr	r3, [r7, #28]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d58c:	69fb      	ldr	r3, [r7, #28]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d1df      	bne.n	800d552 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800d592:	69bb      	ldr	r3, [r7, #24]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d007      	beq.n	800d5a8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800d598:	687a      	ldr	r2, [r7, #4]
 800d59a:	f44f 7120 	mov.w	r1, #640	; 0x280
 800d59e:	200e      	movs	r0, #14
 800d5a0:	f003 fb8a 	bl	8010cb8 <pbuf_clone>
 800d5a4:	61f8      	str	r0, [r7, #28]
 800d5a6:	e004      	b.n	800d5b2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800d5ac:	69f8      	ldr	r0, [r7, #28]
 800d5ae:	f003 f9c1 	bl	8010934 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800d5b2:	69fb      	ldr	r3, [r7, #28]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d021      	beq.n	800d5fc <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800d5b8:	7c7a      	ldrb	r2, [r7, #17]
 800d5ba:	4918      	ldr	r1, [pc, #96]	; (800d61c <etharp_query+0x268>)
 800d5bc:	4613      	mov	r3, r2
 800d5be:	005b      	lsls	r3, r3, #1
 800d5c0:	4413      	add	r3, r2
 800d5c2:	00db      	lsls	r3, r3, #3
 800d5c4:	440b      	add	r3, r1
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d00a      	beq.n	800d5e2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800d5cc:	7c7a      	ldrb	r2, [r7, #17]
 800d5ce:	4913      	ldr	r1, [pc, #76]	; (800d61c <etharp_query+0x268>)
 800d5d0:	4613      	mov	r3, r2
 800d5d2:	005b      	lsls	r3, r3, #1
 800d5d4:	4413      	add	r3, r2
 800d5d6:	00db      	lsls	r3, r3, #3
 800d5d8:	440b      	add	r3, r1
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	4618      	mov	r0, r3
 800d5de:	f003 f903 	bl	80107e8 <pbuf_free>
      }
      arp_table[i].q = p;
 800d5e2:	7c7a      	ldrb	r2, [r7, #17]
 800d5e4:	490d      	ldr	r1, [pc, #52]	; (800d61c <etharp_query+0x268>)
 800d5e6:	4613      	mov	r3, r2
 800d5e8:	005b      	lsls	r3, r3, #1
 800d5ea:	4413      	add	r3, r2
 800d5ec:	00db      	lsls	r3, r3, #3
 800d5ee:	440b      	add	r3, r1
 800d5f0:	69fa      	ldr	r2, [r7, #28]
 800d5f2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d5fa:	e002      	b.n	800d602 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800d5fc:	23ff      	movs	r3, #255	; 0xff
 800d5fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800d602:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d606:	4618      	mov	r0, r3
 800d608:	3728      	adds	r7, #40	; 0x28
 800d60a:	46bd      	mov	sp, r7
 800d60c:	bd80      	pop	{r7, pc}
 800d60e:	bf00      	nop
 800d610:	08017e0c 	.word	0x08017e0c
 800d614:	08017ff8 	.word	0x08017ff8
 800d618:	08017ec4 	.word	0x08017ec4
 800d61c:	24012328 	.word	0x24012328
 800d620:	08018008 	.word	0x08018008
 800d624:	08017fec 	.word	0x08017fec
 800d628:	24012418 	.word	0x24012418
 800d62c:	08018030 	.word	0x08018030

0800d630 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b08a      	sub	sp, #40	; 0x28
 800d634:	af02      	add	r7, sp, #8
 800d636:	60f8      	str	r0, [r7, #12]
 800d638:	60b9      	str	r1, [r7, #8]
 800d63a:	607a      	str	r2, [r7, #4]
 800d63c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800d63e:	2300      	movs	r3, #0
 800d640:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d106      	bne.n	800d656 <etharp_raw+0x26>
 800d648:	4b3a      	ldr	r3, [pc, #232]	; (800d734 <etharp_raw+0x104>)
 800d64a:	f240 4257 	movw	r2, #1111	; 0x457
 800d64e:	493a      	ldr	r1, [pc, #232]	; (800d738 <etharp_raw+0x108>)
 800d650:	483a      	ldr	r0, [pc, #232]	; (800d73c <etharp_raw+0x10c>)
 800d652:	f009 fc5f 	bl	8016f14 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d656:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d65a:	211c      	movs	r1, #28
 800d65c:	200e      	movs	r0, #14
 800d65e:	f002 fddf 	bl	8010220 <pbuf_alloc>
 800d662:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d664:	69bb      	ldr	r3, [r7, #24]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d102      	bne.n	800d670 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800d66a:	f04f 33ff 	mov.w	r3, #4294967295
 800d66e:	e05d      	b.n	800d72c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d670:	69bb      	ldr	r3, [r7, #24]
 800d672:	895b      	ldrh	r3, [r3, #10]
 800d674:	2b1b      	cmp	r3, #27
 800d676:	d806      	bhi.n	800d686 <etharp_raw+0x56>
 800d678:	4b2e      	ldr	r3, [pc, #184]	; (800d734 <etharp_raw+0x104>)
 800d67a:	f240 4262 	movw	r2, #1122	; 0x462
 800d67e:	4930      	ldr	r1, [pc, #192]	; (800d740 <etharp_raw+0x110>)
 800d680:	482e      	ldr	r0, [pc, #184]	; (800d73c <etharp_raw+0x10c>)
 800d682:	f009 fc47 	bl	8016f14 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800d686:	69bb      	ldr	r3, [r7, #24]
 800d688:	685b      	ldr	r3, [r3, #4]
 800d68a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800d68c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d68e:	4618      	mov	r0, r3
 800d690:	f7ff f914 	bl	800c8bc <lwip_htons>
 800d694:	4603      	mov	r3, r0
 800d696:	461a      	mov	r2, r3
 800d698:	697b      	ldr	r3, [r7, #20]
 800d69a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d6a2:	2b06      	cmp	r3, #6
 800d6a4:	d006      	beq.n	800d6b4 <etharp_raw+0x84>
 800d6a6:	4b23      	ldr	r3, [pc, #140]	; (800d734 <etharp_raw+0x104>)
 800d6a8:	f240 4269 	movw	r2, #1129	; 0x469
 800d6ac:	4925      	ldr	r1, [pc, #148]	; (800d744 <etharp_raw+0x114>)
 800d6ae:	4823      	ldr	r0, [pc, #140]	; (800d73c <etharp_raw+0x10c>)
 800d6b0:	f009 fc30 	bl	8016f14 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800d6b4:	697b      	ldr	r3, [r7, #20]
 800d6b6:	3308      	adds	r3, #8
 800d6b8:	2206      	movs	r2, #6
 800d6ba:	6839      	ldr	r1, [r7, #0]
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f009 fb7e 	bl	8016dbe <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800d6c2:	697b      	ldr	r3, [r7, #20]
 800d6c4:	3312      	adds	r3, #18
 800d6c6:	2206      	movs	r2, #6
 800d6c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	f009 fb77 	bl	8016dbe <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800d6d0:	697b      	ldr	r3, [r7, #20]
 800d6d2:	330e      	adds	r3, #14
 800d6d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d6d6:	6812      	ldr	r2, [r2, #0]
 800d6d8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800d6da:	697b      	ldr	r3, [r7, #20]
 800d6dc:	3318      	adds	r3, #24
 800d6de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6e0:	6812      	ldr	r2, [r2, #0]
 800d6e2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800d6e4:	697b      	ldr	r3, [r7, #20]
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	701a      	strb	r2, [r3, #0]
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	f042 0201 	orr.w	r2, r2, #1
 800d6f0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800d6f2:	697b      	ldr	r3, [r7, #20]
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	f042 0208 	orr.w	r2, r2, #8
 800d6fa:	709a      	strb	r2, [r3, #2]
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800d700:	697b      	ldr	r3, [r7, #20]
 800d702:	2206      	movs	r2, #6
 800d704:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800d706:	697b      	ldr	r3, [r7, #20]
 800d708:	2204      	movs	r2, #4
 800d70a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800d70c:	f640 0306 	movw	r3, #2054	; 0x806
 800d710:	9300      	str	r3, [sp, #0]
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	68ba      	ldr	r2, [r7, #8]
 800d716:	69b9      	ldr	r1, [r7, #24]
 800d718:	68f8      	ldr	r0, [r7, #12]
 800d71a:	f000 f8d7 	bl	800d8cc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800d71e:	69b8      	ldr	r0, [r7, #24]
 800d720:	f003 f862 	bl	80107e8 <pbuf_free>
  p = NULL;
 800d724:	2300      	movs	r3, #0
 800d726:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800d728:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d72c:	4618      	mov	r0, r3
 800d72e:	3720      	adds	r7, #32
 800d730:	46bd      	mov	sp, r7
 800d732:	bd80      	pop	{r7, pc}
 800d734:	08017e0c 	.word	0x08017e0c
 800d738:	08017f9c 	.word	0x08017f9c
 800d73c:	08017ec4 	.word	0x08017ec4
 800d740:	0801804c 	.word	0x0801804c
 800d744:	08018080 	.word	0x08018080

0800d748 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800d748:	b580      	push	{r7, lr}
 800d74a:	b088      	sub	sp, #32
 800d74c:	af04      	add	r7, sp, #16
 800d74e:	60f8      	str	r0, [r7, #12]
 800d750:	60b9      	str	r1, [r7, #8]
 800d752:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d764:	2201      	movs	r2, #1
 800d766:	9203      	str	r2, [sp, #12]
 800d768:	68ba      	ldr	r2, [r7, #8]
 800d76a:	9202      	str	r2, [sp, #8]
 800d76c:	4a06      	ldr	r2, [pc, #24]	; (800d788 <etharp_request_dst+0x40>)
 800d76e:	9201      	str	r2, [sp, #4]
 800d770:	9300      	str	r3, [sp, #0]
 800d772:	4603      	mov	r3, r0
 800d774:	687a      	ldr	r2, [r7, #4]
 800d776:	68f8      	ldr	r0, [r7, #12]
 800d778:	f7ff ff5a 	bl	800d630 <etharp_raw>
 800d77c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800d77e:	4618      	mov	r0, r3
 800d780:	3710      	adds	r7, #16
 800d782:	46bd      	mov	sp, r7
 800d784:	bd80      	pop	{r7, pc}
 800d786:	bf00      	nop
 800d788:	0801acd8 	.word	0x0801acd8

0800d78c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b082      	sub	sp, #8
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
 800d794:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800d796:	4a05      	ldr	r2, [pc, #20]	; (800d7ac <etharp_request+0x20>)
 800d798:	6839      	ldr	r1, [r7, #0]
 800d79a:	6878      	ldr	r0, [r7, #4]
 800d79c:	f7ff ffd4 	bl	800d748 <etharp_request_dst>
 800d7a0:	4603      	mov	r3, r0
}
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	3708      	adds	r7, #8
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	bd80      	pop	{r7, pc}
 800d7aa:	bf00      	nop
 800d7ac:	0801acd0 	.word	0x0801acd0

0800d7b0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b086      	sub	sp, #24
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
 800d7b8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800d7ba:	230e      	movs	r3, #14
 800d7bc:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	895b      	ldrh	r3, [r3, #10]
 800d7c2:	2b0e      	cmp	r3, #14
 800d7c4:	d96e      	bls.n	800d8a4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	7bdb      	ldrb	r3, [r3, #15]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d106      	bne.n	800d7dc <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d7d4:	3301      	adds	r3, #1
 800d7d6:	b2da      	uxtb	r2, r3
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	685b      	ldr	r3, [r3, #4]
 800d7e0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800d7e2:	693b      	ldr	r3, [r7, #16]
 800d7e4:	7b1a      	ldrb	r2, [r3, #12]
 800d7e6:	7b5b      	ldrb	r3, [r3, #13]
 800d7e8:	021b      	lsls	r3, r3, #8
 800d7ea:	4313      	orrs	r3, r2
 800d7ec:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800d7ee:	693b      	ldr	r3, [r7, #16]
 800d7f0:	781b      	ldrb	r3, [r3, #0]
 800d7f2:	f003 0301 	and.w	r3, r3, #1
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d023      	beq.n	800d842 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800d7fa:	693b      	ldr	r3, [r7, #16]
 800d7fc:	781b      	ldrb	r3, [r3, #0]
 800d7fe:	2b01      	cmp	r3, #1
 800d800:	d10f      	bne.n	800d822 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800d802:	693b      	ldr	r3, [r7, #16]
 800d804:	785b      	ldrb	r3, [r3, #1]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d11b      	bne.n	800d842 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800d80a:	693b      	ldr	r3, [r7, #16]
 800d80c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800d80e:	2b5e      	cmp	r3, #94	; 0x5e
 800d810:	d117      	bne.n	800d842 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	7b5b      	ldrb	r3, [r3, #13]
 800d816:	f043 0310 	orr.w	r3, r3, #16
 800d81a:	b2da      	uxtb	r2, r3
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	735a      	strb	r2, [r3, #13]
 800d820:	e00f      	b.n	800d842 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800d822:	693b      	ldr	r3, [r7, #16]
 800d824:	2206      	movs	r2, #6
 800d826:	4928      	ldr	r1, [pc, #160]	; (800d8c8 <ethernet_input+0x118>)
 800d828:	4618      	mov	r0, r3
 800d82a:	f009 fab8 	bl	8016d9e <memcmp>
 800d82e:	4603      	mov	r3, r0
 800d830:	2b00      	cmp	r3, #0
 800d832:	d106      	bne.n	800d842 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	7b5b      	ldrb	r3, [r3, #13]
 800d838:	f043 0308 	orr.w	r3, r3, #8
 800d83c:	b2da      	uxtb	r2, r3
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800d842:	89fb      	ldrh	r3, [r7, #14]
 800d844:	2b08      	cmp	r3, #8
 800d846:	d003      	beq.n	800d850 <ethernet_input+0xa0>
 800d848:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800d84c:	d014      	beq.n	800d878 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800d84e:	e032      	b.n	800d8b6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d850:	683b      	ldr	r3, [r7, #0]
 800d852:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d856:	f003 0308 	and.w	r3, r3, #8
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d024      	beq.n	800d8a8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800d85e:	8afb      	ldrh	r3, [r7, #22]
 800d860:	4619      	mov	r1, r3
 800d862:	6878      	ldr	r0, [r7, #4]
 800d864:	f002 ff3a 	bl	80106dc <pbuf_remove_header>
 800d868:	4603      	mov	r3, r0
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d11e      	bne.n	800d8ac <ethernet_input+0xfc>
        ip4_input(p, netif);
 800d86e:	6839      	ldr	r1, [r7, #0]
 800d870:	6878      	ldr	r0, [r7, #4]
 800d872:	f000 fb95 	bl	800dfa0 <ip4_input>
      break;
 800d876:	e013      	b.n	800d8a0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d878:	683b      	ldr	r3, [r7, #0]
 800d87a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d87e:	f003 0308 	and.w	r3, r3, #8
 800d882:	2b00      	cmp	r3, #0
 800d884:	d014      	beq.n	800d8b0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800d886:	8afb      	ldrh	r3, [r7, #22]
 800d888:	4619      	mov	r1, r3
 800d88a:	6878      	ldr	r0, [r7, #4]
 800d88c:	f002 ff26 	bl	80106dc <pbuf_remove_header>
 800d890:	4603      	mov	r3, r0
 800d892:	2b00      	cmp	r3, #0
 800d894:	d10e      	bne.n	800d8b4 <ethernet_input+0x104>
        etharp_input(p, netif);
 800d896:	6839      	ldr	r1, [r7, #0]
 800d898:	6878      	ldr	r0, [r7, #4]
 800d89a:	f7ff fb65 	bl	800cf68 <etharp_input>
      break;
 800d89e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	e00c      	b.n	800d8be <ethernet_input+0x10e>
    goto free_and_return;
 800d8a4:	bf00      	nop
 800d8a6:	e006      	b.n	800d8b6 <ethernet_input+0x106>
        goto free_and_return;
 800d8a8:	bf00      	nop
 800d8aa:	e004      	b.n	800d8b6 <ethernet_input+0x106>
        goto free_and_return;
 800d8ac:	bf00      	nop
 800d8ae:	e002      	b.n	800d8b6 <ethernet_input+0x106>
        goto free_and_return;
 800d8b0:	bf00      	nop
 800d8b2:	e000      	b.n	800d8b6 <ethernet_input+0x106>
        goto free_and_return;
 800d8b4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800d8b6:	6878      	ldr	r0, [r7, #4]
 800d8b8:	f002 ff96 	bl	80107e8 <pbuf_free>
  return ERR_OK;
 800d8bc:	2300      	movs	r3, #0
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	3718      	adds	r7, #24
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	bd80      	pop	{r7, pc}
 800d8c6:	bf00      	nop
 800d8c8:	0801acd0 	.word	0x0801acd0

0800d8cc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b086      	sub	sp, #24
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	60f8      	str	r0, [r7, #12]
 800d8d4:	60b9      	str	r1, [r7, #8]
 800d8d6:	607a      	str	r2, [r7, #4]
 800d8d8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800d8da:	8c3b      	ldrh	r3, [r7, #32]
 800d8dc:	4618      	mov	r0, r3
 800d8de:	f7fe ffed 	bl	800c8bc <lwip_htons>
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800d8e6:	210e      	movs	r1, #14
 800d8e8:	68b8      	ldr	r0, [r7, #8]
 800d8ea:	f002 fee7 	bl	80106bc <pbuf_add_header>
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d125      	bne.n	800d940 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	685b      	ldr	r3, [r3, #4]
 800d8f8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800d8fa:	693b      	ldr	r3, [r7, #16]
 800d8fc:	8afa      	ldrh	r2, [r7, #22]
 800d8fe:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800d900:	693b      	ldr	r3, [r7, #16]
 800d902:	2206      	movs	r2, #6
 800d904:	6839      	ldr	r1, [r7, #0]
 800d906:	4618      	mov	r0, r3
 800d908:	f009 fa59 	bl	8016dbe <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800d90c:	693b      	ldr	r3, [r7, #16]
 800d90e:	3306      	adds	r3, #6
 800d910:	2206      	movs	r2, #6
 800d912:	6879      	ldr	r1, [r7, #4]
 800d914:	4618      	mov	r0, r3
 800d916:	f009 fa52 	bl	8016dbe <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d920:	2b06      	cmp	r3, #6
 800d922:	d006      	beq.n	800d932 <ethernet_output+0x66>
 800d924:	4b0a      	ldr	r3, [pc, #40]	; (800d950 <ethernet_output+0x84>)
 800d926:	f44f 7299 	mov.w	r2, #306	; 0x132
 800d92a:	490a      	ldr	r1, [pc, #40]	; (800d954 <ethernet_output+0x88>)
 800d92c:	480a      	ldr	r0, [pc, #40]	; (800d958 <ethernet_output+0x8c>)
 800d92e:	f009 faf1 	bl	8016f14 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	699b      	ldr	r3, [r3, #24]
 800d936:	68b9      	ldr	r1, [r7, #8]
 800d938:	68f8      	ldr	r0, [r7, #12]
 800d93a:	4798      	blx	r3
 800d93c:	4603      	mov	r3, r0
 800d93e:	e002      	b.n	800d946 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800d940:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800d942:	f06f 0301 	mvn.w	r3, #1
}
 800d946:	4618      	mov	r0, r3
 800d948:	3718      	adds	r7, #24
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}
 800d94e:	bf00      	nop
 800d950:	080180c4 	.word	0x080180c4
 800d954:	0801813c 	.word	0x0801813c
 800d958:	08018170 	.word	0x08018170

0800d95c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b08e      	sub	sp, #56	; 0x38
 800d960:	af04      	add	r7, sp, #16
 800d962:	6078      	str	r0, [r7, #4]
 800d964:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800d966:	4b87      	ldr	r3, [pc, #540]	; (800db84 <icmp_input+0x228>)
 800d968:	689b      	ldr	r3, [r3, #8]
 800d96a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800d96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d96e:	781b      	ldrb	r3, [r3, #0]
 800d970:	f003 030f 	and.w	r3, r3, #15
 800d974:	b2db      	uxtb	r3, r3
 800d976:	009b      	lsls	r3, r3, #2
 800d978:	b2db      	uxtb	r3, r3
 800d97a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800d97c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d97e:	2b13      	cmp	r3, #19
 800d980:	f240 80e8 	bls.w	800db54 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	895b      	ldrh	r3, [r3, #10]
 800d988:	2b03      	cmp	r3, #3
 800d98a:	f240 80e5 	bls.w	800db58 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	685b      	ldr	r3, [r3, #4]
 800d992:	781b      	ldrb	r3, [r3, #0]
 800d994:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800d998:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	f000 80d2 	beq.w	800db46 <icmp_input+0x1ea>
 800d9a2:	2b08      	cmp	r3, #8
 800d9a4:	f040 80d2 	bne.w	800db4c <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800d9a8:	4b77      	ldr	r3, [pc, #476]	; (800db88 <icmp_input+0x22c>)
 800d9aa:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d9ac:	4b75      	ldr	r3, [pc, #468]	; (800db84 <icmp_input+0x228>)
 800d9ae:	695b      	ldr	r3, [r3, #20]
 800d9b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d9b4:	2be0      	cmp	r3, #224	; 0xe0
 800d9b6:	f000 80d6 	beq.w	800db66 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800d9ba:	4b72      	ldr	r3, [pc, #456]	; (800db84 <icmp_input+0x228>)
 800d9bc:	695b      	ldr	r3, [r3, #20]
 800d9be:	4a71      	ldr	r2, [pc, #452]	; (800db84 <icmp_input+0x228>)
 800d9c0:	6812      	ldr	r2, [r2, #0]
 800d9c2:	4611      	mov	r1, r2
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	f000 fce7 	bl	800e398 <ip4_addr_isbroadcast_u32>
 800d9ca:	4603      	mov	r3, r0
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	f040 80cc 	bne.w	800db6a <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	891b      	ldrh	r3, [r3, #8]
 800d9d6:	2b07      	cmp	r3, #7
 800d9d8:	f240 80c0 	bls.w	800db5c <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 800d9dc:	6878      	ldr	r0, [r7, #4]
 800d9de:	f000 f9e0 	bl	800dda2 <inet_chksum_pbuf>
 800d9e2:	4603      	mov	r3, r0
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d003      	beq.n	800d9f0 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 800d9e8:	6878      	ldr	r0, [r7, #4]
 800d9ea:	f002 fefd 	bl	80107e8 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 800d9ee:	e0c5      	b.n	800db7c <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d9f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d9f2:	330e      	adds	r3, #14
 800d9f4:	4619      	mov	r1, r3
 800d9f6:	6878      	ldr	r0, [r7, #4]
 800d9f8:	f002 fe60 	bl	80106bc <pbuf_add_header>
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d04b      	beq.n	800da9a <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	891a      	ldrh	r2, [r3, #8]
 800da06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800da08:	4413      	add	r3, r2
 800da0a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	891b      	ldrh	r3, [r3, #8]
 800da10:	8b7a      	ldrh	r2, [r7, #26]
 800da12:	429a      	cmp	r2, r3
 800da14:	f0c0 80ab 	bcc.w	800db6e <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800da18:	8b7b      	ldrh	r3, [r7, #26]
 800da1a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800da1e:	4619      	mov	r1, r3
 800da20:	200e      	movs	r0, #14
 800da22:	f002 fbfd 	bl	8010220 <pbuf_alloc>
 800da26:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800da28:	697b      	ldr	r3, [r7, #20]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	f000 80a1 	beq.w	800db72 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800da30:	697b      	ldr	r3, [r7, #20]
 800da32:	895b      	ldrh	r3, [r3, #10]
 800da34:	461a      	mov	r2, r3
 800da36:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800da38:	3308      	adds	r3, #8
 800da3a:	429a      	cmp	r2, r3
 800da3c:	d203      	bcs.n	800da46 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800da3e:	6978      	ldr	r0, [r7, #20]
 800da40:	f002 fed2 	bl	80107e8 <pbuf_free>
          goto icmperr;
 800da44:	e096      	b.n	800db74 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800da46:	697b      	ldr	r3, [r7, #20]
 800da48:	685b      	ldr	r3, [r3, #4]
 800da4a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800da4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800da4e:	4618      	mov	r0, r3
 800da50:	f009 f9b5 	bl	8016dbe <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800da54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800da56:	4619      	mov	r1, r3
 800da58:	6978      	ldr	r0, [r7, #20]
 800da5a:	f002 fe3f 	bl	80106dc <pbuf_remove_header>
 800da5e:	4603      	mov	r3, r0
 800da60:	2b00      	cmp	r3, #0
 800da62:	d009      	beq.n	800da78 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800da64:	4b49      	ldr	r3, [pc, #292]	; (800db8c <icmp_input+0x230>)
 800da66:	22b6      	movs	r2, #182	; 0xb6
 800da68:	4949      	ldr	r1, [pc, #292]	; (800db90 <icmp_input+0x234>)
 800da6a:	484a      	ldr	r0, [pc, #296]	; (800db94 <icmp_input+0x238>)
 800da6c:	f009 fa52 	bl	8016f14 <iprintf>
          pbuf_free(r);
 800da70:	6978      	ldr	r0, [r7, #20]
 800da72:	f002 feb9 	bl	80107e8 <pbuf_free>
          goto icmperr;
 800da76:	e07d      	b.n	800db74 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800da78:	6879      	ldr	r1, [r7, #4]
 800da7a:	6978      	ldr	r0, [r7, #20]
 800da7c:	f002 ffd8 	bl	8010a30 <pbuf_copy>
 800da80:	4603      	mov	r3, r0
 800da82:	2b00      	cmp	r3, #0
 800da84:	d003      	beq.n	800da8e <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800da86:	6978      	ldr	r0, [r7, #20]
 800da88:	f002 feae 	bl	80107e8 <pbuf_free>
          goto icmperr;
 800da8c:	e072      	b.n	800db74 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 800da8e:	6878      	ldr	r0, [r7, #4]
 800da90:	f002 feaa 	bl	80107e8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800da94:	697b      	ldr	r3, [r7, #20]
 800da96:	607b      	str	r3, [r7, #4]
 800da98:	e00f      	b.n	800daba <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800da9a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800da9c:	330e      	adds	r3, #14
 800da9e:	4619      	mov	r1, r3
 800daa0:	6878      	ldr	r0, [r7, #4]
 800daa2:	f002 fe1b 	bl	80106dc <pbuf_remove_header>
 800daa6:	4603      	mov	r3, r0
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d006      	beq.n	800daba <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800daac:	4b37      	ldr	r3, [pc, #220]	; (800db8c <icmp_input+0x230>)
 800daae:	22c7      	movs	r2, #199	; 0xc7
 800dab0:	4939      	ldr	r1, [pc, #228]	; (800db98 <icmp_input+0x23c>)
 800dab2:	4838      	ldr	r0, [pc, #224]	; (800db94 <icmp_input+0x238>)
 800dab4:	f009 fa2e 	bl	8016f14 <iprintf>
          goto icmperr;
 800dab8:	e05c      	b.n	800db74 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	685b      	ldr	r3, [r3, #4]
 800dabe:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800dac0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dac2:	4619      	mov	r1, r3
 800dac4:	6878      	ldr	r0, [r7, #4]
 800dac6:	f002 fdf9 	bl	80106bc <pbuf_add_header>
 800daca:	4603      	mov	r3, r0
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d13c      	bne.n	800db4a <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	685b      	ldr	r3, [r3, #4]
 800dad4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800dad6:	69fb      	ldr	r3, [r7, #28]
 800dad8:	681a      	ldr	r2, [r3, #0]
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800dade:	4b29      	ldr	r3, [pc, #164]	; (800db84 <icmp_input+0x228>)
 800dae0:	691a      	ldr	r2, [r3, #16]
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800dae6:	693b      	ldr	r3, [r7, #16]
 800dae8:	2200      	movs	r2, #0
 800daea:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800daec:	693b      	ldr	r3, [r7, #16]
 800daee:	885b      	ldrh	r3, [r3, #2]
 800daf0:	b29b      	uxth	r3, r3
 800daf2:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800daf6:	4293      	cmp	r3, r2
 800daf8:	d907      	bls.n	800db0a <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800dafa:	693b      	ldr	r3, [r7, #16]
 800dafc:	885b      	ldrh	r3, [r3, #2]
 800dafe:	b29b      	uxth	r3, r3
 800db00:	3309      	adds	r3, #9
 800db02:	b29a      	uxth	r2, r3
 800db04:	693b      	ldr	r3, [r7, #16]
 800db06:	805a      	strh	r2, [r3, #2]
 800db08:	e006      	b.n	800db18 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800db0a:	693b      	ldr	r3, [r7, #16]
 800db0c:	885b      	ldrh	r3, [r3, #2]
 800db0e:	b29b      	uxth	r3, r3
 800db10:	3308      	adds	r3, #8
 800db12:	b29a      	uxth	r2, r3
 800db14:	693b      	ldr	r3, [r7, #16]
 800db16:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	22ff      	movs	r2, #255	; 0xff
 800db1c:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	2200      	movs	r2, #0
 800db22:	729a      	strb	r2, [r3, #10]
 800db24:	2200      	movs	r2, #0
 800db26:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800db28:	683b      	ldr	r3, [r7, #0]
 800db2a:	9302      	str	r3, [sp, #8]
 800db2c:	2301      	movs	r3, #1
 800db2e:	9301      	str	r3, [sp, #4]
 800db30:	2300      	movs	r3, #0
 800db32:	9300      	str	r3, [sp, #0]
 800db34:	23ff      	movs	r3, #255	; 0xff
 800db36:	2200      	movs	r2, #0
 800db38:	69f9      	ldr	r1, [r7, #28]
 800db3a:	6878      	ldr	r0, [r7, #4]
 800db3c:	f000 fb54 	bl	800e1e8 <ip4_output_if>
 800db40:	4603      	mov	r3, r0
 800db42:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800db44:	e001      	b.n	800db4a <icmp_input+0x1ee>
      break;
 800db46:	bf00      	nop
 800db48:	e000      	b.n	800db4c <icmp_input+0x1f0>
      break;
 800db4a:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800db4c:	6878      	ldr	r0, [r7, #4]
 800db4e:	f002 fe4b 	bl	80107e8 <pbuf_free>
  return;
 800db52:	e013      	b.n	800db7c <icmp_input+0x220>
    goto lenerr;
 800db54:	bf00      	nop
 800db56:	e002      	b.n	800db5e <icmp_input+0x202>
    goto lenerr;
 800db58:	bf00      	nop
 800db5a:	e000      	b.n	800db5e <icmp_input+0x202>
        goto lenerr;
 800db5c:	bf00      	nop
lenerr:
  pbuf_free(p);
 800db5e:	6878      	ldr	r0, [r7, #4]
 800db60:	f002 fe42 	bl	80107e8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800db64:	e00a      	b.n	800db7c <icmp_input+0x220>
        goto icmperr;
 800db66:	bf00      	nop
 800db68:	e004      	b.n	800db74 <icmp_input+0x218>
        goto icmperr;
 800db6a:	bf00      	nop
 800db6c:	e002      	b.n	800db74 <icmp_input+0x218>
          goto icmperr;
 800db6e:	bf00      	nop
 800db70:	e000      	b.n	800db74 <icmp_input+0x218>
          goto icmperr;
 800db72:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800db74:	6878      	ldr	r0, [r7, #4]
 800db76:	f002 fe37 	bl	80107e8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800db7a:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800db7c:	3728      	adds	r7, #40	; 0x28
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd80      	pop	{r7, pc}
 800db82:	bf00      	nop
 800db84:	2401241c 	.word	0x2401241c
 800db88:	24012430 	.word	0x24012430
 800db8c:	08018198 	.word	0x08018198
 800db90:	08018210 	.word	0x08018210
 800db94:	08018248 	.word	0x08018248
 800db98:	08018270 	.word	0x08018270

0800db9c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b082      	sub	sp, #8
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
 800dba4:	460b      	mov	r3, r1
 800dba6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800dba8:	78fb      	ldrb	r3, [r7, #3]
 800dbaa:	461a      	mov	r2, r3
 800dbac:	2103      	movs	r1, #3
 800dbae:	6878      	ldr	r0, [r7, #4]
 800dbb0:	f000 f814 	bl	800dbdc <icmp_send_response>
}
 800dbb4:	bf00      	nop
 800dbb6:	3708      	adds	r7, #8
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	bd80      	pop	{r7, pc}

0800dbbc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b082      	sub	sp, #8
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
 800dbc4:	460b      	mov	r3, r1
 800dbc6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800dbc8:	78fb      	ldrb	r3, [r7, #3]
 800dbca:	461a      	mov	r2, r3
 800dbcc:	210b      	movs	r1, #11
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	f000 f804 	bl	800dbdc <icmp_send_response>
}
 800dbd4:	bf00      	nop
 800dbd6:	3708      	adds	r7, #8
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	bd80      	pop	{r7, pc}

0800dbdc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b08c      	sub	sp, #48	; 0x30
 800dbe0:	af04      	add	r7, sp, #16
 800dbe2:	6078      	str	r0, [r7, #4]
 800dbe4:	460b      	mov	r3, r1
 800dbe6:	70fb      	strb	r3, [r7, #3]
 800dbe8:	4613      	mov	r3, r2
 800dbea:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800dbec:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dbf0:	2124      	movs	r1, #36	; 0x24
 800dbf2:	2022      	movs	r0, #34	; 0x22
 800dbf4:	f002 fb14 	bl	8010220 <pbuf_alloc>
 800dbf8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800dbfa:	69fb      	ldr	r3, [r7, #28]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d056      	beq.n	800dcae <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800dc00:	69fb      	ldr	r3, [r7, #28]
 800dc02:	895b      	ldrh	r3, [r3, #10]
 800dc04:	2b23      	cmp	r3, #35	; 0x23
 800dc06:	d806      	bhi.n	800dc16 <icmp_send_response+0x3a>
 800dc08:	4b2b      	ldr	r3, [pc, #172]	; (800dcb8 <icmp_send_response+0xdc>)
 800dc0a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800dc0e:	492b      	ldr	r1, [pc, #172]	; (800dcbc <icmp_send_response+0xe0>)
 800dc10:	482b      	ldr	r0, [pc, #172]	; (800dcc0 <icmp_send_response+0xe4>)
 800dc12:	f009 f97f 	bl	8016f14 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	685b      	ldr	r3, [r3, #4]
 800dc1a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800dc1c:	69fb      	ldr	r3, [r7, #28]
 800dc1e:	685b      	ldr	r3, [r3, #4]
 800dc20:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800dc22:	697b      	ldr	r3, [r7, #20]
 800dc24:	78fa      	ldrb	r2, [r7, #3]
 800dc26:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800dc28:	697b      	ldr	r3, [r7, #20]
 800dc2a:	78ba      	ldrb	r2, [r7, #2]
 800dc2c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800dc2e:	697b      	ldr	r3, [r7, #20]
 800dc30:	2200      	movs	r2, #0
 800dc32:	711a      	strb	r2, [r3, #4]
 800dc34:	2200      	movs	r2, #0
 800dc36:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800dc38:	697b      	ldr	r3, [r7, #20]
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	719a      	strb	r2, [r3, #6]
 800dc3e:	2200      	movs	r2, #0
 800dc40:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800dc42:	69fb      	ldr	r3, [r7, #28]
 800dc44:	685b      	ldr	r3, [r3, #4]
 800dc46:	f103 0008 	add.w	r0, r3, #8
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	685b      	ldr	r3, [r3, #4]
 800dc4e:	221c      	movs	r2, #28
 800dc50:	4619      	mov	r1, r3
 800dc52:	f009 f8b4 	bl	8016dbe <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800dc56:	69bb      	ldr	r3, [r7, #24]
 800dc58:	68db      	ldr	r3, [r3, #12]
 800dc5a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800dc5c:	f107 030c 	add.w	r3, r7, #12
 800dc60:	4618      	mov	r0, r3
 800dc62:	f000 f903 	bl	800de6c <ip4_route>
 800dc66:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800dc68:	693b      	ldr	r3, [r7, #16]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d01b      	beq.n	800dca6 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800dc6e:	697b      	ldr	r3, [r7, #20]
 800dc70:	2200      	movs	r2, #0
 800dc72:	709a      	strb	r2, [r3, #2]
 800dc74:	2200      	movs	r2, #0
 800dc76:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800dc78:	69fb      	ldr	r3, [r7, #28]
 800dc7a:	895b      	ldrh	r3, [r3, #10]
 800dc7c:	4619      	mov	r1, r3
 800dc7e:	6978      	ldr	r0, [r7, #20]
 800dc80:	f000 f87d 	bl	800dd7e <inet_chksum>
 800dc84:	4603      	mov	r3, r0
 800dc86:	461a      	mov	r2, r3
 800dc88:	697b      	ldr	r3, [r7, #20]
 800dc8a:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800dc8c:	f107 020c 	add.w	r2, r7, #12
 800dc90:	693b      	ldr	r3, [r7, #16]
 800dc92:	9302      	str	r3, [sp, #8]
 800dc94:	2301      	movs	r3, #1
 800dc96:	9301      	str	r3, [sp, #4]
 800dc98:	2300      	movs	r3, #0
 800dc9a:	9300      	str	r3, [sp, #0]
 800dc9c:	23ff      	movs	r3, #255	; 0xff
 800dc9e:	2100      	movs	r1, #0
 800dca0:	69f8      	ldr	r0, [r7, #28]
 800dca2:	f000 faa1 	bl	800e1e8 <ip4_output_if>
  }
  pbuf_free(q);
 800dca6:	69f8      	ldr	r0, [r7, #28]
 800dca8:	f002 fd9e 	bl	80107e8 <pbuf_free>
 800dcac:	e000      	b.n	800dcb0 <icmp_send_response+0xd4>
    return;
 800dcae:	bf00      	nop
}
 800dcb0:	3720      	adds	r7, #32
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	bd80      	pop	{r7, pc}
 800dcb6:	bf00      	nop
 800dcb8:	08018198 	.word	0x08018198
 800dcbc:	080182a4 	.word	0x080182a4
 800dcc0:	08018248 	.word	0x08018248

0800dcc4 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800dcc4:	b480      	push	{r7}
 800dcc6:	b089      	sub	sp, #36	; 0x24
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
 800dccc:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800dcda:	69fb      	ldr	r3, [r7, #28]
 800dcdc:	f003 0301 	and.w	r3, r3, #1
 800dce0:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800dce2:	693b      	ldr	r3, [r7, #16]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d00d      	beq.n	800dd04 <lwip_standard_chksum+0x40>
 800dce8:	683b      	ldr	r3, [r7, #0]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	dd0a      	ble.n	800dd04 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800dcee:	69fa      	ldr	r2, [r7, #28]
 800dcf0:	1c53      	adds	r3, r2, #1
 800dcf2:	61fb      	str	r3, [r7, #28]
 800dcf4:	f107 030e 	add.w	r3, r7, #14
 800dcf8:	3301      	adds	r3, #1
 800dcfa:	7812      	ldrb	r2, [r2, #0]
 800dcfc:	701a      	strb	r2, [r3, #0]
    len--;
 800dcfe:	683b      	ldr	r3, [r7, #0]
 800dd00:	3b01      	subs	r3, #1
 800dd02:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800dd04:	69fb      	ldr	r3, [r7, #28]
 800dd06:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800dd08:	e00a      	b.n	800dd20 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800dd0a:	69bb      	ldr	r3, [r7, #24]
 800dd0c:	1c9a      	adds	r2, r3, #2
 800dd0e:	61ba      	str	r2, [r7, #24]
 800dd10:	881b      	ldrh	r3, [r3, #0]
 800dd12:	461a      	mov	r2, r3
 800dd14:	697b      	ldr	r3, [r7, #20]
 800dd16:	4413      	add	r3, r2
 800dd18:	617b      	str	r3, [r7, #20]
    len -= 2;
 800dd1a:	683b      	ldr	r3, [r7, #0]
 800dd1c:	3b02      	subs	r3, #2
 800dd1e:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	2b01      	cmp	r3, #1
 800dd24:	dcf1      	bgt.n	800dd0a <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800dd26:	683b      	ldr	r3, [r7, #0]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	dd04      	ble.n	800dd36 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800dd2c:	f107 030e 	add.w	r3, r7, #14
 800dd30:	69ba      	ldr	r2, [r7, #24]
 800dd32:	7812      	ldrb	r2, [r2, #0]
 800dd34:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800dd36:	89fb      	ldrh	r3, [r7, #14]
 800dd38:	461a      	mov	r2, r3
 800dd3a:	697b      	ldr	r3, [r7, #20]
 800dd3c:	4413      	add	r3, r2
 800dd3e:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800dd40:	697b      	ldr	r3, [r7, #20]
 800dd42:	0c1a      	lsrs	r2, r3, #16
 800dd44:	697b      	ldr	r3, [r7, #20]
 800dd46:	b29b      	uxth	r3, r3
 800dd48:	4413      	add	r3, r2
 800dd4a:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800dd4c:	697b      	ldr	r3, [r7, #20]
 800dd4e:	0c1a      	lsrs	r2, r3, #16
 800dd50:	697b      	ldr	r3, [r7, #20]
 800dd52:	b29b      	uxth	r3, r3
 800dd54:	4413      	add	r3, r2
 800dd56:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800dd58:	693b      	ldr	r3, [r7, #16]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d007      	beq.n	800dd6e <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800dd5e:	697b      	ldr	r3, [r7, #20]
 800dd60:	021b      	lsls	r3, r3, #8
 800dd62:	b29a      	uxth	r2, r3
 800dd64:	697b      	ldr	r3, [r7, #20]
 800dd66:	0a1b      	lsrs	r3, r3, #8
 800dd68:	b2db      	uxtb	r3, r3
 800dd6a:	4313      	orrs	r3, r2
 800dd6c:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800dd6e:	697b      	ldr	r3, [r7, #20]
 800dd70:	b29b      	uxth	r3, r3
}
 800dd72:	4618      	mov	r0, r3
 800dd74:	3724      	adds	r7, #36	; 0x24
 800dd76:	46bd      	mov	sp, r7
 800dd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7c:	4770      	bx	lr

0800dd7e <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800dd7e:	b580      	push	{r7, lr}
 800dd80:	b082      	sub	sp, #8
 800dd82:	af00      	add	r7, sp, #0
 800dd84:	6078      	str	r0, [r7, #4]
 800dd86:	460b      	mov	r3, r1
 800dd88:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800dd8a:	887b      	ldrh	r3, [r7, #2]
 800dd8c:	4619      	mov	r1, r3
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	f7ff ff98 	bl	800dcc4 <lwip_standard_chksum>
 800dd94:	4603      	mov	r3, r0
 800dd96:	43db      	mvns	r3, r3
 800dd98:	b29b      	uxth	r3, r3
}
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	3708      	adds	r7, #8
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bd80      	pop	{r7, pc}

0800dda2 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800dda2:	b580      	push	{r7, lr}
 800dda4:	b086      	sub	sp, #24
 800dda6:	af00      	add	r7, sp, #0
 800dda8:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800ddaa:	2300      	movs	r3, #0
 800ddac:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800ddae:	2300      	movs	r3, #0
 800ddb0:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	613b      	str	r3, [r7, #16]
 800ddb6:	e02b      	b.n	800de10 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800ddb8:	693b      	ldr	r3, [r7, #16]
 800ddba:	685a      	ldr	r2, [r3, #4]
 800ddbc:	693b      	ldr	r3, [r7, #16]
 800ddbe:	895b      	ldrh	r3, [r3, #10]
 800ddc0:	4619      	mov	r1, r3
 800ddc2:	4610      	mov	r0, r2
 800ddc4:	f7ff ff7e 	bl	800dcc4 <lwip_standard_chksum>
 800ddc8:	4603      	mov	r3, r0
 800ddca:	461a      	mov	r2, r3
 800ddcc:	697b      	ldr	r3, [r7, #20]
 800ddce:	4413      	add	r3, r2
 800ddd0:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800ddd2:	697b      	ldr	r3, [r7, #20]
 800ddd4:	0c1a      	lsrs	r2, r3, #16
 800ddd6:	697b      	ldr	r3, [r7, #20]
 800ddd8:	b29b      	uxth	r3, r3
 800ddda:	4413      	add	r3, r2
 800dddc:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800ddde:	693b      	ldr	r3, [r7, #16]
 800dde0:	895b      	ldrh	r3, [r3, #10]
 800dde2:	f003 0301 	and.w	r3, r3, #1
 800dde6:	b29b      	uxth	r3, r3
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d00e      	beq.n	800de0a <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	bf0c      	ite	eq
 800ddf2:	2301      	moveq	r3, #1
 800ddf4:	2300      	movne	r3, #0
 800ddf6:	b2db      	uxtb	r3, r3
 800ddf8:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800ddfa:	697b      	ldr	r3, [r7, #20]
 800ddfc:	021b      	lsls	r3, r3, #8
 800ddfe:	b29a      	uxth	r2, r3
 800de00:	697b      	ldr	r3, [r7, #20]
 800de02:	0a1b      	lsrs	r3, r3, #8
 800de04:	b2db      	uxtb	r3, r3
 800de06:	4313      	orrs	r3, r2
 800de08:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800de0a:	693b      	ldr	r3, [r7, #16]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	613b      	str	r3, [r7, #16]
 800de10:	693b      	ldr	r3, [r7, #16]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d1d0      	bne.n	800ddb8 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d007      	beq.n	800de2c <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800de1c:	697b      	ldr	r3, [r7, #20]
 800de1e:	021b      	lsls	r3, r3, #8
 800de20:	b29a      	uxth	r2, r3
 800de22:	697b      	ldr	r3, [r7, #20]
 800de24:	0a1b      	lsrs	r3, r3, #8
 800de26:	b2db      	uxtb	r3, r3
 800de28:	4313      	orrs	r3, r2
 800de2a:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800de2c:	697b      	ldr	r3, [r7, #20]
 800de2e:	b29b      	uxth	r3, r3
 800de30:	43db      	mvns	r3, r3
 800de32:	b29b      	uxth	r3, r3
}
 800de34:	4618      	mov	r0, r3
 800de36:	3718      	adds	r7, #24
 800de38:	46bd      	mov	sp, r7
 800de3a:	bd80      	pop	{r7, pc}

0800de3c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b082      	sub	sp, #8
 800de40:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800de42:	2300      	movs	r3, #0
 800de44:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800de46:	f002 ffdf 	bl	8010e08 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800de4a:	f001 f9eb 	bl	800f224 <mem_init>
  memp_init();
 800de4e:	f001 fd43 	bl	800f8d8 <memp_init>
  pbuf_init();
  netif_init();
 800de52:	f001 fe4f 	bl	800faf4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800de56:	f008 fccb 	bl	80167f0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800de5a:	f003 f851 	bl	8010f00 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800de5e:	f008 fc0d 	bl	801667c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800de62:	bf00      	nop
 800de64:	3708      	adds	r7, #8
 800de66:	46bd      	mov	sp, r7
 800de68:	bd80      	pop	{r7, pc}
	...

0800de6c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800de6c:	b480      	push	{r7}
 800de6e:	b085      	sub	sp, #20
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800de74:	4b33      	ldr	r3, [pc, #204]	; (800df44 <ip4_route+0xd8>)
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	60fb      	str	r3, [r7, #12]
 800de7a:	e036      	b.n	800deea <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800de82:	f003 0301 	and.w	r3, r3, #1
 800de86:	b2db      	uxtb	r3, r3
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d02b      	beq.n	800dee4 <ip4_route+0x78>
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800de92:	089b      	lsrs	r3, r3, #2
 800de94:	f003 0301 	and.w	r3, r3, #1
 800de98:	b2db      	uxtb	r3, r3
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d022      	beq.n	800dee4 <ip4_route+0x78>
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	3304      	adds	r3, #4
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d01d      	beq.n	800dee4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681a      	ldr	r2, [r3, #0]
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	3304      	adds	r3, #4
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	405a      	eors	r2, r3
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	3308      	adds	r3, #8
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	4013      	ands	r3, r2
 800debc:	2b00      	cmp	r3, #0
 800debe:	d101      	bne.n	800dec4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	e038      	b.n	800df36 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800deca:	f003 0302 	and.w	r3, r3, #2
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d108      	bne.n	800dee4 <ip4_route+0x78>
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	681a      	ldr	r2, [r3, #0]
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	330c      	adds	r3, #12
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	429a      	cmp	r2, r3
 800dede:	d101      	bne.n	800dee4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	e028      	b.n	800df36 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	60fb      	str	r3, [r7, #12]
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d1c5      	bne.n	800de7c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800def0:	4b15      	ldr	r3, [pc, #84]	; (800df48 <ip4_route+0xdc>)
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d01a      	beq.n	800df2e <ip4_route+0xc2>
 800def8:	4b13      	ldr	r3, [pc, #76]	; (800df48 <ip4_route+0xdc>)
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800df00:	f003 0301 	and.w	r3, r3, #1
 800df04:	2b00      	cmp	r3, #0
 800df06:	d012      	beq.n	800df2e <ip4_route+0xc2>
 800df08:	4b0f      	ldr	r3, [pc, #60]	; (800df48 <ip4_route+0xdc>)
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800df10:	f003 0304 	and.w	r3, r3, #4
 800df14:	2b00      	cmp	r3, #0
 800df16:	d00a      	beq.n	800df2e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800df18:	4b0b      	ldr	r3, [pc, #44]	; (800df48 <ip4_route+0xdc>)
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	3304      	adds	r3, #4
 800df1e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800df20:	2b00      	cmp	r3, #0
 800df22:	d004      	beq.n	800df2e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	b2db      	uxtb	r3, r3
 800df2a:	2b7f      	cmp	r3, #127	; 0x7f
 800df2c:	d101      	bne.n	800df32 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800df2e:	2300      	movs	r3, #0
 800df30:	e001      	b.n	800df36 <ip4_route+0xca>
  }

  return netif_default;
 800df32:	4b05      	ldr	r3, [pc, #20]	; (800df48 <ip4_route+0xdc>)
 800df34:	681b      	ldr	r3, [r3, #0]
}
 800df36:	4618      	mov	r0, r3
 800df38:	3714      	adds	r7, #20
 800df3a:	46bd      	mov	sp, r7
 800df3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df40:	4770      	bx	lr
 800df42:	bf00      	nop
 800df44:	2401551c 	.word	0x2401551c
 800df48:	24015520 	.word	0x24015520

0800df4c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b082      	sub	sp, #8
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800df5a:	f003 0301 	and.w	r3, r3, #1
 800df5e:	b2db      	uxtb	r3, r3
 800df60:	2b00      	cmp	r3, #0
 800df62:	d016      	beq.n	800df92 <ip4_input_accept+0x46>
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	3304      	adds	r3, #4
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d011      	beq.n	800df92 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800df6e:	4b0b      	ldr	r3, [pc, #44]	; (800df9c <ip4_input_accept+0x50>)
 800df70:	695a      	ldr	r2, [r3, #20]
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	3304      	adds	r3, #4
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	429a      	cmp	r2, r3
 800df7a:	d008      	beq.n	800df8e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800df7c:	4b07      	ldr	r3, [pc, #28]	; (800df9c <ip4_input_accept+0x50>)
 800df7e:	695b      	ldr	r3, [r3, #20]
 800df80:	6879      	ldr	r1, [r7, #4]
 800df82:	4618      	mov	r0, r3
 800df84:	f000 fa08 	bl	800e398 <ip4_addr_isbroadcast_u32>
 800df88:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d001      	beq.n	800df92 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800df8e:	2301      	movs	r3, #1
 800df90:	e000      	b.n	800df94 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800df92:	2300      	movs	r3, #0
}
 800df94:	4618      	mov	r0, r3
 800df96:	3708      	adds	r7, #8
 800df98:	46bd      	mov	sp, r7
 800df9a:	bd80      	pop	{r7, pc}
 800df9c:	2401241c 	.word	0x2401241c

0800dfa0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b086      	sub	sp, #24
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
 800dfa8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	685b      	ldr	r3, [r3, #4]
 800dfae:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800dfb0:	697b      	ldr	r3, [r7, #20]
 800dfb2:	781b      	ldrb	r3, [r3, #0]
 800dfb4:	091b      	lsrs	r3, r3, #4
 800dfb6:	b2db      	uxtb	r3, r3
 800dfb8:	2b04      	cmp	r3, #4
 800dfba:	d004      	beq.n	800dfc6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800dfbc:	6878      	ldr	r0, [r7, #4]
 800dfbe:	f002 fc13 	bl	80107e8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	e107      	b.n	800e1d6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800dfc6:	697b      	ldr	r3, [r7, #20]
 800dfc8:	781b      	ldrb	r3, [r3, #0]
 800dfca:	f003 030f 	and.w	r3, r3, #15
 800dfce:	b2db      	uxtb	r3, r3
 800dfd0:	009b      	lsls	r3, r3, #2
 800dfd2:	b2db      	uxtb	r3, r3
 800dfd4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800dfd6:	697b      	ldr	r3, [r7, #20]
 800dfd8:	885b      	ldrh	r3, [r3, #2]
 800dfda:	b29b      	uxth	r3, r3
 800dfdc:	4618      	mov	r0, r3
 800dfde:	f7fe fc6d 	bl	800c8bc <lwip_htons>
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	891b      	ldrh	r3, [r3, #8]
 800dfea:	89ba      	ldrh	r2, [r7, #12]
 800dfec:	429a      	cmp	r2, r3
 800dfee:	d204      	bcs.n	800dffa <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800dff0:	89bb      	ldrh	r3, [r7, #12]
 800dff2:	4619      	mov	r1, r3
 800dff4:	6878      	ldr	r0, [r7, #4]
 800dff6:	f002 fa71 	bl	80104dc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	895b      	ldrh	r3, [r3, #10]
 800dffe:	89fa      	ldrh	r2, [r7, #14]
 800e000:	429a      	cmp	r2, r3
 800e002:	d807      	bhi.n	800e014 <ip4_input+0x74>
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	891b      	ldrh	r3, [r3, #8]
 800e008:	89ba      	ldrh	r2, [r7, #12]
 800e00a:	429a      	cmp	r2, r3
 800e00c:	d802      	bhi.n	800e014 <ip4_input+0x74>
 800e00e:	89fb      	ldrh	r3, [r7, #14]
 800e010:	2b13      	cmp	r3, #19
 800e012:	d804      	bhi.n	800e01e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800e014:	6878      	ldr	r0, [r7, #4]
 800e016:	f002 fbe7 	bl	80107e8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800e01a:	2300      	movs	r3, #0
 800e01c:	e0db      	b.n	800e1d6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800e01e:	697b      	ldr	r3, [r7, #20]
 800e020:	691b      	ldr	r3, [r3, #16]
 800e022:	4a6f      	ldr	r2, [pc, #444]	; (800e1e0 <ip4_input+0x240>)
 800e024:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800e026:	697b      	ldr	r3, [r7, #20]
 800e028:	68db      	ldr	r3, [r3, #12]
 800e02a:	4a6d      	ldr	r2, [pc, #436]	; (800e1e0 <ip4_input+0x240>)
 800e02c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e02e:	4b6c      	ldr	r3, [pc, #432]	; (800e1e0 <ip4_input+0x240>)
 800e030:	695b      	ldr	r3, [r3, #20]
 800e032:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e036:	2be0      	cmp	r3, #224	; 0xe0
 800e038:	d112      	bne.n	800e060 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800e03a:	683b      	ldr	r3, [r7, #0]
 800e03c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e040:	f003 0301 	and.w	r3, r3, #1
 800e044:	b2db      	uxtb	r3, r3
 800e046:	2b00      	cmp	r3, #0
 800e048:	d007      	beq.n	800e05a <ip4_input+0xba>
 800e04a:	683b      	ldr	r3, [r7, #0]
 800e04c:	3304      	adds	r3, #4
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d002      	beq.n	800e05a <ip4_input+0xba>
      netif = inp;
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	613b      	str	r3, [r7, #16]
 800e058:	e02a      	b.n	800e0b0 <ip4_input+0x110>
    } else {
      netif = NULL;
 800e05a:	2300      	movs	r3, #0
 800e05c:	613b      	str	r3, [r7, #16]
 800e05e:	e027      	b.n	800e0b0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800e060:	6838      	ldr	r0, [r7, #0]
 800e062:	f7ff ff73 	bl	800df4c <ip4_input_accept>
 800e066:	4603      	mov	r3, r0
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d002      	beq.n	800e072 <ip4_input+0xd2>
      netif = inp;
 800e06c:	683b      	ldr	r3, [r7, #0]
 800e06e:	613b      	str	r3, [r7, #16]
 800e070:	e01e      	b.n	800e0b0 <ip4_input+0x110>
    } else {
      netif = NULL;
 800e072:	2300      	movs	r3, #0
 800e074:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800e076:	4b5a      	ldr	r3, [pc, #360]	; (800e1e0 <ip4_input+0x240>)
 800e078:	695b      	ldr	r3, [r3, #20]
 800e07a:	b2db      	uxtb	r3, r3
 800e07c:	2b7f      	cmp	r3, #127	; 0x7f
 800e07e:	d017      	beq.n	800e0b0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800e080:	4b58      	ldr	r3, [pc, #352]	; (800e1e4 <ip4_input+0x244>)
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	613b      	str	r3, [r7, #16]
 800e086:	e00e      	b.n	800e0a6 <ip4_input+0x106>
          if (netif == inp) {
 800e088:	693a      	ldr	r2, [r7, #16]
 800e08a:	683b      	ldr	r3, [r7, #0]
 800e08c:	429a      	cmp	r2, r3
 800e08e:	d006      	beq.n	800e09e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800e090:	6938      	ldr	r0, [r7, #16]
 800e092:	f7ff ff5b 	bl	800df4c <ip4_input_accept>
 800e096:	4603      	mov	r3, r0
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d108      	bne.n	800e0ae <ip4_input+0x10e>
 800e09c:	e000      	b.n	800e0a0 <ip4_input+0x100>
            continue;
 800e09e:	bf00      	nop
        NETIF_FOREACH(netif) {
 800e0a0:	693b      	ldr	r3, [r7, #16]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	613b      	str	r3, [r7, #16]
 800e0a6:	693b      	ldr	r3, [r7, #16]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d1ed      	bne.n	800e088 <ip4_input+0xe8>
 800e0ac:	e000      	b.n	800e0b0 <ip4_input+0x110>
            break;
 800e0ae:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e0b0:	4b4b      	ldr	r3, [pc, #300]	; (800e1e0 <ip4_input+0x240>)
 800e0b2:	691b      	ldr	r3, [r3, #16]
 800e0b4:	6839      	ldr	r1, [r7, #0]
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	f000 f96e 	bl	800e398 <ip4_addr_isbroadcast_u32>
 800e0bc:	4603      	mov	r3, r0
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d105      	bne.n	800e0ce <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800e0c2:	4b47      	ldr	r3, [pc, #284]	; (800e1e0 <ip4_input+0x240>)
 800e0c4:	691b      	ldr	r3, [r3, #16]
 800e0c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e0ca:	2be0      	cmp	r3, #224	; 0xe0
 800e0cc:	d104      	bne.n	800e0d8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800e0ce:	6878      	ldr	r0, [r7, #4]
 800e0d0:	f002 fb8a 	bl	80107e8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	e07e      	b.n	800e1d6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800e0d8:	693b      	ldr	r3, [r7, #16]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d104      	bne.n	800e0e8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800e0de:	6878      	ldr	r0, [r7, #4]
 800e0e0:	f002 fb82 	bl	80107e8 <pbuf_free>
    return ERR_OK;
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	e076      	b.n	800e1d6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800e0e8:	697b      	ldr	r3, [r7, #20]
 800e0ea:	88db      	ldrh	r3, [r3, #6]
 800e0ec:	b29b      	uxth	r3, r3
 800e0ee:	461a      	mov	r2, r3
 800e0f0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800e0f4:	4013      	ands	r3, r2
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d00b      	beq.n	800e112 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800e0fa:	6878      	ldr	r0, [r7, #4]
 800e0fc:	f000 fc92 	bl	800ea24 <ip4_reass>
 800e100:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d101      	bne.n	800e10c <ip4_input+0x16c>
      return ERR_OK;
 800e108:	2300      	movs	r3, #0
 800e10a:	e064      	b.n	800e1d6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	685b      	ldr	r3, [r3, #4]
 800e110:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800e112:	4a33      	ldr	r2, [pc, #204]	; (800e1e0 <ip4_input+0x240>)
 800e114:	693b      	ldr	r3, [r7, #16]
 800e116:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800e118:	4a31      	ldr	r2, [pc, #196]	; (800e1e0 <ip4_input+0x240>)
 800e11a:	683b      	ldr	r3, [r7, #0]
 800e11c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800e11e:	4a30      	ldr	r2, [pc, #192]	; (800e1e0 <ip4_input+0x240>)
 800e120:	697b      	ldr	r3, [r7, #20]
 800e122:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800e124:	697b      	ldr	r3, [r7, #20]
 800e126:	781b      	ldrb	r3, [r3, #0]
 800e128:	f003 030f 	and.w	r3, r3, #15
 800e12c:	b2db      	uxtb	r3, r3
 800e12e:	009b      	lsls	r3, r3, #2
 800e130:	b2db      	uxtb	r3, r3
 800e132:	b29a      	uxth	r2, r3
 800e134:	4b2a      	ldr	r3, [pc, #168]	; (800e1e0 <ip4_input+0x240>)
 800e136:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800e138:	89fb      	ldrh	r3, [r7, #14]
 800e13a:	4619      	mov	r1, r3
 800e13c:	6878      	ldr	r0, [r7, #4]
 800e13e:	f002 facd 	bl	80106dc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800e142:	697b      	ldr	r3, [r7, #20]
 800e144:	7a5b      	ldrb	r3, [r3, #9]
 800e146:	2b11      	cmp	r3, #17
 800e148:	d006      	beq.n	800e158 <ip4_input+0x1b8>
 800e14a:	2b11      	cmp	r3, #17
 800e14c:	dc13      	bgt.n	800e176 <ip4_input+0x1d6>
 800e14e:	2b01      	cmp	r3, #1
 800e150:	d00c      	beq.n	800e16c <ip4_input+0x1cc>
 800e152:	2b06      	cmp	r3, #6
 800e154:	d005      	beq.n	800e162 <ip4_input+0x1c2>
 800e156:	e00e      	b.n	800e176 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800e158:	6839      	ldr	r1, [r7, #0]
 800e15a:	6878      	ldr	r0, [r7, #4]
 800e15c:	f008 fbbe 	bl	80168dc <udp_input>
        break;
 800e160:	e026      	b.n	800e1b0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800e162:	6839      	ldr	r1, [r7, #0]
 800e164:	6878      	ldr	r0, [r7, #4]
 800e166:	f004 fa65 	bl	8012634 <tcp_input>
        break;
 800e16a:	e021      	b.n	800e1b0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800e16c:	6839      	ldr	r1, [r7, #0]
 800e16e:	6878      	ldr	r0, [r7, #4]
 800e170:	f7ff fbf4 	bl	800d95c <icmp_input>
        break;
 800e174:	e01c      	b.n	800e1b0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e176:	4b1a      	ldr	r3, [pc, #104]	; (800e1e0 <ip4_input+0x240>)
 800e178:	695b      	ldr	r3, [r3, #20]
 800e17a:	6939      	ldr	r1, [r7, #16]
 800e17c:	4618      	mov	r0, r3
 800e17e:	f000 f90b 	bl	800e398 <ip4_addr_isbroadcast_u32>
 800e182:	4603      	mov	r3, r0
 800e184:	2b00      	cmp	r3, #0
 800e186:	d10f      	bne.n	800e1a8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e188:	4b15      	ldr	r3, [pc, #84]	; (800e1e0 <ip4_input+0x240>)
 800e18a:	695b      	ldr	r3, [r3, #20]
 800e18c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e190:	2be0      	cmp	r3, #224	; 0xe0
 800e192:	d009      	beq.n	800e1a8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800e194:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e198:	4619      	mov	r1, r3
 800e19a:	6878      	ldr	r0, [r7, #4]
 800e19c:	f002 fb11 	bl	80107c2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800e1a0:	2102      	movs	r1, #2
 800e1a2:	6878      	ldr	r0, [r7, #4]
 800e1a4:	f7ff fcfa 	bl	800db9c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800e1a8:	6878      	ldr	r0, [r7, #4]
 800e1aa:	f002 fb1d 	bl	80107e8 <pbuf_free>
        break;
 800e1ae:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800e1b0:	4b0b      	ldr	r3, [pc, #44]	; (800e1e0 <ip4_input+0x240>)
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800e1b6:	4b0a      	ldr	r3, [pc, #40]	; (800e1e0 <ip4_input+0x240>)
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800e1bc:	4b08      	ldr	r3, [pc, #32]	; (800e1e0 <ip4_input+0x240>)
 800e1be:	2200      	movs	r2, #0
 800e1c0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800e1c2:	4b07      	ldr	r3, [pc, #28]	; (800e1e0 <ip4_input+0x240>)
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800e1c8:	4b05      	ldr	r3, [pc, #20]	; (800e1e0 <ip4_input+0x240>)
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800e1ce:	4b04      	ldr	r3, [pc, #16]	; (800e1e0 <ip4_input+0x240>)
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800e1d4:	2300      	movs	r3, #0
}
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	3718      	adds	r7, #24
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	bd80      	pop	{r7, pc}
 800e1de:	bf00      	nop
 800e1e0:	2401241c 	.word	0x2401241c
 800e1e4:	2401551c 	.word	0x2401551c

0800e1e8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b08a      	sub	sp, #40	; 0x28
 800e1ec:	af04      	add	r7, sp, #16
 800e1ee:	60f8      	str	r0, [r7, #12]
 800e1f0:	60b9      	str	r1, [r7, #8]
 800e1f2:	607a      	str	r2, [r7, #4]
 800e1f4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800e1f6:	68bb      	ldr	r3, [r7, #8]
 800e1f8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d009      	beq.n	800e214 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800e200:	68bb      	ldr	r3, [r7, #8]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d003      	beq.n	800e20e <ip4_output_if+0x26>
 800e206:	68bb      	ldr	r3, [r7, #8]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d102      	bne.n	800e214 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800e20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e210:	3304      	adds	r3, #4
 800e212:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800e214:	78fa      	ldrb	r2, [r7, #3]
 800e216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e218:	9302      	str	r3, [sp, #8]
 800e21a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e21e:	9301      	str	r3, [sp, #4]
 800e220:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e224:	9300      	str	r3, [sp, #0]
 800e226:	4613      	mov	r3, r2
 800e228:	687a      	ldr	r2, [r7, #4]
 800e22a:	6979      	ldr	r1, [r7, #20]
 800e22c:	68f8      	ldr	r0, [r7, #12]
 800e22e:	f000 f805 	bl	800e23c <ip4_output_if_src>
 800e232:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800e234:	4618      	mov	r0, r3
 800e236:	3718      	adds	r7, #24
 800e238:	46bd      	mov	sp, r7
 800e23a:	bd80      	pop	{r7, pc}

0800e23c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b088      	sub	sp, #32
 800e240:	af00      	add	r7, sp, #0
 800e242:	60f8      	str	r0, [r7, #12]
 800e244:	60b9      	str	r1, [r7, #8]
 800e246:	607a      	str	r2, [r7, #4]
 800e248:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	7b9b      	ldrb	r3, [r3, #14]
 800e24e:	2b01      	cmp	r3, #1
 800e250:	d006      	beq.n	800e260 <ip4_output_if_src+0x24>
 800e252:	4b4b      	ldr	r3, [pc, #300]	; (800e380 <ip4_output_if_src+0x144>)
 800e254:	f44f 7255 	mov.w	r2, #852	; 0x354
 800e258:	494a      	ldr	r1, [pc, #296]	; (800e384 <ip4_output_if_src+0x148>)
 800e25a:	484b      	ldr	r0, [pc, #300]	; (800e388 <ip4_output_if_src+0x14c>)
 800e25c:	f008 fe5a 	bl	8016f14 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d060      	beq.n	800e328 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800e266:	2314      	movs	r3, #20
 800e268:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800e26a:	2114      	movs	r1, #20
 800e26c:	68f8      	ldr	r0, [r7, #12]
 800e26e:	f002 fa25 	bl	80106bc <pbuf_add_header>
 800e272:	4603      	mov	r3, r0
 800e274:	2b00      	cmp	r3, #0
 800e276:	d002      	beq.n	800e27e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e278:	f06f 0301 	mvn.w	r3, #1
 800e27c:	e07c      	b.n	800e378 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	685b      	ldr	r3, [r3, #4]
 800e282:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	895b      	ldrh	r3, [r3, #10]
 800e288:	2b13      	cmp	r3, #19
 800e28a:	d806      	bhi.n	800e29a <ip4_output_if_src+0x5e>
 800e28c:	4b3c      	ldr	r3, [pc, #240]	; (800e380 <ip4_output_if_src+0x144>)
 800e28e:	f44f 7262 	mov.w	r2, #904	; 0x388
 800e292:	493e      	ldr	r1, [pc, #248]	; (800e38c <ip4_output_if_src+0x150>)
 800e294:	483c      	ldr	r0, [pc, #240]	; (800e388 <ip4_output_if_src+0x14c>)
 800e296:	f008 fe3d 	bl	8016f14 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800e29a:	69fb      	ldr	r3, [r7, #28]
 800e29c:	78fa      	ldrb	r2, [r7, #3]
 800e29e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800e2a0:	69fb      	ldr	r3, [r7, #28]
 800e2a2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800e2a6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681a      	ldr	r2, [r3, #0]
 800e2ac:	69fb      	ldr	r3, [r7, #28]
 800e2ae:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800e2b0:	8b7b      	ldrh	r3, [r7, #26]
 800e2b2:	089b      	lsrs	r3, r3, #2
 800e2b4:	b29b      	uxth	r3, r3
 800e2b6:	b2db      	uxtb	r3, r3
 800e2b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2bc:	b2da      	uxtb	r2, r3
 800e2be:	69fb      	ldr	r3, [r7, #28]
 800e2c0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800e2c2:	69fb      	ldr	r3, [r7, #28]
 800e2c4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e2c8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	891b      	ldrh	r3, [r3, #8]
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	f7fe faf4 	bl	800c8bc <lwip_htons>
 800e2d4:	4603      	mov	r3, r0
 800e2d6:	461a      	mov	r2, r3
 800e2d8:	69fb      	ldr	r3, [r7, #28]
 800e2da:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800e2dc:	69fb      	ldr	r3, [r7, #28]
 800e2de:	2200      	movs	r2, #0
 800e2e0:	719a      	strb	r2, [r3, #6]
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800e2e6:	4b2a      	ldr	r3, [pc, #168]	; (800e390 <ip4_output_if_src+0x154>)
 800e2e8:	881b      	ldrh	r3, [r3, #0]
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	f7fe fae6 	bl	800c8bc <lwip_htons>
 800e2f0:	4603      	mov	r3, r0
 800e2f2:	461a      	mov	r2, r3
 800e2f4:	69fb      	ldr	r3, [r7, #28]
 800e2f6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800e2f8:	4b25      	ldr	r3, [pc, #148]	; (800e390 <ip4_output_if_src+0x154>)
 800e2fa:	881b      	ldrh	r3, [r3, #0]
 800e2fc:	3301      	adds	r3, #1
 800e2fe:	b29a      	uxth	r2, r3
 800e300:	4b23      	ldr	r3, [pc, #140]	; (800e390 <ip4_output_if_src+0x154>)
 800e302:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800e304:	68bb      	ldr	r3, [r7, #8]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d104      	bne.n	800e314 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800e30a:	4b22      	ldr	r3, [pc, #136]	; (800e394 <ip4_output_if_src+0x158>)
 800e30c:	681a      	ldr	r2, [r3, #0]
 800e30e:	69fb      	ldr	r3, [r7, #28]
 800e310:	60da      	str	r2, [r3, #12]
 800e312:	e003      	b.n	800e31c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800e314:	68bb      	ldr	r3, [r7, #8]
 800e316:	681a      	ldr	r2, [r3, #0]
 800e318:	69fb      	ldr	r3, [r7, #28]
 800e31a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800e31c:	69fb      	ldr	r3, [r7, #28]
 800e31e:	2200      	movs	r2, #0
 800e320:	729a      	strb	r2, [r3, #10]
 800e322:	2200      	movs	r2, #0
 800e324:	72da      	strb	r2, [r3, #11]
 800e326:	e00f      	b.n	800e348 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	895b      	ldrh	r3, [r3, #10]
 800e32c:	2b13      	cmp	r3, #19
 800e32e:	d802      	bhi.n	800e336 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e330:	f06f 0301 	mvn.w	r3, #1
 800e334:	e020      	b.n	800e378 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	685b      	ldr	r3, [r3, #4]
 800e33a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800e33c:	69fb      	ldr	r3, [r7, #28]
 800e33e:	691b      	ldr	r3, [r3, #16]
 800e340:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800e342:	f107 0314 	add.w	r3, r7, #20
 800e346:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800e348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e34a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d00c      	beq.n	800e36a <ip4_output_if_src+0x12e>
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	891a      	ldrh	r2, [r3, #8]
 800e354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e356:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e358:	429a      	cmp	r2, r3
 800e35a:	d906      	bls.n	800e36a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800e35c:	687a      	ldr	r2, [r7, #4]
 800e35e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e360:	68f8      	ldr	r0, [r7, #12]
 800e362:	f000 fd53 	bl	800ee0c <ip4_frag>
 800e366:	4603      	mov	r3, r0
 800e368:	e006      	b.n	800e378 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800e36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e36c:	695b      	ldr	r3, [r3, #20]
 800e36e:	687a      	ldr	r2, [r7, #4]
 800e370:	68f9      	ldr	r1, [r7, #12]
 800e372:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e374:	4798      	blx	r3
 800e376:	4603      	mov	r3, r0
}
 800e378:	4618      	mov	r0, r3
 800e37a:	3720      	adds	r7, #32
 800e37c:	46bd      	mov	sp, r7
 800e37e:	bd80      	pop	{r7, pc}
 800e380:	080182d0 	.word	0x080182d0
 800e384:	08018348 	.word	0x08018348
 800e388:	08018354 	.word	0x08018354
 800e38c:	0801837c 	.word	0x0801837c
 800e390:	24012434 	.word	0x24012434
 800e394:	0801ace0 	.word	0x0801ace0

0800e398 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800e398:	b480      	push	{r7}
 800e39a:	b085      	sub	sp, #20
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
 800e3a0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3ac:	d002      	beq.n	800e3b4 <ip4_addr_isbroadcast_u32+0x1c>
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d101      	bne.n	800e3b8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800e3b4:	2301      	movs	r3, #1
 800e3b6:	e02a      	b.n	800e40e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800e3b8:	683b      	ldr	r3, [r7, #0]
 800e3ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e3be:	f003 0302 	and.w	r3, r3, #2
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d101      	bne.n	800e3ca <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	e021      	b.n	800e40e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800e3ca:	683b      	ldr	r3, [r7, #0]
 800e3cc:	3304      	adds	r3, #4
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	687a      	ldr	r2, [r7, #4]
 800e3d2:	429a      	cmp	r2, r3
 800e3d4:	d101      	bne.n	800e3da <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	e019      	b.n	800e40e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800e3da:	68fa      	ldr	r2, [r7, #12]
 800e3dc:	683b      	ldr	r3, [r7, #0]
 800e3de:	3304      	adds	r3, #4
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	405a      	eors	r2, r3
 800e3e4:	683b      	ldr	r3, [r7, #0]
 800e3e6:	3308      	adds	r3, #8
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	4013      	ands	r3, r2
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d10d      	bne.n	800e40c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e3f0:	683b      	ldr	r3, [r7, #0]
 800e3f2:	3308      	adds	r3, #8
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	43da      	mvns	r2, r3
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800e3fc:	683b      	ldr	r3, [r7, #0]
 800e3fe:	3308      	adds	r3, #8
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e404:	429a      	cmp	r2, r3
 800e406:	d101      	bne.n	800e40c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800e408:	2301      	movs	r3, #1
 800e40a:	e000      	b.n	800e40e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800e40c:	2300      	movs	r3, #0
  }
}
 800e40e:	4618      	mov	r0, r3
 800e410:	3714      	adds	r7, #20
 800e412:	46bd      	mov	sp, r7
 800e414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e418:	4770      	bx	lr
	...

0800e41c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b084      	sub	sp, #16
 800e420:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800e422:	2300      	movs	r3, #0
 800e424:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800e426:	4b12      	ldr	r3, [pc, #72]	; (800e470 <ip_reass_tmr+0x54>)
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800e42c:	e018      	b.n	800e460 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	7fdb      	ldrb	r3, [r3, #31]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d00b      	beq.n	800e44e <ip_reass_tmr+0x32>
      r->timer--;
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	7fdb      	ldrb	r3, [r3, #31]
 800e43a:	3b01      	subs	r3, #1
 800e43c:	b2da      	uxtb	r2, r3
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	60fb      	str	r3, [r7, #12]
 800e44c:	e008      	b.n	800e460 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800e458:	68b9      	ldr	r1, [r7, #8]
 800e45a:	6878      	ldr	r0, [r7, #4]
 800e45c:	f000 f80a 	bl	800e474 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d1e3      	bne.n	800e42e <ip_reass_tmr+0x12>
    }
  }
}
 800e466:	bf00      	nop
 800e468:	bf00      	nop
 800e46a:	3710      	adds	r7, #16
 800e46c:	46bd      	mov	sp, r7
 800e46e:	bd80      	pop	{r7, pc}
 800e470:	24012438 	.word	0x24012438

0800e474 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b088      	sub	sp, #32
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
 800e47c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800e47e:	2300      	movs	r3, #0
 800e480:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800e482:	683a      	ldr	r2, [r7, #0]
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	429a      	cmp	r2, r3
 800e488:	d105      	bne.n	800e496 <ip_reass_free_complete_datagram+0x22>
 800e48a:	4b45      	ldr	r3, [pc, #276]	; (800e5a0 <ip_reass_free_complete_datagram+0x12c>)
 800e48c:	22ab      	movs	r2, #171	; 0xab
 800e48e:	4945      	ldr	r1, [pc, #276]	; (800e5a4 <ip_reass_free_complete_datagram+0x130>)
 800e490:	4845      	ldr	r0, [pc, #276]	; (800e5a8 <ip_reass_free_complete_datagram+0x134>)
 800e492:	f008 fd3f 	bl	8016f14 <iprintf>
  if (prev != NULL) {
 800e496:	683b      	ldr	r3, [r7, #0]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d00a      	beq.n	800e4b2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800e49c:	683b      	ldr	r3, [r7, #0]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	687a      	ldr	r2, [r7, #4]
 800e4a2:	429a      	cmp	r2, r3
 800e4a4:	d005      	beq.n	800e4b2 <ip_reass_free_complete_datagram+0x3e>
 800e4a6:	4b3e      	ldr	r3, [pc, #248]	; (800e5a0 <ip_reass_free_complete_datagram+0x12c>)
 800e4a8:	22ad      	movs	r2, #173	; 0xad
 800e4aa:	4940      	ldr	r1, [pc, #256]	; (800e5ac <ip_reass_free_complete_datagram+0x138>)
 800e4ac:	483e      	ldr	r0, [pc, #248]	; (800e5a8 <ip_reass_free_complete_datagram+0x134>)
 800e4ae:	f008 fd31 	bl	8016f14 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	685b      	ldr	r3, [r3, #4]
 800e4b6:	685b      	ldr	r3, [r3, #4]
 800e4b8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800e4ba:	697b      	ldr	r3, [r7, #20]
 800e4bc:	889b      	ldrh	r3, [r3, #4]
 800e4be:	b29b      	uxth	r3, r3
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d12a      	bne.n	800e51a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	685b      	ldr	r3, [r3, #4]
 800e4c8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800e4ca:	697b      	ldr	r3, [r7, #20]
 800e4cc:	681a      	ldr	r2, [r3, #0]
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800e4d2:	69bb      	ldr	r3, [r7, #24]
 800e4d4:	6858      	ldr	r0, [r3, #4]
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	3308      	adds	r3, #8
 800e4da:	2214      	movs	r2, #20
 800e4dc:	4619      	mov	r1, r3
 800e4de:	f008 fc6e 	bl	8016dbe <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800e4e2:	2101      	movs	r1, #1
 800e4e4:	69b8      	ldr	r0, [r7, #24]
 800e4e6:	f7ff fb69 	bl	800dbbc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800e4ea:	69b8      	ldr	r0, [r7, #24]
 800e4ec:	f002 fa0a 	bl	8010904 <pbuf_clen>
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e4f4:	8bfa      	ldrh	r2, [r7, #30]
 800e4f6:	8a7b      	ldrh	r3, [r7, #18]
 800e4f8:	4413      	add	r3, r2
 800e4fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e4fe:	db05      	blt.n	800e50c <ip_reass_free_complete_datagram+0x98>
 800e500:	4b27      	ldr	r3, [pc, #156]	; (800e5a0 <ip_reass_free_complete_datagram+0x12c>)
 800e502:	22bc      	movs	r2, #188	; 0xbc
 800e504:	492a      	ldr	r1, [pc, #168]	; (800e5b0 <ip_reass_free_complete_datagram+0x13c>)
 800e506:	4828      	ldr	r0, [pc, #160]	; (800e5a8 <ip_reass_free_complete_datagram+0x134>)
 800e508:	f008 fd04 	bl	8016f14 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e50c:	8bfa      	ldrh	r2, [r7, #30]
 800e50e:	8a7b      	ldrh	r3, [r7, #18]
 800e510:	4413      	add	r3, r2
 800e512:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800e514:	69b8      	ldr	r0, [r7, #24]
 800e516:	f002 f967 	bl	80107e8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	685b      	ldr	r3, [r3, #4]
 800e51e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800e520:	e01f      	b.n	800e562 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800e522:	69bb      	ldr	r3, [r7, #24]
 800e524:	685b      	ldr	r3, [r3, #4]
 800e526:	617b      	str	r3, [r7, #20]
    pcur = p;
 800e528:	69bb      	ldr	r3, [r7, #24]
 800e52a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800e52c:	697b      	ldr	r3, [r7, #20]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800e532:	68f8      	ldr	r0, [r7, #12]
 800e534:	f002 f9e6 	bl	8010904 <pbuf_clen>
 800e538:	4603      	mov	r3, r0
 800e53a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e53c:	8bfa      	ldrh	r2, [r7, #30]
 800e53e:	8a7b      	ldrh	r3, [r7, #18]
 800e540:	4413      	add	r3, r2
 800e542:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e546:	db05      	blt.n	800e554 <ip_reass_free_complete_datagram+0xe0>
 800e548:	4b15      	ldr	r3, [pc, #84]	; (800e5a0 <ip_reass_free_complete_datagram+0x12c>)
 800e54a:	22cc      	movs	r2, #204	; 0xcc
 800e54c:	4918      	ldr	r1, [pc, #96]	; (800e5b0 <ip_reass_free_complete_datagram+0x13c>)
 800e54e:	4816      	ldr	r0, [pc, #88]	; (800e5a8 <ip_reass_free_complete_datagram+0x134>)
 800e550:	f008 fce0 	bl	8016f14 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e554:	8bfa      	ldrh	r2, [r7, #30]
 800e556:	8a7b      	ldrh	r3, [r7, #18]
 800e558:	4413      	add	r3, r2
 800e55a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800e55c:	68f8      	ldr	r0, [r7, #12]
 800e55e:	f002 f943 	bl	80107e8 <pbuf_free>
  while (p != NULL) {
 800e562:	69bb      	ldr	r3, [r7, #24]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d1dc      	bne.n	800e522 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800e568:	6839      	ldr	r1, [r7, #0]
 800e56a:	6878      	ldr	r0, [r7, #4]
 800e56c:	f000 f8c2 	bl	800e6f4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800e570:	4b10      	ldr	r3, [pc, #64]	; (800e5b4 <ip_reass_free_complete_datagram+0x140>)
 800e572:	881b      	ldrh	r3, [r3, #0]
 800e574:	8bfa      	ldrh	r2, [r7, #30]
 800e576:	429a      	cmp	r2, r3
 800e578:	d905      	bls.n	800e586 <ip_reass_free_complete_datagram+0x112>
 800e57a:	4b09      	ldr	r3, [pc, #36]	; (800e5a0 <ip_reass_free_complete_datagram+0x12c>)
 800e57c:	22d2      	movs	r2, #210	; 0xd2
 800e57e:	490e      	ldr	r1, [pc, #56]	; (800e5b8 <ip_reass_free_complete_datagram+0x144>)
 800e580:	4809      	ldr	r0, [pc, #36]	; (800e5a8 <ip_reass_free_complete_datagram+0x134>)
 800e582:	f008 fcc7 	bl	8016f14 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800e586:	4b0b      	ldr	r3, [pc, #44]	; (800e5b4 <ip_reass_free_complete_datagram+0x140>)
 800e588:	881a      	ldrh	r2, [r3, #0]
 800e58a:	8bfb      	ldrh	r3, [r7, #30]
 800e58c:	1ad3      	subs	r3, r2, r3
 800e58e:	b29a      	uxth	r2, r3
 800e590:	4b08      	ldr	r3, [pc, #32]	; (800e5b4 <ip_reass_free_complete_datagram+0x140>)
 800e592:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800e594:	8bfb      	ldrh	r3, [r7, #30]
}
 800e596:	4618      	mov	r0, r3
 800e598:	3720      	adds	r7, #32
 800e59a:	46bd      	mov	sp, r7
 800e59c:	bd80      	pop	{r7, pc}
 800e59e:	bf00      	nop
 800e5a0:	080183ac 	.word	0x080183ac
 800e5a4:	08018428 	.word	0x08018428
 800e5a8:	08018434 	.word	0x08018434
 800e5ac:	0801845c 	.word	0x0801845c
 800e5b0:	08018470 	.word	0x08018470
 800e5b4:	2401243c 	.word	0x2401243c
 800e5b8:	08018490 	.word	0x08018490

0800e5bc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b08a      	sub	sp, #40	; 0x28
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]
 800e5c4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800e5da:	4b28      	ldr	r3, [pc, #160]	; (800e67c <ip_reass_remove_oldest_datagram+0xc0>)
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e5e0:	e030      	b.n	800e644 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800e5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5e4:	695a      	ldr	r2, [r3, #20]
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	68db      	ldr	r3, [r3, #12]
 800e5ea:	429a      	cmp	r2, r3
 800e5ec:	d10c      	bne.n	800e608 <ip_reass_remove_oldest_datagram+0x4c>
 800e5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5f0:	699a      	ldr	r2, [r3, #24]
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	691b      	ldr	r3, [r3, #16]
 800e5f6:	429a      	cmp	r2, r3
 800e5f8:	d106      	bne.n	800e608 <ip_reass_remove_oldest_datagram+0x4c>
 800e5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5fc:	899a      	ldrh	r2, [r3, #12]
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	889b      	ldrh	r3, [r3, #4]
 800e602:	b29b      	uxth	r3, r3
 800e604:	429a      	cmp	r2, r3
 800e606:	d014      	beq.n	800e632 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800e608:	693b      	ldr	r3, [r7, #16]
 800e60a:	3301      	adds	r3, #1
 800e60c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800e60e:	6a3b      	ldr	r3, [r7, #32]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d104      	bne.n	800e61e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800e614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e616:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e618:	69fb      	ldr	r3, [r7, #28]
 800e61a:	61bb      	str	r3, [r7, #24]
 800e61c:	e009      	b.n	800e632 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800e61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e620:	7fda      	ldrb	r2, [r3, #31]
 800e622:	6a3b      	ldr	r3, [r7, #32]
 800e624:	7fdb      	ldrb	r3, [r3, #31]
 800e626:	429a      	cmp	r2, r3
 800e628:	d803      	bhi.n	800e632 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800e62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e62c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e62e:	69fb      	ldr	r3, [r7, #28]
 800e630:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800e632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d001      	beq.n	800e63e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800e63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e63c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800e63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e646:	2b00      	cmp	r3, #0
 800e648:	d1cb      	bne.n	800e5e2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800e64a:	6a3b      	ldr	r3, [r7, #32]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d008      	beq.n	800e662 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800e650:	69b9      	ldr	r1, [r7, #24]
 800e652:	6a38      	ldr	r0, [r7, #32]
 800e654:	f7ff ff0e 	bl	800e474 <ip_reass_free_complete_datagram>
 800e658:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800e65a:	697a      	ldr	r2, [r7, #20]
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	4413      	add	r3, r2
 800e660:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800e662:	697a      	ldr	r2, [r7, #20]
 800e664:	683b      	ldr	r3, [r7, #0]
 800e666:	429a      	cmp	r2, r3
 800e668:	da02      	bge.n	800e670 <ip_reass_remove_oldest_datagram+0xb4>
 800e66a:	693b      	ldr	r3, [r7, #16]
 800e66c:	2b01      	cmp	r3, #1
 800e66e:	dcac      	bgt.n	800e5ca <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800e670:	697b      	ldr	r3, [r7, #20]
}
 800e672:	4618      	mov	r0, r3
 800e674:	3728      	adds	r7, #40	; 0x28
 800e676:	46bd      	mov	sp, r7
 800e678:	bd80      	pop	{r7, pc}
 800e67a:	bf00      	nop
 800e67c:	24012438 	.word	0x24012438

0800e680 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800e680:	b580      	push	{r7, lr}
 800e682:	b084      	sub	sp, #16
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]
 800e688:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e68a:	2004      	movs	r0, #4
 800e68c:	f001 f992 	bl	800f9b4 <memp_malloc>
 800e690:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d110      	bne.n	800e6ba <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800e698:	6839      	ldr	r1, [r7, #0]
 800e69a:	6878      	ldr	r0, [r7, #4]
 800e69c:	f7ff ff8e 	bl	800e5bc <ip_reass_remove_oldest_datagram>
 800e6a0:	4602      	mov	r2, r0
 800e6a2:	683b      	ldr	r3, [r7, #0]
 800e6a4:	4293      	cmp	r3, r2
 800e6a6:	dc03      	bgt.n	800e6b0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e6a8:	2004      	movs	r0, #4
 800e6aa:	f001 f983 	bl	800f9b4 <memp_malloc>
 800e6ae:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d101      	bne.n	800e6ba <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	e016      	b.n	800e6e8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800e6ba:	2220      	movs	r2, #32
 800e6bc:	2100      	movs	r1, #0
 800e6be:	68f8      	ldr	r0, [r7, #12]
 800e6c0:	f008 fb8b 	bl	8016dda <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	220f      	movs	r2, #15
 800e6c8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800e6ca:	4b09      	ldr	r3, [pc, #36]	; (800e6f0 <ip_reass_enqueue_new_datagram+0x70>)
 800e6cc:	681a      	ldr	r2, [r3, #0]
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800e6d2:	4a07      	ldr	r2, [pc, #28]	; (800e6f0 <ip_reass_enqueue_new_datagram+0x70>)
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	3308      	adds	r3, #8
 800e6dc:	2214      	movs	r2, #20
 800e6de:	6879      	ldr	r1, [r7, #4]
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	f008 fb6c 	bl	8016dbe <memcpy>
  return ipr;
 800e6e6:	68fb      	ldr	r3, [r7, #12]
}
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	3710      	adds	r7, #16
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	bd80      	pop	{r7, pc}
 800e6f0:	24012438 	.word	0x24012438

0800e6f4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b082      	sub	sp, #8
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
 800e6fc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800e6fe:	4b10      	ldr	r3, [pc, #64]	; (800e740 <ip_reass_dequeue_datagram+0x4c>)
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	687a      	ldr	r2, [r7, #4]
 800e704:	429a      	cmp	r2, r3
 800e706:	d104      	bne.n	800e712 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	4a0c      	ldr	r2, [pc, #48]	; (800e740 <ip_reass_dequeue_datagram+0x4c>)
 800e70e:	6013      	str	r3, [r2, #0]
 800e710:	e00d      	b.n	800e72e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800e712:	683b      	ldr	r3, [r7, #0]
 800e714:	2b00      	cmp	r3, #0
 800e716:	d106      	bne.n	800e726 <ip_reass_dequeue_datagram+0x32>
 800e718:	4b0a      	ldr	r3, [pc, #40]	; (800e744 <ip_reass_dequeue_datagram+0x50>)
 800e71a:	f240 1245 	movw	r2, #325	; 0x145
 800e71e:	490a      	ldr	r1, [pc, #40]	; (800e748 <ip_reass_dequeue_datagram+0x54>)
 800e720:	480a      	ldr	r0, [pc, #40]	; (800e74c <ip_reass_dequeue_datagram+0x58>)
 800e722:	f008 fbf7 	bl	8016f14 <iprintf>
    prev->next = ipr->next;
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	681a      	ldr	r2, [r3, #0]
 800e72a:	683b      	ldr	r3, [r7, #0]
 800e72c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800e72e:	6879      	ldr	r1, [r7, #4]
 800e730:	2004      	movs	r0, #4
 800e732:	f001 f9b5 	bl	800faa0 <memp_free>
}
 800e736:	bf00      	nop
 800e738:	3708      	adds	r7, #8
 800e73a:	46bd      	mov	sp, r7
 800e73c:	bd80      	pop	{r7, pc}
 800e73e:	bf00      	nop
 800e740:	24012438 	.word	0x24012438
 800e744:	080183ac 	.word	0x080183ac
 800e748:	080184b4 	.word	0x080184b4
 800e74c:	08018434 	.word	0x08018434

0800e750 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800e750:	b580      	push	{r7, lr}
 800e752:	b08c      	sub	sp, #48	; 0x30
 800e754:	af00      	add	r7, sp, #0
 800e756:	60f8      	str	r0, [r7, #12]
 800e758:	60b9      	str	r1, [r7, #8]
 800e75a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800e75c:	2300      	movs	r3, #0
 800e75e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800e760:	2301      	movs	r3, #1
 800e762:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800e764:	68bb      	ldr	r3, [r7, #8]
 800e766:	685b      	ldr	r3, [r3, #4]
 800e768:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e76a:	69fb      	ldr	r3, [r7, #28]
 800e76c:	885b      	ldrh	r3, [r3, #2]
 800e76e:	b29b      	uxth	r3, r3
 800e770:	4618      	mov	r0, r3
 800e772:	f7fe f8a3 	bl	800c8bc <lwip_htons>
 800e776:	4603      	mov	r3, r0
 800e778:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800e77a:	69fb      	ldr	r3, [r7, #28]
 800e77c:	781b      	ldrb	r3, [r3, #0]
 800e77e:	f003 030f 	and.w	r3, r3, #15
 800e782:	b2db      	uxtb	r3, r3
 800e784:	009b      	lsls	r3, r3, #2
 800e786:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800e788:	7e7b      	ldrb	r3, [r7, #25]
 800e78a:	b29b      	uxth	r3, r3
 800e78c:	8b7a      	ldrh	r2, [r7, #26]
 800e78e:	429a      	cmp	r2, r3
 800e790:	d202      	bcs.n	800e798 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e792:	f04f 33ff 	mov.w	r3, #4294967295
 800e796:	e135      	b.n	800ea04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800e798:	7e7b      	ldrb	r3, [r7, #25]
 800e79a:	b29b      	uxth	r3, r3
 800e79c:	8b7a      	ldrh	r2, [r7, #26]
 800e79e:	1ad3      	subs	r3, r2, r3
 800e7a0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e7a2:	69fb      	ldr	r3, [r7, #28]
 800e7a4:	88db      	ldrh	r3, [r3, #6]
 800e7a6:	b29b      	uxth	r3, r3
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	f7fe f887 	bl	800c8bc <lwip_htons>
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e7b4:	b29b      	uxth	r3, r3
 800e7b6:	00db      	lsls	r3, r3, #3
 800e7b8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800e7ba:	68bb      	ldr	r3, [r7, #8]
 800e7bc:	685b      	ldr	r3, [r3, #4]
 800e7be:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800e7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	701a      	strb	r2, [r3, #0]
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	705a      	strb	r2, [r3, #1]
 800e7ca:	2200      	movs	r2, #0
 800e7cc:	709a      	strb	r2, [r3, #2]
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800e7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7d4:	8afa      	ldrh	r2, [r7, #22]
 800e7d6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800e7d8:	8afa      	ldrh	r2, [r7, #22]
 800e7da:	8b7b      	ldrh	r3, [r7, #26]
 800e7dc:	4413      	add	r3, r2
 800e7de:	b29a      	uxth	r2, r3
 800e7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7e2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800e7e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7e6:	88db      	ldrh	r3, [r3, #6]
 800e7e8:	b29b      	uxth	r3, r3
 800e7ea:	8afa      	ldrh	r2, [r7, #22]
 800e7ec:	429a      	cmp	r2, r3
 800e7ee:	d902      	bls.n	800e7f6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e7f0:	f04f 33ff 	mov.w	r3, #4294967295
 800e7f4:	e106      	b.n	800ea04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	685b      	ldr	r3, [r3, #4]
 800e7fa:	627b      	str	r3, [r7, #36]	; 0x24
 800e7fc:	e068      	b.n	800e8d0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800e7fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e800:	685b      	ldr	r3, [r3, #4]
 800e802:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800e804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e806:	889b      	ldrh	r3, [r3, #4]
 800e808:	b29a      	uxth	r2, r3
 800e80a:	693b      	ldr	r3, [r7, #16]
 800e80c:	889b      	ldrh	r3, [r3, #4]
 800e80e:	b29b      	uxth	r3, r3
 800e810:	429a      	cmp	r2, r3
 800e812:	d235      	bcs.n	800e880 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800e814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e818:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800e81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d020      	beq.n	800e862 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800e820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e822:	889b      	ldrh	r3, [r3, #4]
 800e824:	b29a      	uxth	r2, r3
 800e826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e828:	88db      	ldrh	r3, [r3, #6]
 800e82a:	b29b      	uxth	r3, r3
 800e82c:	429a      	cmp	r2, r3
 800e82e:	d307      	bcc.n	800e840 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800e830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e832:	88db      	ldrh	r3, [r3, #6]
 800e834:	b29a      	uxth	r2, r3
 800e836:	693b      	ldr	r3, [r7, #16]
 800e838:	889b      	ldrh	r3, [r3, #4]
 800e83a:	b29b      	uxth	r3, r3
 800e83c:	429a      	cmp	r2, r3
 800e83e:	d902      	bls.n	800e846 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e840:	f04f 33ff 	mov.w	r3, #4294967295
 800e844:	e0de      	b.n	800ea04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800e846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e848:	68ba      	ldr	r2, [r7, #8]
 800e84a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800e84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e84e:	88db      	ldrh	r3, [r3, #6]
 800e850:	b29a      	uxth	r2, r3
 800e852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e854:	889b      	ldrh	r3, [r3, #4]
 800e856:	b29b      	uxth	r3, r3
 800e858:	429a      	cmp	r2, r3
 800e85a:	d03d      	beq.n	800e8d8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e85c:	2300      	movs	r3, #0
 800e85e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800e860:	e03a      	b.n	800e8d8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800e862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e864:	88db      	ldrh	r3, [r3, #6]
 800e866:	b29a      	uxth	r2, r3
 800e868:	693b      	ldr	r3, [r7, #16]
 800e86a:	889b      	ldrh	r3, [r3, #4]
 800e86c:	b29b      	uxth	r3, r3
 800e86e:	429a      	cmp	r2, r3
 800e870:	d902      	bls.n	800e878 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e872:	f04f 33ff 	mov.w	r3, #4294967295
 800e876:	e0c5      	b.n	800ea04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	68ba      	ldr	r2, [r7, #8]
 800e87c:	605a      	str	r2, [r3, #4]
      break;
 800e87e:	e02b      	b.n	800e8d8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800e880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e882:	889b      	ldrh	r3, [r3, #4]
 800e884:	b29a      	uxth	r2, r3
 800e886:	693b      	ldr	r3, [r7, #16]
 800e888:	889b      	ldrh	r3, [r3, #4]
 800e88a:	b29b      	uxth	r3, r3
 800e88c:	429a      	cmp	r2, r3
 800e88e:	d102      	bne.n	800e896 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e890:	f04f 33ff 	mov.w	r3, #4294967295
 800e894:	e0b6      	b.n	800ea04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800e896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e898:	889b      	ldrh	r3, [r3, #4]
 800e89a:	b29a      	uxth	r2, r3
 800e89c:	693b      	ldr	r3, [r7, #16]
 800e89e:	88db      	ldrh	r3, [r3, #6]
 800e8a0:	b29b      	uxth	r3, r3
 800e8a2:	429a      	cmp	r2, r3
 800e8a4:	d202      	bcs.n	800e8ac <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e8a6:	f04f 33ff 	mov.w	r3, #4294967295
 800e8aa:	e0ab      	b.n	800ea04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800e8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d009      	beq.n	800e8c6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800e8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8b4:	88db      	ldrh	r3, [r3, #6]
 800e8b6:	b29a      	uxth	r2, r3
 800e8b8:	693b      	ldr	r3, [r7, #16]
 800e8ba:	889b      	ldrh	r3, [r3, #4]
 800e8bc:	b29b      	uxth	r3, r3
 800e8be:	429a      	cmp	r2, r3
 800e8c0:	d001      	beq.n	800e8c6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800e8c6:	693b      	ldr	r3, [r7, #16]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800e8cc:	693b      	ldr	r3, [r7, #16]
 800e8ce:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800e8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d193      	bne.n	800e7fe <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800e8d6:	e000      	b.n	800e8da <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800e8d8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800e8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d12d      	bne.n	800e93c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800e8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d01c      	beq.n	800e920 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800e8e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8e8:	88db      	ldrh	r3, [r3, #6]
 800e8ea:	b29a      	uxth	r2, r3
 800e8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ee:	889b      	ldrh	r3, [r3, #4]
 800e8f0:	b29b      	uxth	r3, r3
 800e8f2:	429a      	cmp	r2, r3
 800e8f4:	d906      	bls.n	800e904 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800e8f6:	4b45      	ldr	r3, [pc, #276]	; (800ea0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e8f8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800e8fc:	4944      	ldr	r1, [pc, #272]	; (800ea10 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e8fe:	4845      	ldr	r0, [pc, #276]	; (800ea14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e900:	f008 fb08 	bl	8016f14 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800e904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e906:	68ba      	ldr	r2, [r7, #8]
 800e908:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800e90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e90c:	88db      	ldrh	r3, [r3, #6]
 800e90e:	b29a      	uxth	r2, r3
 800e910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e912:	889b      	ldrh	r3, [r3, #4]
 800e914:	b29b      	uxth	r3, r3
 800e916:	429a      	cmp	r2, r3
 800e918:	d010      	beq.n	800e93c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800e91a:	2300      	movs	r3, #0
 800e91c:	623b      	str	r3, [r7, #32]
 800e91e:	e00d      	b.n	800e93c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	685b      	ldr	r3, [r3, #4]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d006      	beq.n	800e936 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800e928:	4b38      	ldr	r3, [pc, #224]	; (800ea0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e92a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800e92e:	493a      	ldr	r1, [pc, #232]	; (800ea18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800e930:	4838      	ldr	r0, [pc, #224]	; (800ea14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e932:	f008 faef 	bl	8016f14 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	68ba      	ldr	r2, [r7, #8]
 800e93a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d105      	bne.n	800e94e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	7f9b      	ldrb	r3, [r3, #30]
 800e946:	f003 0301 	and.w	r3, r3, #1
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d059      	beq.n	800ea02 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800e94e:	6a3b      	ldr	r3, [r7, #32]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d04f      	beq.n	800e9f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	685b      	ldr	r3, [r3, #4]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d006      	beq.n	800e96a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	685b      	ldr	r3, [r3, #4]
 800e960:	685b      	ldr	r3, [r3, #4]
 800e962:	889b      	ldrh	r3, [r3, #4]
 800e964:	b29b      	uxth	r3, r3
 800e966:	2b00      	cmp	r3, #0
 800e968:	d002      	beq.n	800e970 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800e96a:	2300      	movs	r3, #0
 800e96c:	623b      	str	r3, [r7, #32]
 800e96e:	e041      	b.n	800e9f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800e970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e972:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800e974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e97a:	e012      	b.n	800e9a2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800e97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e97e:	685b      	ldr	r3, [r3, #4]
 800e980:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800e982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e984:	88db      	ldrh	r3, [r3, #6]
 800e986:	b29a      	uxth	r2, r3
 800e988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e98a:	889b      	ldrh	r3, [r3, #4]
 800e98c:	b29b      	uxth	r3, r3
 800e98e:	429a      	cmp	r2, r3
 800e990:	d002      	beq.n	800e998 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800e992:	2300      	movs	r3, #0
 800e994:	623b      	str	r3, [r7, #32]
            break;
 800e996:	e007      	b.n	800e9a8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800e998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e99a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800e99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e9a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d1e9      	bne.n	800e97c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800e9a8:	6a3b      	ldr	r3, [r7, #32]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d022      	beq.n	800e9f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	685b      	ldr	r3, [r3, #4]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d106      	bne.n	800e9c4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800e9b6:	4b15      	ldr	r3, [pc, #84]	; (800ea0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e9b8:	f240 12df 	movw	r2, #479	; 0x1df
 800e9bc:	4917      	ldr	r1, [pc, #92]	; (800ea1c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e9be:	4815      	ldr	r0, [pc, #84]	; (800ea14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e9c0:	f008 faa8 	bl	8016f14 <iprintf>
          LWIP_ASSERT("sanity check",
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	685b      	ldr	r3, [r3, #4]
 800e9c8:	685b      	ldr	r3, [r3, #4]
 800e9ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e9cc:	429a      	cmp	r2, r3
 800e9ce:	d106      	bne.n	800e9de <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800e9d0:	4b0e      	ldr	r3, [pc, #56]	; (800ea0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e9d2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800e9d6:	4911      	ldr	r1, [pc, #68]	; (800ea1c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e9d8:	480e      	ldr	r0, [pc, #56]	; (800ea14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e9da:	f008 fa9b 	bl	8016f14 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800e9de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d006      	beq.n	800e9f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800e9e6:	4b09      	ldr	r3, [pc, #36]	; (800ea0c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e9e8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800e9ec:	490c      	ldr	r1, [pc, #48]	; (800ea20 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800e9ee:	4809      	ldr	r0, [pc, #36]	; (800ea14 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e9f0:	f008 fa90 	bl	8016f14 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800e9f4:	6a3b      	ldr	r3, [r7, #32]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	bf14      	ite	ne
 800e9fa:	2301      	movne	r3, #1
 800e9fc:	2300      	moveq	r3, #0
 800e9fe:	b2db      	uxtb	r3, r3
 800ea00:	e000      	b.n	800ea04 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800ea02:	2300      	movs	r3, #0
}
 800ea04:	4618      	mov	r0, r3
 800ea06:	3730      	adds	r7, #48	; 0x30
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	bd80      	pop	{r7, pc}
 800ea0c:	080183ac 	.word	0x080183ac
 800ea10:	080184d0 	.word	0x080184d0
 800ea14:	08018434 	.word	0x08018434
 800ea18:	080184f0 	.word	0x080184f0
 800ea1c:	08018528 	.word	0x08018528
 800ea20:	08018538 	.word	0x08018538

0800ea24 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800ea24:	b580      	push	{r7, lr}
 800ea26:	b08e      	sub	sp, #56	; 0x38
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	685b      	ldr	r3, [r3, #4]
 800ea30:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800ea32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea34:	781b      	ldrb	r3, [r3, #0]
 800ea36:	f003 030f 	and.w	r3, r3, #15
 800ea3a:	b2db      	uxtb	r3, r3
 800ea3c:	009b      	lsls	r3, r3, #2
 800ea3e:	b2db      	uxtb	r3, r3
 800ea40:	2b14      	cmp	r3, #20
 800ea42:	f040 8171 	bne.w	800ed28 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800ea46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea48:	88db      	ldrh	r3, [r3, #6]
 800ea4a:	b29b      	uxth	r3, r3
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	f7fd ff35 	bl	800c8bc <lwip_htons>
 800ea52:	4603      	mov	r3, r0
 800ea54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ea58:	b29b      	uxth	r3, r3
 800ea5a:	00db      	lsls	r3, r3, #3
 800ea5c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800ea5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea60:	885b      	ldrh	r3, [r3, #2]
 800ea62:	b29b      	uxth	r3, r3
 800ea64:	4618      	mov	r0, r3
 800ea66:	f7fd ff29 	bl	800c8bc <lwip_htons>
 800ea6a:	4603      	mov	r3, r0
 800ea6c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800ea6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea70:	781b      	ldrb	r3, [r3, #0]
 800ea72:	f003 030f 	and.w	r3, r3, #15
 800ea76:	b2db      	uxtb	r3, r3
 800ea78:	009b      	lsls	r3, r3, #2
 800ea7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800ea7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ea82:	b29b      	uxth	r3, r3
 800ea84:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ea86:	429a      	cmp	r2, r3
 800ea88:	f0c0 8150 	bcc.w	800ed2c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800ea8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ea90:	b29b      	uxth	r3, r3
 800ea92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ea94:	1ad3      	subs	r3, r2, r3
 800ea96:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800ea98:	6878      	ldr	r0, [r7, #4]
 800ea9a:	f001 ff33 	bl	8010904 <pbuf_clen>
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800eaa2:	4b8c      	ldr	r3, [pc, #560]	; (800ecd4 <ip4_reass+0x2b0>)
 800eaa4:	881b      	ldrh	r3, [r3, #0]
 800eaa6:	461a      	mov	r2, r3
 800eaa8:	8c3b      	ldrh	r3, [r7, #32]
 800eaaa:	4413      	add	r3, r2
 800eaac:	2b0a      	cmp	r3, #10
 800eaae:	dd10      	ble.n	800ead2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800eab0:	8c3b      	ldrh	r3, [r7, #32]
 800eab2:	4619      	mov	r1, r3
 800eab4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eab6:	f7ff fd81 	bl	800e5bc <ip_reass_remove_oldest_datagram>
 800eaba:	4603      	mov	r3, r0
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	f000 8137 	beq.w	800ed30 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800eac2:	4b84      	ldr	r3, [pc, #528]	; (800ecd4 <ip4_reass+0x2b0>)
 800eac4:	881b      	ldrh	r3, [r3, #0]
 800eac6:	461a      	mov	r2, r3
 800eac8:	8c3b      	ldrh	r3, [r7, #32]
 800eaca:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800eacc:	2b0a      	cmp	r3, #10
 800eace:	f300 812f 	bgt.w	800ed30 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800ead2:	4b81      	ldr	r3, [pc, #516]	; (800ecd8 <ip4_reass+0x2b4>)
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	633b      	str	r3, [r7, #48]	; 0x30
 800ead8:	e015      	b.n	800eb06 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800eada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eadc:	695a      	ldr	r2, [r3, #20]
 800eade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eae0:	68db      	ldr	r3, [r3, #12]
 800eae2:	429a      	cmp	r2, r3
 800eae4:	d10c      	bne.n	800eb00 <ip4_reass+0xdc>
 800eae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eae8:	699a      	ldr	r2, [r3, #24]
 800eaea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaec:	691b      	ldr	r3, [r3, #16]
 800eaee:	429a      	cmp	r2, r3
 800eaf0:	d106      	bne.n	800eb00 <ip4_reass+0xdc>
 800eaf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaf4:	899a      	ldrh	r2, [r3, #12]
 800eaf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaf8:	889b      	ldrh	r3, [r3, #4]
 800eafa:	b29b      	uxth	r3, r3
 800eafc:	429a      	cmp	r2, r3
 800eafe:	d006      	beq.n	800eb0e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800eb00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	633b      	str	r3, [r7, #48]	; 0x30
 800eb06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d1e6      	bne.n	800eada <ip4_reass+0xb6>
 800eb0c:	e000      	b.n	800eb10 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800eb0e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800eb10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d109      	bne.n	800eb2a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800eb16:	8c3b      	ldrh	r3, [r7, #32]
 800eb18:	4619      	mov	r1, r3
 800eb1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eb1c:	f7ff fdb0 	bl	800e680 <ip_reass_enqueue_new_datagram>
 800eb20:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800eb22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d11c      	bne.n	800eb62 <ip4_reass+0x13e>
      goto nullreturn;
 800eb28:	e105      	b.n	800ed36 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800eb2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb2c:	88db      	ldrh	r3, [r3, #6]
 800eb2e:	b29b      	uxth	r3, r3
 800eb30:	4618      	mov	r0, r3
 800eb32:	f7fd fec3 	bl	800c8bc <lwip_htons>
 800eb36:	4603      	mov	r3, r0
 800eb38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d110      	bne.n	800eb62 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800eb40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb42:	89db      	ldrh	r3, [r3, #14]
 800eb44:	4618      	mov	r0, r3
 800eb46:	f7fd feb9 	bl	800c8bc <lwip_htons>
 800eb4a:	4603      	mov	r3, r0
 800eb4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d006      	beq.n	800eb62 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800eb54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb56:	3308      	adds	r3, #8
 800eb58:	2214      	movs	r2, #20
 800eb5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	f008 f92e 	bl	8016dbe <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800eb62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb64:	88db      	ldrh	r3, [r3, #6]
 800eb66:	b29b      	uxth	r3, r3
 800eb68:	f003 0320 	and.w	r3, r3, #32
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	bf0c      	ite	eq
 800eb70:	2301      	moveq	r3, #1
 800eb72:	2300      	movne	r3, #0
 800eb74:	b2db      	uxtb	r3, r3
 800eb76:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800eb78:	69fb      	ldr	r3, [r7, #28]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d00e      	beq.n	800eb9c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800eb7e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800eb80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb82:	4413      	add	r3, r2
 800eb84:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800eb86:	8b7a      	ldrh	r2, [r7, #26]
 800eb88:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800eb8a:	429a      	cmp	r2, r3
 800eb8c:	f0c0 80a0 	bcc.w	800ecd0 <ip4_reass+0x2ac>
 800eb90:	8b7b      	ldrh	r3, [r7, #26]
 800eb92:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800eb96:	4293      	cmp	r3, r2
 800eb98:	f200 809a 	bhi.w	800ecd0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800eb9c:	69fa      	ldr	r2, [r7, #28]
 800eb9e:	6879      	ldr	r1, [r7, #4]
 800eba0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eba2:	f7ff fdd5 	bl	800e750 <ip_reass_chain_frag_into_datagram_and_validate>
 800eba6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800eba8:	697b      	ldr	r3, [r7, #20]
 800ebaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebae:	f000 809b 	beq.w	800ece8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800ebb2:	4b48      	ldr	r3, [pc, #288]	; (800ecd4 <ip4_reass+0x2b0>)
 800ebb4:	881a      	ldrh	r2, [r3, #0]
 800ebb6:	8c3b      	ldrh	r3, [r7, #32]
 800ebb8:	4413      	add	r3, r2
 800ebba:	b29a      	uxth	r2, r3
 800ebbc:	4b45      	ldr	r3, [pc, #276]	; (800ecd4 <ip4_reass+0x2b0>)
 800ebbe:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800ebc0:	69fb      	ldr	r3, [r7, #28]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d00d      	beq.n	800ebe2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800ebc6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ebc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ebca:	4413      	add	r3, r2
 800ebcc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800ebce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebd0:	8a7a      	ldrh	r2, [r7, #18]
 800ebd2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800ebd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebd6:	7f9b      	ldrb	r3, [r3, #30]
 800ebd8:	f043 0301 	orr.w	r3, r3, #1
 800ebdc:	b2da      	uxtb	r2, r3
 800ebde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebe0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800ebe2:	697b      	ldr	r3, [r7, #20]
 800ebe4:	2b01      	cmp	r3, #1
 800ebe6:	d171      	bne.n	800eccc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800ebe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebea:	8b9b      	ldrh	r3, [r3, #28]
 800ebec:	3314      	adds	r3, #20
 800ebee:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800ebf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebf2:	685b      	ldr	r3, [r3, #4]
 800ebf4:	685b      	ldr	r3, [r3, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800ebfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebfc:	685b      	ldr	r3, [r3, #4]
 800ebfe:	685b      	ldr	r3, [r3, #4]
 800ec00:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800ec02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec04:	3308      	adds	r3, #8
 800ec06:	2214      	movs	r2, #20
 800ec08:	4619      	mov	r1, r3
 800ec0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec0c:	f008 f8d7 	bl	8016dbe <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800ec10:	8a3b      	ldrh	r3, [r7, #16]
 800ec12:	4618      	mov	r0, r3
 800ec14:	f7fd fe52 	bl	800c8bc <lwip_htons>
 800ec18:	4603      	mov	r3, r0
 800ec1a:	461a      	mov	r2, r3
 800ec1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec1e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800ec20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec22:	2200      	movs	r2, #0
 800ec24:	719a      	strb	r2, [r3, #6]
 800ec26:	2200      	movs	r2, #0
 800ec28:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800ec2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec2c:	2200      	movs	r2, #0
 800ec2e:	729a      	strb	r2, [r3, #10]
 800ec30:	2200      	movs	r2, #0
 800ec32:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800ec34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec36:	685b      	ldr	r3, [r3, #4]
 800ec38:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800ec3a:	e00d      	b.n	800ec58 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800ec3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec3e:	685b      	ldr	r3, [r3, #4]
 800ec40:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800ec42:	2114      	movs	r1, #20
 800ec44:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ec46:	f001 fd49 	bl	80106dc <pbuf_remove_header>
      pbuf_cat(p, r);
 800ec4a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ec4c:	6878      	ldr	r0, [r7, #4]
 800ec4e:	f001 fe99 	bl	8010984 <pbuf_cat>
      r = iprh->next_pbuf;
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800ec58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d1ee      	bne.n	800ec3c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800ec5e:	4b1e      	ldr	r3, [pc, #120]	; (800ecd8 <ip4_reass+0x2b4>)
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec64:	429a      	cmp	r2, r3
 800ec66:	d102      	bne.n	800ec6e <ip4_reass+0x24a>
      ipr_prev = NULL;
 800ec68:	2300      	movs	r3, #0
 800ec6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ec6c:	e010      	b.n	800ec90 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800ec6e:	4b1a      	ldr	r3, [pc, #104]	; (800ecd8 <ip4_reass+0x2b4>)
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ec74:	e007      	b.n	800ec86 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800ec76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec7c:	429a      	cmp	r2, r3
 800ec7e:	d006      	beq.n	800ec8e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800ec80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ec86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d1f4      	bne.n	800ec76 <ip4_reass+0x252>
 800ec8c:	e000      	b.n	800ec90 <ip4_reass+0x26c>
          break;
 800ec8e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800ec90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ec92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec94:	f7ff fd2e 	bl	800e6f4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800ec98:	6878      	ldr	r0, [r7, #4]
 800ec9a:	f001 fe33 	bl	8010904 <pbuf_clen>
 800ec9e:	4603      	mov	r3, r0
 800eca0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800eca2:	4b0c      	ldr	r3, [pc, #48]	; (800ecd4 <ip4_reass+0x2b0>)
 800eca4:	881b      	ldrh	r3, [r3, #0]
 800eca6:	8c3a      	ldrh	r2, [r7, #32]
 800eca8:	429a      	cmp	r2, r3
 800ecaa:	d906      	bls.n	800ecba <ip4_reass+0x296>
 800ecac:	4b0b      	ldr	r3, [pc, #44]	; (800ecdc <ip4_reass+0x2b8>)
 800ecae:	f240 229b 	movw	r2, #667	; 0x29b
 800ecb2:	490b      	ldr	r1, [pc, #44]	; (800ece0 <ip4_reass+0x2bc>)
 800ecb4:	480b      	ldr	r0, [pc, #44]	; (800ece4 <ip4_reass+0x2c0>)
 800ecb6:	f008 f92d 	bl	8016f14 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800ecba:	4b06      	ldr	r3, [pc, #24]	; (800ecd4 <ip4_reass+0x2b0>)
 800ecbc:	881a      	ldrh	r2, [r3, #0]
 800ecbe:	8c3b      	ldrh	r3, [r7, #32]
 800ecc0:	1ad3      	subs	r3, r2, r3
 800ecc2:	b29a      	uxth	r2, r3
 800ecc4:	4b03      	ldr	r3, [pc, #12]	; (800ecd4 <ip4_reass+0x2b0>)
 800ecc6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	e038      	b.n	800ed3e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800eccc:	2300      	movs	r3, #0
 800ecce:	e036      	b.n	800ed3e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800ecd0:	bf00      	nop
 800ecd2:	e00a      	b.n	800ecea <ip4_reass+0x2c6>
 800ecd4:	2401243c 	.word	0x2401243c
 800ecd8:	24012438 	.word	0x24012438
 800ecdc:	080183ac 	.word	0x080183ac
 800ece0:	0801855c 	.word	0x0801855c
 800ece4:	08018434 	.word	0x08018434
    goto nullreturn_ipr;
 800ece8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800ecea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d106      	bne.n	800ecfe <ip4_reass+0x2da>
 800ecf0:	4b15      	ldr	r3, [pc, #84]	; (800ed48 <ip4_reass+0x324>)
 800ecf2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800ecf6:	4915      	ldr	r1, [pc, #84]	; (800ed4c <ip4_reass+0x328>)
 800ecf8:	4815      	ldr	r0, [pc, #84]	; (800ed50 <ip4_reass+0x32c>)
 800ecfa:	f008 f90b 	bl	8016f14 <iprintf>
  if (ipr->p == NULL) {
 800ecfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed00:	685b      	ldr	r3, [r3, #4]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d116      	bne.n	800ed34 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800ed06:	4b13      	ldr	r3, [pc, #76]	; (800ed54 <ip4_reass+0x330>)
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed0c:	429a      	cmp	r2, r3
 800ed0e:	d006      	beq.n	800ed1e <ip4_reass+0x2fa>
 800ed10:	4b0d      	ldr	r3, [pc, #52]	; (800ed48 <ip4_reass+0x324>)
 800ed12:	f240 22ab 	movw	r2, #683	; 0x2ab
 800ed16:	4910      	ldr	r1, [pc, #64]	; (800ed58 <ip4_reass+0x334>)
 800ed18:	480d      	ldr	r0, [pc, #52]	; (800ed50 <ip4_reass+0x32c>)
 800ed1a:	f008 f8fb 	bl	8016f14 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800ed1e:	2100      	movs	r1, #0
 800ed20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ed22:	f7ff fce7 	bl	800e6f4 <ip_reass_dequeue_datagram>
 800ed26:	e006      	b.n	800ed36 <ip4_reass+0x312>
    goto nullreturn;
 800ed28:	bf00      	nop
 800ed2a:	e004      	b.n	800ed36 <ip4_reass+0x312>
    goto nullreturn;
 800ed2c:	bf00      	nop
 800ed2e:	e002      	b.n	800ed36 <ip4_reass+0x312>
      goto nullreturn;
 800ed30:	bf00      	nop
 800ed32:	e000      	b.n	800ed36 <ip4_reass+0x312>
  }

nullreturn:
 800ed34:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800ed36:	6878      	ldr	r0, [r7, #4]
 800ed38:	f001 fd56 	bl	80107e8 <pbuf_free>
  return NULL;
 800ed3c:	2300      	movs	r3, #0
}
 800ed3e:	4618      	mov	r0, r3
 800ed40:	3738      	adds	r7, #56	; 0x38
 800ed42:	46bd      	mov	sp, r7
 800ed44:	bd80      	pop	{r7, pc}
 800ed46:	bf00      	nop
 800ed48:	080183ac 	.word	0x080183ac
 800ed4c:	08018578 	.word	0x08018578
 800ed50:	08018434 	.word	0x08018434
 800ed54:	24012438 	.word	0x24012438
 800ed58:	08018584 	.word	0x08018584

0800ed5c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800ed60:	2005      	movs	r0, #5
 800ed62:	f000 fe27 	bl	800f9b4 <memp_malloc>
 800ed66:	4603      	mov	r3, r0
}
 800ed68:	4618      	mov	r0, r3
 800ed6a:	bd80      	pop	{r7, pc}

0800ed6c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b082      	sub	sp, #8
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d106      	bne.n	800ed88 <ip_frag_free_pbuf_custom_ref+0x1c>
 800ed7a:	4b07      	ldr	r3, [pc, #28]	; (800ed98 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800ed7c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800ed80:	4906      	ldr	r1, [pc, #24]	; (800ed9c <ip_frag_free_pbuf_custom_ref+0x30>)
 800ed82:	4807      	ldr	r0, [pc, #28]	; (800eda0 <ip_frag_free_pbuf_custom_ref+0x34>)
 800ed84:	f008 f8c6 	bl	8016f14 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800ed88:	6879      	ldr	r1, [r7, #4]
 800ed8a:	2005      	movs	r0, #5
 800ed8c:	f000 fe88 	bl	800faa0 <memp_free>
}
 800ed90:	bf00      	nop
 800ed92:	3708      	adds	r7, #8
 800ed94:	46bd      	mov	sp, r7
 800ed96:	bd80      	pop	{r7, pc}
 800ed98:	080183ac 	.word	0x080183ac
 800ed9c:	080185a4 	.word	0x080185a4
 800eda0:	08018434 	.word	0x08018434

0800eda4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b084      	sub	sp, #16
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d106      	bne.n	800edc4 <ipfrag_free_pbuf_custom+0x20>
 800edb6:	4b11      	ldr	r3, [pc, #68]	; (800edfc <ipfrag_free_pbuf_custom+0x58>)
 800edb8:	f240 22ce 	movw	r2, #718	; 0x2ce
 800edbc:	4910      	ldr	r1, [pc, #64]	; (800ee00 <ipfrag_free_pbuf_custom+0x5c>)
 800edbe:	4811      	ldr	r0, [pc, #68]	; (800ee04 <ipfrag_free_pbuf_custom+0x60>)
 800edc0:	f008 f8a8 	bl	8016f14 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800edc4:	68fa      	ldr	r2, [r7, #12]
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	429a      	cmp	r2, r3
 800edca:	d006      	beq.n	800edda <ipfrag_free_pbuf_custom+0x36>
 800edcc:	4b0b      	ldr	r3, [pc, #44]	; (800edfc <ipfrag_free_pbuf_custom+0x58>)
 800edce:	f240 22cf 	movw	r2, #719	; 0x2cf
 800edd2:	490d      	ldr	r1, [pc, #52]	; (800ee08 <ipfrag_free_pbuf_custom+0x64>)
 800edd4:	480b      	ldr	r0, [pc, #44]	; (800ee04 <ipfrag_free_pbuf_custom+0x60>)
 800edd6:	f008 f89d 	bl	8016f14 <iprintf>
  if (pcr->original != NULL) {
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	695b      	ldr	r3, [r3, #20]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d004      	beq.n	800edec <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	695b      	ldr	r3, [r3, #20]
 800ede6:	4618      	mov	r0, r3
 800ede8:	f001 fcfe 	bl	80107e8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800edec:	68f8      	ldr	r0, [r7, #12]
 800edee:	f7ff ffbd 	bl	800ed6c <ip_frag_free_pbuf_custom_ref>
}
 800edf2:	bf00      	nop
 800edf4:	3710      	adds	r7, #16
 800edf6:	46bd      	mov	sp, r7
 800edf8:	bd80      	pop	{r7, pc}
 800edfa:	bf00      	nop
 800edfc:	080183ac 	.word	0x080183ac
 800ee00:	080185b0 	.word	0x080185b0
 800ee04:	08018434 	.word	0x08018434
 800ee08:	080185bc 	.word	0x080185bc

0800ee0c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b094      	sub	sp, #80	; 0x50
 800ee10:	af02      	add	r7, sp, #8
 800ee12:	60f8      	str	r0, [r7, #12]
 800ee14:	60b9      	str	r1, [r7, #8]
 800ee16:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800ee18:	2300      	movs	r3, #0
 800ee1a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800ee1e:	68bb      	ldr	r3, [r7, #8]
 800ee20:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ee22:	3b14      	subs	r3, #20
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	da00      	bge.n	800ee2a <ip4_frag+0x1e>
 800ee28:	3307      	adds	r3, #7
 800ee2a:	10db      	asrs	r3, r3, #3
 800ee2c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800ee2e:	2314      	movs	r3, #20
 800ee30:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	685b      	ldr	r3, [r3, #4]
 800ee36:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800ee38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee3a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800ee3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee3e:	781b      	ldrb	r3, [r3, #0]
 800ee40:	f003 030f 	and.w	r3, r3, #15
 800ee44:	b2db      	uxtb	r3, r3
 800ee46:	009b      	lsls	r3, r3, #2
 800ee48:	b2db      	uxtb	r3, r3
 800ee4a:	2b14      	cmp	r3, #20
 800ee4c:	d002      	beq.n	800ee54 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800ee4e:	f06f 0305 	mvn.w	r3, #5
 800ee52:	e110      	b.n	800f076 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	895b      	ldrh	r3, [r3, #10]
 800ee58:	2b13      	cmp	r3, #19
 800ee5a:	d809      	bhi.n	800ee70 <ip4_frag+0x64>
 800ee5c:	4b88      	ldr	r3, [pc, #544]	; (800f080 <ip4_frag+0x274>)
 800ee5e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800ee62:	4988      	ldr	r1, [pc, #544]	; (800f084 <ip4_frag+0x278>)
 800ee64:	4888      	ldr	r0, [pc, #544]	; (800f088 <ip4_frag+0x27c>)
 800ee66:	f008 f855 	bl	8016f14 <iprintf>
 800ee6a:	f06f 0305 	mvn.w	r3, #5
 800ee6e:	e102      	b.n	800f076 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800ee70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee72:	88db      	ldrh	r3, [r3, #6]
 800ee74:	b29b      	uxth	r3, r3
 800ee76:	4618      	mov	r0, r3
 800ee78:	f7fd fd20 	bl	800c8bc <lwip_htons>
 800ee7c:	4603      	mov	r3, r0
 800ee7e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800ee80:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ee82:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ee86:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800ee8a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ee8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ee90:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	891b      	ldrh	r3, [r3, #8]
 800ee96:	3b14      	subs	r3, #20
 800ee98:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800ee9c:	e0e1      	b.n	800f062 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800ee9e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800eea0:	00db      	lsls	r3, r3, #3
 800eea2:	b29b      	uxth	r3, r3
 800eea4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800eea8:	4293      	cmp	r3, r2
 800eeaa:	bf28      	it	cs
 800eeac:	4613      	movcs	r3, r2
 800eeae:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800eeb0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800eeb4:	2114      	movs	r1, #20
 800eeb6:	200e      	movs	r0, #14
 800eeb8:	f001 f9b2 	bl	8010220 <pbuf_alloc>
 800eebc:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800eebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	f000 80d5 	beq.w	800f070 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800eec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eec8:	895b      	ldrh	r3, [r3, #10]
 800eeca:	2b13      	cmp	r3, #19
 800eecc:	d806      	bhi.n	800eedc <ip4_frag+0xd0>
 800eece:	4b6c      	ldr	r3, [pc, #432]	; (800f080 <ip4_frag+0x274>)
 800eed0:	f44f 7249 	mov.w	r2, #804	; 0x324
 800eed4:	496d      	ldr	r1, [pc, #436]	; (800f08c <ip4_frag+0x280>)
 800eed6:	486c      	ldr	r0, [pc, #432]	; (800f088 <ip4_frag+0x27c>)
 800eed8:	f008 f81c 	bl	8016f14 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800eedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eede:	685b      	ldr	r3, [r3, #4]
 800eee0:	2214      	movs	r2, #20
 800eee2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800eee4:	4618      	mov	r0, r3
 800eee6:	f007 ff6a 	bl	8016dbe <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800eeea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeec:	685b      	ldr	r3, [r3, #4]
 800eeee:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800eef0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800eef2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800eef6:	e064      	b.n	800efc2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	895a      	ldrh	r2, [r3, #10]
 800eefc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800eefe:	1ad3      	subs	r3, r2, r3
 800ef00:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	895b      	ldrh	r3, [r3, #10]
 800ef06:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800ef08:	429a      	cmp	r2, r3
 800ef0a:	d906      	bls.n	800ef1a <ip4_frag+0x10e>
 800ef0c:	4b5c      	ldr	r3, [pc, #368]	; (800f080 <ip4_frag+0x274>)
 800ef0e:	f240 322d 	movw	r2, #813	; 0x32d
 800ef12:	495f      	ldr	r1, [pc, #380]	; (800f090 <ip4_frag+0x284>)
 800ef14:	485c      	ldr	r0, [pc, #368]	; (800f088 <ip4_frag+0x27c>)
 800ef16:	f007 fffd 	bl	8016f14 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800ef1a:	8bfa      	ldrh	r2, [r7, #30]
 800ef1c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ef20:	4293      	cmp	r3, r2
 800ef22:	bf28      	it	cs
 800ef24:	4613      	movcs	r3, r2
 800ef26:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800ef2a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d105      	bne.n	800ef3e <ip4_frag+0x132>
        poff = 0;
 800ef32:	2300      	movs	r3, #0
 800ef34:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	60fb      	str	r3, [r7, #12]
        continue;
 800ef3c:	e041      	b.n	800efc2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800ef3e:	f7ff ff0d 	bl	800ed5c <ip_frag_alloc_pbuf_custom_ref>
 800ef42:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800ef44:	69bb      	ldr	r3, [r7, #24]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d103      	bne.n	800ef52 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800ef4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef4c:	f001 fc4c 	bl	80107e8 <pbuf_free>
        goto memerr;
 800ef50:	e08f      	b.n	800f072 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800ef52:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800ef58:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ef5a:	4413      	add	r3, r2
 800ef5c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800ef60:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800ef64:	9201      	str	r2, [sp, #4]
 800ef66:	9300      	str	r3, [sp, #0]
 800ef68:	4603      	mov	r3, r0
 800ef6a:	2241      	movs	r2, #65	; 0x41
 800ef6c:	2000      	movs	r0, #0
 800ef6e:	f001 fa81 	bl	8010474 <pbuf_alloced_custom>
 800ef72:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800ef74:	697b      	ldr	r3, [r7, #20]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d106      	bne.n	800ef88 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800ef7a:	69b8      	ldr	r0, [r7, #24]
 800ef7c:	f7ff fef6 	bl	800ed6c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800ef80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef82:	f001 fc31 	bl	80107e8 <pbuf_free>
        goto memerr;
 800ef86:	e074      	b.n	800f072 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800ef88:	68f8      	ldr	r0, [r7, #12]
 800ef8a:	f001 fcd3 	bl	8010934 <pbuf_ref>
      pcr->original = p;
 800ef8e:	69bb      	ldr	r3, [r7, #24]
 800ef90:	68fa      	ldr	r2, [r7, #12]
 800ef92:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800ef94:	69bb      	ldr	r3, [r7, #24]
 800ef96:	4a3f      	ldr	r2, [pc, #252]	; (800f094 <ip4_frag+0x288>)
 800ef98:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800ef9a:	6979      	ldr	r1, [r7, #20]
 800ef9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef9e:	f001 fcf1 	bl	8010984 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800efa2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800efa6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800efaa:	1ad3      	subs	r3, r2, r3
 800efac:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800efb0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d004      	beq.n	800efc2 <ip4_frag+0x1b6>
        poff = 0;
 800efb8:	2300      	movs	r3, #0
 800efba:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800efc2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d196      	bne.n	800eef8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800efca:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800efcc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800efd0:	4413      	add	r3, r2
 800efd2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800efd4:	68bb      	ldr	r3, [r7, #8]
 800efd6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800efd8:	f1a3 0213 	sub.w	r2, r3, #19
 800efdc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800efe0:	429a      	cmp	r2, r3
 800efe2:	bfcc      	ite	gt
 800efe4:	2301      	movgt	r3, #1
 800efe6:	2300      	movle	r3, #0
 800efe8:	b2db      	uxtb	r3, r3
 800efea:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800efec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800eff0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eff4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800eff6:	6a3b      	ldr	r3, [r7, #32]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d002      	beq.n	800f002 <ip4_frag+0x1f6>
 800effc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800effe:	2b00      	cmp	r3, #0
 800f000:	d003      	beq.n	800f00a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800f002:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f004:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f008:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800f00a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f00c:	4618      	mov	r0, r3
 800f00e:	f7fd fc55 	bl	800c8bc <lwip_htons>
 800f012:	4603      	mov	r3, r0
 800f014:	461a      	mov	r2, r3
 800f016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f018:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800f01a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f01c:	3314      	adds	r3, #20
 800f01e:	b29b      	uxth	r3, r3
 800f020:	4618      	mov	r0, r3
 800f022:	f7fd fc4b 	bl	800c8bc <lwip_htons>
 800f026:	4603      	mov	r3, r0
 800f028:	461a      	mov	r2, r3
 800f02a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f02c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800f02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f030:	2200      	movs	r2, #0
 800f032:	729a      	strb	r2, [r3, #10]
 800f034:	2200      	movs	r2, #0
 800f036:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800f038:	68bb      	ldr	r3, [r7, #8]
 800f03a:	695b      	ldr	r3, [r3, #20]
 800f03c:	687a      	ldr	r2, [r7, #4]
 800f03e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f040:	68b8      	ldr	r0, [r7, #8]
 800f042:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800f044:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f046:	f001 fbcf 	bl	80107e8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800f04a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f04e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f050:	1ad3      	subs	r3, r2, r3
 800f052:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800f056:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800f05a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f05c:	4413      	add	r3, r2
 800f05e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800f062:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f066:	2b00      	cmp	r3, #0
 800f068:	f47f af19 	bne.w	800ee9e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800f06c:	2300      	movs	r3, #0
 800f06e:	e002      	b.n	800f076 <ip4_frag+0x26a>
      goto memerr;
 800f070:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800f072:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f076:	4618      	mov	r0, r3
 800f078:	3748      	adds	r7, #72	; 0x48
 800f07a:	46bd      	mov	sp, r7
 800f07c:	bd80      	pop	{r7, pc}
 800f07e:	bf00      	nop
 800f080:	080183ac 	.word	0x080183ac
 800f084:	080185c8 	.word	0x080185c8
 800f088:	08018434 	.word	0x08018434
 800f08c:	080185e4 	.word	0x080185e4
 800f090:	08018604 	.word	0x08018604
 800f094:	0800eda5 	.word	0x0800eda5

0800f098 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800f098:	b480      	push	{r7}
 800f09a:	b083      	sub	sp, #12
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	4603      	mov	r3, r0
 800f0a0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800f0a2:	4b05      	ldr	r3, [pc, #20]	; (800f0b8 <ptr_to_mem+0x20>)
 800f0a4:	681a      	ldr	r2, [r3, #0]
 800f0a6:	88fb      	ldrh	r3, [r7, #6]
 800f0a8:	4413      	add	r3, r2
}
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	370c      	adds	r7, #12
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b4:	4770      	bx	lr
 800f0b6:	bf00      	nop
 800f0b8:	24012440 	.word	0x24012440

0800f0bc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800f0bc:	b480      	push	{r7}
 800f0be:	b083      	sub	sp, #12
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800f0c4:	4b05      	ldr	r3, [pc, #20]	; (800f0dc <mem_to_ptr+0x20>)
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	687a      	ldr	r2, [r7, #4]
 800f0ca:	1ad3      	subs	r3, r2, r3
 800f0cc:	b29b      	uxth	r3, r3
}
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	370c      	adds	r7, #12
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d8:	4770      	bx	lr
 800f0da:	bf00      	nop
 800f0dc:	24012440 	.word	0x24012440

0800f0e0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800f0e0:	b590      	push	{r4, r7, lr}
 800f0e2:	b085      	sub	sp, #20
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800f0e8:	4b45      	ldr	r3, [pc, #276]	; (800f200 <plug_holes+0x120>)
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	687a      	ldr	r2, [r7, #4]
 800f0ee:	429a      	cmp	r2, r3
 800f0f0:	d206      	bcs.n	800f100 <plug_holes+0x20>
 800f0f2:	4b44      	ldr	r3, [pc, #272]	; (800f204 <plug_holes+0x124>)
 800f0f4:	f240 12df 	movw	r2, #479	; 0x1df
 800f0f8:	4943      	ldr	r1, [pc, #268]	; (800f208 <plug_holes+0x128>)
 800f0fa:	4844      	ldr	r0, [pc, #272]	; (800f20c <plug_holes+0x12c>)
 800f0fc:	f007 ff0a 	bl	8016f14 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800f100:	4b43      	ldr	r3, [pc, #268]	; (800f210 <plug_holes+0x130>)
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	687a      	ldr	r2, [r7, #4]
 800f106:	429a      	cmp	r2, r3
 800f108:	d306      	bcc.n	800f118 <plug_holes+0x38>
 800f10a:	4b3e      	ldr	r3, [pc, #248]	; (800f204 <plug_holes+0x124>)
 800f10c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800f110:	4940      	ldr	r1, [pc, #256]	; (800f214 <plug_holes+0x134>)
 800f112:	483e      	ldr	r0, [pc, #248]	; (800f20c <plug_holes+0x12c>)
 800f114:	f007 fefe 	bl	8016f14 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	791b      	ldrb	r3, [r3, #4]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d006      	beq.n	800f12e <plug_holes+0x4e>
 800f120:	4b38      	ldr	r3, [pc, #224]	; (800f204 <plug_holes+0x124>)
 800f122:	f240 12e1 	movw	r2, #481	; 0x1e1
 800f126:	493c      	ldr	r1, [pc, #240]	; (800f218 <plug_holes+0x138>)
 800f128:	4838      	ldr	r0, [pc, #224]	; (800f20c <plug_holes+0x12c>)
 800f12a:	f007 fef3 	bl	8016f14 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	881b      	ldrh	r3, [r3, #0]
 800f132:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f136:	d906      	bls.n	800f146 <plug_holes+0x66>
 800f138:	4b32      	ldr	r3, [pc, #200]	; (800f204 <plug_holes+0x124>)
 800f13a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800f13e:	4937      	ldr	r1, [pc, #220]	; (800f21c <plug_holes+0x13c>)
 800f140:	4832      	ldr	r0, [pc, #200]	; (800f20c <plug_holes+0x12c>)
 800f142:	f007 fee7 	bl	8016f14 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	881b      	ldrh	r3, [r3, #0]
 800f14a:	4618      	mov	r0, r3
 800f14c:	f7ff ffa4 	bl	800f098 <ptr_to_mem>
 800f150:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800f152:	687a      	ldr	r2, [r7, #4]
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	429a      	cmp	r2, r3
 800f158:	d024      	beq.n	800f1a4 <plug_holes+0xc4>
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	791b      	ldrb	r3, [r3, #4]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d120      	bne.n	800f1a4 <plug_holes+0xc4>
 800f162:	4b2b      	ldr	r3, [pc, #172]	; (800f210 <plug_holes+0x130>)
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	68fa      	ldr	r2, [r7, #12]
 800f168:	429a      	cmp	r2, r3
 800f16a:	d01b      	beq.n	800f1a4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800f16c:	4b2c      	ldr	r3, [pc, #176]	; (800f220 <plug_holes+0x140>)
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	68fa      	ldr	r2, [r7, #12]
 800f172:	429a      	cmp	r2, r3
 800f174:	d102      	bne.n	800f17c <plug_holes+0x9c>
      lfree = mem;
 800f176:	4a2a      	ldr	r2, [pc, #168]	; (800f220 <plug_holes+0x140>)
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	881a      	ldrh	r2, [r3, #0]
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	881b      	ldrh	r3, [r3, #0]
 800f188:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f18c:	d00a      	beq.n	800f1a4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	881b      	ldrh	r3, [r3, #0]
 800f192:	4618      	mov	r0, r3
 800f194:	f7ff ff80 	bl	800f098 <ptr_to_mem>
 800f198:	4604      	mov	r4, r0
 800f19a:	6878      	ldr	r0, [r7, #4]
 800f19c:	f7ff ff8e 	bl	800f0bc <mem_to_ptr>
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	885b      	ldrh	r3, [r3, #2]
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	f7ff ff75 	bl	800f098 <ptr_to_mem>
 800f1ae:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800f1b0:	68ba      	ldr	r2, [r7, #8]
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	429a      	cmp	r2, r3
 800f1b6:	d01f      	beq.n	800f1f8 <plug_holes+0x118>
 800f1b8:	68bb      	ldr	r3, [r7, #8]
 800f1ba:	791b      	ldrb	r3, [r3, #4]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d11b      	bne.n	800f1f8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800f1c0:	4b17      	ldr	r3, [pc, #92]	; (800f220 <plug_holes+0x140>)
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	687a      	ldr	r2, [r7, #4]
 800f1c6:	429a      	cmp	r2, r3
 800f1c8:	d102      	bne.n	800f1d0 <plug_holes+0xf0>
      lfree = pmem;
 800f1ca:	4a15      	ldr	r2, [pc, #84]	; (800f220 <plug_holes+0x140>)
 800f1cc:	68bb      	ldr	r3, [r7, #8]
 800f1ce:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	881a      	ldrh	r2, [r3, #0]
 800f1d4:	68bb      	ldr	r3, [r7, #8]
 800f1d6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	881b      	ldrh	r3, [r3, #0]
 800f1dc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f1e0:	d00a      	beq.n	800f1f8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	881b      	ldrh	r3, [r3, #0]
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	f7ff ff56 	bl	800f098 <ptr_to_mem>
 800f1ec:	4604      	mov	r4, r0
 800f1ee:	68b8      	ldr	r0, [r7, #8]
 800f1f0:	f7ff ff64 	bl	800f0bc <mem_to_ptr>
 800f1f4:	4603      	mov	r3, r0
 800f1f6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800f1f8:	bf00      	nop
 800f1fa:	3714      	adds	r7, #20
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	bd90      	pop	{r4, r7, pc}
 800f200:	24012440 	.word	0x24012440
 800f204:	08018614 	.word	0x08018614
 800f208:	08018684 	.word	0x08018684
 800f20c:	0801869c 	.word	0x0801869c
 800f210:	24012444 	.word	0x24012444
 800f214:	080186c4 	.word	0x080186c4
 800f218:	080186e0 	.word	0x080186e0
 800f21c:	080186fc 	.word	0x080186fc
 800f220:	2401244c 	.word	0x2401244c

0800f224 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800f224:	b580      	push	{r7, lr}
 800f226:	b082      	sub	sp, #8
 800f228:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800f22a:	4b1d      	ldr	r3, [pc, #116]	; (800f2a0 <mem_init+0x7c>)
 800f22c:	4a1d      	ldr	r2, [pc, #116]	; (800f2a4 <mem_init+0x80>)
 800f22e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800f230:	4b1b      	ldr	r3, [pc, #108]	; (800f2a0 <mem_init+0x7c>)
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800f23c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	2200      	movs	r2, #0
 800f242:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	2200      	movs	r2, #0
 800f248:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800f24a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800f24e:	f7ff ff23 	bl	800f098 <ptr_to_mem>
 800f252:	4603      	mov	r3, r0
 800f254:	4a14      	ldr	r2, [pc, #80]	; (800f2a8 <mem_init+0x84>)
 800f256:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800f258:	4b13      	ldr	r3, [pc, #76]	; (800f2a8 <mem_init+0x84>)
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	2201      	movs	r2, #1
 800f25e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800f260:	4b11      	ldr	r3, [pc, #68]	; (800f2a8 <mem_init+0x84>)
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800f268:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800f26a:	4b0f      	ldr	r3, [pc, #60]	; (800f2a8 <mem_init+0x84>)
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800f272:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800f274:	4b0a      	ldr	r3, [pc, #40]	; (800f2a0 <mem_init+0x7c>)
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	4a0c      	ldr	r2, [pc, #48]	; (800f2ac <mem_init+0x88>)
 800f27a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800f27c:	480c      	ldr	r0, [pc, #48]	; (800f2b0 <mem_init+0x8c>)
 800f27e:	f001 fdcf 	bl	8010e20 <sys_mutex_new>
 800f282:	4603      	mov	r3, r0
 800f284:	2b00      	cmp	r3, #0
 800f286:	d006      	beq.n	800f296 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800f288:	4b0a      	ldr	r3, [pc, #40]	; (800f2b4 <mem_init+0x90>)
 800f28a:	f240 221f 	movw	r2, #543	; 0x21f
 800f28e:	490a      	ldr	r1, [pc, #40]	; (800f2b8 <mem_init+0x94>)
 800f290:	480a      	ldr	r0, [pc, #40]	; (800f2bc <mem_init+0x98>)
 800f292:	f007 fe3f 	bl	8016f14 <iprintf>
  }
}
 800f296:	bf00      	nop
 800f298:	3708      	adds	r7, #8
 800f29a:	46bd      	mov	sp, r7
 800f29c:	bd80      	pop	{r7, pc}
 800f29e:	bf00      	nop
 800f2a0:	24012440 	.word	0x24012440
 800f2a4:	30044000 	.word	0x30044000
 800f2a8:	24012444 	.word	0x24012444
 800f2ac:	2401244c 	.word	0x2401244c
 800f2b0:	24012448 	.word	0x24012448
 800f2b4:	08018614 	.word	0x08018614
 800f2b8:	08018728 	.word	0x08018728
 800f2bc:	0801869c 	.word	0x0801869c

0800f2c0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b086      	sub	sp, #24
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800f2c8:	6878      	ldr	r0, [r7, #4]
 800f2ca:	f7ff fef7 	bl	800f0bc <mem_to_ptr>
 800f2ce:	4603      	mov	r3, r0
 800f2d0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	881b      	ldrh	r3, [r3, #0]
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	f7ff fede 	bl	800f098 <ptr_to_mem>
 800f2dc:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	885b      	ldrh	r3, [r3, #2]
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	f7ff fed8 	bl	800f098 <ptr_to_mem>
 800f2e8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	881b      	ldrh	r3, [r3, #0]
 800f2ee:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f2f2:	d818      	bhi.n	800f326 <mem_link_valid+0x66>
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	885b      	ldrh	r3, [r3, #2]
 800f2f8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f2fc:	d813      	bhi.n	800f326 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800f302:	8afa      	ldrh	r2, [r7, #22]
 800f304:	429a      	cmp	r2, r3
 800f306:	d004      	beq.n	800f312 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	881b      	ldrh	r3, [r3, #0]
 800f30c:	8afa      	ldrh	r2, [r7, #22]
 800f30e:	429a      	cmp	r2, r3
 800f310:	d109      	bne.n	800f326 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800f312:	4b08      	ldr	r3, [pc, #32]	; (800f334 <mem_link_valid+0x74>)
 800f314:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f316:	693a      	ldr	r2, [r7, #16]
 800f318:	429a      	cmp	r2, r3
 800f31a:	d006      	beq.n	800f32a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800f31c:	693b      	ldr	r3, [r7, #16]
 800f31e:	885b      	ldrh	r3, [r3, #2]
 800f320:	8afa      	ldrh	r2, [r7, #22]
 800f322:	429a      	cmp	r2, r3
 800f324:	d001      	beq.n	800f32a <mem_link_valid+0x6a>
    return 0;
 800f326:	2300      	movs	r3, #0
 800f328:	e000      	b.n	800f32c <mem_link_valid+0x6c>
  }
  return 1;
 800f32a:	2301      	movs	r3, #1
}
 800f32c:	4618      	mov	r0, r3
 800f32e:	3718      	adds	r7, #24
 800f330:	46bd      	mov	sp, r7
 800f332:	bd80      	pop	{r7, pc}
 800f334:	24012444 	.word	0x24012444

0800f338 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800f338:	b580      	push	{r7, lr}
 800f33a:	b088      	sub	sp, #32
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	2b00      	cmp	r3, #0
 800f344:	d070      	beq.n	800f428 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	f003 0303 	and.w	r3, r3, #3
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d00d      	beq.n	800f36c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800f350:	4b37      	ldr	r3, [pc, #220]	; (800f430 <mem_free+0xf8>)
 800f352:	f240 2273 	movw	r2, #627	; 0x273
 800f356:	4937      	ldr	r1, [pc, #220]	; (800f434 <mem_free+0xfc>)
 800f358:	4837      	ldr	r0, [pc, #220]	; (800f438 <mem_free+0x100>)
 800f35a:	f007 fddb 	bl	8016f14 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f35e:	f001 fdb1 	bl	8010ec4 <sys_arch_protect>
 800f362:	60f8      	str	r0, [r7, #12]
 800f364:	68f8      	ldr	r0, [r7, #12]
 800f366:	f001 fdbb 	bl	8010ee0 <sys_arch_unprotect>
    return;
 800f36a:	e05e      	b.n	800f42a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	3b08      	subs	r3, #8
 800f370:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800f372:	4b32      	ldr	r3, [pc, #200]	; (800f43c <mem_free+0x104>)
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	69fa      	ldr	r2, [r7, #28]
 800f378:	429a      	cmp	r2, r3
 800f37a:	d306      	bcc.n	800f38a <mem_free+0x52>
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	f103 020c 	add.w	r2, r3, #12
 800f382:	4b2f      	ldr	r3, [pc, #188]	; (800f440 <mem_free+0x108>)
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	429a      	cmp	r2, r3
 800f388:	d90d      	bls.n	800f3a6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800f38a:	4b29      	ldr	r3, [pc, #164]	; (800f430 <mem_free+0xf8>)
 800f38c:	f240 227f 	movw	r2, #639	; 0x27f
 800f390:	492c      	ldr	r1, [pc, #176]	; (800f444 <mem_free+0x10c>)
 800f392:	4829      	ldr	r0, [pc, #164]	; (800f438 <mem_free+0x100>)
 800f394:	f007 fdbe 	bl	8016f14 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f398:	f001 fd94 	bl	8010ec4 <sys_arch_protect>
 800f39c:	6138      	str	r0, [r7, #16]
 800f39e:	6938      	ldr	r0, [r7, #16]
 800f3a0:	f001 fd9e 	bl	8010ee0 <sys_arch_unprotect>
    return;
 800f3a4:	e041      	b.n	800f42a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f3a6:	4828      	ldr	r0, [pc, #160]	; (800f448 <mem_free+0x110>)
 800f3a8:	f001 fd50 	bl	8010e4c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800f3ac:	69fb      	ldr	r3, [r7, #28]
 800f3ae:	791b      	ldrb	r3, [r3, #4]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d110      	bne.n	800f3d6 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800f3b4:	4b1e      	ldr	r3, [pc, #120]	; (800f430 <mem_free+0xf8>)
 800f3b6:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800f3ba:	4924      	ldr	r1, [pc, #144]	; (800f44c <mem_free+0x114>)
 800f3bc:	481e      	ldr	r0, [pc, #120]	; (800f438 <mem_free+0x100>)
 800f3be:	f007 fda9 	bl	8016f14 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800f3c2:	4821      	ldr	r0, [pc, #132]	; (800f448 <mem_free+0x110>)
 800f3c4:	f001 fd51 	bl	8010e6a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f3c8:	f001 fd7c 	bl	8010ec4 <sys_arch_protect>
 800f3cc:	6178      	str	r0, [r7, #20]
 800f3ce:	6978      	ldr	r0, [r7, #20]
 800f3d0:	f001 fd86 	bl	8010ee0 <sys_arch_unprotect>
    return;
 800f3d4:	e029      	b.n	800f42a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800f3d6:	69f8      	ldr	r0, [r7, #28]
 800f3d8:	f7ff ff72 	bl	800f2c0 <mem_link_valid>
 800f3dc:	4603      	mov	r3, r0
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d110      	bne.n	800f404 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800f3e2:	4b13      	ldr	r3, [pc, #76]	; (800f430 <mem_free+0xf8>)
 800f3e4:	f240 2295 	movw	r2, #661	; 0x295
 800f3e8:	4919      	ldr	r1, [pc, #100]	; (800f450 <mem_free+0x118>)
 800f3ea:	4813      	ldr	r0, [pc, #76]	; (800f438 <mem_free+0x100>)
 800f3ec:	f007 fd92 	bl	8016f14 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800f3f0:	4815      	ldr	r0, [pc, #84]	; (800f448 <mem_free+0x110>)
 800f3f2:	f001 fd3a 	bl	8010e6a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f3f6:	f001 fd65 	bl	8010ec4 <sys_arch_protect>
 800f3fa:	61b8      	str	r0, [r7, #24]
 800f3fc:	69b8      	ldr	r0, [r7, #24]
 800f3fe:	f001 fd6f 	bl	8010ee0 <sys_arch_unprotect>
    return;
 800f402:	e012      	b.n	800f42a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800f404:	69fb      	ldr	r3, [r7, #28]
 800f406:	2200      	movs	r2, #0
 800f408:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800f40a:	4b12      	ldr	r3, [pc, #72]	; (800f454 <mem_free+0x11c>)
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	69fa      	ldr	r2, [r7, #28]
 800f410:	429a      	cmp	r2, r3
 800f412:	d202      	bcs.n	800f41a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800f414:	4a0f      	ldr	r2, [pc, #60]	; (800f454 <mem_free+0x11c>)
 800f416:	69fb      	ldr	r3, [r7, #28]
 800f418:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800f41a:	69f8      	ldr	r0, [r7, #28]
 800f41c:	f7ff fe60 	bl	800f0e0 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f420:	4809      	ldr	r0, [pc, #36]	; (800f448 <mem_free+0x110>)
 800f422:	f001 fd22 	bl	8010e6a <sys_mutex_unlock>
 800f426:	e000      	b.n	800f42a <mem_free+0xf2>
    return;
 800f428:	bf00      	nop
}
 800f42a:	3720      	adds	r7, #32
 800f42c:	46bd      	mov	sp, r7
 800f42e:	bd80      	pop	{r7, pc}
 800f430:	08018614 	.word	0x08018614
 800f434:	08018744 	.word	0x08018744
 800f438:	0801869c 	.word	0x0801869c
 800f43c:	24012440 	.word	0x24012440
 800f440:	24012444 	.word	0x24012444
 800f444:	08018768 	.word	0x08018768
 800f448:	24012448 	.word	0x24012448
 800f44c:	08018784 	.word	0x08018784
 800f450:	080187ac 	.word	0x080187ac
 800f454:	2401244c 	.word	0x2401244c

0800f458 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800f458:	b580      	push	{r7, lr}
 800f45a:	b088      	sub	sp, #32
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	6078      	str	r0, [r7, #4]
 800f460:	460b      	mov	r3, r1
 800f462:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800f464:	887b      	ldrh	r3, [r7, #2]
 800f466:	3303      	adds	r3, #3
 800f468:	b29b      	uxth	r3, r3
 800f46a:	f023 0303 	bic.w	r3, r3, #3
 800f46e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800f470:	8bfb      	ldrh	r3, [r7, #30]
 800f472:	2b0b      	cmp	r3, #11
 800f474:	d801      	bhi.n	800f47a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800f476:	230c      	movs	r3, #12
 800f478:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800f47a:	8bfb      	ldrh	r3, [r7, #30]
 800f47c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f480:	d803      	bhi.n	800f48a <mem_trim+0x32>
 800f482:	8bfa      	ldrh	r2, [r7, #30]
 800f484:	887b      	ldrh	r3, [r7, #2]
 800f486:	429a      	cmp	r2, r3
 800f488:	d201      	bcs.n	800f48e <mem_trim+0x36>
    return NULL;
 800f48a:	2300      	movs	r3, #0
 800f48c:	e0d8      	b.n	800f640 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800f48e:	4b6e      	ldr	r3, [pc, #440]	; (800f648 <mem_trim+0x1f0>)
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	687a      	ldr	r2, [r7, #4]
 800f494:	429a      	cmp	r2, r3
 800f496:	d304      	bcc.n	800f4a2 <mem_trim+0x4a>
 800f498:	4b6c      	ldr	r3, [pc, #432]	; (800f64c <mem_trim+0x1f4>)
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	687a      	ldr	r2, [r7, #4]
 800f49e:	429a      	cmp	r2, r3
 800f4a0:	d306      	bcc.n	800f4b0 <mem_trim+0x58>
 800f4a2:	4b6b      	ldr	r3, [pc, #428]	; (800f650 <mem_trim+0x1f8>)
 800f4a4:	f240 22d1 	movw	r2, #721	; 0x2d1
 800f4a8:	496a      	ldr	r1, [pc, #424]	; (800f654 <mem_trim+0x1fc>)
 800f4aa:	486b      	ldr	r0, [pc, #428]	; (800f658 <mem_trim+0x200>)
 800f4ac:	f007 fd32 	bl	8016f14 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800f4b0:	4b65      	ldr	r3, [pc, #404]	; (800f648 <mem_trim+0x1f0>)
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	687a      	ldr	r2, [r7, #4]
 800f4b6:	429a      	cmp	r2, r3
 800f4b8:	d304      	bcc.n	800f4c4 <mem_trim+0x6c>
 800f4ba:	4b64      	ldr	r3, [pc, #400]	; (800f64c <mem_trim+0x1f4>)
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	687a      	ldr	r2, [r7, #4]
 800f4c0:	429a      	cmp	r2, r3
 800f4c2:	d307      	bcc.n	800f4d4 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f4c4:	f001 fcfe 	bl	8010ec4 <sys_arch_protect>
 800f4c8:	60b8      	str	r0, [r7, #8]
 800f4ca:	68b8      	ldr	r0, [r7, #8]
 800f4cc:	f001 fd08 	bl	8010ee0 <sys_arch_unprotect>
    return rmem;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	e0b5      	b.n	800f640 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	3b08      	subs	r3, #8
 800f4d8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800f4da:	69b8      	ldr	r0, [r7, #24]
 800f4dc:	f7ff fdee 	bl	800f0bc <mem_to_ptr>
 800f4e0:	4603      	mov	r3, r0
 800f4e2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800f4e4:	69bb      	ldr	r3, [r7, #24]
 800f4e6:	881a      	ldrh	r2, [r3, #0]
 800f4e8:	8afb      	ldrh	r3, [r7, #22]
 800f4ea:	1ad3      	subs	r3, r2, r3
 800f4ec:	b29b      	uxth	r3, r3
 800f4ee:	3b08      	subs	r3, #8
 800f4f0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800f4f2:	8bfa      	ldrh	r2, [r7, #30]
 800f4f4:	8abb      	ldrh	r3, [r7, #20]
 800f4f6:	429a      	cmp	r2, r3
 800f4f8:	d906      	bls.n	800f508 <mem_trim+0xb0>
 800f4fa:	4b55      	ldr	r3, [pc, #340]	; (800f650 <mem_trim+0x1f8>)
 800f4fc:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800f500:	4956      	ldr	r1, [pc, #344]	; (800f65c <mem_trim+0x204>)
 800f502:	4855      	ldr	r0, [pc, #340]	; (800f658 <mem_trim+0x200>)
 800f504:	f007 fd06 	bl	8016f14 <iprintf>
  if (newsize > size) {
 800f508:	8bfa      	ldrh	r2, [r7, #30]
 800f50a:	8abb      	ldrh	r3, [r7, #20]
 800f50c:	429a      	cmp	r2, r3
 800f50e:	d901      	bls.n	800f514 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800f510:	2300      	movs	r3, #0
 800f512:	e095      	b.n	800f640 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800f514:	8bfa      	ldrh	r2, [r7, #30]
 800f516:	8abb      	ldrh	r3, [r7, #20]
 800f518:	429a      	cmp	r2, r3
 800f51a:	d101      	bne.n	800f520 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	e08f      	b.n	800f640 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f520:	484f      	ldr	r0, [pc, #316]	; (800f660 <mem_trim+0x208>)
 800f522:	f001 fc93 	bl	8010e4c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800f526:	69bb      	ldr	r3, [r7, #24]
 800f528:	881b      	ldrh	r3, [r3, #0]
 800f52a:	4618      	mov	r0, r3
 800f52c:	f7ff fdb4 	bl	800f098 <ptr_to_mem>
 800f530:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800f532:	693b      	ldr	r3, [r7, #16]
 800f534:	791b      	ldrb	r3, [r3, #4]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d13f      	bne.n	800f5ba <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f53a:	69bb      	ldr	r3, [r7, #24]
 800f53c:	881b      	ldrh	r3, [r3, #0]
 800f53e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f542:	d106      	bne.n	800f552 <mem_trim+0xfa>
 800f544:	4b42      	ldr	r3, [pc, #264]	; (800f650 <mem_trim+0x1f8>)
 800f546:	f240 22f5 	movw	r2, #757	; 0x2f5
 800f54a:	4946      	ldr	r1, [pc, #280]	; (800f664 <mem_trim+0x20c>)
 800f54c:	4842      	ldr	r0, [pc, #264]	; (800f658 <mem_trim+0x200>)
 800f54e:	f007 fce1 	bl	8016f14 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800f552:	693b      	ldr	r3, [r7, #16]
 800f554:	881b      	ldrh	r3, [r3, #0]
 800f556:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f558:	8afa      	ldrh	r2, [r7, #22]
 800f55a:	8bfb      	ldrh	r3, [r7, #30]
 800f55c:	4413      	add	r3, r2
 800f55e:	b29b      	uxth	r3, r3
 800f560:	3308      	adds	r3, #8
 800f562:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800f564:	4b40      	ldr	r3, [pc, #256]	; (800f668 <mem_trim+0x210>)
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	693a      	ldr	r2, [r7, #16]
 800f56a:	429a      	cmp	r2, r3
 800f56c:	d106      	bne.n	800f57c <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800f56e:	89fb      	ldrh	r3, [r7, #14]
 800f570:	4618      	mov	r0, r3
 800f572:	f7ff fd91 	bl	800f098 <ptr_to_mem>
 800f576:	4603      	mov	r3, r0
 800f578:	4a3b      	ldr	r2, [pc, #236]	; (800f668 <mem_trim+0x210>)
 800f57a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800f57c:	89fb      	ldrh	r3, [r7, #14]
 800f57e:	4618      	mov	r0, r3
 800f580:	f7ff fd8a 	bl	800f098 <ptr_to_mem>
 800f584:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800f586:	693b      	ldr	r3, [r7, #16]
 800f588:	2200      	movs	r2, #0
 800f58a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800f58c:	693b      	ldr	r3, [r7, #16]
 800f58e:	89ba      	ldrh	r2, [r7, #12]
 800f590:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800f592:	693b      	ldr	r3, [r7, #16]
 800f594:	8afa      	ldrh	r2, [r7, #22]
 800f596:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800f598:	69bb      	ldr	r3, [r7, #24]
 800f59a:	89fa      	ldrh	r2, [r7, #14]
 800f59c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f59e:	693b      	ldr	r3, [r7, #16]
 800f5a0:	881b      	ldrh	r3, [r3, #0]
 800f5a2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f5a6:	d047      	beq.n	800f638 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f5a8:	693b      	ldr	r3, [r7, #16]
 800f5aa:	881b      	ldrh	r3, [r3, #0]
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	f7ff fd73 	bl	800f098 <ptr_to_mem>
 800f5b2:	4602      	mov	r2, r0
 800f5b4:	89fb      	ldrh	r3, [r7, #14]
 800f5b6:	8053      	strh	r3, [r2, #2]
 800f5b8:	e03e      	b.n	800f638 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800f5ba:	8bfb      	ldrh	r3, [r7, #30]
 800f5bc:	f103 0214 	add.w	r2, r3, #20
 800f5c0:	8abb      	ldrh	r3, [r7, #20]
 800f5c2:	429a      	cmp	r2, r3
 800f5c4:	d838      	bhi.n	800f638 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f5c6:	8afa      	ldrh	r2, [r7, #22]
 800f5c8:	8bfb      	ldrh	r3, [r7, #30]
 800f5ca:	4413      	add	r3, r2
 800f5cc:	b29b      	uxth	r3, r3
 800f5ce:	3308      	adds	r3, #8
 800f5d0:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f5d2:	69bb      	ldr	r3, [r7, #24]
 800f5d4:	881b      	ldrh	r3, [r3, #0]
 800f5d6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f5da:	d106      	bne.n	800f5ea <mem_trim+0x192>
 800f5dc:	4b1c      	ldr	r3, [pc, #112]	; (800f650 <mem_trim+0x1f8>)
 800f5de:	f240 3216 	movw	r2, #790	; 0x316
 800f5e2:	4920      	ldr	r1, [pc, #128]	; (800f664 <mem_trim+0x20c>)
 800f5e4:	481c      	ldr	r0, [pc, #112]	; (800f658 <mem_trim+0x200>)
 800f5e6:	f007 fc95 	bl	8016f14 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800f5ea:	89fb      	ldrh	r3, [r7, #14]
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	f7ff fd53 	bl	800f098 <ptr_to_mem>
 800f5f2:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800f5f4:	4b1c      	ldr	r3, [pc, #112]	; (800f668 <mem_trim+0x210>)
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	693a      	ldr	r2, [r7, #16]
 800f5fa:	429a      	cmp	r2, r3
 800f5fc:	d202      	bcs.n	800f604 <mem_trim+0x1ac>
      lfree = mem2;
 800f5fe:	4a1a      	ldr	r2, [pc, #104]	; (800f668 <mem_trim+0x210>)
 800f600:	693b      	ldr	r3, [r7, #16]
 800f602:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800f604:	693b      	ldr	r3, [r7, #16]
 800f606:	2200      	movs	r2, #0
 800f608:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800f60a:	69bb      	ldr	r3, [r7, #24]
 800f60c:	881a      	ldrh	r2, [r3, #0]
 800f60e:	693b      	ldr	r3, [r7, #16]
 800f610:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800f612:	693b      	ldr	r3, [r7, #16]
 800f614:	8afa      	ldrh	r2, [r7, #22]
 800f616:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800f618:	69bb      	ldr	r3, [r7, #24]
 800f61a:	89fa      	ldrh	r2, [r7, #14]
 800f61c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f61e:	693b      	ldr	r3, [r7, #16]
 800f620:	881b      	ldrh	r3, [r3, #0]
 800f622:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f626:	d007      	beq.n	800f638 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f628:	693b      	ldr	r3, [r7, #16]
 800f62a:	881b      	ldrh	r3, [r3, #0]
 800f62c:	4618      	mov	r0, r3
 800f62e:	f7ff fd33 	bl	800f098 <ptr_to_mem>
 800f632:	4602      	mov	r2, r0
 800f634:	89fb      	ldrh	r3, [r7, #14]
 800f636:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f638:	4809      	ldr	r0, [pc, #36]	; (800f660 <mem_trim+0x208>)
 800f63a:	f001 fc16 	bl	8010e6a <sys_mutex_unlock>
  return rmem;
 800f63e:	687b      	ldr	r3, [r7, #4]
}
 800f640:	4618      	mov	r0, r3
 800f642:	3720      	adds	r7, #32
 800f644:	46bd      	mov	sp, r7
 800f646:	bd80      	pop	{r7, pc}
 800f648:	24012440 	.word	0x24012440
 800f64c:	24012444 	.word	0x24012444
 800f650:	08018614 	.word	0x08018614
 800f654:	080187e0 	.word	0x080187e0
 800f658:	0801869c 	.word	0x0801869c
 800f65c:	080187f8 	.word	0x080187f8
 800f660:	24012448 	.word	0x24012448
 800f664:	08018818 	.word	0x08018818
 800f668:	2401244c 	.word	0x2401244c

0800f66c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800f66c:	b580      	push	{r7, lr}
 800f66e:	b088      	sub	sp, #32
 800f670:	af00      	add	r7, sp, #0
 800f672:	4603      	mov	r3, r0
 800f674:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800f676:	88fb      	ldrh	r3, [r7, #6]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d101      	bne.n	800f680 <mem_malloc+0x14>
    return NULL;
 800f67c:	2300      	movs	r3, #0
 800f67e:	e0e2      	b.n	800f846 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800f680:	88fb      	ldrh	r3, [r7, #6]
 800f682:	3303      	adds	r3, #3
 800f684:	b29b      	uxth	r3, r3
 800f686:	f023 0303 	bic.w	r3, r3, #3
 800f68a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800f68c:	8bbb      	ldrh	r3, [r7, #28]
 800f68e:	2b0b      	cmp	r3, #11
 800f690:	d801      	bhi.n	800f696 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800f692:	230c      	movs	r3, #12
 800f694:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800f696:	8bbb      	ldrh	r3, [r7, #28]
 800f698:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f69c:	d803      	bhi.n	800f6a6 <mem_malloc+0x3a>
 800f69e:	8bba      	ldrh	r2, [r7, #28]
 800f6a0:	88fb      	ldrh	r3, [r7, #6]
 800f6a2:	429a      	cmp	r2, r3
 800f6a4:	d201      	bcs.n	800f6aa <mem_malloc+0x3e>
    return NULL;
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	e0cd      	b.n	800f846 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800f6aa:	4869      	ldr	r0, [pc, #420]	; (800f850 <mem_malloc+0x1e4>)
 800f6ac:	f001 fbce 	bl	8010e4c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f6b0:	4b68      	ldr	r3, [pc, #416]	; (800f854 <mem_malloc+0x1e8>)
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	f7ff fd01 	bl	800f0bc <mem_to_ptr>
 800f6ba:	4603      	mov	r3, r0
 800f6bc:	83fb      	strh	r3, [r7, #30]
 800f6be:	e0b7      	b.n	800f830 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800f6c0:	8bfb      	ldrh	r3, [r7, #30]
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	f7ff fce8 	bl	800f098 <ptr_to_mem>
 800f6c8:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800f6ca:	697b      	ldr	r3, [r7, #20]
 800f6cc:	791b      	ldrb	r3, [r3, #4]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	f040 80a7 	bne.w	800f822 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800f6d4:	697b      	ldr	r3, [r7, #20]
 800f6d6:	881b      	ldrh	r3, [r3, #0]
 800f6d8:	461a      	mov	r2, r3
 800f6da:	8bfb      	ldrh	r3, [r7, #30]
 800f6dc:	1ad3      	subs	r3, r2, r3
 800f6de:	f1a3 0208 	sub.w	r2, r3, #8
 800f6e2:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800f6e4:	429a      	cmp	r2, r3
 800f6e6:	f0c0 809c 	bcc.w	800f822 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800f6ea:	697b      	ldr	r3, [r7, #20]
 800f6ec:	881b      	ldrh	r3, [r3, #0]
 800f6ee:	461a      	mov	r2, r3
 800f6f0:	8bfb      	ldrh	r3, [r7, #30]
 800f6f2:	1ad3      	subs	r3, r2, r3
 800f6f4:	f1a3 0208 	sub.w	r2, r3, #8
 800f6f8:	8bbb      	ldrh	r3, [r7, #28]
 800f6fa:	3314      	adds	r3, #20
 800f6fc:	429a      	cmp	r2, r3
 800f6fe:	d333      	bcc.n	800f768 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800f700:	8bfa      	ldrh	r2, [r7, #30]
 800f702:	8bbb      	ldrh	r3, [r7, #28]
 800f704:	4413      	add	r3, r2
 800f706:	b29b      	uxth	r3, r3
 800f708:	3308      	adds	r3, #8
 800f70a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800f70c:	8a7b      	ldrh	r3, [r7, #18]
 800f70e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f712:	d106      	bne.n	800f722 <mem_malloc+0xb6>
 800f714:	4b50      	ldr	r3, [pc, #320]	; (800f858 <mem_malloc+0x1ec>)
 800f716:	f240 3287 	movw	r2, #903	; 0x387
 800f71a:	4950      	ldr	r1, [pc, #320]	; (800f85c <mem_malloc+0x1f0>)
 800f71c:	4850      	ldr	r0, [pc, #320]	; (800f860 <mem_malloc+0x1f4>)
 800f71e:	f007 fbf9 	bl	8016f14 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800f722:	8a7b      	ldrh	r3, [r7, #18]
 800f724:	4618      	mov	r0, r3
 800f726:	f7ff fcb7 	bl	800f098 <ptr_to_mem>
 800f72a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	2200      	movs	r2, #0
 800f730:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800f732:	697b      	ldr	r3, [r7, #20]
 800f734:	881a      	ldrh	r2, [r3, #0]
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	8bfa      	ldrh	r2, [r7, #30]
 800f73e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800f740:	697b      	ldr	r3, [r7, #20]
 800f742:	8a7a      	ldrh	r2, [r7, #18]
 800f744:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800f746:	697b      	ldr	r3, [r7, #20]
 800f748:	2201      	movs	r2, #1
 800f74a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	881b      	ldrh	r3, [r3, #0]
 800f750:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f754:	d00b      	beq.n	800f76e <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	881b      	ldrh	r3, [r3, #0]
 800f75a:	4618      	mov	r0, r3
 800f75c:	f7ff fc9c 	bl	800f098 <ptr_to_mem>
 800f760:	4602      	mov	r2, r0
 800f762:	8a7b      	ldrh	r3, [r7, #18]
 800f764:	8053      	strh	r3, [r2, #2]
 800f766:	e002      	b.n	800f76e <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800f768:	697b      	ldr	r3, [r7, #20]
 800f76a:	2201      	movs	r2, #1
 800f76c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800f76e:	4b39      	ldr	r3, [pc, #228]	; (800f854 <mem_malloc+0x1e8>)
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	697a      	ldr	r2, [r7, #20]
 800f774:	429a      	cmp	r2, r3
 800f776:	d127      	bne.n	800f7c8 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800f778:	4b36      	ldr	r3, [pc, #216]	; (800f854 <mem_malloc+0x1e8>)
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800f77e:	e005      	b.n	800f78c <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800f780:	69bb      	ldr	r3, [r7, #24]
 800f782:	881b      	ldrh	r3, [r3, #0]
 800f784:	4618      	mov	r0, r3
 800f786:	f7ff fc87 	bl	800f098 <ptr_to_mem>
 800f78a:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800f78c:	69bb      	ldr	r3, [r7, #24]
 800f78e:	791b      	ldrb	r3, [r3, #4]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d004      	beq.n	800f79e <mem_malloc+0x132>
 800f794:	4b33      	ldr	r3, [pc, #204]	; (800f864 <mem_malloc+0x1f8>)
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	69ba      	ldr	r2, [r7, #24]
 800f79a:	429a      	cmp	r2, r3
 800f79c:	d1f0      	bne.n	800f780 <mem_malloc+0x114>
          }
          lfree = cur;
 800f79e:	4a2d      	ldr	r2, [pc, #180]	; (800f854 <mem_malloc+0x1e8>)
 800f7a0:	69bb      	ldr	r3, [r7, #24]
 800f7a2:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800f7a4:	4b2b      	ldr	r3, [pc, #172]	; (800f854 <mem_malloc+0x1e8>)
 800f7a6:	681a      	ldr	r2, [r3, #0]
 800f7a8:	4b2e      	ldr	r3, [pc, #184]	; (800f864 <mem_malloc+0x1f8>)
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	429a      	cmp	r2, r3
 800f7ae:	d00b      	beq.n	800f7c8 <mem_malloc+0x15c>
 800f7b0:	4b28      	ldr	r3, [pc, #160]	; (800f854 <mem_malloc+0x1e8>)
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	791b      	ldrb	r3, [r3, #4]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d006      	beq.n	800f7c8 <mem_malloc+0x15c>
 800f7ba:	4b27      	ldr	r3, [pc, #156]	; (800f858 <mem_malloc+0x1ec>)
 800f7bc:	f240 32b5 	movw	r2, #949	; 0x3b5
 800f7c0:	4929      	ldr	r1, [pc, #164]	; (800f868 <mem_malloc+0x1fc>)
 800f7c2:	4827      	ldr	r0, [pc, #156]	; (800f860 <mem_malloc+0x1f4>)
 800f7c4:	f007 fba6 	bl	8016f14 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800f7c8:	4821      	ldr	r0, [pc, #132]	; (800f850 <mem_malloc+0x1e4>)
 800f7ca:	f001 fb4e 	bl	8010e6a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800f7ce:	8bba      	ldrh	r2, [r7, #28]
 800f7d0:	697b      	ldr	r3, [r7, #20]
 800f7d2:	4413      	add	r3, r2
 800f7d4:	3308      	adds	r3, #8
 800f7d6:	4a23      	ldr	r2, [pc, #140]	; (800f864 <mem_malloc+0x1f8>)
 800f7d8:	6812      	ldr	r2, [r2, #0]
 800f7da:	4293      	cmp	r3, r2
 800f7dc:	d906      	bls.n	800f7ec <mem_malloc+0x180>
 800f7de:	4b1e      	ldr	r3, [pc, #120]	; (800f858 <mem_malloc+0x1ec>)
 800f7e0:	f240 32b9 	movw	r2, #953	; 0x3b9
 800f7e4:	4921      	ldr	r1, [pc, #132]	; (800f86c <mem_malloc+0x200>)
 800f7e6:	481e      	ldr	r0, [pc, #120]	; (800f860 <mem_malloc+0x1f4>)
 800f7e8:	f007 fb94 	bl	8016f14 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800f7ec:	697b      	ldr	r3, [r7, #20]
 800f7ee:	f003 0303 	and.w	r3, r3, #3
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d006      	beq.n	800f804 <mem_malloc+0x198>
 800f7f6:	4b18      	ldr	r3, [pc, #96]	; (800f858 <mem_malloc+0x1ec>)
 800f7f8:	f240 32bb 	movw	r2, #955	; 0x3bb
 800f7fc:	491c      	ldr	r1, [pc, #112]	; (800f870 <mem_malloc+0x204>)
 800f7fe:	4818      	ldr	r0, [pc, #96]	; (800f860 <mem_malloc+0x1f4>)
 800f800:	f007 fb88 	bl	8016f14 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800f804:	697b      	ldr	r3, [r7, #20]
 800f806:	f003 0303 	and.w	r3, r3, #3
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d006      	beq.n	800f81c <mem_malloc+0x1b0>
 800f80e:	4b12      	ldr	r3, [pc, #72]	; (800f858 <mem_malloc+0x1ec>)
 800f810:	f240 32bd 	movw	r2, #957	; 0x3bd
 800f814:	4917      	ldr	r1, [pc, #92]	; (800f874 <mem_malloc+0x208>)
 800f816:	4812      	ldr	r0, [pc, #72]	; (800f860 <mem_malloc+0x1f4>)
 800f818:	f007 fb7c 	bl	8016f14 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800f81c:	697b      	ldr	r3, [r7, #20]
 800f81e:	3308      	adds	r3, #8
 800f820:	e011      	b.n	800f846 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800f822:	8bfb      	ldrh	r3, [r7, #30]
 800f824:	4618      	mov	r0, r3
 800f826:	f7ff fc37 	bl	800f098 <ptr_to_mem>
 800f82a:	4603      	mov	r3, r0
 800f82c:	881b      	ldrh	r3, [r3, #0]
 800f82e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f830:	8bfa      	ldrh	r2, [r7, #30]
 800f832:	8bbb      	ldrh	r3, [r7, #28]
 800f834:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800f838:	429a      	cmp	r2, r3
 800f83a:	f4ff af41 	bcc.w	800f6c0 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800f83e:	4804      	ldr	r0, [pc, #16]	; (800f850 <mem_malloc+0x1e4>)
 800f840:	f001 fb13 	bl	8010e6a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800f844:	2300      	movs	r3, #0
}
 800f846:	4618      	mov	r0, r3
 800f848:	3720      	adds	r7, #32
 800f84a:	46bd      	mov	sp, r7
 800f84c:	bd80      	pop	{r7, pc}
 800f84e:	bf00      	nop
 800f850:	24012448 	.word	0x24012448
 800f854:	2401244c 	.word	0x2401244c
 800f858:	08018614 	.word	0x08018614
 800f85c:	08018818 	.word	0x08018818
 800f860:	0801869c 	.word	0x0801869c
 800f864:	24012444 	.word	0x24012444
 800f868:	0801882c 	.word	0x0801882c
 800f86c:	08018848 	.word	0x08018848
 800f870:	08018878 	.word	0x08018878
 800f874:	080188a8 	.word	0x080188a8

0800f878 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800f878:	b480      	push	{r7}
 800f87a:	b085      	sub	sp, #20
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	689b      	ldr	r3, [r3, #8]
 800f884:	2200      	movs	r2, #0
 800f886:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	685b      	ldr	r3, [r3, #4]
 800f88c:	3303      	adds	r3, #3
 800f88e:	f023 0303 	bic.w	r3, r3, #3
 800f892:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800f894:	2300      	movs	r3, #0
 800f896:	60fb      	str	r3, [r7, #12]
 800f898:	e011      	b.n	800f8be <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	689b      	ldr	r3, [r3, #8]
 800f89e:	681a      	ldr	r2, [r3, #0]
 800f8a0:	68bb      	ldr	r3, [r7, #8]
 800f8a2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	689b      	ldr	r3, [r3, #8]
 800f8a8:	68ba      	ldr	r2, [r7, #8]
 800f8aa:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	881b      	ldrh	r3, [r3, #0]
 800f8b0:	461a      	mov	r2, r3
 800f8b2:	68bb      	ldr	r3, [r7, #8]
 800f8b4:	4413      	add	r3, r2
 800f8b6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	3301      	adds	r3, #1
 800f8bc:	60fb      	str	r3, [r7, #12]
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	885b      	ldrh	r3, [r3, #2]
 800f8c2:	461a      	mov	r2, r3
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	4293      	cmp	r3, r2
 800f8c8:	dbe7      	blt.n	800f89a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800f8ca:	bf00      	nop
 800f8cc:	bf00      	nop
 800f8ce:	3714      	adds	r7, #20
 800f8d0:	46bd      	mov	sp, r7
 800f8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d6:	4770      	bx	lr

0800f8d8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b082      	sub	sp, #8
 800f8dc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f8de:	2300      	movs	r3, #0
 800f8e0:	80fb      	strh	r3, [r7, #6]
 800f8e2:	e009      	b.n	800f8f8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800f8e4:	88fb      	ldrh	r3, [r7, #6]
 800f8e6:	4a08      	ldr	r2, [pc, #32]	; (800f908 <memp_init+0x30>)
 800f8e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	f7ff ffc3 	bl	800f878 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f8f2:	88fb      	ldrh	r3, [r7, #6]
 800f8f4:	3301      	adds	r3, #1
 800f8f6:	80fb      	strh	r3, [r7, #6]
 800f8f8:	88fb      	ldrh	r3, [r7, #6]
 800f8fa:	2b0c      	cmp	r3, #12
 800f8fc:	d9f2      	bls.n	800f8e4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800f8fe:	bf00      	nop
 800f900:	bf00      	nop
 800f902:	3708      	adds	r7, #8
 800f904:	46bd      	mov	sp, r7
 800f906:	bd80      	pop	{r7, pc}
 800f908:	0801ad80 	.word	0x0801ad80

0800f90c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800f90c:	b580      	push	{r7, lr}
 800f90e:	b084      	sub	sp, #16
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800f914:	f001 fad6 	bl	8010ec4 <sys_arch_protect>
 800f918:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	689b      	ldr	r3, [r3, #8]
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800f922:	68bb      	ldr	r3, [r7, #8]
 800f924:	2b00      	cmp	r3, #0
 800f926:	d015      	beq.n	800f954 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	689b      	ldr	r3, [r3, #8]
 800f92c:	68ba      	ldr	r2, [r7, #8]
 800f92e:	6812      	ldr	r2, [r2, #0]
 800f930:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800f932:	68bb      	ldr	r3, [r7, #8]
 800f934:	f003 0303 	and.w	r3, r3, #3
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d006      	beq.n	800f94a <do_memp_malloc_pool+0x3e>
 800f93c:	4b09      	ldr	r3, [pc, #36]	; (800f964 <do_memp_malloc_pool+0x58>)
 800f93e:	f44f 728c 	mov.w	r2, #280	; 0x118
 800f942:	4909      	ldr	r1, [pc, #36]	; (800f968 <do_memp_malloc_pool+0x5c>)
 800f944:	4809      	ldr	r0, [pc, #36]	; (800f96c <do_memp_malloc_pool+0x60>)
 800f946:	f007 fae5 	bl	8016f14 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800f94a:	68f8      	ldr	r0, [r7, #12]
 800f94c:	f001 fac8 	bl	8010ee0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800f950:	68bb      	ldr	r3, [r7, #8]
 800f952:	e003      	b.n	800f95c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800f954:	68f8      	ldr	r0, [r7, #12]
 800f956:	f001 fac3 	bl	8010ee0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800f95a:	2300      	movs	r3, #0
}
 800f95c:	4618      	mov	r0, r3
 800f95e:	3710      	adds	r7, #16
 800f960:	46bd      	mov	sp, r7
 800f962:	bd80      	pop	{r7, pc}
 800f964:	080188cc 	.word	0x080188cc
 800f968:	08018940 	.word	0x08018940
 800f96c:	08018964 	.word	0x08018964

0800f970 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800f970:	b580      	push	{r7, lr}
 800f972:	b082      	sub	sp, #8
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d106      	bne.n	800f98c <memp_malloc_pool+0x1c>
 800f97e:	4b0a      	ldr	r3, [pc, #40]	; (800f9a8 <memp_malloc_pool+0x38>)
 800f980:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800f984:	4909      	ldr	r1, [pc, #36]	; (800f9ac <memp_malloc_pool+0x3c>)
 800f986:	480a      	ldr	r0, [pc, #40]	; (800f9b0 <memp_malloc_pool+0x40>)
 800f988:	f007 fac4 	bl	8016f14 <iprintf>
  if (desc == NULL) {
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d101      	bne.n	800f996 <memp_malloc_pool+0x26>
    return NULL;
 800f992:	2300      	movs	r3, #0
 800f994:	e003      	b.n	800f99e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800f996:	6878      	ldr	r0, [r7, #4]
 800f998:	f7ff ffb8 	bl	800f90c <do_memp_malloc_pool>
 800f99c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800f99e:	4618      	mov	r0, r3
 800f9a0:	3708      	adds	r7, #8
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	bd80      	pop	{r7, pc}
 800f9a6:	bf00      	nop
 800f9a8:	080188cc 	.word	0x080188cc
 800f9ac:	0801898c 	.word	0x0801898c
 800f9b0:	08018964 	.word	0x08018964

0800f9b4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	b084      	sub	sp, #16
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	4603      	mov	r3, r0
 800f9bc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800f9be:	79fb      	ldrb	r3, [r7, #7]
 800f9c0:	2b0c      	cmp	r3, #12
 800f9c2:	d908      	bls.n	800f9d6 <memp_malloc+0x22>
 800f9c4:	4b0a      	ldr	r3, [pc, #40]	; (800f9f0 <memp_malloc+0x3c>)
 800f9c6:	f240 1257 	movw	r2, #343	; 0x157
 800f9ca:	490a      	ldr	r1, [pc, #40]	; (800f9f4 <memp_malloc+0x40>)
 800f9cc:	480a      	ldr	r0, [pc, #40]	; (800f9f8 <memp_malloc+0x44>)
 800f9ce:	f007 faa1 	bl	8016f14 <iprintf>
 800f9d2:	2300      	movs	r3, #0
 800f9d4:	e008      	b.n	800f9e8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800f9d6:	79fb      	ldrb	r3, [r7, #7]
 800f9d8:	4a08      	ldr	r2, [pc, #32]	; (800f9fc <memp_malloc+0x48>)
 800f9da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f9de:	4618      	mov	r0, r3
 800f9e0:	f7ff ff94 	bl	800f90c <do_memp_malloc_pool>
 800f9e4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800f9e6:	68fb      	ldr	r3, [r7, #12]
}
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	3710      	adds	r7, #16
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	bd80      	pop	{r7, pc}
 800f9f0:	080188cc 	.word	0x080188cc
 800f9f4:	080189a0 	.word	0x080189a0
 800f9f8:	08018964 	.word	0x08018964
 800f9fc:	0801ad80 	.word	0x0801ad80

0800fa00 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b084      	sub	sp, #16
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]
 800fa08:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800fa0a:	683b      	ldr	r3, [r7, #0]
 800fa0c:	f003 0303 	and.w	r3, r3, #3
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d006      	beq.n	800fa22 <do_memp_free_pool+0x22>
 800fa14:	4b0d      	ldr	r3, [pc, #52]	; (800fa4c <do_memp_free_pool+0x4c>)
 800fa16:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800fa1a:	490d      	ldr	r1, [pc, #52]	; (800fa50 <do_memp_free_pool+0x50>)
 800fa1c:	480d      	ldr	r0, [pc, #52]	; (800fa54 <do_memp_free_pool+0x54>)
 800fa1e:	f007 fa79 	bl	8016f14 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800fa22:	683b      	ldr	r3, [r7, #0]
 800fa24:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800fa26:	f001 fa4d 	bl	8010ec4 <sys_arch_protect>
 800fa2a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	689b      	ldr	r3, [r3, #8]
 800fa30:	681a      	ldr	r2, [r3, #0]
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	689b      	ldr	r3, [r3, #8]
 800fa3a:	68fa      	ldr	r2, [r7, #12]
 800fa3c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800fa3e:	68b8      	ldr	r0, [r7, #8]
 800fa40:	f001 fa4e 	bl	8010ee0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800fa44:	bf00      	nop
 800fa46:	3710      	adds	r7, #16
 800fa48:	46bd      	mov	sp, r7
 800fa4a:	bd80      	pop	{r7, pc}
 800fa4c:	080188cc 	.word	0x080188cc
 800fa50:	080189c0 	.word	0x080189c0
 800fa54:	08018964 	.word	0x08018964

0800fa58 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	b082      	sub	sp, #8
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	6078      	str	r0, [r7, #4]
 800fa60:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d106      	bne.n	800fa76 <memp_free_pool+0x1e>
 800fa68:	4b0a      	ldr	r3, [pc, #40]	; (800fa94 <memp_free_pool+0x3c>)
 800fa6a:	f240 1295 	movw	r2, #405	; 0x195
 800fa6e:	490a      	ldr	r1, [pc, #40]	; (800fa98 <memp_free_pool+0x40>)
 800fa70:	480a      	ldr	r0, [pc, #40]	; (800fa9c <memp_free_pool+0x44>)
 800fa72:	f007 fa4f 	bl	8016f14 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d007      	beq.n	800fa8c <memp_free_pool+0x34>
 800fa7c:	683b      	ldr	r3, [r7, #0]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d004      	beq.n	800fa8c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800fa82:	6839      	ldr	r1, [r7, #0]
 800fa84:	6878      	ldr	r0, [r7, #4]
 800fa86:	f7ff ffbb 	bl	800fa00 <do_memp_free_pool>
 800fa8a:	e000      	b.n	800fa8e <memp_free_pool+0x36>
    return;
 800fa8c:	bf00      	nop
}
 800fa8e:	3708      	adds	r7, #8
 800fa90:	46bd      	mov	sp, r7
 800fa92:	bd80      	pop	{r7, pc}
 800fa94:	080188cc 	.word	0x080188cc
 800fa98:	0801898c 	.word	0x0801898c
 800fa9c:	08018964 	.word	0x08018964

0800faa0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b082      	sub	sp, #8
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	4603      	mov	r3, r0
 800faa8:	6039      	str	r1, [r7, #0]
 800faaa:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800faac:	79fb      	ldrb	r3, [r7, #7]
 800faae:	2b0c      	cmp	r3, #12
 800fab0:	d907      	bls.n	800fac2 <memp_free+0x22>
 800fab2:	4b0c      	ldr	r3, [pc, #48]	; (800fae4 <memp_free+0x44>)
 800fab4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800fab8:	490b      	ldr	r1, [pc, #44]	; (800fae8 <memp_free+0x48>)
 800faba:	480c      	ldr	r0, [pc, #48]	; (800faec <memp_free+0x4c>)
 800fabc:	f007 fa2a 	bl	8016f14 <iprintf>
 800fac0:	e00c      	b.n	800fadc <memp_free+0x3c>

  if (mem == NULL) {
 800fac2:	683b      	ldr	r3, [r7, #0]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d008      	beq.n	800fada <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800fac8:	79fb      	ldrb	r3, [r7, #7]
 800faca:	4a09      	ldr	r2, [pc, #36]	; (800faf0 <memp_free+0x50>)
 800facc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fad0:	6839      	ldr	r1, [r7, #0]
 800fad2:	4618      	mov	r0, r3
 800fad4:	f7ff ff94 	bl	800fa00 <do_memp_free_pool>
 800fad8:	e000      	b.n	800fadc <memp_free+0x3c>
    return;
 800fada:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800fadc:	3708      	adds	r7, #8
 800fade:	46bd      	mov	sp, r7
 800fae0:	bd80      	pop	{r7, pc}
 800fae2:	bf00      	nop
 800fae4:	080188cc 	.word	0x080188cc
 800fae8:	080189e0 	.word	0x080189e0
 800faec:	08018964 	.word	0x08018964
 800faf0:	0801ad80 	.word	0x0801ad80

0800faf4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800faf4:	b480      	push	{r7}
 800faf6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800faf8:	bf00      	nop
 800fafa:	46bd      	mov	sp, r7
 800fafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb00:	4770      	bx	lr
	...

0800fb04 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b086      	sub	sp, #24
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	60f8      	str	r0, [r7, #12]
 800fb0c:	60b9      	str	r1, [r7, #8]
 800fb0e:	607a      	str	r2, [r7, #4]
 800fb10:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d108      	bne.n	800fb2a <netif_add+0x26>
 800fb18:	4b57      	ldr	r3, [pc, #348]	; (800fc78 <netif_add+0x174>)
 800fb1a:	f240 1227 	movw	r2, #295	; 0x127
 800fb1e:	4957      	ldr	r1, [pc, #348]	; (800fc7c <netif_add+0x178>)
 800fb20:	4857      	ldr	r0, [pc, #348]	; (800fc80 <netif_add+0x17c>)
 800fb22:	f007 f9f7 	bl	8016f14 <iprintf>
 800fb26:	2300      	movs	r3, #0
 800fb28:	e0a2      	b.n	800fc70 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800fb2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d108      	bne.n	800fb42 <netif_add+0x3e>
 800fb30:	4b51      	ldr	r3, [pc, #324]	; (800fc78 <netif_add+0x174>)
 800fb32:	f44f 7294 	mov.w	r2, #296	; 0x128
 800fb36:	4953      	ldr	r1, [pc, #332]	; (800fc84 <netif_add+0x180>)
 800fb38:	4851      	ldr	r0, [pc, #324]	; (800fc80 <netif_add+0x17c>)
 800fb3a:	f007 f9eb 	bl	8016f14 <iprintf>
 800fb3e:	2300      	movs	r3, #0
 800fb40:	e096      	b.n	800fc70 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800fb42:	68bb      	ldr	r3, [r7, #8]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d101      	bne.n	800fb4c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800fb48:	4b4f      	ldr	r3, [pc, #316]	; (800fc88 <netif_add+0x184>)
 800fb4a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d101      	bne.n	800fb56 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800fb52:	4b4d      	ldr	r3, [pc, #308]	; (800fc88 <netif_add+0x184>)
 800fb54:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800fb56:	683b      	ldr	r3, [r7, #0]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d101      	bne.n	800fb60 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800fb5c:	4b4a      	ldr	r3, [pc, #296]	; (800fc88 <netif_add+0x184>)
 800fb5e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	2200      	movs	r2, #0
 800fb64:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	2200      	movs	r2, #0
 800fb6a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	2200      	movs	r2, #0
 800fb70:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	4a45      	ldr	r2, [pc, #276]	; (800fc8c <netif_add+0x188>)
 800fb76:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	2200      	movs	r2, #0
 800fb7c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	2200      	movs	r2, #0
 800fb82:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	2200      	movs	r2, #0
 800fb8a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	6a3a      	ldr	r2, [r7, #32]
 800fb90:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800fb92:	4b3f      	ldr	r3, [pc, #252]	; (800fc90 <netif_add+0x18c>)
 800fb94:	781a      	ldrb	r2, [r3, #0]
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fba0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800fba2:	683b      	ldr	r3, [r7, #0]
 800fba4:	687a      	ldr	r2, [r7, #4]
 800fba6:	68b9      	ldr	r1, [r7, #8]
 800fba8:	68f8      	ldr	r0, [r7, #12]
 800fbaa:	f000 f913 	bl	800fdd4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800fbae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbb0:	68f8      	ldr	r0, [r7, #12]
 800fbb2:	4798      	blx	r3
 800fbb4:	4603      	mov	r3, r0
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d001      	beq.n	800fbbe <netif_add+0xba>
    return NULL;
 800fbba:	2300      	movs	r3, #0
 800fbbc:	e058      	b.n	800fc70 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fbc4:	2bff      	cmp	r3, #255	; 0xff
 800fbc6:	d103      	bne.n	800fbd0 <netif_add+0xcc>
        netif->num = 0;
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	2200      	movs	r2, #0
 800fbcc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800fbd0:	2300      	movs	r3, #0
 800fbd2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800fbd4:	4b2f      	ldr	r3, [pc, #188]	; (800fc94 <netif_add+0x190>)
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	617b      	str	r3, [r7, #20]
 800fbda:	e02b      	b.n	800fc34 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800fbdc:	697a      	ldr	r2, [r7, #20]
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	429a      	cmp	r2, r3
 800fbe2:	d106      	bne.n	800fbf2 <netif_add+0xee>
 800fbe4:	4b24      	ldr	r3, [pc, #144]	; (800fc78 <netif_add+0x174>)
 800fbe6:	f240 128b 	movw	r2, #395	; 0x18b
 800fbea:	492b      	ldr	r1, [pc, #172]	; (800fc98 <netif_add+0x194>)
 800fbec:	4824      	ldr	r0, [pc, #144]	; (800fc80 <netif_add+0x17c>)
 800fbee:	f007 f991 	bl	8016f14 <iprintf>
        num_netifs++;
 800fbf2:	693b      	ldr	r3, [r7, #16]
 800fbf4:	3301      	adds	r3, #1
 800fbf6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800fbf8:	693b      	ldr	r3, [r7, #16]
 800fbfa:	2bff      	cmp	r3, #255	; 0xff
 800fbfc:	dd06      	ble.n	800fc0c <netif_add+0x108>
 800fbfe:	4b1e      	ldr	r3, [pc, #120]	; (800fc78 <netif_add+0x174>)
 800fc00:	f240 128d 	movw	r2, #397	; 0x18d
 800fc04:	4925      	ldr	r1, [pc, #148]	; (800fc9c <netif_add+0x198>)
 800fc06:	481e      	ldr	r0, [pc, #120]	; (800fc80 <netif_add+0x17c>)
 800fc08:	f007 f984 	bl	8016f14 <iprintf>
        if (netif2->num == netif->num) {
 800fc0c:	697b      	ldr	r3, [r7, #20]
 800fc0e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fc18:	429a      	cmp	r2, r3
 800fc1a:	d108      	bne.n	800fc2e <netif_add+0x12a>
          netif->num++;
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fc22:	3301      	adds	r3, #1
 800fc24:	b2da      	uxtb	r2, r3
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800fc2c:	e005      	b.n	800fc3a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800fc2e:	697b      	ldr	r3, [r7, #20]
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	617b      	str	r3, [r7, #20]
 800fc34:	697b      	ldr	r3, [r7, #20]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d1d0      	bne.n	800fbdc <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800fc3a:	697b      	ldr	r3, [r7, #20]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d1be      	bne.n	800fbbe <netif_add+0xba>
  }
  if (netif->num == 254) {
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fc46:	2bfe      	cmp	r3, #254	; 0xfe
 800fc48:	d103      	bne.n	800fc52 <netif_add+0x14e>
    netif_num = 0;
 800fc4a:	4b11      	ldr	r3, [pc, #68]	; (800fc90 <netif_add+0x18c>)
 800fc4c:	2200      	movs	r2, #0
 800fc4e:	701a      	strb	r2, [r3, #0]
 800fc50:	e006      	b.n	800fc60 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fc58:	3301      	adds	r3, #1
 800fc5a:	b2da      	uxtb	r2, r3
 800fc5c:	4b0c      	ldr	r3, [pc, #48]	; (800fc90 <netif_add+0x18c>)
 800fc5e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800fc60:	4b0c      	ldr	r3, [pc, #48]	; (800fc94 <netif_add+0x190>)
 800fc62:	681a      	ldr	r2, [r3, #0]
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800fc68:	4a0a      	ldr	r2, [pc, #40]	; (800fc94 <netif_add+0x190>)
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800fc6e:	68fb      	ldr	r3, [r7, #12]
}
 800fc70:	4618      	mov	r0, r3
 800fc72:	3718      	adds	r7, #24
 800fc74:	46bd      	mov	sp, r7
 800fc76:	bd80      	pop	{r7, pc}
 800fc78:	080189fc 	.word	0x080189fc
 800fc7c:	08018ad0 	.word	0x08018ad0
 800fc80:	08018a8c 	.word	0x08018a8c
 800fc84:	08018aec 	.word	0x08018aec
 800fc88:	0801ace0 	.word	0x0801ace0
 800fc8c:	080100af 	.word	0x080100af
 800fc90:	24015524 	.word	0x24015524
 800fc94:	2401551c 	.word	0x2401551c
 800fc98:	08018b10 	.word	0x08018b10
 800fc9c:	08018b24 	.word	0x08018b24

0800fca0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b082      	sub	sp, #8
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
 800fca8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800fcaa:	6839      	ldr	r1, [r7, #0]
 800fcac:	6878      	ldr	r0, [r7, #4]
 800fcae:	f002 fc6f 	bl	8012590 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800fcb2:	6839      	ldr	r1, [r7, #0]
 800fcb4:	6878      	ldr	r0, [r7, #4]
 800fcb6:	f006 ff25 	bl	8016b04 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800fcba:	bf00      	nop
 800fcbc:	3708      	adds	r7, #8
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	bd80      	pop	{r7, pc}
	...

0800fcc4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	b086      	sub	sp, #24
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	60f8      	str	r0, [r7, #12]
 800fccc:	60b9      	str	r1, [r7, #8]
 800fcce:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800fcd0:	68bb      	ldr	r3, [r7, #8]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d106      	bne.n	800fce4 <netif_do_set_ipaddr+0x20>
 800fcd6:	4b1d      	ldr	r3, [pc, #116]	; (800fd4c <netif_do_set_ipaddr+0x88>)
 800fcd8:	f240 12cb 	movw	r2, #459	; 0x1cb
 800fcdc:	491c      	ldr	r1, [pc, #112]	; (800fd50 <netif_do_set_ipaddr+0x8c>)
 800fcde:	481d      	ldr	r0, [pc, #116]	; (800fd54 <netif_do_set_ipaddr+0x90>)
 800fce0:	f007 f918 	bl	8016f14 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d106      	bne.n	800fcf8 <netif_do_set_ipaddr+0x34>
 800fcea:	4b18      	ldr	r3, [pc, #96]	; (800fd4c <netif_do_set_ipaddr+0x88>)
 800fcec:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800fcf0:	4917      	ldr	r1, [pc, #92]	; (800fd50 <netif_do_set_ipaddr+0x8c>)
 800fcf2:	4818      	ldr	r0, [pc, #96]	; (800fd54 <netif_do_set_ipaddr+0x90>)
 800fcf4:	f007 f90e 	bl	8016f14 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800fcf8:	68bb      	ldr	r3, [r7, #8]
 800fcfa:	681a      	ldr	r2, [r3, #0]
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	3304      	adds	r3, #4
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	429a      	cmp	r2, r3
 800fd04:	d01c      	beq.n	800fd40 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800fd06:	68bb      	ldr	r3, [r7, #8]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	3304      	adds	r3, #4
 800fd10:	681a      	ldr	r2, [r3, #0]
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800fd16:	f107 0314 	add.w	r3, r7, #20
 800fd1a:	4619      	mov	r1, r3
 800fd1c:	6878      	ldr	r0, [r7, #4]
 800fd1e:	f7ff ffbf 	bl	800fca0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800fd22:	68bb      	ldr	r3, [r7, #8]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d002      	beq.n	800fd2e <netif_do_set_ipaddr+0x6a>
 800fd28:	68bb      	ldr	r3, [r7, #8]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	e000      	b.n	800fd30 <netif_do_set_ipaddr+0x6c>
 800fd2e:	2300      	movs	r3, #0
 800fd30:	68fa      	ldr	r2, [r7, #12]
 800fd32:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800fd34:	2101      	movs	r1, #1
 800fd36:	68f8      	ldr	r0, [r7, #12]
 800fd38:	f000 f8d2 	bl	800fee0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800fd3c:	2301      	movs	r3, #1
 800fd3e:	e000      	b.n	800fd42 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800fd40:	2300      	movs	r3, #0
}
 800fd42:	4618      	mov	r0, r3
 800fd44:	3718      	adds	r7, #24
 800fd46:	46bd      	mov	sp, r7
 800fd48:	bd80      	pop	{r7, pc}
 800fd4a:	bf00      	nop
 800fd4c:	080189fc 	.word	0x080189fc
 800fd50:	08018b54 	.word	0x08018b54
 800fd54:	08018a8c 	.word	0x08018a8c

0800fd58 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800fd58:	b480      	push	{r7}
 800fd5a:	b085      	sub	sp, #20
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	60f8      	str	r0, [r7, #12]
 800fd60:	60b9      	str	r1, [r7, #8]
 800fd62:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800fd64:	68bb      	ldr	r3, [r7, #8]
 800fd66:	681a      	ldr	r2, [r3, #0]
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	3308      	adds	r3, #8
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	429a      	cmp	r2, r3
 800fd70:	d00a      	beq.n	800fd88 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800fd72:	68bb      	ldr	r3, [r7, #8]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d002      	beq.n	800fd7e <netif_do_set_netmask+0x26>
 800fd78:	68bb      	ldr	r3, [r7, #8]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	e000      	b.n	800fd80 <netif_do_set_netmask+0x28>
 800fd7e:	2300      	movs	r3, #0
 800fd80:	68fa      	ldr	r2, [r7, #12]
 800fd82:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800fd84:	2301      	movs	r3, #1
 800fd86:	e000      	b.n	800fd8a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800fd88:	2300      	movs	r3, #0
}
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	3714      	adds	r7, #20
 800fd8e:	46bd      	mov	sp, r7
 800fd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd94:	4770      	bx	lr

0800fd96 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800fd96:	b480      	push	{r7}
 800fd98:	b085      	sub	sp, #20
 800fd9a:	af00      	add	r7, sp, #0
 800fd9c:	60f8      	str	r0, [r7, #12]
 800fd9e:	60b9      	str	r1, [r7, #8]
 800fda0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800fda2:	68bb      	ldr	r3, [r7, #8]
 800fda4:	681a      	ldr	r2, [r3, #0]
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	330c      	adds	r3, #12
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	429a      	cmp	r2, r3
 800fdae:	d00a      	beq.n	800fdc6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800fdb0:	68bb      	ldr	r3, [r7, #8]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d002      	beq.n	800fdbc <netif_do_set_gw+0x26>
 800fdb6:	68bb      	ldr	r3, [r7, #8]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	e000      	b.n	800fdbe <netif_do_set_gw+0x28>
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	68fa      	ldr	r2, [r7, #12]
 800fdc0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800fdc2:	2301      	movs	r3, #1
 800fdc4:	e000      	b.n	800fdc8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800fdc6:	2300      	movs	r3, #0
}
 800fdc8:	4618      	mov	r0, r3
 800fdca:	3714      	adds	r7, #20
 800fdcc:	46bd      	mov	sp, r7
 800fdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd2:	4770      	bx	lr

0800fdd4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	b088      	sub	sp, #32
 800fdd8:	af00      	add	r7, sp, #0
 800fdda:	60f8      	str	r0, [r7, #12]
 800fddc:	60b9      	str	r1, [r7, #8]
 800fdde:	607a      	str	r2, [r7, #4]
 800fde0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800fde2:	2300      	movs	r3, #0
 800fde4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800fde6:	2300      	movs	r3, #0
 800fde8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800fdea:	68bb      	ldr	r3, [r7, #8]
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d101      	bne.n	800fdf4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800fdf0:	4b1c      	ldr	r3, [pc, #112]	; (800fe64 <netif_set_addr+0x90>)
 800fdf2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d101      	bne.n	800fdfe <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800fdfa:	4b1a      	ldr	r3, [pc, #104]	; (800fe64 <netif_set_addr+0x90>)
 800fdfc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800fdfe:	683b      	ldr	r3, [r7, #0]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d101      	bne.n	800fe08 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800fe04:	4b17      	ldr	r3, [pc, #92]	; (800fe64 <netif_set_addr+0x90>)
 800fe06:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800fe08:	68bb      	ldr	r3, [r7, #8]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d003      	beq.n	800fe16 <netif_set_addr+0x42>
 800fe0e:	68bb      	ldr	r3, [r7, #8]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d101      	bne.n	800fe1a <netif_set_addr+0x46>
 800fe16:	2301      	movs	r3, #1
 800fe18:	e000      	b.n	800fe1c <netif_set_addr+0x48>
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800fe1e:	697b      	ldr	r3, [r7, #20]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d006      	beq.n	800fe32 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800fe24:	f107 0310 	add.w	r3, r7, #16
 800fe28:	461a      	mov	r2, r3
 800fe2a:	68b9      	ldr	r1, [r7, #8]
 800fe2c:	68f8      	ldr	r0, [r7, #12]
 800fe2e:	f7ff ff49 	bl	800fcc4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800fe32:	69fa      	ldr	r2, [r7, #28]
 800fe34:	6879      	ldr	r1, [r7, #4]
 800fe36:	68f8      	ldr	r0, [r7, #12]
 800fe38:	f7ff ff8e 	bl	800fd58 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800fe3c:	69ba      	ldr	r2, [r7, #24]
 800fe3e:	6839      	ldr	r1, [r7, #0]
 800fe40:	68f8      	ldr	r0, [r7, #12]
 800fe42:	f7ff ffa8 	bl	800fd96 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800fe46:	697b      	ldr	r3, [r7, #20]
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d106      	bne.n	800fe5a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800fe4c:	f107 0310 	add.w	r3, r7, #16
 800fe50:	461a      	mov	r2, r3
 800fe52:	68b9      	ldr	r1, [r7, #8]
 800fe54:	68f8      	ldr	r0, [r7, #12]
 800fe56:	f7ff ff35 	bl	800fcc4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800fe5a:	bf00      	nop
 800fe5c:	3720      	adds	r7, #32
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	bd80      	pop	{r7, pc}
 800fe62:	bf00      	nop
 800fe64:	0801ace0 	.word	0x0801ace0

0800fe68 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800fe68:	b480      	push	{r7}
 800fe6a:	b083      	sub	sp, #12
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800fe70:	4a04      	ldr	r2, [pc, #16]	; (800fe84 <netif_set_default+0x1c>)
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800fe76:	bf00      	nop
 800fe78:	370c      	adds	r7, #12
 800fe7a:	46bd      	mov	sp, r7
 800fe7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe80:	4770      	bx	lr
 800fe82:	bf00      	nop
 800fe84:	24015520 	.word	0x24015520

0800fe88 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b082      	sub	sp, #8
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d107      	bne.n	800fea6 <netif_set_up+0x1e>
 800fe96:	4b0f      	ldr	r3, [pc, #60]	; (800fed4 <netif_set_up+0x4c>)
 800fe98:	f44f 7254 	mov.w	r2, #848	; 0x350
 800fe9c:	490e      	ldr	r1, [pc, #56]	; (800fed8 <netif_set_up+0x50>)
 800fe9e:	480f      	ldr	r0, [pc, #60]	; (800fedc <netif_set_up+0x54>)
 800fea0:	f007 f838 	bl	8016f14 <iprintf>
 800fea4:	e013      	b.n	800fece <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800feac:	f003 0301 	and.w	r3, r3, #1
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d10c      	bne.n	800fece <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800feba:	f043 0301 	orr.w	r3, r3, #1
 800febe:	b2da      	uxtb	r2, r3
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800fec6:	2103      	movs	r1, #3
 800fec8:	6878      	ldr	r0, [r7, #4]
 800feca:	f000 f809 	bl	800fee0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800fece:	3708      	adds	r7, #8
 800fed0:	46bd      	mov	sp, r7
 800fed2:	bd80      	pop	{r7, pc}
 800fed4:	080189fc 	.word	0x080189fc
 800fed8:	08018bc4 	.word	0x08018bc4
 800fedc:	08018a8c 	.word	0x08018a8c

0800fee0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800fee0:	b580      	push	{r7, lr}
 800fee2:	b082      	sub	sp, #8
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	6078      	str	r0, [r7, #4]
 800fee8:	460b      	mov	r3, r1
 800feea:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d106      	bne.n	800ff00 <netif_issue_reports+0x20>
 800fef2:	4b18      	ldr	r3, [pc, #96]	; (800ff54 <netif_issue_reports+0x74>)
 800fef4:	f240 326d 	movw	r2, #877	; 0x36d
 800fef8:	4917      	ldr	r1, [pc, #92]	; (800ff58 <netif_issue_reports+0x78>)
 800fefa:	4818      	ldr	r0, [pc, #96]	; (800ff5c <netif_issue_reports+0x7c>)
 800fefc:	f007 f80a 	bl	8016f14 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ff06:	f003 0304 	and.w	r3, r3, #4
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d01e      	beq.n	800ff4c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ff14:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d017      	beq.n	800ff4c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ff1c:	78fb      	ldrb	r3, [r7, #3]
 800ff1e:	f003 0301 	and.w	r3, r3, #1
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d013      	beq.n	800ff4e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	3304      	adds	r3, #4
 800ff2a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d00e      	beq.n	800ff4e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ff36:	f003 0308 	and.w	r3, r3, #8
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d007      	beq.n	800ff4e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	3304      	adds	r3, #4
 800ff42:	4619      	mov	r1, r3
 800ff44:	6878      	ldr	r0, [r7, #4]
 800ff46:	f7fd fc21 	bl	800d78c <etharp_request>
 800ff4a:	e000      	b.n	800ff4e <netif_issue_reports+0x6e>
    return;
 800ff4c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800ff4e:	3708      	adds	r7, #8
 800ff50:	46bd      	mov	sp, r7
 800ff52:	bd80      	pop	{r7, pc}
 800ff54:	080189fc 	.word	0x080189fc
 800ff58:	08018be0 	.word	0x08018be0
 800ff5c:	08018a8c 	.word	0x08018a8c

0800ff60 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800ff60:	b580      	push	{r7, lr}
 800ff62:	b082      	sub	sp, #8
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d107      	bne.n	800ff7e <netif_set_down+0x1e>
 800ff6e:	4b12      	ldr	r3, [pc, #72]	; (800ffb8 <netif_set_down+0x58>)
 800ff70:	f240 329b 	movw	r2, #923	; 0x39b
 800ff74:	4911      	ldr	r1, [pc, #68]	; (800ffbc <netif_set_down+0x5c>)
 800ff76:	4812      	ldr	r0, [pc, #72]	; (800ffc0 <netif_set_down+0x60>)
 800ff78:	f006 ffcc 	bl	8016f14 <iprintf>
 800ff7c:	e019      	b.n	800ffb2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ff84:	f003 0301 	and.w	r3, r3, #1
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d012      	beq.n	800ffb2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ff92:	f023 0301 	bic.w	r3, r3, #1
 800ff96:	b2da      	uxtb	r2, r3
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ffa4:	f003 0308 	and.w	r3, r3, #8
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d002      	beq.n	800ffb2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800ffac:	6878      	ldr	r0, [r7, #4]
 800ffae:	f7fc ffab 	bl	800cf08 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800ffb2:	3708      	adds	r7, #8
 800ffb4:	46bd      	mov	sp, r7
 800ffb6:	bd80      	pop	{r7, pc}
 800ffb8:	080189fc 	.word	0x080189fc
 800ffbc:	08018c04 	.word	0x08018c04
 800ffc0:	08018a8c 	.word	0x08018a8c

0800ffc4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b082      	sub	sp, #8
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d107      	bne.n	800ffe2 <netif_set_link_up+0x1e>
 800ffd2:	4b13      	ldr	r3, [pc, #76]	; (8010020 <netif_set_link_up+0x5c>)
 800ffd4:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800ffd8:	4912      	ldr	r1, [pc, #72]	; (8010024 <netif_set_link_up+0x60>)
 800ffda:	4813      	ldr	r0, [pc, #76]	; (8010028 <netif_set_link_up+0x64>)
 800ffdc:	f006 ff9a 	bl	8016f14 <iprintf>
 800ffe0:	e01b      	b.n	801001a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ffe8:	f003 0304 	and.w	r3, r3, #4
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d114      	bne.n	801001a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fff6:	f043 0304 	orr.w	r3, r3, #4
 800fffa:	b2da      	uxtb	r2, r3
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8010002:	2103      	movs	r1, #3
 8010004:	6878      	ldr	r0, [r7, #4]
 8010006:	f7ff ff6b 	bl	800fee0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	69db      	ldr	r3, [r3, #28]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d003      	beq.n	801001a <netif_set_link_up+0x56>
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	69db      	ldr	r3, [r3, #28]
 8010016:	6878      	ldr	r0, [r7, #4]
 8010018:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801001a:	3708      	adds	r7, #8
 801001c:	46bd      	mov	sp, r7
 801001e:	bd80      	pop	{r7, pc}
 8010020:	080189fc 	.word	0x080189fc
 8010024:	08018c24 	.word	0x08018c24
 8010028:	08018a8c 	.word	0x08018a8c

0801002c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 801002c:	b580      	push	{r7, lr}
 801002e:	b082      	sub	sp, #8
 8010030:	af00      	add	r7, sp, #0
 8010032:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	2b00      	cmp	r3, #0
 8010038:	d107      	bne.n	801004a <netif_set_link_down+0x1e>
 801003a:	4b11      	ldr	r3, [pc, #68]	; (8010080 <netif_set_link_down+0x54>)
 801003c:	f240 4206 	movw	r2, #1030	; 0x406
 8010040:	4910      	ldr	r1, [pc, #64]	; (8010084 <netif_set_link_down+0x58>)
 8010042:	4811      	ldr	r0, [pc, #68]	; (8010088 <netif_set_link_down+0x5c>)
 8010044:	f006 ff66 	bl	8016f14 <iprintf>
 8010048:	e017      	b.n	801007a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010050:	f003 0304 	and.w	r3, r3, #4
 8010054:	2b00      	cmp	r3, #0
 8010056:	d010      	beq.n	801007a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801005e:	f023 0304 	bic.w	r3, r3, #4
 8010062:	b2da      	uxtb	r2, r3
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	69db      	ldr	r3, [r3, #28]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d003      	beq.n	801007a <netif_set_link_down+0x4e>
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	69db      	ldr	r3, [r3, #28]
 8010076:	6878      	ldr	r0, [r7, #4]
 8010078:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801007a:	3708      	adds	r7, #8
 801007c:	46bd      	mov	sp, r7
 801007e:	bd80      	pop	{r7, pc}
 8010080:	080189fc 	.word	0x080189fc
 8010084:	08018c48 	.word	0x08018c48
 8010088:	08018a8c 	.word	0x08018a8c

0801008c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 801008c:	b480      	push	{r7}
 801008e:	b083      	sub	sp, #12
 8010090:	af00      	add	r7, sp, #0
 8010092:	6078      	str	r0, [r7, #4]
 8010094:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d002      	beq.n	80100a2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	683a      	ldr	r2, [r7, #0]
 80100a0:	61da      	str	r2, [r3, #28]
  }
}
 80100a2:	bf00      	nop
 80100a4:	370c      	adds	r7, #12
 80100a6:	46bd      	mov	sp, r7
 80100a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ac:	4770      	bx	lr

080100ae <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80100ae:	b480      	push	{r7}
 80100b0:	b085      	sub	sp, #20
 80100b2:	af00      	add	r7, sp, #0
 80100b4:	60f8      	str	r0, [r7, #12]
 80100b6:	60b9      	str	r1, [r7, #8]
 80100b8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80100ba:	f06f 030b 	mvn.w	r3, #11
}
 80100be:	4618      	mov	r0, r3
 80100c0:	3714      	adds	r7, #20
 80100c2:	46bd      	mov	sp, r7
 80100c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c8:	4770      	bx	lr
	...

080100cc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80100cc:	b480      	push	{r7}
 80100ce:	b085      	sub	sp, #20
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	4603      	mov	r3, r0
 80100d4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80100d6:	79fb      	ldrb	r3, [r7, #7]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d013      	beq.n	8010104 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80100dc:	4b0d      	ldr	r3, [pc, #52]	; (8010114 <netif_get_by_index+0x48>)
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	60fb      	str	r3, [r7, #12]
 80100e2:	e00c      	b.n	80100fe <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80100ea:	3301      	adds	r3, #1
 80100ec:	b2db      	uxtb	r3, r3
 80100ee:	79fa      	ldrb	r2, [r7, #7]
 80100f0:	429a      	cmp	r2, r3
 80100f2:	d101      	bne.n	80100f8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	e006      	b.n	8010106 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	60fb      	str	r3, [r7, #12]
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	2b00      	cmp	r3, #0
 8010102:	d1ef      	bne.n	80100e4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8010104:	2300      	movs	r3, #0
}
 8010106:	4618      	mov	r0, r3
 8010108:	3714      	adds	r7, #20
 801010a:	46bd      	mov	sp, r7
 801010c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010110:	4770      	bx	lr
 8010112:	bf00      	nop
 8010114:	2401551c 	.word	0x2401551c

08010118 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8010118:	b580      	push	{r7, lr}
 801011a:	b082      	sub	sp, #8
 801011c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801011e:	f000 fed1 	bl	8010ec4 <sys_arch_protect>
 8010122:	6038      	str	r0, [r7, #0]
 8010124:	4b0d      	ldr	r3, [pc, #52]	; (801015c <pbuf_free_ooseq+0x44>)
 8010126:	2200      	movs	r2, #0
 8010128:	701a      	strb	r2, [r3, #0]
 801012a:	6838      	ldr	r0, [r7, #0]
 801012c:	f000 fed8 	bl	8010ee0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010130:	4b0b      	ldr	r3, [pc, #44]	; (8010160 <pbuf_free_ooseq+0x48>)
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	607b      	str	r3, [r7, #4]
 8010136:	e00a      	b.n	801014e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801013c:	2b00      	cmp	r3, #0
 801013e:	d003      	beq.n	8010148 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8010140:	6878      	ldr	r0, [r7, #4]
 8010142:	f002 fa63 	bl	801260c <tcp_free_ooseq>
      return;
 8010146:	e005      	b.n	8010154 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	68db      	ldr	r3, [r3, #12]
 801014c:	607b      	str	r3, [r7, #4]
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	2b00      	cmp	r3, #0
 8010152:	d1f1      	bne.n	8010138 <pbuf_free_ooseq+0x20>
    }
  }
}
 8010154:	3708      	adds	r7, #8
 8010156:	46bd      	mov	sp, r7
 8010158:	bd80      	pop	{r7, pc}
 801015a:	bf00      	nop
 801015c:	24015525 	.word	0x24015525
 8010160:	24015538 	.word	0x24015538

08010164 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8010164:	b580      	push	{r7, lr}
 8010166:	b082      	sub	sp, #8
 8010168:	af00      	add	r7, sp, #0
 801016a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 801016c:	f7ff ffd4 	bl	8010118 <pbuf_free_ooseq>
}
 8010170:	bf00      	nop
 8010172:	3708      	adds	r7, #8
 8010174:	46bd      	mov	sp, r7
 8010176:	bd80      	pop	{r7, pc}

08010178 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8010178:	b580      	push	{r7, lr}
 801017a:	b082      	sub	sp, #8
 801017c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 801017e:	f000 fea1 	bl	8010ec4 <sys_arch_protect>
 8010182:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8010184:	4b0f      	ldr	r3, [pc, #60]	; (80101c4 <pbuf_pool_is_empty+0x4c>)
 8010186:	781b      	ldrb	r3, [r3, #0]
 8010188:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 801018a:	4b0e      	ldr	r3, [pc, #56]	; (80101c4 <pbuf_pool_is_empty+0x4c>)
 801018c:	2201      	movs	r2, #1
 801018e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8010190:	6878      	ldr	r0, [r7, #4]
 8010192:	f000 fea5 	bl	8010ee0 <sys_arch_unprotect>

  if (!queued) {
 8010196:	78fb      	ldrb	r3, [r7, #3]
 8010198:	2b00      	cmp	r3, #0
 801019a:	d10f      	bne.n	80101bc <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 801019c:	2100      	movs	r1, #0
 801019e:	480a      	ldr	r0, [pc, #40]	; (80101c8 <pbuf_pool_is_empty+0x50>)
 80101a0:	f006 f8fe 	bl	80163a0 <tcpip_try_callback>
 80101a4:	4603      	mov	r3, r0
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d008      	beq.n	80101bc <pbuf_pool_is_empty+0x44>
 80101aa:	f000 fe8b 	bl	8010ec4 <sys_arch_protect>
 80101ae:	6078      	str	r0, [r7, #4]
 80101b0:	4b04      	ldr	r3, [pc, #16]	; (80101c4 <pbuf_pool_is_empty+0x4c>)
 80101b2:	2200      	movs	r2, #0
 80101b4:	701a      	strb	r2, [r3, #0]
 80101b6:	6878      	ldr	r0, [r7, #4]
 80101b8:	f000 fe92 	bl	8010ee0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80101bc:	bf00      	nop
 80101be:	3708      	adds	r7, #8
 80101c0:	46bd      	mov	sp, r7
 80101c2:	bd80      	pop	{r7, pc}
 80101c4:	24015525 	.word	0x24015525
 80101c8:	08010165 	.word	0x08010165

080101cc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80101cc:	b480      	push	{r7}
 80101ce:	b085      	sub	sp, #20
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	60f8      	str	r0, [r7, #12]
 80101d4:	60b9      	str	r1, [r7, #8]
 80101d6:	4611      	mov	r1, r2
 80101d8:	461a      	mov	r2, r3
 80101da:	460b      	mov	r3, r1
 80101dc:	80fb      	strh	r3, [r7, #6]
 80101de:	4613      	mov	r3, r2
 80101e0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	2200      	movs	r2, #0
 80101e6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	68ba      	ldr	r2, [r7, #8]
 80101ec:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	88fa      	ldrh	r2, [r7, #6]
 80101f2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	88ba      	ldrh	r2, [r7, #4]
 80101f8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80101fa:	8b3b      	ldrh	r3, [r7, #24]
 80101fc:	b2da      	uxtb	r2, r3
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	7f3a      	ldrb	r2, [r7, #28]
 8010206:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	2201      	movs	r2, #1
 801020c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	2200      	movs	r2, #0
 8010212:	73da      	strb	r2, [r3, #15]
}
 8010214:	bf00      	nop
 8010216:	3714      	adds	r7, #20
 8010218:	46bd      	mov	sp, r7
 801021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021e:	4770      	bx	lr

08010220 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8010220:	b580      	push	{r7, lr}
 8010222:	b08c      	sub	sp, #48	; 0x30
 8010224:	af02      	add	r7, sp, #8
 8010226:	4603      	mov	r3, r0
 8010228:	71fb      	strb	r3, [r7, #7]
 801022a:	460b      	mov	r3, r1
 801022c:	80bb      	strh	r3, [r7, #4]
 801022e:	4613      	mov	r3, r2
 8010230:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8010232:	79fb      	ldrb	r3, [r7, #7]
 8010234:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8010236:	887b      	ldrh	r3, [r7, #2]
 8010238:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801023c:	d07f      	beq.n	801033e <pbuf_alloc+0x11e>
 801023e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8010242:	f300 80c8 	bgt.w	80103d6 <pbuf_alloc+0x1b6>
 8010246:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801024a:	d010      	beq.n	801026e <pbuf_alloc+0x4e>
 801024c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8010250:	f300 80c1 	bgt.w	80103d6 <pbuf_alloc+0x1b6>
 8010254:	2b01      	cmp	r3, #1
 8010256:	d002      	beq.n	801025e <pbuf_alloc+0x3e>
 8010258:	2b41      	cmp	r3, #65	; 0x41
 801025a:	f040 80bc 	bne.w	80103d6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801025e:	887a      	ldrh	r2, [r7, #2]
 8010260:	88bb      	ldrh	r3, [r7, #4]
 8010262:	4619      	mov	r1, r3
 8010264:	2000      	movs	r0, #0
 8010266:	f000 f8d1 	bl	801040c <pbuf_alloc_reference>
 801026a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 801026c:	e0bd      	b.n	80103ea <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801026e:	2300      	movs	r3, #0
 8010270:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8010272:	2300      	movs	r3, #0
 8010274:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8010276:	88bb      	ldrh	r3, [r7, #4]
 8010278:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801027a:	200c      	movs	r0, #12
 801027c:	f7ff fb9a 	bl	800f9b4 <memp_malloc>
 8010280:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8010282:	693b      	ldr	r3, [r7, #16]
 8010284:	2b00      	cmp	r3, #0
 8010286:	d109      	bne.n	801029c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8010288:	f7ff ff76 	bl	8010178 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 801028c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801028e:	2b00      	cmp	r3, #0
 8010290:	d002      	beq.n	8010298 <pbuf_alloc+0x78>
            pbuf_free(p);
 8010292:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010294:	f000 faa8 	bl	80107e8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8010298:	2300      	movs	r3, #0
 801029a:	e0a7      	b.n	80103ec <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801029c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801029e:	3303      	adds	r3, #3
 80102a0:	b29b      	uxth	r3, r3
 80102a2:	f023 0303 	bic.w	r3, r3, #3
 80102a6:	b29b      	uxth	r3, r3
 80102a8:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80102ac:	b29b      	uxth	r3, r3
 80102ae:	8b7a      	ldrh	r2, [r7, #26]
 80102b0:	4293      	cmp	r3, r2
 80102b2:	bf28      	it	cs
 80102b4:	4613      	movcs	r3, r2
 80102b6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80102b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80102ba:	3310      	adds	r3, #16
 80102bc:	693a      	ldr	r2, [r7, #16]
 80102be:	4413      	add	r3, r2
 80102c0:	3303      	adds	r3, #3
 80102c2:	f023 0303 	bic.w	r3, r3, #3
 80102c6:	4618      	mov	r0, r3
 80102c8:	89f9      	ldrh	r1, [r7, #14]
 80102ca:	8b7a      	ldrh	r2, [r7, #26]
 80102cc:	2300      	movs	r3, #0
 80102ce:	9301      	str	r3, [sp, #4]
 80102d0:	887b      	ldrh	r3, [r7, #2]
 80102d2:	9300      	str	r3, [sp, #0]
 80102d4:	460b      	mov	r3, r1
 80102d6:	4601      	mov	r1, r0
 80102d8:	6938      	ldr	r0, [r7, #16]
 80102da:	f7ff ff77 	bl	80101cc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80102de:	693b      	ldr	r3, [r7, #16]
 80102e0:	685b      	ldr	r3, [r3, #4]
 80102e2:	f003 0303 	and.w	r3, r3, #3
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d006      	beq.n	80102f8 <pbuf_alloc+0xd8>
 80102ea:	4b42      	ldr	r3, [pc, #264]	; (80103f4 <pbuf_alloc+0x1d4>)
 80102ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80102f0:	4941      	ldr	r1, [pc, #260]	; (80103f8 <pbuf_alloc+0x1d8>)
 80102f2:	4842      	ldr	r0, [pc, #264]	; (80103fc <pbuf_alloc+0x1dc>)
 80102f4:	f006 fe0e 	bl	8016f14 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80102f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80102fa:	3303      	adds	r3, #3
 80102fc:	f023 0303 	bic.w	r3, r3, #3
 8010300:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8010304:	d106      	bne.n	8010314 <pbuf_alloc+0xf4>
 8010306:	4b3b      	ldr	r3, [pc, #236]	; (80103f4 <pbuf_alloc+0x1d4>)
 8010308:	f44f 7281 	mov.w	r2, #258	; 0x102
 801030c:	493c      	ldr	r1, [pc, #240]	; (8010400 <pbuf_alloc+0x1e0>)
 801030e:	483b      	ldr	r0, [pc, #236]	; (80103fc <pbuf_alloc+0x1dc>)
 8010310:	f006 fe00 	bl	8016f14 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8010314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010316:	2b00      	cmp	r3, #0
 8010318:	d102      	bne.n	8010320 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801031a:	693b      	ldr	r3, [r7, #16]
 801031c:	627b      	str	r3, [r7, #36]	; 0x24
 801031e:	e002      	b.n	8010326 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8010320:	69fb      	ldr	r3, [r7, #28]
 8010322:	693a      	ldr	r2, [r7, #16]
 8010324:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8010326:	693b      	ldr	r3, [r7, #16]
 8010328:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801032a:	8b7a      	ldrh	r2, [r7, #26]
 801032c:	89fb      	ldrh	r3, [r7, #14]
 801032e:	1ad3      	subs	r3, r2, r3
 8010330:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8010332:	2300      	movs	r3, #0
 8010334:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8010336:	8b7b      	ldrh	r3, [r7, #26]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d19e      	bne.n	801027a <pbuf_alloc+0x5a>
      break;
 801033c:	e055      	b.n	80103ea <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801033e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010340:	3303      	adds	r3, #3
 8010342:	b29b      	uxth	r3, r3
 8010344:	f023 0303 	bic.w	r3, r3, #3
 8010348:	b29a      	uxth	r2, r3
 801034a:	88bb      	ldrh	r3, [r7, #4]
 801034c:	3303      	adds	r3, #3
 801034e:	b29b      	uxth	r3, r3
 8010350:	f023 0303 	bic.w	r3, r3, #3
 8010354:	b29b      	uxth	r3, r3
 8010356:	4413      	add	r3, r2
 8010358:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801035a:	8b3b      	ldrh	r3, [r7, #24]
 801035c:	3310      	adds	r3, #16
 801035e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010360:	8b3a      	ldrh	r2, [r7, #24]
 8010362:	88bb      	ldrh	r3, [r7, #4]
 8010364:	3303      	adds	r3, #3
 8010366:	f023 0303 	bic.w	r3, r3, #3
 801036a:	429a      	cmp	r2, r3
 801036c:	d306      	bcc.n	801037c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801036e:	8afa      	ldrh	r2, [r7, #22]
 8010370:	88bb      	ldrh	r3, [r7, #4]
 8010372:	3303      	adds	r3, #3
 8010374:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010378:	429a      	cmp	r2, r3
 801037a:	d201      	bcs.n	8010380 <pbuf_alloc+0x160>
        return NULL;
 801037c:	2300      	movs	r3, #0
 801037e:	e035      	b.n	80103ec <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8010380:	8afb      	ldrh	r3, [r7, #22]
 8010382:	4618      	mov	r0, r3
 8010384:	f7ff f972 	bl	800f66c <mem_malloc>
 8010388:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 801038a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801038c:	2b00      	cmp	r3, #0
 801038e:	d101      	bne.n	8010394 <pbuf_alloc+0x174>
        return NULL;
 8010390:	2300      	movs	r3, #0
 8010392:	e02b      	b.n	80103ec <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8010394:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010396:	3310      	adds	r3, #16
 8010398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801039a:	4413      	add	r3, r2
 801039c:	3303      	adds	r3, #3
 801039e:	f023 0303 	bic.w	r3, r3, #3
 80103a2:	4618      	mov	r0, r3
 80103a4:	88b9      	ldrh	r1, [r7, #4]
 80103a6:	88ba      	ldrh	r2, [r7, #4]
 80103a8:	2300      	movs	r3, #0
 80103aa:	9301      	str	r3, [sp, #4]
 80103ac:	887b      	ldrh	r3, [r7, #2]
 80103ae:	9300      	str	r3, [sp, #0]
 80103b0:	460b      	mov	r3, r1
 80103b2:	4601      	mov	r1, r0
 80103b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80103b6:	f7ff ff09 	bl	80101cc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80103ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103bc:	685b      	ldr	r3, [r3, #4]
 80103be:	f003 0303 	and.w	r3, r3, #3
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d010      	beq.n	80103e8 <pbuf_alloc+0x1c8>
 80103c6:	4b0b      	ldr	r3, [pc, #44]	; (80103f4 <pbuf_alloc+0x1d4>)
 80103c8:	f44f 7291 	mov.w	r2, #290	; 0x122
 80103cc:	490d      	ldr	r1, [pc, #52]	; (8010404 <pbuf_alloc+0x1e4>)
 80103ce:	480b      	ldr	r0, [pc, #44]	; (80103fc <pbuf_alloc+0x1dc>)
 80103d0:	f006 fda0 	bl	8016f14 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80103d4:	e008      	b.n	80103e8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80103d6:	4b07      	ldr	r3, [pc, #28]	; (80103f4 <pbuf_alloc+0x1d4>)
 80103d8:	f240 1227 	movw	r2, #295	; 0x127
 80103dc:	490a      	ldr	r1, [pc, #40]	; (8010408 <pbuf_alloc+0x1e8>)
 80103de:	4807      	ldr	r0, [pc, #28]	; (80103fc <pbuf_alloc+0x1dc>)
 80103e0:	f006 fd98 	bl	8016f14 <iprintf>
      return NULL;
 80103e4:	2300      	movs	r3, #0
 80103e6:	e001      	b.n	80103ec <pbuf_alloc+0x1cc>
      break;
 80103e8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80103ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80103ec:	4618      	mov	r0, r3
 80103ee:	3728      	adds	r7, #40	; 0x28
 80103f0:	46bd      	mov	sp, r7
 80103f2:	bd80      	pop	{r7, pc}
 80103f4:	08018c6c 	.word	0x08018c6c
 80103f8:	08018ce0 	.word	0x08018ce0
 80103fc:	08018d10 	.word	0x08018d10
 8010400:	08018d38 	.word	0x08018d38
 8010404:	08018d6c 	.word	0x08018d6c
 8010408:	08018d98 	.word	0x08018d98

0801040c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 801040c:	b580      	push	{r7, lr}
 801040e:	b086      	sub	sp, #24
 8010410:	af02      	add	r7, sp, #8
 8010412:	6078      	str	r0, [r7, #4]
 8010414:	460b      	mov	r3, r1
 8010416:	807b      	strh	r3, [r7, #2]
 8010418:	4613      	mov	r3, r2
 801041a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801041c:	883b      	ldrh	r3, [r7, #0]
 801041e:	2b41      	cmp	r3, #65	; 0x41
 8010420:	d009      	beq.n	8010436 <pbuf_alloc_reference+0x2a>
 8010422:	883b      	ldrh	r3, [r7, #0]
 8010424:	2b01      	cmp	r3, #1
 8010426:	d006      	beq.n	8010436 <pbuf_alloc_reference+0x2a>
 8010428:	4b0f      	ldr	r3, [pc, #60]	; (8010468 <pbuf_alloc_reference+0x5c>)
 801042a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801042e:	490f      	ldr	r1, [pc, #60]	; (801046c <pbuf_alloc_reference+0x60>)
 8010430:	480f      	ldr	r0, [pc, #60]	; (8010470 <pbuf_alloc_reference+0x64>)
 8010432:	f006 fd6f 	bl	8016f14 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8010436:	200b      	movs	r0, #11
 8010438:	f7ff fabc 	bl	800f9b4 <memp_malloc>
 801043c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	2b00      	cmp	r3, #0
 8010442:	d101      	bne.n	8010448 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8010444:	2300      	movs	r3, #0
 8010446:	e00b      	b.n	8010460 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8010448:	8879      	ldrh	r1, [r7, #2]
 801044a:	887a      	ldrh	r2, [r7, #2]
 801044c:	2300      	movs	r3, #0
 801044e:	9301      	str	r3, [sp, #4]
 8010450:	883b      	ldrh	r3, [r7, #0]
 8010452:	9300      	str	r3, [sp, #0]
 8010454:	460b      	mov	r3, r1
 8010456:	6879      	ldr	r1, [r7, #4]
 8010458:	68f8      	ldr	r0, [r7, #12]
 801045a:	f7ff feb7 	bl	80101cc <pbuf_init_alloced_pbuf>
  return p;
 801045e:	68fb      	ldr	r3, [r7, #12]
}
 8010460:	4618      	mov	r0, r3
 8010462:	3710      	adds	r7, #16
 8010464:	46bd      	mov	sp, r7
 8010466:	bd80      	pop	{r7, pc}
 8010468:	08018c6c 	.word	0x08018c6c
 801046c:	08018db4 	.word	0x08018db4
 8010470:	08018d10 	.word	0x08018d10

08010474 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8010474:	b580      	push	{r7, lr}
 8010476:	b088      	sub	sp, #32
 8010478:	af02      	add	r7, sp, #8
 801047a:	607b      	str	r3, [r7, #4]
 801047c:	4603      	mov	r3, r0
 801047e:	73fb      	strb	r3, [r7, #15]
 8010480:	460b      	mov	r3, r1
 8010482:	81bb      	strh	r3, [r7, #12]
 8010484:	4613      	mov	r3, r2
 8010486:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8010488:	7bfb      	ldrb	r3, [r7, #15]
 801048a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801048c:	8a7b      	ldrh	r3, [r7, #18]
 801048e:	3303      	adds	r3, #3
 8010490:	f023 0203 	bic.w	r2, r3, #3
 8010494:	89bb      	ldrh	r3, [r7, #12]
 8010496:	441a      	add	r2, r3
 8010498:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801049a:	429a      	cmp	r2, r3
 801049c:	d901      	bls.n	80104a2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801049e:	2300      	movs	r3, #0
 80104a0:	e018      	b.n	80104d4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80104a2:	6a3b      	ldr	r3, [r7, #32]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d007      	beq.n	80104b8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80104a8:	8a7b      	ldrh	r3, [r7, #18]
 80104aa:	3303      	adds	r3, #3
 80104ac:	f023 0303 	bic.w	r3, r3, #3
 80104b0:	6a3a      	ldr	r2, [r7, #32]
 80104b2:	4413      	add	r3, r2
 80104b4:	617b      	str	r3, [r7, #20]
 80104b6:	e001      	b.n	80104bc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80104b8:	2300      	movs	r3, #0
 80104ba:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80104bc:	6878      	ldr	r0, [r7, #4]
 80104be:	89b9      	ldrh	r1, [r7, #12]
 80104c0:	89ba      	ldrh	r2, [r7, #12]
 80104c2:	2302      	movs	r3, #2
 80104c4:	9301      	str	r3, [sp, #4]
 80104c6:	897b      	ldrh	r3, [r7, #10]
 80104c8:	9300      	str	r3, [sp, #0]
 80104ca:	460b      	mov	r3, r1
 80104cc:	6979      	ldr	r1, [r7, #20]
 80104ce:	f7ff fe7d 	bl	80101cc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80104d2:	687b      	ldr	r3, [r7, #4]
}
 80104d4:	4618      	mov	r0, r3
 80104d6:	3718      	adds	r7, #24
 80104d8:	46bd      	mov	sp, r7
 80104da:	bd80      	pop	{r7, pc}

080104dc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80104dc:	b580      	push	{r7, lr}
 80104de:	b084      	sub	sp, #16
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	6078      	str	r0, [r7, #4]
 80104e4:	460b      	mov	r3, r1
 80104e6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d106      	bne.n	80104fc <pbuf_realloc+0x20>
 80104ee:	4b3a      	ldr	r3, [pc, #232]	; (80105d8 <pbuf_realloc+0xfc>)
 80104f0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80104f4:	4939      	ldr	r1, [pc, #228]	; (80105dc <pbuf_realloc+0x100>)
 80104f6:	483a      	ldr	r0, [pc, #232]	; (80105e0 <pbuf_realloc+0x104>)
 80104f8:	f006 fd0c 	bl	8016f14 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	891b      	ldrh	r3, [r3, #8]
 8010500:	887a      	ldrh	r2, [r7, #2]
 8010502:	429a      	cmp	r2, r3
 8010504:	d263      	bcs.n	80105ce <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	891a      	ldrh	r2, [r3, #8]
 801050a:	887b      	ldrh	r3, [r7, #2]
 801050c:	1ad3      	subs	r3, r2, r3
 801050e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8010510:	887b      	ldrh	r3, [r7, #2]
 8010512:	817b      	strh	r3, [r7, #10]
  q = p;
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8010518:	e018      	b.n	801054c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	895b      	ldrh	r3, [r3, #10]
 801051e:	897a      	ldrh	r2, [r7, #10]
 8010520:	1ad3      	subs	r3, r2, r3
 8010522:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	891a      	ldrh	r2, [r3, #8]
 8010528:	893b      	ldrh	r3, [r7, #8]
 801052a:	1ad3      	subs	r3, r2, r3
 801052c:	b29a      	uxth	r2, r3
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d106      	bne.n	801054c <pbuf_realloc+0x70>
 801053e:	4b26      	ldr	r3, [pc, #152]	; (80105d8 <pbuf_realloc+0xfc>)
 8010540:	f240 12af 	movw	r2, #431	; 0x1af
 8010544:	4927      	ldr	r1, [pc, #156]	; (80105e4 <pbuf_realloc+0x108>)
 8010546:	4826      	ldr	r0, [pc, #152]	; (80105e0 <pbuf_realloc+0x104>)
 8010548:	f006 fce4 	bl	8016f14 <iprintf>
  while (rem_len > q->len) {
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	895b      	ldrh	r3, [r3, #10]
 8010550:	897a      	ldrh	r2, [r7, #10]
 8010552:	429a      	cmp	r2, r3
 8010554:	d8e1      	bhi.n	801051a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	7b1b      	ldrb	r3, [r3, #12]
 801055a:	f003 030f 	and.w	r3, r3, #15
 801055e:	2b00      	cmp	r3, #0
 8010560:	d121      	bne.n	80105a6 <pbuf_realloc+0xca>
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	895b      	ldrh	r3, [r3, #10]
 8010566:	897a      	ldrh	r2, [r7, #10]
 8010568:	429a      	cmp	r2, r3
 801056a:	d01c      	beq.n	80105a6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	7b5b      	ldrb	r3, [r3, #13]
 8010570:	f003 0302 	and.w	r3, r3, #2
 8010574:	2b00      	cmp	r3, #0
 8010576:	d116      	bne.n	80105a6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	685a      	ldr	r2, [r3, #4]
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	1ad3      	subs	r3, r2, r3
 8010580:	b29a      	uxth	r2, r3
 8010582:	897b      	ldrh	r3, [r7, #10]
 8010584:	4413      	add	r3, r2
 8010586:	b29b      	uxth	r3, r3
 8010588:	4619      	mov	r1, r3
 801058a:	68f8      	ldr	r0, [r7, #12]
 801058c:	f7fe ff64 	bl	800f458 <mem_trim>
 8010590:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d106      	bne.n	80105a6 <pbuf_realloc+0xca>
 8010598:	4b0f      	ldr	r3, [pc, #60]	; (80105d8 <pbuf_realloc+0xfc>)
 801059a:	f240 12bd 	movw	r2, #445	; 0x1bd
 801059e:	4912      	ldr	r1, [pc, #72]	; (80105e8 <pbuf_realloc+0x10c>)
 80105a0:	480f      	ldr	r0, [pc, #60]	; (80105e0 <pbuf_realloc+0x104>)
 80105a2:	f006 fcb7 	bl	8016f14 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	897a      	ldrh	r2, [r7, #10]
 80105aa:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	895a      	ldrh	r2, [r3, #10]
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d004      	beq.n	80105c6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	4618      	mov	r0, r3
 80105c2:	f000 f911 	bl	80107e8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	2200      	movs	r2, #0
 80105ca:	601a      	str	r2, [r3, #0]
 80105cc:	e000      	b.n	80105d0 <pbuf_realloc+0xf4>
    return;
 80105ce:	bf00      	nop

}
 80105d0:	3710      	adds	r7, #16
 80105d2:	46bd      	mov	sp, r7
 80105d4:	bd80      	pop	{r7, pc}
 80105d6:	bf00      	nop
 80105d8:	08018c6c 	.word	0x08018c6c
 80105dc:	08018dc8 	.word	0x08018dc8
 80105e0:	08018d10 	.word	0x08018d10
 80105e4:	08018de0 	.word	0x08018de0
 80105e8:	08018df8 	.word	0x08018df8

080105ec <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b086      	sub	sp, #24
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	60f8      	str	r0, [r7, #12]
 80105f4:	60b9      	str	r1, [r7, #8]
 80105f6:	4613      	mov	r3, r2
 80105f8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d106      	bne.n	801060e <pbuf_add_header_impl+0x22>
 8010600:	4b2b      	ldr	r3, [pc, #172]	; (80106b0 <pbuf_add_header_impl+0xc4>)
 8010602:	f240 12df 	movw	r2, #479	; 0x1df
 8010606:	492b      	ldr	r1, [pc, #172]	; (80106b4 <pbuf_add_header_impl+0xc8>)
 8010608:	482b      	ldr	r0, [pc, #172]	; (80106b8 <pbuf_add_header_impl+0xcc>)
 801060a:	f006 fc83 	bl	8016f14 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	2b00      	cmp	r3, #0
 8010612:	d003      	beq.n	801061c <pbuf_add_header_impl+0x30>
 8010614:	68bb      	ldr	r3, [r7, #8]
 8010616:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801061a:	d301      	bcc.n	8010620 <pbuf_add_header_impl+0x34>
    return 1;
 801061c:	2301      	movs	r3, #1
 801061e:	e043      	b.n	80106a8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8010620:	68bb      	ldr	r3, [r7, #8]
 8010622:	2b00      	cmp	r3, #0
 8010624:	d101      	bne.n	801062a <pbuf_add_header_impl+0x3e>
    return 0;
 8010626:	2300      	movs	r3, #0
 8010628:	e03e      	b.n	80106a8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801062a:	68bb      	ldr	r3, [r7, #8]
 801062c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	891a      	ldrh	r2, [r3, #8]
 8010632:	8a7b      	ldrh	r3, [r7, #18]
 8010634:	4413      	add	r3, r2
 8010636:	b29b      	uxth	r3, r3
 8010638:	8a7a      	ldrh	r2, [r7, #18]
 801063a:	429a      	cmp	r2, r3
 801063c:	d901      	bls.n	8010642 <pbuf_add_header_impl+0x56>
    return 1;
 801063e:	2301      	movs	r3, #1
 8010640:	e032      	b.n	80106a8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	7b1b      	ldrb	r3, [r3, #12]
 8010646:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8010648:	8a3b      	ldrh	r3, [r7, #16]
 801064a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801064e:	2b00      	cmp	r3, #0
 8010650:	d00c      	beq.n	801066c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	685a      	ldr	r2, [r3, #4]
 8010656:	68bb      	ldr	r3, [r7, #8]
 8010658:	425b      	negs	r3, r3
 801065a:	4413      	add	r3, r2
 801065c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	3310      	adds	r3, #16
 8010662:	697a      	ldr	r2, [r7, #20]
 8010664:	429a      	cmp	r2, r3
 8010666:	d20d      	bcs.n	8010684 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8010668:	2301      	movs	r3, #1
 801066a:	e01d      	b.n	80106a8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 801066c:	79fb      	ldrb	r3, [r7, #7]
 801066e:	2b00      	cmp	r3, #0
 8010670:	d006      	beq.n	8010680 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	685a      	ldr	r2, [r3, #4]
 8010676:	68bb      	ldr	r3, [r7, #8]
 8010678:	425b      	negs	r3, r3
 801067a:	4413      	add	r3, r2
 801067c:	617b      	str	r3, [r7, #20]
 801067e:	e001      	b.n	8010684 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8010680:	2301      	movs	r3, #1
 8010682:	e011      	b.n	80106a8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	697a      	ldr	r2, [r7, #20]
 8010688:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	895a      	ldrh	r2, [r3, #10]
 801068e:	8a7b      	ldrh	r3, [r7, #18]
 8010690:	4413      	add	r3, r2
 8010692:	b29a      	uxth	r2, r3
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	891a      	ldrh	r2, [r3, #8]
 801069c:	8a7b      	ldrh	r3, [r7, #18]
 801069e:	4413      	add	r3, r2
 80106a0:	b29a      	uxth	r2, r3
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	811a      	strh	r2, [r3, #8]


  return 0;
 80106a6:	2300      	movs	r3, #0
}
 80106a8:	4618      	mov	r0, r3
 80106aa:	3718      	adds	r7, #24
 80106ac:	46bd      	mov	sp, r7
 80106ae:	bd80      	pop	{r7, pc}
 80106b0:	08018c6c 	.word	0x08018c6c
 80106b4:	08018e14 	.word	0x08018e14
 80106b8:	08018d10 	.word	0x08018d10

080106bc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80106bc:	b580      	push	{r7, lr}
 80106be:	b082      	sub	sp, #8
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	6078      	str	r0, [r7, #4]
 80106c4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80106c6:	2200      	movs	r2, #0
 80106c8:	6839      	ldr	r1, [r7, #0]
 80106ca:	6878      	ldr	r0, [r7, #4]
 80106cc:	f7ff ff8e 	bl	80105ec <pbuf_add_header_impl>
 80106d0:	4603      	mov	r3, r0
}
 80106d2:	4618      	mov	r0, r3
 80106d4:	3708      	adds	r7, #8
 80106d6:	46bd      	mov	sp, r7
 80106d8:	bd80      	pop	{r7, pc}
	...

080106dc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80106dc:	b580      	push	{r7, lr}
 80106de:	b084      	sub	sp, #16
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	6078      	str	r0, [r7, #4]
 80106e4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d106      	bne.n	80106fa <pbuf_remove_header+0x1e>
 80106ec:	4b20      	ldr	r3, [pc, #128]	; (8010770 <pbuf_remove_header+0x94>)
 80106ee:	f240 224b 	movw	r2, #587	; 0x24b
 80106f2:	4920      	ldr	r1, [pc, #128]	; (8010774 <pbuf_remove_header+0x98>)
 80106f4:	4820      	ldr	r0, [pc, #128]	; (8010778 <pbuf_remove_header+0x9c>)
 80106f6:	f006 fc0d 	bl	8016f14 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d003      	beq.n	8010708 <pbuf_remove_header+0x2c>
 8010700:	683b      	ldr	r3, [r7, #0]
 8010702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010706:	d301      	bcc.n	801070c <pbuf_remove_header+0x30>
    return 1;
 8010708:	2301      	movs	r3, #1
 801070a:	e02c      	b.n	8010766 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 801070c:	683b      	ldr	r3, [r7, #0]
 801070e:	2b00      	cmp	r3, #0
 8010710:	d101      	bne.n	8010716 <pbuf_remove_header+0x3a>
    return 0;
 8010712:	2300      	movs	r3, #0
 8010714:	e027      	b.n	8010766 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8010716:	683b      	ldr	r3, [r7, #0]
 8010718:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	895b      	ldrh	r3, [r3, #10]
 801071e:	89fa      	ldrh	r2, [r7, #14]
 8010720:	429a      	cmp	r2, r3
 8010722:	d908      	bls.n	8010736 <pbuf_remove_header+0x5a>
 8010724:	4b12      	ldr	r3, [pc, #72]	; (8010770 <pbuf_remove_header+0x94>)
 8010726:	f240 2255 	movw	r2, #597	; 0x255
 801072a:	4914      	ldr	r1, [pc, #80]	; (801077c <pbuf_remove_header+0xa0>)
 801072c:	4812      	ldr	r0, [pc, #72]	; (8010778 <pbuf_remove_header+0x9c>)
 801072e:	f006 fbf1 	bl	8016f14 <iprintf>
 8010732:	2301      	movs	r3, #1
 8010734:	e017      	b.n	8010766 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	685b      	ldr	r3, [r3, #4]
 801073a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	685a      	ldr	r2, [r3, #4]
 8010740:	683b      	ldr	r3, [r7, #0]
 8010742:	441a      	add	r2, r3
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	895a      	ldrh	r2, [r3, #10]
 801074c:	89fb      	ldrh	r3, [r7, #14]
 801074e:	1ad3      	subs	r3, r2, r3
 8010750:	b29a      	uxth	r2, r3
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	891a      	ldrh	r2, [r3, #8]
 801075a:	89fb      	ldrh	r3, [r7, #14]
 801075c:	1ad3      	subs	r3, r2, r3
 801075e:	b29a      	uxth	r2, r3
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8010764:	2300      	movs	r3, #0
}
 8010766:	4618      	mov	r0, r3
 8010768:	3710      	adds	r7, #16
 801076a:	46bd      	mov	sp, r7
 801076c:	bd80      	pop	{r7, pc}
 801076e:	bf00      	nop
 8010770:	08018c6c 	.word	0x08018c6c
 8010774:	08018e14 	.word	0x08018e14
 8010778:	08018d10 	.word	0x08018d10
 801077c:	08018e20 	.word	0x08018e20

08010780 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8010780:	b580      	push	{r7, lr}
 8010782:	b082      	sub	sp, #8
 8010784:	af00      	add	r7, sp, #0
 8010786:	6078      	str	r0, [r7, #4]
 8010788:	460b      	mov	r3, r1
 801078a:	807b      	strh	r3, [r7, #2]
 801078c:	4613      	mov	r3, r2
 801078e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8010790:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010794:	2b00      	cmp	r3, #0
 8010796:	da08      	bge.n	80107aa <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8010798:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801079c:	425b      	negs	r3, r3
 801079e:	4619      	mov	r1, r3
 80107a0:	6878      	ldr	r0, [r7, #4]
 80107a2:	f7ff ff9b 	bl	80106dc <pbuf_remove_header>
 80107a6:	4603      	mov	r3, r0
 80107a8:	e007      	b.n	80107ba <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80107aa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80107ae:	787a      	ldrb	r2, [r7, #1]
 80107b0:	4619      	mov	r1, r3
 80107b2:	6878      	ldr	r0, [r7, #4]
 80107b4:	f7ff ff1a 	bl	80105ec <pbuf_add_header_impl>
 80107b8:	4603      	mov	r3, r0
  }
}
 80107ba:	4618      	mov	r0, r3
 80107bc:	3708      	adds	r7, #8
 80107be:	46bd      	mov	sp, r7
 80107c0:	bd80      	pop	{r7, pc}

080107c2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80107c2:	b580      	push	{r7, lr}
 80107c4:	b082      	sub	sp, #8
 80107c6:	af00      	add	r7, sp, #0
 80107c8:	6078      	str	r0, [r7, #4]
 80107ca:	460b      	mov	r3, r1
 80107cc:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80107ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80107d2:	2201      	movs	r2, #1
 80107d4:	4619      	mov	r1, r3
 80107d6:	6878      	ldr	r0, [r7, #4]
 80107d8:	f7ff ffd2 	bl	8010780 <pbuf_header_impl>
 80107dc:	4603      	mov	r3, r0
}
 80107de:	4618      	mov	r0, r3
 80107e0:	3708      	adds	r7, #8
 80107e2:	46bd      	mov	sp, r7
 80107e4:	bd80      	pop	{r7, pc}
	...

080107e8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80107e8:	b580      	push	{r7, lr}
 80107ea:	b088      	sub	sp, #32
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d10b      	bne.n	801080e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d106      	bne.n	801080a <pbuf_free+0x22>
 80107fc:	4b3b      	ldr	r3, [pc, #236]	; (80108ec <pbuf_free+0x104>)
 80107fe:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8010802:	493b      	ldr	r1, [pc, #236]	; (80108f0 <pbuf_free+0x108>)
 8010804:	483b      	ldr	r0, [pc, #236]	; (80108f4 <pbuf_free+0x10c>)
 8010806:	f006 fb85 	bl	8016f14 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801080a:	2300      	movs	r3, #0
 801080c:	e069      	b.n	80108e2 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801080e:	2300      	movs	r3, #0
 8010810:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8010812:	e062      	b.n	80108da <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8010814:	f000 fb56 	bl	8010ec4 <sys_arch_protect>
 8010818:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	7b9b      	ldrb	r3, [r3, #14]
 801081e:	2b00      	cmp	r3, #0
 8010820:	d106      	bne.n	8010830 <pbuf_free+0x48>
 8010822:	4b32      	ldr	r3, [pc, #200]	; (80108ec <pbuf_free+0x104>)
 8010824:	f240 22f1 	movw	r2, #753	; 0x2f1
 8010828:	4933      	ldr	r1, [pc, #204]	; (80108f8 <pbuf_free+0x110>)
 801082a:	4832      	ldr	r0, [pc, #200]	; (80108f4 <pbuf_free+0x10c>)
 801082c:	f006 fb72 	bl	8016f14 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	7b9b      	ldrb	r3, [r3, #14]
 8010834:	3b01      	subs	r3, #1
 8010836:	b2da      	uxtb	r2, r3
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	739a      	strb	r2, [r3, #14]
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	7b9b      	ldrb	r3, [r3, #14]
 8010840:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8010842:	69b8      	ldr	r0, [r7, #24]
 8010844:	f000 fb4c 	bl	8010ee0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8010848:	7dfb      	ldrb	r3, [r7, #23]
 801084a:	2b00      	cmp	r3, #0
 801084c:	d143      	bne.n	80108d6 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	7b1b      	ldrb	r3, [r3, #12]
 8010858:	f003 030f 	and.w	r3, r3, #15
 801085c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	7b5b      	ldrb	r3, [r3, #13]
 8010862:	f003 0302 	and.w	r3, r3, #2
 8010866:	2b00      	cmp	r3, #0
 8010868:	d011      	beq.n	801088e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801086e:	68bb      	ldr	r3, [r7, #8]
 8010870:	691b      	ldr	r3, [r3, #16]
 8010872:	2b00      	cmp	r3, #0
 8010874:	d106      	bne.n	8010884 <pbuf_free+0x9c>
 8010876:	4b1d      	ldr	r3, [pc, #116]	; (80108ec <pbuf_free+0x104>)
 8010878:	f240 22ff 	movw	r2, #767	; 0x2ff
 801087c:	491f      	ldr	r1, [pc, #124]	; (80108fc <pbuf_free+0x114>)
 801087e:	481d      	ldr	r0, [pc, #116]	; (80108f4 <pbuf_free+0x10c>)
 8010880:	f006 fb48 	bl	8016f14 <iprintf>
        pc->custom_free_function(p);
 8010884:	68bb      	ldr	r3, [r7, #8]
 8010886:	691b      	ldr	r3, [r3, #16]
 8010888:	6878      	ldr	r0, [r7, #4]
 801088a:	4798      	blx	r3
 801088c:	e01d      	b.n	80108ca <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801088e:	7bfb      	ldrb	r3, [r7, #15]
 8010890:	2b02      	cmp	r3, #2
 8010892:	d104      	bne.n	801089e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8010894:	6879      	ldr	r1, [r7, #4]
 8010896:	200c      	movs	r0, #12
 8010898:	f7ff f902 	bl	800faa0 <memp_free>
 801089c:	e015      	b.n	80108ca <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801089e:	7bfb      	ldrb	r3, [r7, #15]
 80108a0:	2b01      	cmp	r3, #1
 80108a2:	d104      	bne.n	80108ae <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 80108a4:	6879      	ldr	r1, [r7, #4]
 80108a6:	200b      	movs	r0, #11
 80108a8:	f7ff f8fa 	bl	800faa0 <memp_free>
 80108ac:	e00d      	b.n	80108ca <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80108ae:	7bfb      	ldrb	r3, [r7, #15]
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d103      	bne.n	80108bc <pbuf_free+0xd4>
          mem_free(p);
 80108b4:	6878      	ldr	r0, [r7, #4]
 80108b6:	f7fe fd3f 	bl	800f338 <mem_free>
 80108ba:	e006      	b.n	80108ca <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80108bc:	4b0b      	ldr	r3, [pc, #44]	; (80108ec <pbuf_free+0x104>)
 80108be:	f240 320f 	movw	r2, #783	; 0x30f
 80108c2:	490f      	ldr	r1, [pc, #60]	; (8010900 <pbuf_free+0x118>)
 80108c4:	480b      	ldr	r0, [pc, #44]	; (80108f4 <pbuf_free+0x10c>)
 80108c6:	f006 fb25 	bl	8016f14 <iprintf>
        }
      }
      count++;
 80108ca:	7ffb      	ldrb	r3, [r7, #31]
 80108cc:	3301      	adds	r3, #1
 80108ce:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80108d0:	693b      	ldr	r3, [r7, #16]
 80108d2:	607b      	str	r3, [r7, #4]
 80108d4:	e001      	b.n	80108da <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80108d6:	2300      	movs	r3, #0
 80108d8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d199      	bne.n	8010814 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80108e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80108e2:	4618      	mov	r0, r3
 80108e4:	3720      	adds	r7, #32
 80108e6:	46bd      	mov	sp, r7
 80108e8:	bd80      	pop	{r7, pc}
 80108ea:	bf00      	nop
 80108ec:	08018c6c 	.word	0x08018c6c
 80108f0:	08018e14 	.word	0x08018e14
 80108f4:	08018d10 	.word	0x08018d10
 80108f8:	08018e40 	.word	0x08018e40
 80108fc:	08018e58 	.word	0x08018e58
 8010900:	08018e7c 	.word	0x08018e7c

08010904 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8010904:	b480      	push	{r7}
 8010906:	b085      	sub	sp, #20
 8010908:	af00      	add	r7, sp, #0
 801090a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 801090c:	2300      	movs	r3, #0
 801090e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8010910:	e005      	b.n	801091e <pbuf_clen+0x1a>
    ++len;
 8010912:	89fb      	ldrh	r3, [r7, #14]
 8010914:	3301      	adds	r3, #1
 8010916:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	2b00      	cmp	r3, #0
 8010922:	d1f6      	bne.n	8010912 <pbuf_clen+0xe>
  }
  return len;
 8010924:	89fb      	ldrh	r3, [r7, #14]
}
 8010926:	4618      	mov	r0, r3
 8010928:	3714      	adds	r7, #20
 801092a:	46bd      	mov	sp, r7
 801092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010930:	4770      	bx	lr
	...

08010934 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8010934:	b580      	push	{r7, lr}
 8010936:	b084      	sub	sp, #16
 8010938:	af00      	add	r7, sp, #0
 801093a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	2b00      	cmp	r3, #0
 8010940:	d016      	beq.n	8010970 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8010942:	f000 fabf 	bl	8010ec4 <sys_arch_protect>
 8010946:	60f8      	str	r0, [r7, #12]
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	7b9b      	ldrb	r3, [r3, #14]
 801094c:	3301      	adds	r3, #1
 801094e:	b2da      	uxtb	r2, r3
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	739a      	strb	r2, [r3, #14]
 8010954:	68f8      	ldr	r0, [r7, #12]
 8010956:	f000 fac3 	bl	8010ee0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	7b9b      	ldrb	r3, [r3, #14]
 801095e:	2b00      	cmp	r3, #0
 8010960:	d106      	bne.n	8010970 <pbuf_ref+0x3c>
 8010962:	4b05      	ldr	r3, [pc, #20]	; (8010978 <pbuf_ref+0x44>)
 8010964:	f240 3242 	movw	r2, #834	; 0x342
 8010968:	4904      	ldr	r1, [pc, #16]	; (801097c <pbuf_ref+0x48>)
 801096a:	4805      	ldr	r0, [pc, #20]	; (8010980 <pbuf_ref+0x4c>)
 801096c:	f006 fad2 	bl	8016f14 <iprintf>
  }
}
 8010970:	bf00      	nop
 8010972:	3710      	adds	r7, #16
 8010974:	46bd      	mov	sp, r7
 8010976:	bd80      	pop	{r7, pc}
 8010978:	08018c6c 	.word	0x08018c6c
 801097c:	08018e90 	.word	0x08018e90
 8010980:	08018d10 	.word	0x08018d10

08010984 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8010984:	b580      	push	{r7, lr}
 8010986:	b084      	sub	sp, #16
 8010988:	af00      	add	r7, sp, #0
 801098a:	6078      	str	r0, [r7, #4]
 801098c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	2b00      	cmp	r3, #0
 8010992:	d002      	beq.n	801099a <pbuf_cat+0x16>
 8010994:	683b      	ldr	r3, [r7, #0]
 8010996:	2b00      	cmp	r3, #0
 8010998:	d107      	bne.n	80109aa <pbuf_cat+0x26>
 801099a:	4b20      	ldr	r3, [pc, #128]	; (8010a1c <pbuf_cat+0x98>)
 801099c:	f240 3259 	movw	r2, #857	; 0x359
 80109a0:	491f      	ldr	r1, [pc, #124]	; (8010a20 <pbuf_cat+0x9c>)
 80109a2:	4820      	ldr	r0, [pc, #128]	; (8010a24 <pbuf_cat+0xa0>)
 80109a4:	f006 fab6 	bl	8016f14 <iprintf>
 80109a8:	e034      	b.n	8010a14 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	60fb      	str	r3, [r7, #12]
 80109ae:	e00a      	b.n	80109c6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	891a      	ldrh	r2, [r3, #8]
 80109b4:	683b      	ldr	r3, [r7, #0]
 80109b6:	891b      	ldrh	r3, [r3, #8]
 80109b8:	4413      	add	r3, r2
 80109ba:	b29a      	uxth	r2, r3
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	60fb      	str	r3, [r7, #12]
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d1f0      	bne.n	80109b0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	891a      	ldrh	r2, [r3, #8]
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	895b      	ldrh	r3, [r3, #10]
 80109d6:	429a      	cmp	r2, r3
 80109d8:	d006      	beq.n	80109e8 <pbuf_cat+0x64>
 80109da:	4b10      	ldr	r3, [pc, #64]	; (8010a1c <pbuf_cat+0x98>)
 80109dc:	f240 3262 	movw	r2, #866	; 0x362
 80109e0:	4911      	ldr	r1, [pc, #68]	; (8010a28 <pbuf_cat+0xa4>)
 80109e2:	4810      	ldr	r0, [pc, #64]	; (8010a24 <pbuf_cat+0xa0>)
 80109e4:	f006 fa96 	bl	8016f14 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d006      	beq.n	80109fe <pbuf_cat+0x7a>
 80109f0:	4b0a      	ldr	r3, [pc, #40]	; (8010a1c <pbuf_cat+0x98>)
 80109f2:	f240 3263 	movw	r2, #867	; 0x363
 80109f6:	490d      	ldr	r1, [pc, #52]	; (8010a2c <pbuf_cat+0xa8>)
 80109f8:	480a      	ldr	r0, [pc, #40]	; (8010a24 <pbuf_cat+0xa0>)
 80109fa:	f006 fa8b 	bl	8016f14 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	891a      	ldrh	r2, [r3, #8]
 8010a02:	683b      	ldr	r3, [r7, #0]
 8010a04:	891b      	ldrh	r3, [r3, #8]
 8010a06:	4413      	add	r3, r2
 8010a08:	b29a      	uxth	r2, r3
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	683a      	ldr	r2, [r7, #0]
 8010a12:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8010a14:	3710      	adds	r7, #16
 8010a16:	46bd      	mov	sp, r7
 8010a18:	bd80      	pop	{r7, pc}
 8010a1a:	bf00      	nop
 8010a1c:	08018c6c 	.word	0x08018c6c
 8010a20:	08018ea4 	.word	0x08018ea4
 8010a24:	08018d10 	.word	0x08018d10
 8010a28:	08018edc 	.word	0x08018edc
 8010a2c:	08018f0c 	.word	0x08018f0c

08010a30 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8010a30:	b580      	push	{r7, lr}
 8010a32:	b086      	sub	sp, #24
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	6078      	str	r0, [r7, #4]
 8010a38:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8010a3a:	2300      	movs	r3, #0
 8010a3c:	617b      	str	r3, [r7, #20]
 8010a3e:	2300      	movs	r3, #0
 8010a40:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d008      	beq.n	8010a5a <pbuf_copy+0x2a>
 8010a48:	683b      	ldr	r3, [r7, #0]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d005      	beq.n	8010a5a <pbuf_copy+0x2a>
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	891a      	ldrh	r2, [r3, #8]
 8010a52:	683b      	ldr	r3, [r7, #0]
 8010a54:	891b      	ldrh	r3, [r3, #8]
 8010a56:	429a      	cmp	r2, r3
 8010a58:	d209      	bcs.n	8010a6e <pbuf_copy+0x3e>
 8010a5a:	4b57      	ldr	r3, [pc, #348]	; (8010bb8 <pbuf_copy+0x188>)
 8010a5c:	f240 32c9 	movw	r2, #969	; 0x3c9
 8010a60:	4956      	ldr	r1, [pc, #344]	; (8010bbc <pbuf_copy+0x18c>)
 8010a62:	4857      	ldr	r0, [pc, #348]	; (8010bc0 <pbuf_copy+0x190>)
 8010a64:	f006 fa56 	bl	8016f14 <iprintf>
 8010a68:	f06f 030f 	mvn.w	r3, #15
 8010a6c:	e09f      	b.n	8010bae <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	895b      	ldrh	r3, [r3, #10]
 8010a72:	461a      	mov	r2, r3
 8010a74:	697b      	ldr	r3, [r7, #20]
 8010a76:	1ad2      	subs	r2, r2, r3
 8010a78:	683b      	ldr	r3, [r7, #0]
 8010a7a:	895b      	ldrh	r3, [r3, #10]
 8010a7c:	4619      	mov	r1, r3
 8010a7e:	693b      	ldr	r3, [r7, #16]
 8010a80:	1acb      	subs	r3, r1, r3
 8010a82:	429a      	cmp	r2, r3
 8010a84:	d306      	bcc.n	8010a94 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8010a86:	683b      	ldr	r3, [r7, #0]
 8010a88:	895b      	ldrh	r3, [r3, #10]
 8010a8a:	461a      	mov	r2, r3
 8010a8c:	693b      	ldr	r3, [r7, #16]
 8010a8e:	1ad3      	subs	r3, r2, r3
 8010a90:	60fb      	str	r3, [r7, #12]
 8010a92:	e005      	b.n	8010aa0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	895b      	ldrh	r3, [r3, #10]
 8010a98:	461a      	mov	r2, r3
 8010a9a:	697b      	ldr	r3, [r7, #20]
 8010a9c:	1ad3      	subs	r3, r2, r3
 8010a9e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	685a      	ldr	r2, [r3, #4]
 8010aa4:	697b      	ldr	r3, [r7, #20]
 8010aa6:	18d0      	adds	r0, r2, r3
 8010aa8:	683b      	ldr	r3, [r7, #0]
 8010aaa:	685a      	ldr	r2, [r3, #4]
 8010aac:	693b      	ldr	r3, [r7, #16]
 8010aae:	4413      	add	r3, r2
 8010ab0:	68fa      	ldr	r2, [r7, #12]
 8010ab2:	4619      	mov	r1, r3
 8010ab4:	f006 f983 	bl	8016dbe <memcpy>
    offset_to += len;
 8010ab8:	697a      	ldr	r2, [r7, #20]
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	4413      	add	r3, r2
 8010abe:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8010ac0:	693a      	ldr	r2, [r7, #16]
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	4413      	add	r3, r2
 8010ac6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	895b      	ldrh	r3, [r3, #10]
 8010acc:	461a      	mov	r2, r3
 8010ace:	697b      	ldr	r3, [r7, #20]
 8010ad0:	4293      	cmp	r3, r2
 8010ad2:	d906      	bls.n	8010ae2 <pbuf_copy+0xb2>
 8010ad4:	4b38      	ldr	r3, [pc, #224]	; (8010bb8 <pbuf_copy+0x188>)
 8010ad6:	f240 32d9 	movw	r2, #985	; 0x3d9
 8010ada:	493a      	ldr	r1, [pc, #232]	; (8010bc4 <pbuf_copy+0x194>)
 8010adc:	4838      	ldr	r0, [pc, #224]	; (8010bc0 <pbuf_copy+0x190>)
 8010ade:	f006 fa19 	bl	8016f14 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8010ae2:	683b      	ldr	r3, [r7, #0]
 8010ae4:	895b      	ldrh	r3, [r3, #10]
 8010ae6:	461a      	mov	r2, r3
 8010ae8:	693b      	ldr	r3, [r7, #16]
 8010aea:	4293      	cmp	r3, r2
 8010aec:	d906      	bls.n	8010afc <pbuf_copy+0xcc>
 8010aee:	4b32      	ldr	r3, [pc, #200]	; (8010bb8 <pbuf_copy+0x188>)
 8010af0:	f240 32da 	movw	r2, #986	; 0x3da
 8010af4:	4934      	ldr	r1, [pc, #208]	; (8010bc8 <pbuf_copy+0x198>)
 8010af6:	4832      	ldr	r0, [pc, #200]	; (8010bc0 <pbuf_copy+0x190>)
 8010af8:	f006 fa0c 	bl	8016f14 <iprintf>
    if (offset_from >= p_from->len) {
 8010afc:	683b      	ldr	r3, [r7, #0]
 8010afe:	895b      	ldrh	r3, [r3, #10]
 8010b00:	461a      	mov	r2, r3
 8010b02:	693b      	ldr	r3, [r7, #16]
 8010b04:	4293      	cmp	r3, r2
 8010b06:	d304      	bcc.n	8010b12 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8010b08:	2300      	movs	r3, #0
 8010b0a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8010b0c:	683b      	ldr	r3, [r7, #0]
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	895b      	ldrh	r3, [r3, #10]
 8010b16:	461a      	mov	r2, r3
 8010b18:	697b      	ldr	r3, [r7, #20]
 8010b1a:	4293      	cmp	r3, r2
 8010b1c:	d114      	bne.n	8010b48 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8010b1e:	2300      	movs	r3, #0
 8010b20:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d10c      	bne.n	8010b48 <pbuf_copy+0x118>
 8010b2e:	683b      	ldr	r3, [r7, #0]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d009      	beq.n	8010b48 <pbuf_copy+0x118>
 8010b34:	4b20      	ldr	r3, [pc, #128]	; (8010bb8 <pbuf_copy+0x188>)
 8010b36:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8010b3a:	4924      	ldr	r1, [pc, #144]	; (8010bcc <pbuf_copy+0x19c>)
 8010b3c:	4820      	ldr	r0, [pc, #128]	; (8010bc0 <pbuf_copy+0x190>)
 8010b3e:	f006 f9e9 	bl	8016f14 <iprintf>
 8010b42:	f06f 030f 	mvn.w	r3, #15
 8010b46:	e032      	b.n	8010bae <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8010b48:	683b      	ldr	r3, [r7, #0]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d013      	beq.n	8010b76 <pbuf_copy+0x146>
 8010b4e:	683b      	ldr	r3, [r7, #0]
 8010b50:	895a      	ldrh	r2, [r3, #10]
 8010b52:	683b      	ldr	r3, [r7, #0]
 8010b54:	891b      	ldrh	r3, [r3, #8]
 8010b56:	429a      	cmp	r2, r3
 8010b58:	d10d      	bne.n	8010b76 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010b5a:	683b      	ldr	r3, [r7, #0]
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d009      	beq.n	8010b76 <pbuf_copy+0x146>
 8010b62:	4b15      	ldr	r3, [pc, #84]	; (8010bb8 <pbuf_copy+0x188>)
 8010b64:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8010b68:	4919      	ldr	r1, [pc, #100]	; (8010bd0 <pbuf_copy+0x1a0>)
 8010b6a:	4815      	ldr	r0, [pc, #84]	; (8010bc0 <pbuf_copy+0x190>)
 8010b6c:	f006 f9d2 	bl	8016f14 <iprintf>
 8010b70:	f06f 0305 	mvn.w	r3, #5
 8010b74:	e01b      	b.n	8010bae <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d013      	beq.n	8010ba4 <pbuf_copy+0x174>
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	895a      	ldrh	r2, [r3, #10]
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	891b      	ldrh	r3, [r3, #8]
 8010b84:	429a      	cmp	r2, r3
 8010b86:	d10d      	bne.n	8010ba4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d009      	beq.n	8010ba4 <pbuf_copy+0x174>
 8010b90:	4b09      	ldr	r3, [pc, #36]	; (8010bb8 <pbuf_copy+0x188>)
 8010b92:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8010b96:	490e      	ldr	r1, [pc, #56]	; (8010bd0 <pbuf_copy+0x1a0>)
 8010b98:	4809      	ldr	r0, [pc, #36]	; (8010bc0 <pbuf_copy+0x190>)
 8010b9a:	f006 f9bb 	bl	8016f14 <iprintf>
 8010b9e:	f06f 0305 	mvn.w	r3, #5
 8010ba2:	e004      	b.n	8010bae <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8010ba4:	683b      	ldr	r3, [r7, #0]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	f47f af61 	bne.w	8010a6e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8010bac:	2300      	movs	r3, #0
}
 8010bae:	4618      	mov	r0, r3
 8010bb0:	3718      	adds	r7, #24
 8010bb2:	46bd      	mov	sp, r7
 8010bb4:	bd80      	pop	{r7, pc}
 8010bb6:	bf00      	nop
 8010bb8:	08018c6c 	.word	0x08018c6c
 8010bbc:	08018f58 	.word	0x08018f58
 8010bc0:	08018d10 	.word	0x08018d10
 8010bc4:	08018f88 	.word	0x08018f88
 8010bc8:	08018fa0 	.word	0x08018fa0
 8010bcc:	08018fbc 	.word	0x08018fbc
 8010bd0:	08018fcc 	.word	0x08018fcc

08010bd4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8010bd4:	b580      	push	{r7, lr}
 8010bd6:	b088      	sub	sp, #32
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	60f8      	str	r0, [r7, #12]
 8010bdc:	60b9      	str	r1, [r7, #8]
 8010bde:	4611      	mov	r1, r2
 8010be0:	461a      	mov	r2, r3
 8010be2:	460b      	mov	r3, r1
 8010be4:	80fb      	strh	r3, [r7, #6]
 8010be6:	4613      	mov	r3, r2
 8010be8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8010bea:	2300      	movs	r3, #0
 8010bec:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8010bee:	2300      	movs	r3, #0
 8010bf0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d108      	bne.n	8010c0a <pbuf_copy_partial+0x36>
 8010bf8:	4b2b      	ldr	r3, [pc, #172]	; (8010ca8 <pbuf_copy_partial+0xd4>)
 8010bfa:	f240 420a 	movw	r2, #1034	; 0x40a
 8010bfe:	492b      	ldr	r1, [pc, #172]	; (8010cac <pbuf_copy_partial+0xd8>)
 8010c00:	482b      	ldr	r0, [pc, #172]	; (8010cb0 <pbuf_copy_partial+0xdc>)
 8010c02:	f006 f987 	bl	8016f14 <iprintf>
 8010c06:	2300      	movs	r3, #0
 8010c08:	e04a      	b.n	8010ca0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8010c0a:	68bb      	ldr	r3, [r7, #8]
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d108      	bne.n	8010c22 <pbuf_copy_partial+0x4e>
 8010c10:	4b25      	ldr	r3, [pc, #148]	; (8010ca8 <pbuf_copy_partial+0xd4>)
 8010c12:	f240 420b 	movw	r2, #1035	; 0x40b
 8010c16:	4927      	ldr	r1, [pc, #156]	; (8010cb4 <pbuf_copy_partial+0xe0>)
 8010c18:	4825      	ldr	r0, [pc, #148]	; (8010cb0 <pbuf_copy_partial+0xdc>)
 8010c1a:	f006 f97b 	bl	8016f14 <iprintf>
 8010c1e:	2300      	movs	r3, #0
 8010c20:	e03e      	b.n	8010ca0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	61fb      	str	r3, [r7, #28]
 8010c26:	e034      	b.n	8010c92 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8010c28:	88bb      	ldrh	r3, [r7, #4]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d00a      	beq.n	8010c44 <pbuf_copy_partial+0x70>
 8010c2e:	69fb      	ldr	r3, [r7, #28]
 8010c30:	895b      	ldrh	r3, [r3, #10]
 8010c32:	88ba      	ldrh	r2, [r7, #4]
 8010c34:	429a      	cmp	r2, r3
 8010c36:	d305      	bcc.n	8010c44 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8010c38:	69fb      	ldr	r3, [r7, #28]
 8010c3a:	895b      	ldrh	r3, [r3, #10]
 8010c3c:	88ba      	ldrh	r2, [r7, #4]
 8010c3e:	1ad3      	subs	r3, r2, r3
 8010c40:	80bb      	strh	r3, [r7, #4]
 8010c42:	e023      	b.n	8010c8c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8010c44:	69fb      	ldr	r3, [r7, #28]
 8010c46:	895a      	ldrh	r2, [r3, #10]
 8010c48:	88bb      	ldrh	r3, [r7, #4]
 8010c4a:	1ad3      	subs	r3, r2, r3
 8010c4c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8010c4e:	8b3a      	ldrh	r2, [r7, #24]
 8010c50:	88fb      	ldrh	r3, [r7, #6]
 8010c52:	429a      	cmp	r2, r3
 8010c54:	d901      	bls.n	8010c5a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8010c56:	88fb      	ldrh	r3, [r7, #6]
 8010c58:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8010c5a:	8b7b      	ldrh	r3, [r7, #26]
 8010c5c:	68ba      	ldr	r2, [r7, #8]
 8010c5e:	18d0      	adds	r0, r2, r3
 8010c60:	69fb      	ldr	r3, [r7, #28]
 8010c62:	685a      	ldr	r2, [r3, #4]
 8010c64:	88bb      	ldrh	r3, [r7, #4]
 8010c66:	4413      	add	r3, r2
 8010c68:	8b3a      	ldrh	r2, [r7, #24]
 8010c6a:	4619      	mov	r1, r3
 8010c6c:	f006 f8a7 	bl	8016dbe <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8010c70:	8afa      	ldrh	r2, [r7, #22]
 8010c72:	8b3b      	ldrh	r3, [r7, #24]
 8010c74:	4413      	add	r3, r2
 8010c76:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8010c78:	8b7a      	ldrh	r2, [r7, #26]
 8010c7a:	8b3b      	ldrh	r3, [r7, #24]
 8010c7c:	4413      	add	r3, r2
 8010c7e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8010c80:	88fa      	ldrh	r2, [r7, #6]
 8010c82:	8b3b      	ldrh	r3, [r7, #24]
 8010c84:	1ad3      	subs	r3, r2, r3
 8010c86:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8010c88:	2300      	movs	r3, #0
 8010c8a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010c8c:	69fb      	ldr	r3, [r7, #28]
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	61fb      	str	r3, [r7, #28]
 8010c92:	88fb      	ldrh	r3, [r7, #6]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d002      	beq.n	8010c9e <pbuf_copy_partial+0xca>
 8010c98:	69fb      	ldr	r3, [r7, #28]
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d1c4      	bne.n	8010c28 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8010c9e:	8afb      	ldrh	r3, [r7, #22]
}
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	3720      	adds	r7, #32
 8010ca4:	46bd      	mov	sp, r7
 8010ca6:	bd80      	pop	{r7, pc}
 8010ca8:	08018c6c 	.word	0x08018c6c
 8010cac:	08018ff8 	.word	0x08018ff8
 8010cb0:	08018d10 	.word	0x08018d10
 8010cb4:	08019018 	.word	0x08019018

08010cb8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8010cb8:	b580      	push	{r7, lr}
 8010cba:	b084      	sub	sp, #16
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	4603      	mov	r3, r0
 8010cc0:	603a      	str	r2, [r7, #0]
 8010cc2:	71fb      	strb	r3, [r7, #7]
 8010cc4:	460b      	mov	r3, r1
 8010cc6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8010cc8:	683b      	ldr	r3, [r7, #0]
 8010cca:	8919      	ldrh	r1, [r3, #8]
 8010ccc:	88ba      	ldrh	r2, [r7, #4]
 8010cce:	79fb      	ldrb	r3, [r7, #7]
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	f7ff faa5 	bl	8010220 <pbuf_alloc>
 8010cd6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d101      	bne.n	8010ce2 <pbuf_clone+0x2a>
    return NULL;
 8010cde:	2300      	movs	r3, #0
 8010ce0:	e011      	b.n	8010d06 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8010ce2:	6839      	ldr	r1, [r7, #0]
 8010ce4:	68f8      	ldr	r0, [r7, #12]
 8010ce6:	f7ff fea3 	bl	8010a30 <pbuf_copy>
 8010cea:	4603      	mov	r3, r0
 8010cec:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8010cee:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d006      	beq.n	8010d04 <pbuf_clone+0x4c>
 8010cf6:	4b06      	ldr	r3, [pc, #24]	; (8010d10 <pbuf_clone+0x58>)
 8010cf8:	f240 5224 	movw	r2, #1316	; 0x524
 8010cfc:	4905      	ldr	r1, [pc, #20]	; (8010d14 <pbuf_clone+0x5c>)
 8010cfe:	4806      	ldr	r0, [pc, #24]	; (8010d18 <pbuf_clone+0x60>)
 8010d00:	f006 f908 	bl	8016f14 <iprintf>
  return q;
 8010d04:	68fb      	ldr	r3, [r7, #12]
}
 8010d06:	4618      	mov	r0, r3
 8010d08:	3710      	adds	r7, #16
 8010d0a:	46bd      	mov	sp, r7
 8010d0c:	bd80      	pop	{r7, pc}
 8010d0e:	bf00      	nop
 8010d10:	08018c6c 	.word	0x08018c6c
 8010d14:	08019124 	.word	0x08019124
 8010d18:	08018d10 	.word	0x08018d10

08010d1c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8010d1c:	b580      	push	{r7, lr}
 8010d1e:	b082      	sub	sp, #8
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	6078      	str	r0, [r7, #4]
 8010d24:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8010d26:	683b      	ldr	r3, [r7, #0]
 8010d28:	2200      	movs	r2, #0
 8010d2a:	2104      	movs	r1, #4
 8010d2c:	4618      	mov	r0, r3
 8010d2e:	f7f8 fb19 	bl	8009364 <osMessageQueueNew>
 8010d32:	4602      	mov	r2, r0
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d102      	bne.n	8010d46 <sys_mbox_new+0x2a>
    return ERR_MEM;
 8010d40:	f04f 33ff 	mov.w	r3, #4294967295
 8010d44:	e000      	b.n	8010d48 <sys_mbox_new+0x2c>

  return ERR_OK;
 8010d46:	2300      	movs	r3, #0
}
 8010d48:	4618      	mov	r0, r3
 8010d4a:	3708      	adds	r7, #8
 8010d4c:	46bd      	mov	sp, r7
 8010d4e:	bd80      	pop	{r7, pc}

08010d50 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b084      	sub	sp, #16
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	6078      	str	r0, [r7, #4]
 8010d58:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	6818      	ldr	r0, [r3, #0]
 8010d5e:	4639      	mov	r1, r7
 8010d60:	2300      	movs	r3, #0
 8010d62:	2200      	movs	r2, #0
 8010d64:	f7f8 fb72 	bl	800944c <osMessageQueuePut>
 8010d68:	4603      	mov	r3, r0
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d102      	bne.n	8010d74 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8010d6e:	2300      	movs	r3, #0
 8010d70:	73fb      	strb	r3, [r7, #15]
 8010d72:	e001      	b.n	8010d78 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8010d74:	23ff      	movs	r3, #255	; 0xff
 8010d76:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8010d78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	3710      	adds	r7, #16
 8010d80:	46bd      	mov	sp, r7
 8010d82:	bd80      	pop	{r7, pc}

08010d84 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8010d84:	b580      	push	{r7, lr}
 8010d86:	b086      	sub	sp, #24
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	60f8      	str	r0, [r7, #12]
 8010d8c:	60b9      	str	r1, [r7, #8]
 8010d8e:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8010d90:	f7f7 fff8 	bl	8008d84 <osKernelGetTickCount>
 8010d94:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d013      	beq.n	8010dc4 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	6818      	ldr	r0, [r3, #0]
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	2200      	movs	r2, #0
 8010da4:	68b9      	ldr	r1, [r7, #8]
 8010da6:	f7f8 fbb1 	bl	800950c <osMessageQueueGet>
 8010daa:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8010dac:	693b      	ldr	r3, [r7, #16]
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d105      	bne.n	8010dbe <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8010db2:	f7f7 ffe7 	bl	8008d84 <osKernelGetTickCount>
 8010db6:	4602      	mov	r2, r0
 8010db8:	697b      	ldr	r3, [r7, #20]
 8010dba:	1ad3      	subs	r3, r2, r3
 8010dbc:	e00f      	b.n	8010dde <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8010dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8010dc2:	e00c      	b.n	8010dde <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	6818      	ldr	r0, [r3, #0]
 8010dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8010dcc:	2200      	movs	r2, #0
 8010dce:	68b9      	ldr	r1, [r7, #8]
 8010dd0:	f7f8 fb9c 	bl	800950c <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8010dd4:	f7f7 ffd6 	bl	8008d84 <osKernelGetTickCount>
 8010dd8:	4602      	mov	r2, r0
 8010dda:	697b      	ldr	r3, [r7, #20]
 8010ddc:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8010dde:	4618      	mov	r0, r3
 8010de0:	3718      	adds	r7, #24
 8010de2:	46bd      	mov	sp, r7
 8010de4:	bd80      	pop	{r7, pc}

08010de6 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8010de6:	b480      	push	{r7}
 8010de8:	b083      	sub	sp, #12
 8010dea:	af00      	add	r7, sp, #0
 8010dec:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d101      	bne.n	8010dfa <sys_mbox_valid+0x14>
    return 0;
 8010df6:	2300      	movs	r3, #0
 8010df8:	e000      	b.n	8010dfc <sys_mbox_valid+0x16>
  else
    return 1;
 8010dfa:	2301      	movs	r3, #1
}
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	370c      	adds	r7, #12
 8010e00:	46bd      	mov	sp, r7
 8010e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e06:	4770      	bx	lr

08010e08 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8010e0c:	2000      	movs	r0, #0
 8010e0e:	f7f8 f87c 	bl	8008f0a <osMutexNew>
 8010e12:	4603      	mov	r3, r0
 8010e14:	4a01      	ldr	r2, [pc, #4]	; (8010e1c <sys_init+0x14>)
 8010e16:	6013      	str	r3, [r2, #0]
#endif
}
 8010e18:	bf00      	nop
 8010e1a:	bd80      	pop	{r7, pc}
 8010e1c:	24015528 	.word	0x24015528

08010e20 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8010e20:	b580      	push	{r7, lr}
 8010e22:	b082      	sub	sp, #8
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8010e28:	2000      	movs	r0, #0
 8010e2a:	f7f8 f86e 	bl	8008f0a <osMutexNew>
 8010e2e:	4602      	mov	r2, r0
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d102      	bne.n	8010e42 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8010e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8010e40:	e000      	b.n	8010e44 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8010e42:	2300      	movs	r3, #0
}
 8010e44:	4618      	mov	r0, r3
 8010e46:	3708      	adds	r7, #8
 8010e48:	46bd      	mov	sp, r7
 8010e4a:	bd80      	pop	{r7, pc}

08010e4c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	b082      	sub	sp, #8
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	f04f 31ff 	mov.w	r1, #4294967295
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	f7f8 f8da 	bl	8009016 <osMutexAcquire>
#endif
}
 8010e62:	bf00      	nop
 8010e64:	3708      	adds	r7, #8
 8010e66:	46bd      	mov	sp, r7
 8010e68:	bd80      	pop	{r7, pc}

08010e6a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8010e6a:	b580      	push	{r7, lr}
 8010e6c:	b082      	sub	sp, #8
 8010e6e:	af00      	add	r7, sp, #0
 8010e70:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	4618      	mov	r0, r3
 8010e78:	f7f8 f918 	bl	80090ac <osMutexRelease>
}
 8010e7c:	bf00      	nop
 8010e7e:	3708      	adds	r7, #8
 8010e80:	46bd      	mov	sp, r7
 8010e82:	bd80      	pop	{r7, pc}

08010e84 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8010e84:	b580      	push	{r7, lr}
 8010e86:	b08e      	sub	sp, #56	; 0x38
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	60f8      	str	r0, [r7, #12]
 8010e8c:	60b9      	str	r1, [r7, #8]
 8010e8e:	607a      	str	r2, [r7, #4]
 8010e90:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8010e92:	f107 0314 	add.w	r3, r7, #20
 8010e96:	2224      	movs	r2, #36	; 0x24
 8010e98:	2100      	movs	r1, #0
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	f005 ff9d 	bl	8016dda <memset>
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	617b      	str	r3, [r7, #20]
 8010ea4:	683b      	ldr	r3, [r7, #0]
 8010ea6:	62bb      	str	r3, [r7, #40]	; 0x28
 8010ea8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8010eac:	f107 0314 	add.w	r3, r7, #20
 8010eb0:	461a      	mov	r2, r3
 8010eb2:	6879      	ldr	r1, [r7, #4]
 8010eb4:	68b8      	ldr	r0, [r7, #8]
 8010eb6:	f7f7 ff7a 	bl	8008dae <osThreadNew>
 8010eba:	4603      	mov	r3, r0
#endif
}
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	3738      	adds	r7, #56	; 0x38
 8010ec0:	46bd      	mov	sp, r7
 8010ec2:	bd80      	pop	{r7, pc}

08010ec4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8010ec4:	b580      	push	{r7, lr}
 8010ec6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8010ec8:	4b04      	ldr	r3, [pc, #16]	; (8010edc <sys_arch_protect+0x18>)
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	f7f8 f8a0 	bl	8009016 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8010ed6:	2301      	movs	r3, #1
}
 8010ed8:	4618      	mov	r0, r3
 8010eda:	bd80      	pop	{r7, pc}
 8010edc:	24015528 	.word	0x24015528

08010ee0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8010ee0:	b580      	push	{r7, lr}
 8010ee2:	b082      	sub	sp, #8
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8010ee8:	4b04      	ldr	r3, [pc, #16]	; (8010efc <sys_arch_unprotect+0x1c>)
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	4618      	mov	r0, r3
 8010eee:	f7f8 f8dd 	bl	80090ac <osMutexRelease>
}
 8010ef2:	bf00      	nop
 8010ef4:	3708      	adds	r7, #8
 8010ef6:	46bd      	mov	sp, r7
 8010ef8:	bd80      	pop	{r7, pc}
 8010efa:	bf00      	nop
 8010efc:	24015528 	.word	0x24015528

08010f00 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8010f00:	b580      	push	{r7, lr}
 8010f02:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010f04:	f006 f81e 	bl	8016f44 <rand>
 8010f08:	4603      	mov	r3, r0
 8010f0a:	b29b      	uxth	r3, r3
 8010f0c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010f10:	b29b      	uxth	r3, r3
 8010f12:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8010f16:	b29a      	uxth	r2, r3
 8010f18:	4b01      	ldr	r3, [pc, #4]	; (8010f20 <tcp_init+0x20>)
 8010f1a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8010f1c:	bf00      	nop
 8010f1e:	bd80      	pop	{r7, pc}
 8010f20:	24000028 	.word	0x24000028

08010f24 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8010f24:	b580      	push	{r7, lr}
 8010f26:	b082      	sub	sp, #8
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	7d1b      	ldrb	r3, [r3, #20]
 8010f30:	2b01      	cmp	r3, #1
 8010f32:	d105      	bne.n	8010f40 <tcp_free+0x1c>
 8010f34:	4b06      	ldr	r3, [pc, #24]	; (8010f50 <tcp_free+0x2c>)
 8010f36:	22d4      	movs	r2, #212	; 0xd4
 8010f38:	4906      	ldr	r1, [pc, #24]	; (8010f54 <tcp_free+0x30>)
 8010f3a:	4807      	ldr	r0, [pc, #28]	; (8010f58 <tcp_free+0x34>)
 8010f3c:	f005 ffea 	bl	8016f14 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8010f40:	6879      	ldr	r1, [r7, #4]
 8010f42:	2001      	movs	r0, #1
 8010f44:	f7fe fdac 	bl	800faa0 <memp_free>
}
 8010f48:	bf00      	nop
 8010f4a:	3708      	adds	r7, #8
 8010f4c:	46bd      	mov	sp, r7
 8010f4e:	bd80      	pop	{r7, pc}
 8010f50:	080191b0 	.word	0x080191b0
 8010f54:	08019220 	.word	0x08019220
 8010f58:	08019234 	.word	0x08019234

08010f5c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8010f5c:	b580      	push	{r7, lr}
 8010f5e:	b082      	sub	sp, #8
 8010f60:	af00      	add	r7, sp, #0
 8010f62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	7d1b      	ldrb	r3, [r3, #20]
 8010f68:	2b01      	cmp	r3, #1
 8010f6a:	d105      	bne.n	8010f78 <tcp_free_listen+0x1c>
 8010f6c:	4b06      	ldr	r3, [pc, #24]	; (8010f88 <tcp_free_listen+0x2c>)
 8010f6e:	22df      	movs	r2, #223	; 0xdf
 8010f70:	4906      	ldr	r1, [pc, #24]	; (8010f8c <tcp_free_listen+0x30>)
 8010f72:	4807      	ldr	r0, [pc, #28]	; (8010f90 <tcp_free_listen+0x34>)
 8010f74:	f005 ffce 	bl	8016f14 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8010f78:	6879      	ldr	r1, [r7, #4]
 8010f7a:	2002      	movs	r0, #2
 8010f7c:	f7fe fd90 	bl	800faa0 <memp_free>
}
 8010f80:	bf00      	nop
 8010f82:	3708      	adds	r7, #8
 8010f84:	46bd      	mov	sp, r7
 8010f86:	bd80      	pop	{r7, pc}
 8010f88:	080191b0 	.word	0x080191b0
 8010f8c:	0801925c 	.word	0x0801925c
 8010f90:	08019234 	.word	0x08019234

08010f94 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8010f94:	b580      	push	{r7, lr}
 8010f96:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8010f98:	f000 fea2 	bl	8011ce0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8010f9c:	4b07      	ldr	r3, [pc, #28]	; (8010fbc <tcp_tmr+0x28>)
 8010f9e:	781b      	ldrb	r3, [r3, #0]
 8010fa0:	3301      	adds	r3, #1
 8010fa2:	b2da      	uxtb	r2, r3
 8010fa4:	4b05      	ldr	r3, [pc, #20]	; (8010fbc <tcp_tmr+0x28>)
 8010fa6:	701a      	strb	r2, [r3, #0]
 8010fa8:	4b04      	ldr	r3, [pc, #16]	; (8010fbc <tcp_tmr+0x28>)
 8010faa:	781b      	ldrb	r3, [r3, #0]
 8010fac:	f003 0301 	and.w	r3, r3, #1
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d001      	beq.n	8010fb8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8010fb4:	f000 fb54 	bl	8011660 <tcp_slowtmr>
  }
}
 8010fb8:	bf00      	nop
 8010fba:	bd80      	pop	{r7, pc}
 8010fbc:	24015541 	.word	0x24015541

08010fc0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8010fc0:	b580      	push	{r7, lr}
 8010fc2:	b084      	sub	sp, #16
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	6078      	str	r0, [r7, #4]
 8010fc8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8010fca:	683b      	ldr	r3, [r7, #0]
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d105      	bne.n	8010fdc <tcp_remove_listener+0x1c>
 8010fd0:	4b0d      	ldr	r3, [pc, #52]	; (8011008 <tcp_remove_listener+0x48>)
 8010fd2:	22ff      	movs	r2, #255	; 0xff
 8010fd4:	490d      	ldr	r1, [pc, #52]	; (801100c <tcp_remove_listener+0x4c>)
 8010fd6:	480e      	ldr	r0, [pc, #56]	; (8011010 <tcp_remove_listener+0x50>)
 8010fd8:	f005 ff9c 	bl	8016f14 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	60fb      	str	r3, [r7, #12]
 8010fe0:	e00a      	b.n	8010ff8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010fe6:	683a      	ldr	r2, [r7, #0]
 8010fe8:	429a      	cmp	r2, r3
 8010fea:	d102      	bne.n	8010ff2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	2200      	movs	r2, #0
 8010ff0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	68db      	ldr	r3, [r3, #12]
 8010ff6:	60fb      	str	r3, [r7, #12]
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d1f1      	bne.n	8010fe2 <tcp_remove_listener+0x22>
    }
  }
}
 8010ffe:	bf00      	nop
 8011000:	bf00      	nop
 8011002:	3710      	adds	r7, #16
 8011004:	46bd      	mov	sp, r7
 8011006:	bd80      	pop	{r7, pc}
 8011008:	080191b0 	.word	0x080191b0
 801100c:	08019278 	.word	0x08019278
 8011010:	08019234 	.word	0x08019234

08011014 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8011014:	b580      	push	{r7, lr}
 8011016:	b084      	sub	sp, #16
 8011018:	af00      	add	r7, sp, #0
 801101a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	2b00      	cmp	r3, #0
 8011020:	d106      	bne.n	8011030 <tcp_listen_closed+0x1c>
 8011022:	4b14      	ldr	r3, [pc, #80]	; (8011074 <tcp_listen_closed+0x60>)
 8011024:	f240 1211 	movw	r2, #273	; 0x111
 8011028:	4913      	ldr	r1, [pc, #76]	; (8011078 <tcp_listen_closed+0x64>)
 801102a:	4814      	ldr	r0, [pc, #80]	; (801107c <tcp_listen_closed+0x68>)
 801102c:	f005 ff72 	bl	8016f14 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	7d1b      	ldrb	r3, [r3, #20]
 8011034:	2b01      	cmp	r3, #1
 8011036:	d006      	beq.n	8011046 <tcp_listen_closed+0x32>
 8011038:	4b0e      	ldr	r3, [pc, #56]	; (8011074 <tcp_listen_closed+0x60>)
 801103a:	f44f 7289 	mov.w	r2, #274	; 0x112
 801103e:	4910      	ldr	r1, [pc, #64]	; (8011080 <tcp_listen_closed+0x6c>)
 8011040:	480e      	ldr	r0, [pc, #56]	; (801107c <tcp_listen_closed+0x68>)
 8011042:	f005 ff67 	bl	8016f14 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011046:	2301      	movs	r3, #1
 8011048:	60fb      	str	r3, [r7, #12]
 801104a:	e00b      	b.n	8011064 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801104c:	4a0d      	ldr	r2, [pc, #52]	; (8011084 <tcp_listen_closed+0x70>)
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	6879      	ldr	r1, [r7, #4]
 8011058:	4618      	mov	r0, r3
 801105a:	f7ff ffb1 	bl	8010fc0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	3301      	adds	r3, #1
 8011062:	60fb      	str	r3, [r7, #12]
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	2b03      	cmp	r3, #3
 8011068:	d9f0      	bls.n	801104c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801106a:	bf00      	nop
 801106c:	bf00      	nop
 801106e:	3710      	adds	r7, #16
 8011070:	46bd      	mov	sp, r7
 8011072:	bd80      	pop	{r7, pc}
 8011074:	080191b0 	.word	0x080191b0
 8011078:	080192a0 	.word	0x080192a0
 801107c:	08019234 	.word	0x08019234
 8011080:	080192ac 	.word	0x080192ac
 8011084:	0801adcc 	.word	0x0801adcc

08011088 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8011088:	b5b0      	push	{r4, r5, r7, lr}
 801108a:	b088      	sub	sp, #32
 801108c:	af04      	add	r7, sp, #16
 801108e:	6078      	str	r0, [r7, #4]
 8011090:	460b      	mov	r3, r1
 8011092:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	2b00      	cmp	r3, #0
 8011098:	d106      	bne.n	80110a8 <tcp_close_shutdown+0x20>
 801109a:	4b63      	ldr	r3, [pc, #396]	; (8011228 <tcp_close_shutdown+0x1a0>)
 801109c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80110a0:	4962      	ldr	r1, [pc, #392]	; (801122c <tcp_close_shutdown+0x1a4>)
 80110a2:	4863      	ldr	r0, [pc, #396]	; (8011230 <tcp_close_shutdown+0x1a8>)
 80110a4:	f005 ff36 	bl	8016f14 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80110a8:	78fb      	ldrb	r3, [r7, #3]
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d066      	beq.n	801117c <tcp_close_shutdown+0xf4>
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	7d1b      	ldrb	r3, [r3, #20]
 80110b2:	2b04      	cmp	r3, #4
 80110b4:	d003      	beq.n	80110be <tcp_close_shutdown+0x36>
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	7d1b      	ldrb	r3, [r3, #20]
 80110ba:	2b07      	cmp	r3, #7
 80110bc:	d15e      	bne.n	801117c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d104      	bne.n	80110d0 <tcp_close_shutdown+0x48>
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80110ca:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80110ce:	d055      	beq.n	801117c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	8b5b      	ldrh	r3, [r3, #26]
 80110d4:	f003 0310 	and.w	r3, r3, #16
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d106      	bne.n	80110ea <tcp_close_shutdown+0x62>
 80110dc:	4b52      	ldr	r3, [pc, #328]	; (8011228 <tcp_close_shutdown+0x1a0>)
 80110de:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80110e2:	4954      	ldr	r1, [pc, #336]	; (8011234 <tcp_close_shutdown+0x1ac>)
 80110e4:	4852      	ldr	r0, [pc, #328]	; (8011230 <tcp_close_shutdown+0x1a8>)
 80110e6:	f005 ff15 	bl	8016f14 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80110f2:	687d      	ldr	r5, [r7, #4]
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	3304      	adds	r3, #4
 80110f8:	687a      	ldr	r2, [r7, #4]
 80110fa:	8ad2      	ldrh	r2, [r2, #22]
 80110fc:	6879      	ldr	r1, [r7, #4]
 80110fe:	8b09      	ldrh	r1, [r1, #24]
 8011100:	9102      	str	r1, [sp, #8]
 8011102:	9201      	str	r2, [sp, #4]
 8011104:	9300      	str	r3, [sp, #0]
 8011106:	462b      	mov	r3, r5
 8011108:	4622      	mov	r2, r4
 801110a:	4601      	mov	r1, r0
 801110c:	6878      	ldr	r0, [r7, #4]
 801110e:	f004 fe91 	bl	8015e34 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8011112:	6878      	ldr	r0, [r7, #4]
 8011114:	f001 f8c6 	bl	80122a4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8011118:	4b47      	ldr	r3, [pc, #284]	; (8011238 <tcp_close_shutdown+0x1b0>)
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	687a      	ldr	r2, [r7, #4]
 801111e:	429a      	cmp	r2, r3
 8011120:	d105      	bne.n	801112e <tcp_close_shutdown+0xa6>
 8011122:	4b45      	ldr	r3, [pc, #276]	; (8011238 <tcp_close_shutdown+0x1b0>)
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	68db      	ldr	r3, [r3, #12]
 8011128:	4a43      	ldr	r2, [pc, #268]	; (8011238 <tcp_close_shutdown+0x1b0>)
 801112a:	6013      	str	r3, [r2, #0]
 801112c:	e013      	b.n	8011156 <tcp_close_shutdown+0xce>
 801112e:	4b42      	ldr	r3, [pc, #264]	; (8011238 <tcp_close_shutdown+0x1b0>)
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	60fb      	str	r3, [r7, #12]
 8011134:	e00c      	b.n	8011150 <tcp_close_shutdown+0xc8>
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	68db      	ldr	r3, [r3, #12]
 801113a:	687a      	ldr	r2, [r7, #4]
 801113c:	429a      	cmp	r2, r3
 801113e:	d104      	bne.n	801114a <tcp_close_shutdown+0xc2>
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	68da      	ldr	r2, [r3, #12]
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	60da      	str	r2, [r3, #12]
 8011148:	e005      	b.n	8011156 <tcp_close_shutdown+0xce>
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	68db      	ldr	r3, [r3, #12]
 801114e:	60fb      	str	r3, [r7, #12]
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	2b00      	cmp	r3, #0
 8011154:	d1ef      	bne.n	8011136 <tcp_close_shutdown+0xae>
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	2200      	movs	r2, #0
 801115a:	60da      	str	r2, [r3, #12]
 801115c:	4b37      	ldr	r3, [pc, #220]	; (801123c <tcp_close_shutdown+0x1b4>)
 801115e:	2201      	movs	r2, #1
 8011160:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8011162:	4b37      	ldr	r3, [pc, #220]	; (8011240 <tcp_close_shutdown+0x1b8>)
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	687a      	ldr	r2, [r7, #4]
 8011168:	429a      	cmp	r2, r3
 801116a:	d102      	bne.n	8011172 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 801116c:	f003 fd5e 	bl	8014c2c <tcp_trigger_input_pcb_close>
 8011170:	e002      	b.n	8011178 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8011172:	6878      	ldr	r0, [r7, #4]
 8011174:	f7ff fed6 	bl	8010f24 <tcp_free>
      }
      return ERR_OK;
 8011178:	2300      	movs	r3, #0
 801117a:	e050      	b.n	801121e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	7d1b      	ldrb	r3, [r3, #20]
 8011180:	2b02      	cmp	r3, #2
 8011182:	d03b      	beq.n	80111fc <tcp_close_shutdown+0x174>
 8011184:	2b02      	cmp	r3, #2
 8011186:	dc44      	bgt.n	8011212 <tcp_close_shutdown+0x18a>
 8011188:	2b00      	cmp	r3, #0
 801118a:	d002      	beq.n	8011192 <tcp_close_shutdown+0x10a>
 801118c:	2b01      	cmp	r3, #1
 801118e:	d02a      	beq.n	80111e6 <tcp_close_shutdown+0x15e>
 8011190:	e03f      	b.n	8011212 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	8adb      	ldrh	r3, [r3, #22]
 8011196:	2b00      	cmp	r3, #0
 8011198:	d021      	beq.n	80111de <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801119a:	4b2a      	ldr	r3, [pc, #168]	; (8011244 <tcp_close_shutdown+0x1bc>)
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	687a      	ldr	r2, [r7, #4]
 80111a0:	429a      	cmp	r2, r3
 80111a2:	d105      	bne.n	80111b0 <tcp_close_shutdown+0x128>
 80111a4:	4b27      	ldr	r3, [pc, #156]	; (8011244 <tcp_close_shutdown+0x1bc>)
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	68db      	ldr	r3, [r3, #12]
 80111aa:	4a26      	ldr	r2, [pc, #152]	; (8011244 <tcp_close_shutdown+0x1bc>)
 80111ac:	6013      	str	r3, [r2, #0]
 80111ae:	e013      	b.n	80111d8 <tcp_close_shutdown+0x150>
 80111b0:	4b24      	ldr	r3, [pc, #144]	; (8011244 <tcp_close_shutdown+0x1bc>)
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	60bb      	str	r3, [r7, #8]
 80111b6:	e00c      	b.n	80111d2 <tcp_close_shutdown+0x14a>
 80111b8:	68bb      	ldr	r3, [r7, #8]
 80111ba:	68db      	ldr	r3, [r3, #12]
 80111bc:	687a      	ldr	r2, [r7, #4]
 80111be:	429a      	cmp	r2, r3
 80111c0:	d104      	bne.n	80111cc <tcp_close_shutdown+0x144>
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	68da      	ldr	r2, [r3, #12]
 80111c6:	68bb      	ldr	r3, [r7, #8]
 80111c8:	60da      	str	r2, [r3, #12]
 80111ca:	e005      	b.n	80111d8 <tcp_close_shutdown+0x150>
 80111cc:	68bb      	ldr	r3, [r7, #8]
 80111ce:	68db      	ldr	r3, [r3, #12]
 80111d0:	60bb      	str	r3, [r7, #8]
 80111d2:	68bb      	ldr	r3, [r7, #8]
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d1ef      	bne.n	80111b8 <tcp_close_shutdown+0x130>
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	2200      	movs	r2, #0
 80111dc:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80111de:	6878      	ldr	r0, [r7, #4]
 80111e0:	f7ff fea0 	bl	8010f24 <tcp_free>
      break;
 80111e4:	e01a      	b.n	801121c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80111e6:	6878      	ldr	r0, [r7, #4]
 80111e8:	f7ff ff14 	bl	8011014 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80111ec:	6879      	ldr	r1, [r7, #4]
 80111ee:	4816      	ldr	r0, [pc, #88]	; (8011248 <tcp_close_shutdown+0x1c0>)
 80111f0:	f001 f8a8 	bl	8012344 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80111f4:	6878      	ldr	r0, [r7, #4]
 80111f6:	f7ff feb1 	bl	8010f5c <tcp_free_listen>
      break;
 80111fa:	e00f      	b.n	801121c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80111fc:	6879      	ldr	r1, [r7, #4]
 80111fe:	480e      	ldr	r0, [pc, #56]	; (8011238 <tcp_close_shutdown+0x1b0>)
 8011200:	f001 f8a0 	bl	8012344 <tcp_pcb_remove>
 8011204:	4b0d      	ldr	r3, [pc, #52]	; (801123c <tcp_close_shutdown+0x1b4>)
 8011206:	2201      	movs	r2, #1
 8011208:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 801120a:	6878      	ldr	r0, [r7, #4]
 801120c:	f7ff fe8a 	bl	8010f24 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8011210:	e004      	b.n	801121c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8011212:	6878      	ldr	r0, [r7, #4]
 8011214:	f000 f81a 	bl	801124c <tcp_close_shutdown_fin>
 8011218:	4603      	mov	r3, r0
 801121a:	e000      	b.n	801121e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 801121c:	2300      	movs	r3, #0
}
 801121e:	4618      	mov	r0, r3
 8011220:	3710      	adds	r7, #16
 8011222:	46bd      	mov	sp, r7
 8011224:	bdb0      	pop	{r4, r5, r7, pc}
 8011226:	bf00      	nop
 8011228:	080191b0 	.word	0x080191b0
 801122c:	080192c4 	.word	0x080192c4
 8011230:	08019234 	.word	0x08019234
 8011234:	080192e4 	.word	0x080192e4
 8011238:	24015538 	.word	0x24015538
 801123c:	24015540 	.word	0x24015540
 8011240:	24015578 	.word	0x24015578
 8011244:	24015530 	.word	0x24015530
 8011248:	24015534 	.word	0x24015534

0801124c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 801124c:	b580      	push	{r7, lr}
 801124e:	b084      	sub	sp, #16
 8011250:	af00      	add	r7, sp, #0
 8011252:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	2b00      	cmp	r3, #0
 8011258:	d106      	bne.n	8011268 <tcp_close_shutdown_fin+0x1c>
 801125a:	4b2e      	ldr	r3, [pc, #184]	; (8011314 <tcp_close_shutdown_fin+0xc8>)
 801125c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8011260:	492d      	ldr	r1, [pc, #180]	; (8011318 <tcp_close_shutdown_fin+0xcc>)
 8011262:	482e      	ldr	r0, [pc, #184]	; (801131c <tcp_close_shutdown_fin+0xd0>)
 8011264:	f005 fe56 	bl	8016f14 <iprintf>

  switch (pcb->state) {
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	7d1b      	ldrb	r3, [r3, #20]
 801126c:	2b07      	cmp	r3, #7
 801126e:	d020      	beq.n	80112b2 <tcp_close_shutdown_fin+0x66>
 8011270:	2b07      	cmp	r3, #7
 8011272:	dc2b      	bgt.n	80112cc <tcp_close_shutdown_fin+0x80>
 8011274:	2b03      	cmp	r3, #3
 8011276:	d002      	beq.n	801127e <tcp_close_shutdown_fin+0x32>
 8011278:	2b04      	cmp	r3, #4
 801127a:	d00d      	beq.n	8011298 <tcp_close_shutdown_fin+0x4c>
 801127c:	e026      	b.n	80112cc <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801127e:	6878      	ldr	r0, [r7, #4]
 8011280:	f003 fee6 	bl	8015050 <tcp_send_fin>
 8011284:	4603      	mov	r3, r0
 8011286:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011288:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801128c:	2b00      	cmp	r3, #0
 801128e:	d11f      	bne.n	80112d0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	2205      	movs	r2, #5
 8011294:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011296:	e01b      	b.n	80112d0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8011298:	6878      	ldr	r0, [r7, #4]
 801129a:	f003 fed9 	bl	8015050 <tcp_send_fin>
 801129e:	4603      	mov	r3, r0
 80112a0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80112a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d114      	bne.n	80112d4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	2205      	movs	r2, #5
 80112ae:	751a      	strb	r2, [r3, #20]
      }
      break;
 80112b0:	e010      	b.n	80112d4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80112b2:	6878      	ldr	r0, [r7, #4]
 80112b4:	f003 fecc 	bl	8015050 <tcp_send_fin>
 80112b8:	4603      	mov	r3, r0
 80112ba:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80112bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d109      	bne.n	80112d8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	2209      	movs	r2, #9
 80112c8:	751a      	strb	r2, [r3, #20]
      }
      break;
 80112ca:	e005      	b.n	80112d8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80112cc:	2300      	movs	r3, #0
 80112ce:	e01c      	b.n	801130a <tcp_close_shutdown_fin+0xbe>
      break;
 80112d0:	bf00      	nop
 80112d2:	e002      	b.n	80112da <tcp_close_shutdown_fin+0x8e>
      break;
 80112d4:	bf00      	nop
 80112d6:	e000      	b.n	80112da <tcp_close_shutdown_fin+0x8e>
      break;
 80112d8:	bf00      	nop
  }

  if (err == ERR_OK) {
 80112da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d103      	bne.n	80112ea <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80112e2:	6878      	ldr	r0, [r7, #4]
 80112e4:	f003 fff2 	bl	80152cc <tcp_output>
 80112e8:	e00d      	b.n	8011306 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80112ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80112ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112f2:	d108      	bne.n	8011306 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	8b5b      	ldrh	r3, [r3, #26]
 80112f8:	f043 0308 	orr.w	r3, r3, #8
 80112fc:	b29a      	uxth	r2, r3
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8011302:	2300      	movs	r3, #0
 8011304:	e001      	b.n	801130a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8011306:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801130a:	4618      	mov	r0, r3
 801130c:	3710      	adds	r7, #16
 801130e:	46bd      	mov	sp, r7
 8011310:	bd80      	pop	{r7, pc}
 8011312:	bf00      	nop
 8011314:	080191b0 	.word	0x080191b0
 8011318:	080192a0 	.word	0x080192a0
 801131c:	08019234 	.word	0x08019234

08011320 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8011320:	b580      	push	{r7, lr}
 8011322:	b082      	sub	sp, #8
 8011324:	af00      	add	r7, sp, #0
 8011326:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	2b00      	cmp	r3, #0
 801132c:	d109      	bne.n	8011342 <tcp_close+0x22>
 801132e:	4b0f      	ldr	r3, [pc, #60]	; (801136c <tcp_close+0x4c>)
 8011330:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8011334:	490e      	ldr	r1, [pc, #56]	; (8011370 <tcp_close+0x50>)
 8011336:	480f      	ldr	r0, [pc, #60]	; (8011374 <tcp_close+0x54>)
 8011338:	f005 fdec 	bl	8016f14 <iprintf>
 801133c:	f06f 030f 	mvn.w	r3, #15
 8011340:	e00f      	b.n	8011362 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	7d1b      	ldrb	r3, [r3, #20]
 8011346:	2b01      	cmp	r3, #1
 8011348:	d006      	beq.n	8011358 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	8b5b      	ldrh	r3, [r3, #26]
 801134e:	f043 0310 	orr.w	r3, r3, #16
 8011352:	b29a      	uxth	r2, r3
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8011358:	2101      	movs	r1, #1
 801135a:	6878      	ldr	r0, [r7, #4]
 801135c:	f7ff fe94 	bl	8011088 <tcp_close_shutdown>
 8011360:	4603      	mov	r3, r0
}
 8011362:	4618      	mov	r0, r3
 8011364:	3708      	adds	r7, #8
 8011366:	46bd      	mov	sp, r7
 8011368:	bd80      	pop	{r7, pc}
 801136a:	bf00      	nop
 801136c:	080191b0 	.word	0x080191b0
 8011370:	08019300 	.word	0x08019300
 8011374:	08019234 	.word	0x08019234

08011378 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8011378:	b580      	push	{r7, lr}
 801137a:	b08e      	sub	sp, #56	; 0x38
 801137c:	af04      	add	r7, sp, #16
 801137e:	6078      	str	r0, [r7, #4]
 8011380:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	2b00      	cmp	r3, #0
 8011386:	d107      	bne.n	8011398 <tcp_abandon+0x20>
 8011388:	4b52      	ldr	r3, [pc, #328]	; (80114d4 <tcp_abandon+0x15c>)
 801138a:	f240 223d 	movw	r2, #573	; 0x23d
 801138e:	4952      	ldr	r1, [pc, #328]	; (80114d8 <tcp_abandon+0x160>)
 8011390:	4852      	ldr	r0, [pc, #328]	; (80114dc <tcp_abandon+0x164>)
 8011392:	f005 fdbf 	bl	8016f14 <iprintf>
 8011396:	e099      	b.n	80114cc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	7d1b      	ldrb	r3, [r3, #20]
 801139c:	2b01      	cmp	r3, #1
 801139e:	d106      	bne.n	80113ae <tcp_abandon+0x36>
 80113a0:	4b4c      	ldr	r3, [pc, #304]	; (80114d4 <tcp_abandon+0x15c>)
 80113a2:	f44f 7210 	mov.w	r2, #576	; 0x240
 80113a6:	494e      	ldr	r1, [pc, #312]	; (80114e0 <tcp_abandon+0x168>)
 80113a8:	484c      	ldr	r0, [pc, #304]	; (80114dc <tcp_abandon+0x164>)
 80113aa:	f005 fdb3 	bl	8016f14 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	7d1b      	ldrb	r3, [r3, #20]
 80113b2:	2b0a      	cmp	r3, #10
 80113b4:	d107      	bne.n	80113c6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80113b6:	6879      	ldr	r1, [r7, #4]
 80113b8:	484a      	ldr	r0, [pc, #296]	; (80114e4 <tcp_abandon+0x16c>)
 80113ba:	f000 ffc3 	bl	8012344 <tcp_pcb_remove>
    tcp_free(pcb);
 80113be:	6878      	ldr	r0, [r7, #4]
 80113c0:	f7ff fdb0 	bl	8010f24 <tcp_free>
 80113c4:	e082      	b.n	80114cc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80113c6:	2300      	movs	r3, #0
 80113c8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80113ca:	2300      	movs	r3, #0
 80113cc:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80113d2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113d8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80113e0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	691b      	ldr	r3, [r3, #16]
 80113e6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	7d1b      	ldrb	r3, [r3, #20]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d126      	bne.n	801143e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	8adb      	ldrh	r3, [r3, #22]
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d02e      	beq.n	8011456 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80113f8:	4b3b      	ldr	r3, [pc, #236]	; (80114e8 <tcp_abandon+0x170>)
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	687a      	ldr	r2, [r7, #4]
 80113fe:	429a      	cmp	r2, r3
 8011400:	d105      	bne.n	801140e <tcp_abandon+0x96>
 8011402:	4b39      	ldr	r3, [pc, #228]	; (80114e8 <tcp_abandon+0x170>)
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	68db      	ldr	r3, [r3, #12]
 8011408:	4a37      	ldr	r2, [pc, #220]	; (80114e8 <tcp_abandon+0x170>)
 801140a:	6013      	str	r3, [r2, #0]
 801140c:	e013      	b.n	8011436 <tcp_abandon+0xbe>
 801140e:	4b36      	ldr	r3, [pc, #216]	; (80114e8 <tcp_abandon+0x170>)
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	61fb      	str	r3, [r7, #28]
 8011414:	e00c      	b.n	8011430 <tcp_abandon+0xb8>
 8011416:	69fb      	ldr	r3, [r7, #28]
 8011418:	68db      	ldr	r3, [r3, #12]
 801141a:	687a      	ldr	r2, [r7, #4]
 801141c:	429a      	cmp	r2, r3
 801141e:	d104      	bne.n	801142a <tcp_abandon+0xb2>
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	68da      	ldr	r2, [r3, #12]
 8011424:	69fb      	ldr	r3, [r7, #28]
 8011426:	60da      	str	r2, [r3, #12]
 8011428:	e005      	b.n	8011436 <tcp_abandon+0xbe>
 801142a:	69fb      	ldr	r3, [r7, #28]
 801142c:	68db      	ldr	r3, [r3, #12]
 801142e:	61fb      	str	r3, [r7, #28]
 8011430:	69fb      	ldr	r3, [r7, #28]
 8011432:	2b00      	cmp	r3, #0
 8011434:	d1ef      	bne.n	8011416 <tcp_abandon+0x9e>
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	2200      	movs	r2, #0
 801143a:	60da      	str	r2, [r3, #12]
 801143c:	e00b      	b.n	8011456 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801143e:	683b      	ldr	r3, [r7, #0]
 8011440:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	8adb      	ldrh	r3, [r3, #22]
 8011446:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011448:	6879      	ldr	r1, [r7, #4]
 801144a:	4828      	ldr	r0, [pc, #160]	; (80114ec <tcp_abandon+0x174>)
 801144c:	f000 ff7a 	bl	8012344 <tcp_pcb_remove>
 8011450:	4b27      	ldr	r3, [pc, #156]	; (80114f0 <tcp_abandon+0x178>)
 8011452:	2201      	movs	r2, #1
 8011454:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801145a:	2b00      	cmp	r3, #0
 801145c:	d004      	beq.n	8011468 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011462:	4618      	mov	r0, r3
 8011464:	f000 fd1c 	bl	8011ea0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801146c:	2b00      	cmp	r3, #0
 801146e:	d004      	beq.n	801147a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011474:	4618      	mov	r0, r3
 8011476:	f000 fd13 	bl	8011ea0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801147e:	2b00      	cmp	r3, #0
 8011480:	d004      	beq.n	801148c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011486:	4618      	mov	r0, r3
 8011488:	f000 fd0a 	bl	8011ea0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 801148c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801148e:	2b00      	cmp	r3, #0
 8011490:	d00e      	beq.n	80114b0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8011492:	6879      	ldr	r1, [r7, #4]
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	3304      	adds	r3, #4
 8011498:	687a      	ldr	r2, [r7, #4]
 801149a:	8b12      	ldrh	r2, [r2, #24]
 801149c:	9202      	str	r2, [sp, #8]
 801149e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80114a0:	9201      	str	r2, [sp, #4]
 80114a2:	9300      	str	r3, [sp, #0]
 80114a4:	460b      	mov	r3, r1
 80114a6:	697a      	ldr	r2, [r7, #20]
 80114a8:	69b9      	ldr	r1, [r7, #24]
 80114aa:	6878      	ldr	r0, [r7, #4]
 80114ac:	f004 fcc2 	bl	8015e34 <tcp_rst>
    }
    last_state = pcb->state;
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	7d1b      	ldrb	r3, [r3, #20]
 80114b4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80114b6:	6878      	ldr	r0, [r7, #4]
 80114b8:	f7ff fd34 	bl	8010f24 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80114bc:	693b      	ldr	r3, [r7, #16]
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d004      	beq.n	80114cc <tcp_abandon+0x154>
 80114c2:	693b      	ldr	r3, [r7, #16]
 80114c4:	f06f 010c 	mvn.w	r1, #12
 80114c8:	68f8      	ldr	r0, [r7, #12]
 80114ca:	4798      	blx	r3
  }
}
 80114cc:	3728      	adds	r7, #40	; 0x28
 80114ce:	46bd      	mov	sp, r7
 80114d0:	bd80      	pop	{r7, pc}
 80114d2:	bf00      	nop
 80114d4:	080191b0 	.word	0x080191b0
 80114d8:	08019334 	.word	0x08019334
 80114dc:	08019234 	.word	0x08019234
 80114e0:	08019350 	.word	0x08019350
 80114e4:	2401553c 	.word	0x2401553c
 80114e8:	24015530 	.word	0x24015530
 80114ec:	24015538 	.word	0x24015538
 80114f0:	24015540 	.word	0x24015540

080114f4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80114f4:	b580      	push	{r7, lr}
 80114f6:	b082      	sub	sp, #8
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80114fc:	2101      	movs	r1, #1
 80114fe:	6878      	ldr	r0, [r7, #4]
 8011500:	f7ff ff3a 	bl	8011378 <tcp_abandon>
}
 8011504:	bf00      	nop
 8011506:	3708      	adds	r7, #8
 8011508:	46bd      	mov	sp, r7
 801150a:	bd80      	pop	{r7, pc}

0801150c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 801150c:	b580      	push	{r7, lr}
 801150e:	b084      	sub	sp, #16
 8011510:	af00      	add	r7, sp, #0
 8011512:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	2b00      	cmp	r3, #0
 8011518:	d106      	bne.n	8011528 <tcp_update_rcv_ann_wnd+0x1c>
 801151a:	4b25      	ldr	r3, [pc, #148]	; (80115b0 <tcp_update_rcv_ann_wnd+0xa4>)
 801151c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8011520:	4924      	ldr	r1, [pc, #144]	; (80115b4 <tcp_update_rcv_ann_wnd+0xa8>)
 8011522:	4825      	ldr	r0, [pc, #148]	; (80115b8 <tcp_update_rcv_ann_wnd+0xac>)
 8011524:	f005 fcf6 	bl	8016f14 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801152c:	687a      	ldr	r2, [r7, #4]
 801152e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8011530:	4413      	add	r3, r2
 8011532:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011538:	687a      	ldr	r2, [r7, #4]
 801153a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 801153c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8011540:	bf28      	it	cs
 8011542:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8011546:	b292      	uxth	r2, r2
 8011548:	4413      	add	r3, r2
 801154a:	68fa      	ldr	r2, [r7, #12]
 801154c:	1ad3      	subs	r3, r2, r3
 801154e:	2b00      	cmp	r3, #0
 8011550:	db08      	blt.n	8011564 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801155e:	68fa      	ldr	r2, [r7, #12]
 8011560:	1ad3      	subs	r3, r2, r3
 8011562:	e020      	b.n	80115a6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801156c:	1ad3      	subs	r3, r2, r3
 801156e:	2b00      	cmp	r3, #0
 8011570:	dd03      	ble.n	801157a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	2200      	movs	r2, #0
 8011576:	855a      	strh	r2, [r3, #42]	; 0x2a
 8011578:	e014      	b.n	80115a4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011582:	1ad3      	subs	r3, r2, r3
 8011584:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8011586:	68bb      	ldr	r3, [r7, #8]
 8011588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801158c:	d306      	bcc.n	801159c <tcp_update_rcv_ann_wnd+0x90>
 801158e:	4b08      	ldr	r3, [pc, #32]	; (80115b0 <tcp_update_rcv_ann_wnd+0xa4>)
 8011590:	f240 32b6 	movw	r2, #950	; 0x3b6
 8011594:	4909      	ldr	r1, [pc, #36]	; (80115bc <tcp_update_rcv_ann_wnd+0xb0>)
 8011596:	4808      	ldr	r0, [pc, #32]	; (80115b8 <tcp_update_rcv_ann_wnd+0xac>)
 8011598:	f005 fcbc 	bl	8016f14 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801159c:	68bb      	ldr	r3, [r7, #8]
 801159e:	b29a      	uxth	r2, r3
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80115a4:	2300      	movs	r3, #0
  }
}
 80115a6:	4618      	mov	r0, r3
 80115a8:	3710      	adds	r7, #16
 80115aa:	46bd      	mov	sp, r7
 80115ac:	bd80      	pop	{r7, pc}
 80115ae:	bf00      	nop
 80115b0:	080191b0 	.word	0x080191b0
 80115b4:	0801944c 	.word	0x0801944c
 80115b8:	08019234 	.word	0x08019234
 80115bc:	08019470 	.word	0x08019470

080115c0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80115c0:	b580      	push	{r7, lr}
 80115c2:	b084      	sub	sp, #16
 80115c4:	af00      	add	r7, sp, #0
 80115c6:	6078      	str	r0, [r7, #4]
 80115c8:	460b      	mov	r3, r1
 80115ca:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d107      	bne.n	80115e2 <tcp_recved+0x22>
 80115d2:	4b1f      	ldr	r3, [pc, #124]	; (8011650 <tcp_recved+0x90>)
 80115d4:	f240 32cf 	movw	r2, #975	; 0x3cf
 80115d8:	491e      	ldr	r1, [pc, #120]	; (8011654 <tcp_recved+0x94>)
 80115da:	481f      	ldr	r0, [pc, #124]	; (8011658 <tcp_recved+0x98>)
 80115dc:	f005 fc9a 	bl	8016f14 <iprintf>
 80115e0:	e032      	b.n	8011648 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	7d1b      	ldrb	r3, [r3, #20]
 80115e6:	2b01      	cmp	r3, #1
 80115e8:	d106      	bne.n	80115f8 <tcp_recved+0x38>
 80115ea:	4b19      	ldr	r3, [pc, #100]	; (8011650 <tcp_recved+0x90>)
 80115ec:	f240 32d2 	movw	r2, #978	; 0x3d2
 80115f0:	491a      	ldr	r1, [pc, #104]	; (801165c <tcp_recved+0x9c>)
 80115f2:	4819      	ldr	r0, [pc, #100]	; (8011658 <tcp_recved+0x98>)
 80115f4:	f005 fc8e 	bl	8016f14 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80115fc:	887b      	ldrh	r3, [r7, #2]
 80115fe:	4413      	add	r3, r2
 8011600:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8011602:	89fb      	ldrh	r3, [r7, #14]
 8011604:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011608:	d804      	bhi.n	8011614 <tcp_recved+0x54>
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801160e:	89fa      	ldrh	r2, [r7, #14]
 8011610:	429a      	cmp	r2, r3
 8011612:	d204      	bcs.n	801161e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801161a:	851a      	strh	r2, [r3, #40]	; 0x28
 801161c:	e002      	b.n	8011624 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	89fa      	ldrh	r2, [r7, #14]
 8011622:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8011624:	6878      	ldr	r0, [r7, #4]
 8011626:	f7ff ff71 	bl	801150c <tcp_update_rcv_ann_wnd>
 801162a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801162c:	68bb      	ldr	r3, [r7, #8]
 801162e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011632:	d309      	bcc.n	8011648 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	8b5b      	ldrh	r3, [r3, #26]
 8011638:	f043 0302 	orr.w	r3, r3, #2
 801163c:	b29a      	uxth	r2, r3
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011642:	6878      	ldr	r0, [r7, #4]
 8011644:	f003 fe42 	bl	80152cc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8011648:	3710      	adds	r7, #16
 801164a:	46bd      	mov	sp, r7
 801164c:	bd80      	pop	{r7, pc}
 801164e:	bf00      	nop
 8011650:	080191b0 	.word	0x080191b0
 8011654:	0801948c 	.word	0x0801948c
 8011658:	08019234 	.word	0x08019234
 801165c:	080194a4 	.word	0x080194a4

08011660 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8011660:	b5b0      	push	{r4, r5, r7, lr}
 8011662:	b090      	sub	sp, #64	; 0x40
 8011664:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8011666:	2300      	movs	r3, #0
 8011668:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 801166c:	4b94      	ldr	r3, [pc, #592]	; (80118c0 <tcp_slowtmr+0x260>)
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	3301      	adds	r3, #1
 8011672:	4a93      	ldr	r2, [pc, #588]	; (80118c0 <tcp_slowtmr+0x260>)
 8011674:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8011676:	4b93      	ldr	r3, [pc, #588]	; (80118c4 <tcp_slowtmr+0x264>)
 8011678:	781b      	ldrb	r3, [r3, #0]
 801167a:	3301      	adds	r3, #1
 801167c:	b2da      	uxtb	r2, r3
 801167e:	4b91      	ldr	r3, [pc, #580]	; (80118c4 <tcp_slowtmr+0x264>)
 8011680:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8011682:	2300      	movs	r3, #0
 8011684:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8011686:	4b90      	ldr	r3, [pc, #576]	; (80118c8 <tcp_slowtmr+0x268>)
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 801168c:	e29d      	b.n	8011bca <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801168e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011690:	7d1b      	ldrb	r3, [r3, #20]
 8011692:	2b00      	cmp	r3, #0
 8011694:	d106      	bne.n	80116a4 <tcp_slowtmr+0x44>
 8011696:	4b8d      	ldr	r3, [pc, #564]	; (80118cc <tcp_slowtmr+0x26c>)
 8011698:	f240 42be 	movw	r2, #1214	; 0x4be
 801169c:	498c      	ldr	r1, [pc, #560]	; (80118d0 <tcp_slowtmr+0x270>)
 801169e:	488d      	ldr	r0, [pc, #564]	; (80118d4 <tcp_slowtmr+0x274>)
 80116a0:	f005 fc38 	bl	8016f14 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80116a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116a6:	7d1b      	ldrb	r3, [r3, #20]
 80116a8:	2b01      	cmp	r3, #1
 80116aa:	d106      	bne.n	80116ba <tcp_slowtmr+0x5a>
 80116ac:	4b87      	ldr	r3, [pc, #540]	; (80118cc <tcp_slowtmr+0x26c>)
 80116ae:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80116b2:	4989      	ldr	r1, [pc, #548]	; (80118d8 <tcp_slowtmr+0x278>)
 80116b4:	4887      	ldr	r0, [pc, #540]	; (80118d4 <tcp_slowtmr+0x274>)
 80116b6:	f005 fc2d 	bl	8016f14 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80116ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116bc:	7d1b      	ldrb	r3, [r3, #20]
 80116be:	2b0a      	cmp	r3, #10
 80116c0:	d106      	bne.n	80116d0 <tcp_slowtmr+0x70>
 80116c2:	4b82      	ldr	r3, [pc, #520]	; (80118cc <tcp_slowtmr+0x26c>)
 80116c4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80116c8:	4984      	ldr	r1, [pc, #528]	; (80118dc <tcp_slowtmr+0x27c>)
 80116ca:	4882      	ldr	r0, [pc, #520]	; (80118d4 <tcp_slowtmr+0x274>)
 80116cc:	f005 fc22 	bl	8016f14 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80116d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116d2:	7f9a      	ldrb	r2, [r3, #30]
 80116d4:	4b7b      	ldr	r3, [pc, #492]	; (80118c4 <tcp_slowtmr+0x264>)
 80116d6:	781b      	ldrb	r3, [r3, #0]
 80116d8:	429a      	cmp	r2, r3
 80116da:	d105      	bne.n	80116e8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80116dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116de:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80116e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116e2:	68db      	ldr	r3, [r3, #12]
 80116e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80116e6:	e270      	b.n	8011bca <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 80116e8:	4b76      	ldr	r3, [pc, #472]	; (80118c4 <tcp_slowtmr+0x264>)
 80116ea:	781a      	ldrb	r2, [r3, #0]
 80116ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116ee:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80116f0:	2300      	movs	r3, #0
 80116f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80116f6:	2300      	movs	r3, #0
 80116f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80116fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116fe:	7d1b      	ldrb	r3, [r3, #20]
 8011700:	2b02      	cmp	r3, #2
 8011702:	d10a      	bne.n	801171a <tcp_slowtmr+0xba>
 8011704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011706:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801170a:	2b05      	cmp	r3, #5
 801170c:	d905      	bls.n	801171a <tcp_slowtmr+0xba>
      ++pcb_remove;
 801170e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011712:	3301      	adds	r3, #1
 8011714:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011718:	e11e      	b.n	8011958 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801171a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801171c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011720:	2b0b      	cmp	r3, #11
 8011722:	d905      	bls.n	8011730 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8011724:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011728:	3301      	adds	r3, #1
 801172a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801172e:	e113      	b.n	8011958 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8011730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011732:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011736:	2b00      	cmp	r3, #0
 8011738:	d075      	beq.n	8011826 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801173a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801173c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801173e:	2b00      	cmp	r3, #0
 8011740:	d006      	beq.n	8011750 <tcp_slowtmr+0xf0>
 8011742:	4b62      	ldr	r3, [pc, #392]	; (80118cc <tcp_slowtmr+0x26c>)
 8011744:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8011748:	4965      	ldr	r1, [pc, #404]	; (80118e0 <tcp_slowtmr+0x280>)
 801174a:	4862      	ldr	r0, [pc, #392]	; (80118d4 <tcp_slowtmr+0x274>)
 801174c:	f005 fbe2 	bl	8016f14 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8011750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011752:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011754:	2b00      	cmp	r3, #0
 8011756:	d106      	bne.n	8011766 <tcp_slowtmr+0x106>
 8011758:	4b5c      	ldr	r3, [pc, #368]	; (80118cc <tcp_slowtmr+0x26c>)
 801175a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801175e:	4961      	ldr	r1, [pc, #388]	; (80118e4 <tcp_slowtmr+0x284>)
 8011760:	485c      	ldr	r0, [pc, #368]	; (80118d4 <tcp_slowtmr+0x274>)
 8011762:	f005 fbd7 	bl	8016f14 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8011766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011768:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801176c:	2b0b      	cmp	r3, #11
 801176e:	d905      	bls.n	801177c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8011770:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011774:	3301      	adds	r3, #1
 8011776:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801177a:	e0ed      	b.n	8011958 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801177c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801177e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011782:	3b01      	subs	r3, #1
 8011784:	4a58      	ldr	r2, [pc, #352]	; (80118e8 <tcp_slowtmr+0x288>)
 8011786:	5cd3      	ldrb	r3, [r2, r3]
 8011788:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801178a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801178c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011790:	7c7a      	ldrb	r2, [r7, #17]
 8011792:	429a      	cmp	r2, r3
 8011794:	d907      	bls.n	80117a6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8011796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011798:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801179c:	3301      	adds	r3, #1
 801179e:	b2da      	uxtb	r2, r3
 80117a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117a2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80117a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117a8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80117ac:	7c7a      	ldrb	r2, [r7, #17]
 80117ae:	429a      	cmp	r2, r3
 80117b0:	f200 80d2 	bhi.w	8011958 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80117b4:	2301      	movs	r3, #1
 80117b6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80117b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d108      	bne.n	80117d4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80117c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80117c4:	f004 fc2a 	bl	801601c <tcp_zero_window_probe>
 80117c8:	4603      	mov	r3, r0
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d014      	beq.n	80117f8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80117ce:	2300      	movs	r3, #0
 80117d0:	623b      	str	r3, [r7, #32]
 80117d2:	e011      	b.n	80117f8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80117d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80117da:	4619      	mov	r1, r3
 80117dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80117de:	f003 faef 	bl	8014dc0 <tcp_split_unsent_seg>
 80117e2:	4603      	mov	r3, r0
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d107      	bne.n	80117f8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80117e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80117ea:	f003 fd6f 	bl	80152cc <tcp_output>
 80117ee:	4603      	mov	r3, r0
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d101      	bne.n	80117f8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80117f4:	2300      	movs	r3, #0
 80117f6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80117f8:	6a3b      	ldr	r3, [r7, #32]
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	f000 80ac 	beq.w	8011958 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8011800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011802:	2200      	movs	r2, #0
 8011804:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8011808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801180a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801180e:	2b06      	cmp	r3, #6
 8011810:	f200 80a2 	bhi.w	8011958 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8011814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011816:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801181a:	3301      	adds	r3, #1
 801181c:	b2da      	uxtb	r2, r3
 801181e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011820:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8011824:	e098      	b.n	8011958 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8011826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011828:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801182c:	2b00      	cmp	r3, #0
 801182e:	db0f      	blt.n	8011850 <tcp_slowtmr+0x1f0>
 8011830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011832:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011836:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801183a:	4293      	cmp	r3, r2
 801183c:	d008      	beq.n	8011850 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 801183e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011840:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011844:	b29b      	uxth	r3, r3
 8011846:	3301      	adds	r3, #1
 8011848:	b29b      	uxth	r3, r3
 801184a:	b21a      	sxth	r2, r3
 801184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801184e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8011850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011852:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8011856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011858:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801185c:	429a      	cmp	r2, r3
 801185e:	db7b      	blt.n	8011958 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8011860:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011862:	f004 f825 	bl	80158b0 <tcp_rexmit_rto_prepare>
 8011866:	4603      	mov	r3, r0
 8011868:	2b00      	cmp	r3, #0
 801186a:	d007      	beq.n	801187c <tcp_slowtmr+0x21c>
 801186c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801186e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011870:	2b00      	cmp	r3, #0
 8011872:	d171      	bne.n	8011958 <tcp_slowtmr+0x2f8>
 8011874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011876:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011878:	2b00      	cmp	r3, #0
 801187a:	d06d      	beq.n	8011958 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 801187c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801187e:	7d1b      	ldrb	r3, [r3, #20]
 8011880:	2b02      	cmp	r3, #2
 8011882:	d03a      	beq.n	80118fa <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8011884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011886:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801188a:	2b0c      	cmp	r3, #12
 801188c:	bf28      	it	cs
 801188e:	230c      	movcs	r3, #12
 8011890:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8011892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011894:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011898:	10db      	asrs	r3, r3, #3
 801189a:	b21b      	sxth	r3, r3
 801189c:	461a      	mov	r2, r3
 801189e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118a0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80118a4:	4413      	add	r3, r2
 80118a6:	7efa      	ldrb	r2, [r7, #27]
 80118a8:	4910      	ldr	r1, [pc, #64]	; (80118ec <tcp_slowtmr+0x28c>)
 80118aa:	5c8a      	ldrb	r2, [r1, r2]
 80118ac:	4093      	lsls	r3, r2
 80118ae:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80118b0:	697b      	ldr	r3, [r7, #20]
 80118b2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80118b6:	4293      	cmp	r3, r2
 80118b8:	dc1a      	bgt.n	80118f0 <tcp_slowtmr+0x290>
 80118ba:	697b      	ldr	r3, [r7, #20]
 80118bc:	b21a      	sxth	r2, r3
 80118be:	e019      	b.n	80118f4 <tcp_slowtmr+0x294>
 80118c0:	2401552c 	.word	0x2401552c
 80118c4:	24015542 	.word	0x24015542
 80118c8:	24015538 	.word	0x24015538
 80118cc:	080191b0 	.word	0x080191b0
 80118d0:	08019534 	.word	0x08019534
 80118d4:	08019234 	.word	0x08019234
 80118d8:	08019560 	.word	0x08019560
 80118dc:	0801958c 	.word	0x0801958c
 80118e0:	080195bc 	.word	0x080195bc
 80118e4:	080195f0 	.word	0x080195f0
 80118e8:	0801adc4 	.word	0x0801adc4
 80118ec:	0801adb4 	.word	0x0801adb4
 80118f0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80118f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80118fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118fc:	2200      	movs	r2, #0
 80118fe:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8011900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011902:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011908:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801190c:	4293      	cmp	r3, r2
 801190e:	bf28      	it	cs
 8011910:	4613      	movcs	r3, r2
 8011912:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8011914:	8a7b      	ldrh	r3, [r7, #18]
 8011916:	085b      	lsrs	r3, r3, #1
 8011918:	b29a      	uxth	r2, r3
 801191a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801191c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8011920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011922:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011928:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801192a:	005b      	lsls	r3, r3, #1
 801192c:	b29b      	uxth	r3, r3
 801192e:	429a      	cmp	r2, r3
 8011930:	d206      	bcs.n	8011940 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8011932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011934:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011936:	005b      	lsls	r3, r3, #1
 8011938:	b29a      	uxth	r2, r3
 801193a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801193c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8011940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011942:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8011944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011946:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801194a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801194c:	2200      	movs	r2, #0
 801194e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8011952:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011954:	f004 f81c 	bl	8015990 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8011958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801195a:	7d1b      	ldrb	r3, [r3, #20]
 801195c:	2b06      	cmp	r3, #6
 801195e:	d111      	bne.n	8011984 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8011960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011962:	8b5b      	ldrh	r3, [r3, #26]
 8011964:	f003 0310 	and.w	r3, r3, #16
 8011968:	2b00      	cmp	r3, #0
 801196a:	d00b      	beq.n	8011984 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801196c:	4b9c      	ldr	r3, [pc, #624]	; (8011be0 <tcp_slowtmr+0x580>)
 801196e:	681a      	ldr	r2, [r3, #0]
 8011970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011972:	6a1b      	ldr	r3, [r3, #32]
 8011974:	1ad3      	subs	r3, r2, r3
 8011976:	2b28      	cmp	r3, #40	; 0x28
 8011978:	d904      	bls.n	8011984 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801197a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801197e:	3301      	adds	r3, #1
 8011980:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011986:	7a5b      	ldrb	r3, [r3, #9]
 8011988:	f003 0308 	and.w	r3, r3, #8
 801198c:	2b00      	cmp	r3, #0
 801198e:	d04a      	beq.n	8011a26 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8011990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011992:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011994:	2b04      	cmp	r3, #4
 8011996:	d003      	beq.n	80119a0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8011998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801199a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801199c:	2b07      	cmp	r3, #7
 801199e:	d142      	bne.n	8011a26 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80119a0:	4b8f      	ldr	r3, [pc, #572]	; (8011be0 <tcp_slowtmr+0x580>)
 80119a2:	681a      	ldr	r2, [r3, #0]
 80119a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119a6:	6a1b      	ldr	r3, [r3, #32]
 80119a8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80119aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119ac:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80119b0:	4b8c      	ldr	r3, [pc, #560]	; (8011be4 <tcp_slowtmr+0x584>)
 80119b2:	440b      	add	r3, r1
 80119b4:	498c      	ldr	r1, [pc, #560]	; (8011be8 <tcp_slowtmr+0x588>)
 80119b6:	fba1 1303 	umull	r1, r3, r1, r3
 80119ba:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80119bc:	429a      	cmp	r2, r3
 80119be:	d90a      	bls.n	80119d6 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80119c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80119c4:	3301      	adds	r3, #1
 80119c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80119ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80119ce:	3301      	adds	r3, #1
 80119d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80119d4:	e027      	b.n	8011a26 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80119d6:	4b82      	ldr	r3, [pc, #520]	; (8011be0 <tcp_slowtmr+0x580>)
 80119d8:	681a      	ldr	r2, [r3, #0]
 80119da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119dc:	6a1b      	ldr	r3, [r3, #32]
 80119de:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80119e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119e2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80119e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119e8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80119ec:	4618      	mov	r0, r3
 80119ee:	4b7f      	ldr	r3, [pc, #508]	; (8011bec <tcp_slowtmr+0x58c>)
 80119f0:	fb00 f303 	mul.w	r3, r0, r3
 80119f4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80119f6:	497c      	ldr	r1, [pc, #496]	; (8011be8 <tcp_slowtmr+0x588>)
 80119f8:	fba1 1303 	umull	r1, r3, r1, r3
 80119fc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80119fe:	429a      	cmp	r2, r3
 8011a00:	d911      	bls.n	8011a26 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8011a02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011a04:	f004 faca 	bl	8015f9c <tcp_keepalive>
 8011a08:	4603      	mov	r3, r0
 8011a0a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8011a0e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d107      	bne.n	8011a26 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8011a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a18:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011a1c:	3301      	adds	r3, #1
 8011a1e:	b2da      	uxtb	r2, r3
 8011a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a22:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8011a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d011      	beq.n	8011a52 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8011a2e:	4b6c      	ldr	r3, [pc, #432]	; (8011be0 <tcp_slowtmr+0x580>)
 8011a30:	681a      	ldr	r2, [r3, #0]
 8011a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a34:	6a1b      	ldr	r3, [r3, #32]
 8011a36:	1ad2      	subs	r2, r2, r3
 8011a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a3a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011a3e:	4619      	mov	r1, r3
 8011a40:	460b      	mov	r3, r1
 8011a42:	005b      	lsls	r3, r3, #1
 8011a44:	440b      	add	r3, r1
 8011a46:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8011a48:	429a      	cmp	r2, r3
 8011a4a:	d302      	bcc.n	8011a52 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8011a4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011a4e:	f000 fddd 	bl	801260c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8011a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a54:	7d1b      	ldrb	r3, [r3, #20]
 8011a56:	2b03      	cmp	r3, #3
 8011a58:	d10b      	bne.n	8011a72 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011a5a:	4b61      	ldr	r3, [pc, #388]	; (8011be0 <tcp_slowtmr+0x580>)
 8011a5c:	681a      	ldr	r2, [r3, #0]
 8011a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a60:	6a1b      	ldr	r3, [r3, #32]
 8011a62:	1ad3      	subs	r3, r2, r3
 8011a64:	2b28      	cmp	r3, #40	; 0x28
 8011a66:	d904      	bls.n	8011a72 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8011a68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011a6c:	3301      	adds	r3, #1
 8011a6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8011a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a74:	7d1b      	ldrb	r3, [r3, #20]
 8011a76:	2b09      	cmp	r3, #9
 8011a78:	d10b      	bne.n	8011a92 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011a7a:	4b59      	ldr	r3, [pc, #356]	; (8011be0 <tcp_slowtmr+0x580>)
 8011a7c:	681a      	ldr	r2, [r3, #0]
 8011a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a80:	6a1b      	ldr	r3, [r3, #32]
 8011a82:	1ad3      	subs	r3, r2, r3
 8011a84:	2bf0      	cmp	r3, #240	; 0xf0
 8011a86:	d904      	bls.n	8011a92 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8011a88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011a8c:	3301      	adds	r3, #1
 8011a8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011a92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d060      	beq.n	8011b5c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8011a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011aa0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8011aa2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011aa4:	f000 fbfe 	bl	80122a4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8011aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d010      	beq.n	8011ad0 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8011aae:	4b50      	ldr	r3, [pc, #320]	; (8011bf0 <tcp_slowtmr+0x590>)
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011ab4:	429a      	cmp	r2, r3
 8011ab6:	d106      	bne.n	8011ac6 <tcp_slowtmr+0x466>
 8011ab8:	4b4e      	ldr	r3, [pc, #312]	; (8011bf4 <tcp_slowtmr+0x594>)
 8011aba:	f240 526d 	movw	r2, #1389	; 0x56d
 8011abe:	494e      	ldr	r1, [pc, #312]	; (8011bf8 <tcp_slowtmr+0x598>)
 8011ac0:	484e      	ldr	r0, [pc, #312]	; (8011bfc <tcp_slowtmr+0x59c>)
 8011ac2:	f005 fa27 	bl	8016f14 <iprintf>
        prev->next = pcb->next;
 8011ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ac8:	68da      	ldr	r2, [r3, #12]
 8011aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011acc:	60da      	str	r2, [r3, #12]
 8011ace:	e00f      	b.n	8011af0 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8011ad0:	4b47      	ldr	r3, [pc, #284]	; (8011bf0 <tcp_slowtmr+0x590>)
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011ad6:	429a      	cmp	r2, r3
 8011ad8:	d006      	beq.n	8011ae8 <tcp_slowtmr+0x488>
 8011ada:	4b46      	ldr	r3, [pc, #280]	; (8011bf4 <tcp_slowtmr+0x594>)
 8011adc:	f240 5271 	movw	r2, #1393	; 0x571
 8011ae0:	4947      	ldr	r1, [pc, #284]	; (8011c00 <tcp_slowtmr+0x5a0>)
 8011ae2:	4846      	ldr	r0, [pc, #280]	; (8011bfc <tcp_slowtmr+0x59c>)
 8011ae4:	f005 fa16 	bl	8016f14 <iprintf>
        tcp_active_pcbs = pcb->next;
 8011ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aea:	68db      	ldr	r3, [r3, #12]
 8011aec:	4a40      	ldr	r2, [pc, #256]	; (8011bf0 <tcp_slowtmr+0x590>)
 8011aee:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8011af0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d013      	beq.n	8011b20 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011afa:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8011afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011afe:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8011b00:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8011b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b04:	3304      	adds	r3, #4
 8011b06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011b08:	8ad2      	ldrh	r2, [r2, #22]
 8011b0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011b0c:	8b09      	ldrh	r1, [r1, #24]
 8011b0e:	9102      	str	r1, [sp, #8]
 8011b10:	9201      	str	r2, [sp, #4]
 8011b12:	9300      	str	r3, [sp, #0]
 8011b14:	462b      	mov	r3, r5
 8011b16:	4622      	mov	r2, r4
 8011b18:	4601      	mov	r1, r0
 8011b1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011b1c:	f004 f98a 	bl	8015e34 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8011b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b22:	691b      	ldr	r3, [r3, #16]
 8011b24:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8011b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b28:	7d1b      	ldrb	r3, [r3, #20]
 8011b2a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8011b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b2e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8011b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b32:	68db      	ldr	r3, [r3, #12]
 8011b34:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8011b36:	6838      	ldr	r0, [r7, #0]
 8011b38:	f7ff f9f4 	bl	8010f24 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8011b3c:	4b31      	ldr	r3, [pc, #196]	; (8011c04 <tcp_slowtmr+0x5a4>)
 8011b3e:	2200      	movs	r2, #0
 8011b40:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d004      	beq.n	8011b52 <tcp_slowtmr+0x4f2>
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	f06f 010c 	mvn.w	r1, #12
 8011b4e:	68b8      	ldr	r0, [r7, #8]
 8011b50:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8011b52:	4b2c      	ldr	r3, [pc, #176]	; (8011c04 <tcp_slowtmr+0x5a4>)
 8011b54:	781b      	ldrb	r3, [r3, #0]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d037      	beq.n	8011bca <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8011b5a:	e592      	b.n	8011682 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8011b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b5e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b62:	68db      	ldr	r3, [r3, #12]
 8011b64:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8011b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b68:	7f1b      	ldrb	r3, [r3, #28]
 8011b6a:	3301      	adds	r3, #1
 8011b6c:	b2da      	uxtb	r2, r3
 8011b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b70:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8011b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b74:	7f1a      	ldrb	r2, [r3, #28]
 8011b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b78:	7f5b      	ldrb	r3, [r3, #29]
 8011b7a:	429a      	cmp	r2, r3
 8011b7c:	d325      	bcc.n	8011bca <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8011b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b80:	2200      	movs	r2, #0
 8011b82:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8011b84:	4b1f      	ldr	r3, [pc, #124]	; (8011c04 <tcp_slowtmr+0x5a4>)
 8011b86:	2200      	movs	r2, #0
 8011b88:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8011b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d00b      	beq.n	8011bac <tcp_slowtmr+0x54c>
 8011b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011b9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011b9c:	6912      	ldr	r2, [r2, #16]
 8011b9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011ba0:	4610      	mov	r0, r2
 8011ba2:	4798      	blx	r3
 8011ba4:	4603      	mov	r3, r0
 8011ba6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8011baa:	e002      	b.n	8011bb2 <tcp_slowtmr+0x552>
 8011bac:	2300      	movs	r3, #0
 8011bae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8011bb2:	4b14      	ldr	r3, [pc, #80]	; (8011c04 <tcp_slowtmr+0x5a4>)
 8011bb4:	781b      	ldrb	r3, [r3, #0]
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d000      	beq.n	8011bbc <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8011bba:	e562      	b.n	8011682 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8011bbc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d102      	bne.n	8011bca <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8011bc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011bc6:	f003 fb81 	bl	80152cc <tcp_output>
  while (pcb != NULL) {
 8011bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	f47f ad5e 	bne.w	801168e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8011bd2:	2300      	movs	r3, #0
 8011bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8011bd6:	4b0c      	ldr	r3, [pc, #48]	; (8011c08 <tcp_slowtmr+0x5a8>)
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8011bdc:	e069      	b.n	8011cb2 <tcp_slowtmr+0x652>
 8011bde:	bf00      	nop
 8011be0:	2401552c 	.word	0x2401552c
 8011be4:	000a4cb8 	.word	0x000a4cb8
 8011be8:	10624dd3 	.word	0x10624dd3
 8011bec:	000124f8 	.word	0x000124f8
 8011bf0:	24015538 	.word	0x24015538
 8011bf4:	080191b0 	.word	0x080191b0
 8011bf8:	08019628 	.word	0x08019628
 8011bfc:	08019234 	.word	0x08019234
 8011c00:	08019654 	.word	0x08019654
 8011c04:	24015540 	.word	0x24015540
 8011c08:	2401553c 	.word	0x2401553c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c0e:	7d1b      	ldrb	r3, [r3, #20]
 8011c10:	2b0a      	cmp	r3, #10
 8011c12:	d006      	beq.n	8011c22 <tcp_slowtmr+0x5c2>
 8011c14:	4b2b      	ldr	r3, [pc, #172]	; (8011cc4 <tcp_slowtmr+0x664>)
 8011c16:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8011c1a:	492b      	ldr	r1, [pc, #172]	; (8011cc8 <tcp_slowtmr+0x668>)
 8011c1c:	482b      	ldr	r0, [pc, #172]	; (8011ccc <tcp_slowtmr+0x66c>)
 8011c1e:	f005 f979 	bl	8016f14 <iprintf>
    pcb_remove = 0;
 8011c22:	2300      	movs	r3, #0
 8011c24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011c28:	4b29      	ldr	r3, [pc, #164]	; (8011cd0 <tcp_slowtmr+0x670>)
 8011c2a:	681a      	ldr	r2, [r3, #0]
 8011c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c2e:	6a1b      	ldr	r3, [r3, #32]
 8011c30:	1ad3      	subs	r3, r2, r3
 8011c32:	2bf0      	cmp	r3, #240	; 0xf0
 8011c34:	d904      	bls.n	8011c40 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8011c36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011c3a:	3301      	adds	r3, #1
 8011c3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011c40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d02f      	beq.n	8011ca8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8011c48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011c4a:	f000 fb2b 	bl	80122a4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8011c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d010      	beq.n	8011c76 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8011c54:	4b1f      	ldr	r3, [pc, #124]	; (8011cd4 <tcp_slowtmr+0x674>)
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011c5a:	429a      	cmp	r2, r3
 8011c5c:	d106      	bne.n	8011c6c <tcp_slowtmr+0x60c>
 8011c5e:	4b19      	ldr	r3, [pc, #100]	; (8011cc4 <tcp_slowtmr+0x664>)
 8011c60:	f240 52af 	movw	r2, #1455	; 0x5af
 8011c64:	491c      	ldr	r1, [pc, #112]	; (8011cd8 <tcp_slowtmr+0x678>)
 8011c66:	4819      	ldr	r0, [pc, #100]	; (8011ccc <tcp_slowtmr+0x66c>)
 8011c68:	f005 f954 	bl	8016f14 <iprintf>
        prev->next = pcb->next;
 8011c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c6e:	68da      	ldr	r2, [r3, #12]
 8011c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c72:	60da      	str	r2, [r3, #12]
 8011c74:	e00f      	b.n	8011c96 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8011c76:	4b17      	ldr	r3, [pc, #92]	; (8011cd4 <tcp_slowtmr+0x674>)
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011c7c:	429a      	cmp	r2, r3
 8011c7e:	d006      	beq.n	8011c8e <tcp_slowtmr+0x62e>
 8011c80:	4b10      	ldr	r3, [pc, #64]	; (8011cc4 <tcp_slowtmr+0x664>)
 8011c82:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8011c86:	4915      	ldr	r1, [pc, #84]	; (8011cdc <tcp_slowtmr+0x67c>)
 8011c88:	4810      	ldr	r0, [pc, #64]	; (8011ccc <tcp_slowtmr+0x66c>)
 8011c8a:	f005 f943 	bl	8016f14 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8011c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c90:	68db      	ldr	r3, [r3, #12]
 8011c92:	4a10      	ldr	r2, [pc, #64]	; (8011cd4 <tcp_slowtmr+0x674>)
 8011c94:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8011c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c98:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8011c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c9c:	68db      	ldr	r3, [r3, #12]
 8011c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8011ca0:	69f8      	ldr	r0, [r7, #28]
 8011ca2:	f7ff f93f 	bl	8010f24 <tcp_free>
 8011ca6:	e004      	b.n	8011cb2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8011ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011caa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cae:	68db      	ldr	r3, [r3, #12]
 8011cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8011cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d1a9      	bne.n	8011c0c <tcp_slowtmr+0x5ac>
    }
  }
}
 8011cb8:	bf00      	nop
 8011cba:	bf00      	nop
 8011cbc:	3730      	adds	r7, #48	; 0x30
 8011cbe:	46bd      	mov	sp, r7
 8011cc0:	bdb0      	pop	{r4, r5, r7, pc}
 8011cc2:	bf00      	nop
 8011cc4:	080191b0 	.word	0x080191b0
 8011cc8:	08019680 	.word	0x08019680
 8011ccc:	08019234 	.word	0x08019234
 8011cd0:	2401552c 	.word	0x2401552c
 8011cd4:	2401553c 	.word	0x2401553c
 8011cd8:	080196b0 	.word	0x080196b0
 8011cdc:	080196d8 	.word	0x080196d8

08011ce0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8011ce0:	b580      	push	{r7, lr}
 8011ce2:	b082      	sub	sp, #8
 8011ce4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8011ce6:	4b2d      	ldr	r3, [pc, #180]	; (8011d9c <tcp_fasttmr+0xbc>)
 8011ce8:	781b      	ldrb	r3, [r3, #0]
 8011cea:	3301      	adds	r3, #1
 8011cec:	b2da      	uxtb	r2, r3
 8011cee:	4b2b      	ldr	r3, [pc, #172]	; (8011d9c <tcp_fasttmr+0xbc>)
 8011cf0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8011cf2:	4b2b      	ldr	r3, [pc, #172]	; (8011da0 <tcp_fasttmr+0xc0>)
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011cf8:	e048      	b.n	8011d8c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	7f9a      	ldrb	r2, [r3, #30]
 8011cfe:	4b27      	ldr	r3, [pc, #156]	; (8011d9c <tcp_fasttmr+0xbc>)
 8011d00:	781b      	ldrb	r3, [r3, #0]
 8011d02:	429a      	cmp	r2, r3
 8011d04:	d03f      	beq.n	8011d86 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8011d06:	4b25      	ldr	r3, [pc, #148]	; (8011d9c <tcp_fasttmr+0xbc>)
 8011d08:	781a      	ldrb	r2, [r3, #0]
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	8b5b      	ldrh	r3, [r3, #26]
 8011d12:	f003 0301 	and.w	r3, r3, #1
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d010      	beq.n	8011d3c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	8b5b      	ldrh	r3, [r3, #26]
 8011d1e:	f043 0302 	orr.w	r3, r3, #2
 8011d22:	b29a      	uxth	r2, r3
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8011d28:	6878      	ldr	r0, [r7, #4]
 8011d2a:	f003 facf 	bl	80152cc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	8b5b      	ldrh	r3, [r3, #26]
 8011d32:	f023 0303 	bic.w	r3, r3, #3
 8011d36:	b29a      	uxth	r2, r3
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	8b5b      	ldrh	r3, [r3, #26]
 8011d40:	f003 0308 	and.w	r3, r3, #8
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d009      	beq.n	8011d5c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	8b5b      	ldrh	r3, [r3, #26]
 8011d4c:	f023 0308 	bic.w	r3, r3, #8
 8011d50:	b29a      	uxth	r2, r3
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8011d56:	6878      	ldr	r0, [r7, #4]
 8011d58:	f7ff fa78 	bl	801124c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	68db      	ldr	r3, [r3, #12]
 8011d60:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d00a      	beq.n	8011d80 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8011d6a:	4b0e      	ldr	r3, [pc, #56]	; (8011da4 <tcp_fasttmr+0xc4>)
 8011d6c:	2200      	movs	r2, #0
 8011d6e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8011d70:	6878      	ldr	r0, [r7, #4]
 8011d72:	f000 f819 	bl	8011da8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8011d76:	4b0b      	ldr	r3, [pc, #44]	; (8011da4 <tcp_fasttmr+0xc4>)
 8011d78:	781b      	ldrb	r3, [r3, #0]
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d000      	beq.n	8011d80 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8011d7e:	e7b8      	b.n	8011cf2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8011d80:	683b      	ldr	r3, [r7, #0]
 8011d82:	607b      	str	r3, [r7, #4]
 8011d84:	e002      	b.n	8011d8c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	68db      	ldr	r3, [r3, #12]
 8011d8a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d1b3      	bne.n	8011cfa <tcp_fasttmr+0x1a>
    }
  }
}
 8011d92:	bf00      	nop
 8011d94:	bf00      	nop
 8011d96:	3708      	adds	r7, #8
 8011d98:	46bd      	mov	sp, r7
 8011d9a:	bd80      	pop	{r7, pc}
 8011d9c:	24015542 	.word	0x24015542
 8011da0:	24015538 	.word	0x24015538
 8011da4:	24015540 	.word	0x24015540

08011da8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8011da8:	b590      	push	{r4, r7, lr}
 8011daa:	b085      	sub	sp, #20
 8011dac:	af00      	add	r7, sp, #0
 8011dae:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d109      	bne.n	8011dca <tcp_process_refused_data+0x22>
 8011db6:	4b37      	ldr	r3, [pc, #220]	; (8011e94 <tcp_process_refused_data+0xec>)
 8011db8:	f240 6209 	movw	r2, #1545	; 0x609
 8011dbc:	4936      	ldr	r1, [pc, #216]	; (8011e98 <tcp_process_refused_data+0xf0>)
 8011dbe:	4837      	ldr	r0, [pc, #220]	; (8011e9c <tcp_process_refused_data+0xf4>)
 8011dc0:	f005 f8a8 	bl	8016f14 <iprintf>
 8011dc4:	f06f 030f 	mvn.w	r3, #15
 8011dc8:	e060      	b.n	8011e8c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011dce:	7b5b      	ldrb	r3, [r3, #13]
 8011dd0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011dd6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	2200      	movs	r2, #0
 8011ddc:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d00b      	beq.n	8011e00 <tcp_process_refused_data+0x58>
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	6918      	ldr	r0, [r3, #16]
 8011df2:	2300      	movs	r3, #0
 8011df4:	68ba      	ldr	r2, [r7, #8]
 8011df6:	6879      	ldr	r1, [r7, #4]
 8011df8:	47a0      	blx	r4
 8011dfa:	4603      	mov	r3, r0
 8011dfc:	73fb      	strb	r3, [r7, #15]
 8011dfe:	e007      	b.n	8011e10 <tcp_process_refused_data+0x68>
 8011e00:	2300      	movs	r3, #0
 8011e02:	68ba      	ldr	r2, [r7, #8]
 8011e04:	6879      	ldr	r1, [r7, #4]
 8011e06:	2000      	movs	r0, #0
 8011e08:	f000 f8a4 	bl	8011f54 <tcp_recv_null>
 8011e0c:	4603      	mov	r3, r0
 8011e0e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8011e10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d12a      	bne.n	8011e6e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8011e18:	7bbb      	ldrb	r3, [r7, #14]
 8011e1a:	f003 0320 	and.w	r3, r3, #32
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d033      	beq.n	8011e8a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011e26:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011e2a:	d005      	beq.n	8011e38 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011e30:	3301      	adds	r3, #1
 8011e32:	b29a      	uxth	r2, r3
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d00b      	beq.n	8011e5a <tcp_process_refused_data+0xb2>
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	6918      	ldr	r0, [r3, #16]
 8011e4c:	2300      	movs	r3, #0
 8011e4e:	2200      	movs	r2, #0
 8011e50:	6879      	ldr	r1, [r7, #4]
 8011e52:	47a0      	blx	r4
 8011e54:	4603      	mov	r3, r0
 8011e56:	73fb      	strb	r3, [r7, #15]
 8011e58:	e001      	b.n	8011e5e <tcp_process_refused_data+0xb6>
 8011e5a:	2300      	movs	r3, #0
 8011e5c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8011e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011e62:	f113 0f0d 	cmn.w	r3, #13
 8011e66:	d110      	bne.n	8011e8a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8011e68:	f06f 030c 	mvn.w	r3, #12
 8011e6c:	e00e      	b.n	8011e8c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8011e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011e72:	f113 0f0d 	cmn.w	r3, #13
 8011e76:	d102      	bne.n	8011e7e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8011e78:	f06f 030c 	mvn.w	r3, #12
 8011e7c:	e006      	b.n	8011e8c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	68ba      	ldr	r2, [r7, #8]
 8011e82:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8011e84:	f06f 0304 	mvn.w	r3, #4
 8011e88:	e000      	b.n	8011e8c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8011e8a:	2300      	movs	r3, #0
}
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	3714      	adds	r7, #20
 8011e90:	46bd      	mov	sp, r7
 8011e92:	bd90      	pop	{r4, r7, pc}
 8011e94:	080191b0 	.word	0x080191b0
 8011e98:	08019700 	.word	0x08019700
 8011e9c:	08019234 	.word	0x08019234

08011ea0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8011ea0:	b580      	push	{r7, lr}
 8011ea2:	b084      	sub	sp, #16
 8011ea4:	af00      	add	r7, sp, #0
 8011ea6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8011ea8:	e007      	b.n	8011eba <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8011eb0:	6878      	ldr	r0, [r7, #4]
 8011eb2:	f000 f80a 	bl	8011eca <tcp_seg_free>
    seg = next;
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d1f4      	bne.n	8011eaa <tcp_segs_free+0xa>
  }
}
 8011ec0:	bf00      	nop
 8011ec2:	bf00      	nop
 8011ec4:	3710      	adds	r7, #16
 8011ec6:	46bd      	mov	sp, r7
 8011ec8:	bd80      	pop	{r7, pc}

08011eca <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8011eca:	b580      	push	{r7, lr}
 8011ecc:	b082      	sub	sp, #8
 8011ece:	af00      	add	r7, sp, #0
 8011ed0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d00c      	beq.n	8011ef2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	685b      	ldr	r3, [r3, #4]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d004      	beq.n	8011eea <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	685b      	ldr	r3, [r3, #4]
 8011ee4:	4618      	mov	r0, r3
 8011ee6:	f7fe fc7f 	bl	80107e8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8011eea:	6879      	ldr	r1, [r7, #4]
 8011eec:	2003      	movs	r0, #3
 8011eee:	f7fd fdd7 	bl	800faa0 <memp_free>
  }
}
 8011ef2:	bf00      	nop
 8011ef4:	3708      	adds	r7, #8
 8011ef6:	46bd      	mov	sp, r7
 8011ef8:	bd80      	pop	{r7, pc}
	...

08011efc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8011efc:	b580      	push	{r7, lr}
 8011efe:	b084      	sub	sp, #16
 8011f00:	af00      	add	r7, sp, #0
 8011f02:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d106      	bne.n	8011f18 <tcp_seg_copy+0x1c>
 8011f0a:	4b0f      	ldr	r3, [pc, #60]	; (8011f48 <tcp_seg_copy+0x4c>)
 8011f0c:	f240 6282 	movw	r2, #1666	; 0x682
 8011f10:	490e      	ldr	r1, [pc, #56]	; (8011f4c <tcp_seg_copy+0x50>)
 8011f12:	480f      	ldr	r0, [pc, #60]	; (8011f50 <tcp_seg_copy+0x54>)
 8011f14:	f004 fffe 	bl	8016f14 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8011f18:	2003      	movs	r0, #3
 8011f1a:	f7fd fd4b 	bl	800f9b4 <memp_malloc>
 8011f1e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d101      	bne.n	8011f2a <tcp_seg_copy+0x2e>
    return NULL;
 8011f26:	2300      	movs	r3, #0
 8011f28:	e00a      	b.n	8011f40 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8011f2a:	2210      	movs	r2, #16
 8011f2c:	6879      	ldr	r1, [r7, #4]
 8011f2e:	68f8      	ldr	r0, [r7, #12]
 8011f30:	f004 ff45 	bl	8016dbe <memcpy>
  pbuf_ref(cseg->p);
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	685b      	ldr	r3, [r3, #4]
 8011f38:	4618      	mov	r0, r3
 8011f3a:	f7fe fcfb 	bl	8010934 <pbuf_ref>
  return cseg;
 8011f3e:	68fb      	ldr	r3, [r7, #12]
}
 8011f40:	4618      	mov	r0, r3
 8011f42:	3710      	adds	r7, #16
 8011f44:	46bd      	mov	sp, r7
 8011f46:	bd80      	pop	{r7, pc}
 8011f48:	080191b0 	.word	0x080191b0
 8011f4c:	08019744 	.word	0x08019744
 8011f50:	08019234 	.word	0x08019234

08011f54 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8011f54:	b580      	push	{r7, lr}
 8011f56:	b084      	sub	sp, #16
 8011f58:	af00      	add	r7, sp, #0
 8011f5a:	60f8      	str	r0, [r7, #12]
 8011f5c:	60b9      	str	r1, [r7, #8]
 8011f5e:	607a      	str	r2, [r7, #4]
 8011f60:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8011f62:	68bb      	ldr	r3, [r7, #8]
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d109      	bne.n	8011f7c <tcp_recv_null+0x28>
 8011f68:	4b12      	ldr	r3, [pc, #72]	; (8011fb4 <tcp_recv_null+0x60>)
 8011f6a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8011f6e:	4912      	ldr	r1, [pc, #72]	; (8011fb8 <tcp_recv_null+0x64>)
 8011f70:	4812      	ldr	r0, [pc, #72]	; (8011fbc <tcp_recv_null+0x68>)
 8011f72:	f004 ffcf 	bl	8016f14 <iprintf>
 8011f76:	f06f 030f 	mvn.w	r3, #15
 8011f7a:	e016      	b.n	8011faa <tcp_recv_null+0x56>

  if (p != NULL) {
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d009      	beq.n	8011f96 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	891b      	ldrh	r3, [r3, #8]
 8011f86:	4619      	mov	r1, r3
 8011f88:	68b8      	ldr	r0, [r7, #8]
 8011f8a:	f7ff fb19 	bl	80115c0 <tcp_recved>
    pbuf_free(p);
 8011f8e:	6878      	ldr	r0, [r7, #4]
 8011f90:	f7fe fc2a 	bl	80107e8 <pbuf_free>
 8011f94:	e008      	b.n	8011fa8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8011f96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d104      	bne.n	8011fa8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8011f9e:	68b8      	ldr	r0, [r7, #8]
 8011fa0:	f7ff f9be 	bl	8011320 <tcp_close>
 8011fa4:	4603      	mov	r3, r0
 8011fa6:	e000      	b.n	8011faa <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8011fa8:	2300      	movs	r3, #0
}
 8011faa:	4618      	mov	r0, r3
 8011fac:	3710      	adds	r7, #16
 8011fae:	46bd      	mov	sp, r7
 8011fb0:	bd80      	pop	{r7, pc}
 8011fb2:	bf00      	nop
 8011fb4:	080191b0 	.word	0x080191b0
 8011fb8:	08019760 	.word	0x08019760
 8011fbc:	08019234 	.word	0x08019234

08011fc0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8011fc0:	b580      	push	{r7, lr}
 8011fc2:	b086      	sub	sp, #24
 8011fc4:	af00      	add	r7, sp, #0
 8011fc6:	4603      	mov	r3, r0
 8011fc8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8011fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	db01      	blt.n	8011fd6 <tcp_kill_prio+0x16>
 8011fd2:	79fb      	ldrb	r3, [r7, #7]
 8011fd4:	e000      	b.n	8011fd8 <tcp_kill_prio+0x18>
 8011fd6:	237f      	movs	r3, #127	; 0x7f
 8011fd8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8011fda:	7afb      	ldrb	r3, [r7, #11]
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d034      	beq.n	801204a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8011fe0:	7afb      	ldrb	r3, [r7, #11]
 8011fe2:	3b01      	subs	r3, #1
 8011fe4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8011fe6:	2300      	movs	r3, #0
 8011fe8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011fea:	2300      	movs	r3, #0
 8011fec:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011fee:	4b19      	ldr	r3, [pc, #100]	; (8012054 <tcp_kill_prio+0x94>)
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	617b      	str	r3, [r7, #20]
 8011ff4:	e01f      	b.n	8012036 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8011ff6:	697b      	ldr	r3, [r7, #20]
 8011ff8:	7d5b      	ldrb	r3, [r3, #21]
 8011ffa:	7afa      	ldrb	r2, [r7, #11]
 8011ffc:	429a      	cmp	r2, r3
 8011ffe:	d80c      	bhi.n	801201a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012000:	697b      	ldr	r3, [r7, #20]
 8012002:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8012004:	7afa      	ldrb	r2, [r7, #11]
 8012006:	429a      	cmp	r2, r3
 8012008:	d112      	bne.n	8012030 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801200a:	4b13      	ldr	r3, [pc, #76]	; (8012058 <tcp_kill_prio+0x98>)
 801200c:	681a      	ldr	r2, [r3, #0]
 801200e:	697b      	ldr	r3, [r7, #20]
 8012010:	6a1b      	ldr	r3, [r3, #32]
 8012012:	1ad3      	subs	r3, r2, r3
 8012014:	68fa      	ldr	r2, [r7, #12]
 8012016:	429a      	cmp	r2, r3
 8012018:	d80a      	bhi.n	8012030 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801201a:	4b0f      	ldr	r3, [pc, #60]	; (8012058 <tcp_kill_prio+0x98>)
 801201c:	681a      	ldr	r2, [r3, #0]
 801201e:	697b      	ldr	r3, [r7, #20]
 8012020:	6a1b      	ldr	r3, [r3, #32]
 8012022:	1ad3      	subs	r3, r2, r3
 8012024:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8012026:	697b      	ldr	r3, [r7, #20]
 8012028:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801202a:	697b      	ldr	r3, [r7, #20]
 801202c:	7d5b      	ldrb	r3, [r3, #21]
 801202e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012030:	697b      	ldr	r3, [r7, #20]
 8012032:	68db      	ldr	r3, [r3, #12]
 8012034:	617b      	str	r3, [r7, #20]
 8012036:	697b      	ldr	r3, [r7, #20]
 8012038:	2b00      	cmp	r3, #0
 801203a:	d1dc      	bne.n	8011ff6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 801203c:	693b      	ldr	r3, [r7, #16]
 801203e:	2b00      	cmp	r3, #0
 8012040:	d004      	beq.n	801204c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012042:	6938      	ldr	r0, [r7, #16]
 8012044:	f7ff fa56 	bl	80114f4 <tcp_abort>
 8012048:	e000      	b.n	801204c <tcp_kill_prio+0x8c>
    return;
 801204a:	bf00      	nop
  }
}
 801204c:	3718      	adds	r7, #24
 801204e:	46bd      	mov	sp, r7
 8012050:	bd80      	pop	{r7, pc}
 8012052:	bf00      	nop
 8012054:	24015538 	.word	0x24015538
 8012058:	2401552c 	.word	0x2401552c

0801205c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 801205c:	b580      	push	{r7, lr}
 801205e:	b086      	sub	sp, #24
 8012060:	af00      	add	r7, sp, #0
 8012062:	4603      	mov	r3, r0
 8012064:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8012066:	79fb      	ldrb	r3, [r7, #7]
 8012068:	2b08      	cmp	r3, #8
 801206a:	d009      	beq.n	8012080 <tcp_kill_state+0x24>
 801206c:	79fb      	ldrb	r3, [r7, #7]
 801206e:	2b09      	cmp	r3, #9
 8012070:	d006      	beq.n	8012080 <tcp_kill_state+0x24>
 8012072:	4b1a      	ldr	r3, [pc, #104]	; (80120dc <tcp_kill_state+0x80>)
 8012074:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8012078:	4919      	ldr	r1, [pc, #100]	; (80120e0 <tcp_kill_state+0x84>)
 801207a:	481a      	ldr	r0, [pc, #104]	; (80120e4 <tcp_kill_state+0x88>)
 801207c:	f004 ff4a 	bl	8016f14 <iprintf>

  inactivity = 0;
 8012080:	2300      	movs	r3, #0
 8012082:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012084:	2300      	movs	r3, #0
 8012086:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012088:	4b17      	ldr	r3, [pc, #92]	; (80120e8 <tcp_kill_state+0x8c>)
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	617b      	str	r3, [r7, #20]
 801208e:	e017      	b.n	80120c0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8012090:	697b      	ldr	r3, [r7, #20]
 8012092:	7d1b      	ldrb	r3, [r3, #20]
 8012094:	79fa      	ldrb	r2, [r7, #7]
 8012096:	429a      	cmp	r2, r3
 8012098:	d10f      	bne.n	80120ba <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801209a:	4b14      	ldr	r3, [pc, #80]	; (80120ec <tcp_kill_state+0x90>)
 801209c:	681a      	ldr	r2, [r3, #0]
 801209e:	697b      	ldr	r3, [r7, #20]
 80120a0:	6a1b      	ldr	r3, [r3, #32]
 80120a2:	1ad3      	subs	r3, r2, r3
 80120a4:	68fa      	ldr	r2, [r7, #12]
 80120a6:	429a      	cmp	r2, r3
 80120a8:	d807      	bhi.n	80120ba <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80120aa:	4b10      	ldr	r3, [pc, #64]	; (80120ec <tcp_kill_state+0x90>)
 80120ac:	681a      	ldr	r2, [r3, #0]
 80120ae:	697b      	ldr	r3, [r7, #20]
 80120b0:	6a1b      	ldr	r3, [r3, #32]
 80120b2:	1ad3      	subs	r3, r2, r3
 80120b4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80120b6:	697b      	ldr	r3, [r7, #20]
 80120b8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80120ba:	697b      	ldr	r3, [r7, #20]
 80120bc:	68db      	ldr	r3, [r3, #12]
 80120be:	617b      	str	r3, [r7, #20]
 80120c0:	697b      	ldr	r3, [r7, #20]
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d1e4      	bne.n	8012090 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80120c6:	693b      	ldr	r3, [r7, #16]
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d003      	beq.n	80120d4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80120cc:	2100      	movs	r1, #0
 80120ce:	6938      	ldr	r0, [r7, #16]
 80120d0:	f7ff f952 	bl	8011378 <tcp_abandon>
  }
}
 80120d4:	bf00      	nop
 80120d6:	3718      	adds	r7, #24
 80120d8:	46bd      	mov	sp, r7
 80120da:	bd80      	pop	{r7, pc}
 80120dc:	080191b0 	.word	0x080191b0
 80120e0:	0801977c 	.word	0x0801977c
 80120e4:	08019234 	.word	0x08019234
 80120e8:	24015538 	.word	0x24015538
 80120ec:	2401552c 	.word	0x2401552c

080120f0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80120f0:	b580      	push	{r7, lr}
 80120f2:	b084      	sub	sp, #16
 80120f4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80120f6:	2300      	movs	r3, #0
 80120f8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80120fa:	2300      	movs	r3, #0
 80120fc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80120fe:	4b12      	ldr	r3, [pc, #72]	; (8012148 <tcp_kill_timewait+0x58>)
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	60fb      	str	r3, [r7, #12]
 8012104:	e012      	b.n	801212c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012106:	4b11      	ldr	r3, [pc, #68]	; (801214c <tcp_kill_timewait+0x5c>)
 8012108:	681a      	ldr	r2, [r3, #0]
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	6a1b      	ldr	r3, [r3, #32]
 801210e:	1ad3      	subs	r3, r2, r3
 8012110:	687a      	ldr	r2, [r7, #4]
 8012112:	429a      	cmp	r2, r3
 8012114:	d807      	bhi.n	8012126 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8012116:	4b0d      	ldr	r3, [pc, #52]	; (801214c <tcp_kill_timewait+0x5c>)
 8012118:	681a      	ldr	r2, [r3, #0]
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	6a1b      	ldr	r3, [r3, #32]
 801211e:	1ad3      	subs	r3, r2, r3
 8012120:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012126:	68fb      	ldr	r3, [r7, #12]
 8012128:	68db      	ldr	r3, [r3, #12]
 801212a:	60fb      	str	r3, [r7, #12]
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	2b00      	cmp	r3, #0
 8012130:	d1e9      	bne.n	8012106 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8012132:	68bb      	ldr	r3, [r7, #8]
 8012134:	2b00      	cmp	r3, #0
 8012136:	d002      	beq.n	801213e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012138:	68b8      	ldr	r0, [r7, #8]
 801213a:	f7ff f9db 	bl	80114f4 <tcp_abort>
  }
}
 801213e:	bf00      	nop
 8012140:	3710      	adds	r7, #16
 8012142:	46bd      	mov	sp, r7
 8012144:	bd80      	pop	{r7, pc}
 8012146:	bf00      	nop
 8012148:	2401553c 	.word	0x2401553c
 801214c:	2401552c 	.word	0x2401552c

08012150 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8012150:	b580      	push	{r7, lr}
 8012152:	b082      	sub	sp, #8
 8012154:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8012156:	4b10      	ldr	r3, [pc, #64]	; (8012198 <tcp_handle_closepend+0x48>)
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801215c:	e014      	b.n	8012188 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	68db      	ldr	r3, [r3, #12]
 8012162:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	8b5b      	ldrh	r3, [r3, #26]
 8012168:	f003 0308 	and.w	r3, r3, #8
 801216c:	2b00      	cmp	r3, #0
 801216e:	d009      	beq.n	8012184 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	8b5b      	ldrh	r3, [r3, #26]
 8012174:	f023 0308 	bic.w	r3, r3, #8
 8012178:	b29a      	uxth	r2, r3
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801217e:	6878      	ldr	r0, [r7, #4]
 8012180:	f7ff f864 	bl	801124c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8012184:	683b      	ldr	r3, [r7, #0]
 8012186:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	2b00      	cmp	r3, #0
 801218c:	d1e7      	bne.n	801215e <tcp_handle_closepend+0xe>
  }
}
 801218e:	bf00      	nop
 8012190:	bf00      	nop
 8012192:	3708      	adds	r7, #8
 8012194:	46bd      	mov	sp, r7
 8012196:	bd80      	pop	{r7, pc}
 8012198:	24015538 	.word	0x24015538

0801219c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801219c:	b580      	push	{r7, lr}
 801219e:	b084      	sub	sp, #16
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	4603      	mov	r3, r0
 80121a4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80121a6:	2001      	movs	r0, #1
 80121a8:	f7fd fc04 	bl	800f9b4 <memp_malloc>
 80121ac:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d126      	bne.n	8012202 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80121b4:	f7ff ffcc 	bl	8012150 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80121b8:	f7ff ff9a 	bl	80120f0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80121bc:	2001      	movs	r0, #1
 80121be:	f7fd fbf9 	bl	800f9b4 <memp_malloc>
 80121c2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d11b      	bne.n	8012202 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80121ca:	2009      	movs	r0, #9
 80121cc:	f7ff ff46 	bl	801205c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80121d0:	2001      	movs	r0, #1
 80121d2:	f7fd fbef 	bl	800f9b4 <memp_malloc>
 80121d6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d111      	bne.n	8012202 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80121de:	2008      	movs	r0, #8
 80121e0:	f7ff ff3c 	bl	801205c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80121e4:	2001      	movs	r0, #1
 80121e6:	f7fd fbe5 	bl	800f9b4 <memp_malloc>
 80121ea:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d107      	bne.n	8012202 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80121f2:	79fb      	ldrb	r3, [r7, #7]
 80121f4:	4618      	mov	r0, r3
 80121f6:	f7ff fee3 	bl	8011fc0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80121fa:	2001      	movs	r0, #1
 80121fc:	f7fd fbda 	bl	800f9b4 <memp_malloc>
 8012200:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	2b00      	cmp	r3, #0
 8012206:	d03f      	beq.n	8012288 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8012208:	229c      	movs	r2, #156	; 0x9c
 801220a:	2100      	movs	r1, #0
 801220c:	68f8      	ldr	r0, [r7, #12]
 801220e:	f004 fde4 	bl	8016dda <memset>
    pcb->prio = prio;
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	79fa      	ldrb	r2, [r7, #7]
 8012216:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801221e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8012228:	855a      	strh	r2, [r3, #42]	; 0x2a
 801222a:	68fb      	ldr	r3, [r7, #12]
 801222c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8012232:	68fb      	ldr	r3, [r7, #12]
 8012234:	22ff      	movs	r2, #255	; 0xff
 8012236:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	f44f 7206 	mov.w	r2, #536	; 0x218
 801223e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	2206      	movs	r2, #6
 8012244:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	2206      	movs	r2, #6
 801224c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012254:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	2201      	movs	r2, #1
 801225a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801225e:	4b0d      	ldr	r3, [pc, #52]	; (8012294 <tcp_alloc+0xf8>)
 8012260:	681a      	ldr	r2, [r3, #0]
 8012262:	68fb      	ldr	r3, [r7, #12]
 8012264:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8012266:	4b0c      	ldr	r3, [pc, #48]	; (8012298 <tcp_alloc+0xfc>)
 8012268:	781a      	ldrb	r2, [r3, #0]
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8012274:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	4a08      	ldr	r2, [pc, #32]	; (801229c <tcp_alloc+0x100>)
 801227c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	4a07      	ldr	r2, [pc, #28]	; (80122a0 <tcp_alloc+0x104>)
 8012284:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8012288:	68fb      	ldr	r3, [r7, #12]
}
 801228a:	4618      	mov	r0, r3
 801228c:	3710      	adds	r7, #16
 801228e:	46bd      	mov	sp, r7
 8012290:	bd80      	pop	{r7, pc}
 8012292:	bf00      	nop
 8012294:	2401552c 	.word	0x2401552c
 8012298:	24015542 	.word	0x24015542
 801229c:	08011f55 	.word	0x08011f55
 80122a0:	006ddd00 	.word	0x006ddd00

080122a4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80122a4:	b580      	push	{r7, lr}
 80122a6:	b082      	sub	sp, #8
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d107      	bne.n	80122c2 <tcp_pcb_purge+0x1e>
 80122b2:	4b21      	ldr	r3, [pc, #132]	; (8012338 <tcp_pcb_purge+0x94>)
 80122b4:	f640 0251 	movw	r2, #2129	; 0x851
 80122b8:	4920      	ldr	r1, [pc, #128]	; (801233c <tcp_pcb_purge+0x98>)
 80122ba:	4821      	ldr	r0, [pc, #132]	; (8012340 <tcp_pcb_purge+0x9c>)
 80122bc:	f004 fe2a 	bl	8016f14 <iprintf>
 80122c0:	e037      	b.n	8012332 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	7d1b      	ldrb	r3, [r3, #20]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d033      	beq.n	8012332 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80122ce:	2b0a      	cmp	r3, #10
 80122d0:	d02f      	beq.n	8012332 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80122d6:	2b01      	cmp	r3, #1
 80122d8:	d02b      	beq.n	8012332 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d007      	beq.n	80122f2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80122e6:	4618      	mov	r0, r3
 80122e8:	f7fe fa7e 	bl	80107e8 <pbuf_free>
      pcb->refused_data = NULL;
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	2200      	movs	r2, #0
 80122f0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d002      	beq.n	8012300 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80122fa:	6878      	ldr	r0, [r7, #4]
 80122fc:	f000 f986 	bl	801260c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012306:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801230c:	4618      	mov	r0, r3
 801230e:	f7ff fdc7 	bl	8011ea0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012316:	4618      	mov	r0, r3
 8012318:	f7ff fdc2 	bl	8011ea0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	2200      	movs	r2, #0
 8012320:	66da      	str	r2, [r3, #108]	; 0x6c
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	2200      	movs	r2, #0
 801232e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8012332:	3708      	adds	r7, #8
 8012334:	46bd      	mov	sp, r7
 8012336:	bd80      	pop	{r7, pc}
 8012338:	080191b0 	.word	0x080191b0
 801233c:	0801983c 	.word	0x0801983c
 8012340:	08019234 	.word	0x08019234

08012344 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8012344:	b580      	push	{r7, lr}
 8012346:	b084      	sub	sp, #16
 8012348:	af00      	add	r7, sp, #0
 801234a:	6078      	str	r0, [r7, #4]
 801234c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801234e:	683b      	ldr	r3, [r7, #0]
 8012350:	2b00      	cmp	r3, #0
 8012352:	d106      	bne.n	8012362 <tcp_pcb_remove+0x1e>
 8012354:	4b3e      	ldr	r3, [pc, #248]	; (8012450 <tcp_pcb_remove+0x10c>)
 8012356:	f640 0283 	movw	r2, #2179	; 0x883
 801235a:	493e      	ldr	r1, [pc, #248]	; (8012454 <tcp_pcb_remove+0x110>)
 801235c:	483e      	ldr	r0, [pc, #248]	; (8012458 <tcp_pcb_remove+0x114>)
 801235e:	f004 fdd9 	bl	8016f14 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	2b00      	cmp	r3, #0
 8012366:	d106      	bne.n	8012376 <tcp_pcb_remove+0x32>
 8012368:	4b39      	ldr	r3, [pc, #228]	; (8012450 <tcp_pcb_remove+0x10c>)
 801236a:	f640 0284 	movw	r2, #2180	; 0x884
 801236e:	493b      	ldr	r1, [pc, #236]	; (801245c <tcp_pcb_remove+0x118>)
 8012370:	4839      	ldr	r0, [pc, #228]	; (8012458 <tcp_pcb_remove+0x114>)
 8012372:	f004 fdcf 	bl	8016f14 <iprintf>

  TCP_RMV(pcblist, pcb);
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	683a      	ldr	r2, [r7, #0]
 801237c:	429a      	cmp	r2, r3
 801237e:	d105      	bne.n	801238c <tcp_pcb_remove+0x48>
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	68da      	ldr	r2, [r3, #12]
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	601a      	str	r2, [r3, #0]
 801238a:	e013      	b.n	80123b4 <tcp_pcb_remove+0x70>
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	60fb      	str	r3, [r7, #12]
 8012392:	e00c      	b.n	80123ae <tcp_pcb_remove+0x6a>
 8012394:	68fb      	ldr	r3, [r7, #12]
 8012396:	68db      	ldr	r3, [r3, #12]
 8012398:	683a      	ldr	r2, [r7, #0]
 801239a:	429a      	cmp	r2, r3
 801239c:	d104      	bne.n	80123a8 <tcp_pcb_remove+0x64>
 801239e:	683b      	ldr	r3, [r7, #0]
 80123a0:	68da      	ldr	r2, [r3, #12]
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	60da      	str	r2, [r3, #12]
 80123a6:	e005      	b.n	80123b4 <tcp_pcb_remove+0x70>
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	68db      	ldr	r3, [r3, #12]
 80123ac:	60fb      	str	r3, [r7, #12]
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d1ef      	bne.n	8012394 <tcp_pcb_remove+0x50>
 80123b4:	683b      	ldr	r3, [r7, #0]
 80123b6:	2200      	movs	r2, #0
 80123b8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80123ba:	6838      	ldr	r0, [r7, #0]
 80123bc:	f7ff ff72 	bl	80122a4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80123c0:	683b      	ldr	r3, [r7, #0]
 80123c2:	7d1b      	ldrb	r3, [r3, #20]
 80123c4:	2b0a      	cmp	r3, #10
 80123c6:	d013      	beq.n	80123f0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80123c8:	683b      	ldr	r3, [r7, #0]
 80123ca:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80123cc:	2b01      	cmp	r3, #1
 80123ce:	d00f      	beq.n	80123f0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80123d0:	683b      	ldr	r3, [r7, #0]
 80123d2:	8b5b      	ldrh	r3, [r3, #26]
 80123d4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d009      	beq.n	80123f0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80123dc:	683b      	ldr	r3, [r7, #0]
 80123de:	8b5b      	ldrh	r3, [r3, #26]
 80123e0:	f043 0302 	orr.w	r3, r3, #2
 80123e4:	b29a      	uxth	r2, r3
 80123e6:	683b      	ldr	r3, [r7, #0]
 80123e8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80123ea:	6838      	ldr	r0, [r7, #0]
 80123ec:	f002 ff6e 	bl	80152cc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80123f0:	683b      	ldr	r3, [r7, #0]
 80123f2:	7d1b      	ldrb	r3, [r3, #20]
 80123f4:	2b01      	cmp	r3, #1
 80123f6:	d020      	beq.n	801243a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80123f8:	683b      	ldr	r3, [r7, #0]
 80123fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d006      	beq.n	801240e <tcp_pcb_remove+0xca>
 8012400:	4b13      	ldr	r3, [pc, #76]	; (8012450 <tcp_pcb_remove+0x10c>)
 8012402:	f640 0293 	movw	r2, #2195	; 0x893
 8012406:	4916      	ldr	r1, [pc, #88]	; (8012460 <tcp_pcb_remove+0x11c>)
 8012408:	4813      	ldr	r0, [pc, #76]	; (8012458 <tcp_pcb_remove+0x114>)
 801240a:	f004 fd83 	bl	8016f14 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801240e:	683b      	ldr	r3, [r7, #0]
 8012410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012412:	2b00      	cmp	r3, #0
 8012414:	d006      	beq.n	8012424 <tcp_pcb_remove+0xe0>
 8012416:	4b0e      	ldr	r3, [pc, #56]	; (8012450 <tcp_pcb_remove+0x10c>)
 8012418:	f640 0294 	movw	r2, #2196	; 0x894
 801241c:	4911      	ldr	r1, [pc, #68]	; (8012464 <tcp_pcb_remove+0x120>)
 801241e:	480e      	ldr	r0, [pc, #56]	; (8012458 <tcp_pcb_remove+0x114>)
 8012420:	f004 fd78 	bl	8016f14 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8012424:	683b      	ldr	r3, [r7, #0]
 8012426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012428:	2b00      	cmp	r3, #0
 801242a:	d006      	beq.n	801243a <tcp_pcb_remove+0xf6>
 801242c:	4b08      	ldr	r3, [pc, #32]	; (8012450 <tcp_pcb_remove+0x10c>)
 801242e:	f640 0296 	movw	r2, #2198	; 0x896
 8012432:	490d      	ldr	r1, [pc, #52]	; (8012468 <tcp_pcb_remove+0x124>)
 8012434:	4808      	ldr	r0, [pc, #32]	; (8012458 <tcp_pcb_remove+0x114>)
 8012436:	f004 fd6d 	bl	8016f14 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801243a:	683b      	ldr	r3, [r7, #0]
 801243c:	2200      	movs	r2, #0
 801243e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8012440:	683b      	ldr	r3, [r7, #0]
 8012442:	2200      	movs	r2, #0
 8012444:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8012446:	bf00      	nop
 8012448:	3710      	adds	r7, #16
 801244a:	46bd      	mov	sp, r7
 801244c:	bd80      	pop	{r7, pc}
 801244e:	bf00      	nop
 8012450:	080191b0 	.word	0x080191b0
 8012454:	08019858 	.word	0x08019858
 8012458:	08019234 	.word	0x08019234
 801245c:	08019874 	.word	0x08019874
 8012460:	08019894 	.word	0x08019894
 8012464:	080198ac 	.word	0x080198ac
 8012468:	080198c8 	.word	0x080198c8

0801246c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801246c:	b580      	push	{r7, lr}
 801246e:	b082      	sub	sp, #8
 8012470:	af00      	add	r7, sp, #0
 8012472:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	2b00      	cmp	r3, #0
 8012478:	d106      	bne.n	8012488 <tcp_next_iss+0x1c>
 801247a:	4b0a      	ldr	r3, [pc, #40]	; (80124a4 <tcp_next_iss+0x38>)
 801247c:	f640 02af 	movw	r2, #2223	; 0x8af
 8012480:	4909      	ldr	r1, [pc, #36]	; (80124a8 <tcp_next_iss+0x3c>)
 8012482:	480a      	ldr	r0, [pc, #40]	; (80124ac <tcp_next_iss+0x40>)
 8012484:	f004 fd46 	bl	8016f14 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8012488:	4b09      	ldr	r3, [pc, #36]	; (80124b0 <tcp_next_iss+0x44>)
 801248a:	681a      	ldr	r2, [r3, #0]
 801248c:	4b09      	ldr	r3, [pc, #36]	; (80124b4 <tcp_next_iss+0x48>)
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	4413      	add	r3, r2
 8012492:	4a07      	ldr	r2, [pc, #28]	; (80124b0 <tcp_next_iss+0x44>)
 8012494:	6013      	str	r3, [r2, #0]
  return iss;
 8012496:	4b06      	ldr	r3, [pc, #24]	; (80124b0 <tcp_next_iss+0x44>)
 8012498:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801249a:	4618      	mov	r0, r3
 801249c:	3708      	adds	r7, #8
 801249e:	46bd      	mov	sp, r7
 80124a0:	bd80      	pop	{r7, pc}
 80124a2:	bf00      	nop
 80124a4:	080191b0 	.word	0x080191b0
 80124a8:	080198e0 	.word	0x080198e0
 80124ac:	08019234 	.word	0x08019234
 80124b0:	2400002c 	.word	0x2400002c
 80124b4:	2401552c 	.word	0x2401552c

080124b8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80124b8:	b580      	push	{r7, lr}
 80124ba:	b086      	sub	sp, #24
 80124bc:	af00      	add	r7, sp, #0
 80124be:	4603      	mov	r3, r0
 80124c0:	60b9      	str	r1, [r7, #8]
 80124c2:	607a      	str	r2, [r7, #4]
 80124c4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d106      	bne.n	80124da <tcp_eff_send_mss_netif+0x22>
 80124cc:	4b14      	ldr	r3, [pc, #80]	; (8012520 <tcp_eff_send_mss_netif+0x68>)
 80124ce:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80124d2:	4914      	ldr	r1, [pc, #80]	; (8012524 <tcp_eff_send_mss_netif+0x6c>)
 80124d4:	4814      	ldr	r0, [pc, #80]	; (8012528 <tcp_eff_send_mss_netif+0x70>)
 80124d6:	f004 fd1d 	bl	8016f14 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80124da:	68bb      	ldr	r3, [r7, #8]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d101      	bne.n	80124e4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80124e0:	89fb      	ldrh	r3, [r7, #14]
 80124e2:	e019      	b.n	8012518 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80124e4:	68bb      	ldr	r3, [r7, #8]
 80124e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80124e8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80124ea:	8afb      	ldrh	r3, [r7, #22]
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d012      	beq.n	8012516 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80124f0:	2328      	movs	r3, #40	; 0x28
 80124f2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80124f4:	8afa      	ldrh	r2, [r7, #22]
 80124f6:	8abb      	ldrh	r3, [r7, #20]
 80124f8:	429a      	cmp	r2, r3
 80124fa:	d904      	bls.n	8012506 <tcp_eff_send_mss_netif+0x4e>
 80124fc:	8afa      	ldrh	r2, [r7, #22]
 80124fe:	8abb      	ldrh	r3, [r7, #20]
 8012500:	1ad3      	subs	r3, r2, r3
 8012502:	b29b      	uxth	r3, r3
 8012504:	e000      	b.n	8012508 <tcp_eff_send_mss_netif+0x50>
 8012506:	2300      	movs	r3, #0
 8012508:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801250a:	8a7a      	ldrh	r2, [r7, #18]
 801250c:	89fb      	ldrh	r3, [r7, #14]
 801250e:	4293      	cmp	r3, r2
 8012510:	bf28      	it	cs
 8012512:	4613      	movcs	r3, r2
 8012514:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8012516:	89fb      	ldrh	r3, [r7, #14]
}
 8012518:	4618      	mov	r0, r3
 801251a:	3718      	adds	r7, #24
 801251c:	46bd      	mov	sp, r7
 801251e:	bd80      	pop	{r7, pc}
 8012520:	080191b0 	.word	0x080191b0
 8012524:	080198fc 	.word	0x080198fc
 8012528:	08019234 	.word	0x08019234

0801252c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 801252c:	b580      	push	{r7, lr}
 801252e:	b084      	sub	sp, #16
 8012530:	af00      	add	r7, sp, #0
 8012532:	6078      	str	r0, [r7, #4]
 8012534:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8012536:	683b      	ldr	r3, [r7, #0]
 8012538:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	2b00      	cmp	r3, #0
 801253e:	d119      	bne.n	8012574 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8012540:	4b10      	ldr	r3, [pc, #64]	; (8012584 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8012542:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8012546:	4910      	ldr	r1, [pc, #64]	; (8012588 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8012548:	4810      	ldr	r0, [pc, #64]	; (801258c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801254a:	f004 fce3 	bl	8016f14 <iprintf>

  while (pcb != NULL) {
 801254e:	e011      	b.n	8012574 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	681a      	ldr	r2, [r3, #0]
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	429a      	cmp	r2, r3
 801255a:	d108      	bne.n	801256e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	68db      	ldr	r3, [r3, #12]
 8012560:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8012562:	68f8      	ldr	r0, [r7, #12]
 8012564:	f7fe ffc6 	bl	80114f4 <tcp_abort>
      pcb = next;
 8012568:	68bb      	ldr	r3, [r7, #8]
 801256a:	60fb      	str	r3, [r7, #12]
 801256c:	e002      	b.n	8012574 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801256e:	68fb      	ldr	r3, [r7, #12]
 8012570:	68db      	ldr	r3, [r3, #12]
 8012572:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	2b00      	cmp	r3, #0
 8012578:	d1ea      	bne.n	8012550 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801257a:	bf00      	nop
 801257c:	bf00      	nop
 801257e:	3710      	adds	r7, #16
 8012580:	46bd      	mov	sp, r7
 8012582:	bd80      	pop	{r7, pc}
 8012584:	080191b0 	.word	0x080191b0
 8012588:	08019924 	.word	0x08019924
 801258c:	08019234 	.word	0x08019234

08012590 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012590:	b580      	push	{r7, lr}
 8012592:	b084      	sub	sp, #16
 8012594:	af00      	add	r7, sp, #0
 8012596:	6078      	str	r0, [r7, #4]
 8012598:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	2b00      	cmp	r3, #0
 801259e:	d02a      	beq.n	80125f6 <tcp_netif_ip_addr_changed+0x66>
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d026      	beq.n	80125f6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80125a8:	4b15      	ldr	r3, [pc, #84]	; (8012600 <tcp_netif_ip_addr_changed+0x70>)
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	4619      	mov	r1, r3
 80125ae:	6878      	ldr	r0, [r7, #4]
 80125b0:	f7ff ffbc 	bl	801252c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80125b4:	4b13      	ldr	r3, [pc, #76]	; (8012604 <tcp_netif_ip_addr_changed+0x74>)
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	4619      	mov	r1, r3
 80125ba:	6878      	ldr	r0, [r7, #4]
 80125bc:	f7ff ffb6 	bl	801252c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80125c0:	683b      	ldr	r3, [r7, #0]
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d017      	beq.n	80125f6 <tcp_netif_ip_addr_changed+0x66>
 80125c6:	683b      	ldr	r3, [r7, #0]
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d013      	beq.n	80125f6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80125ce:	4b0e      	ldr	r3, [pc, #56]	; (8012608 <tcp_netif_ip_addr_changed+0x78>)
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	60fb      	str	r3, [r7, #12]
 80125d4:	e00c      	b.n	80125f0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80125d6:	68fb      	ldr	r3, [r7, #12]
 80125d8:	681a      	ldr	r2, [r3, #0]
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	429a      	cmp	r2, r3
 80125e0:	d103      	bne.n	80125ea <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80125e2:	683b      	ldr	r3, [r7, #0]
 80125e4:	681a      	ldr	r2, [r3, #0]
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	68db      	ldr	r3, [r3, #12]
 80125ee:	60fb      	str	r3, [r7, #12]
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d1ef      	bne.n	80125d6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80125f6:	bf00      	nop
 80125f8:	3710      	adds	r7, #16
 80125fa:	46bd      	mov	sp, r7
 80125fc:	bd80      	pop	{r7, pc}
 80125fe:	bf00      	nop
 8012600:	24015538 	.word	0x24015538
 8012604:	24015530 	.word	0x24015530
 8012608:	24015534 	.word	0x24015534

0801260c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801260c:	b580      	push	{r7, lr}
 801260e:	b082      	sub	sp, #8
 8012610:	af00      	add	r7, sp, #0
 8012612:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012618:	2b00      	cmp	r3, #0
 801261a:	d007      	beq.n	801262c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012620:	4618      	mov	r0, r3
 8012622:	f7ff fc3d 	bl	8011ea0 <tcp_segs_free>
    pcb->ooseq = NULL;
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	2200      	movs	r2, #0
 801262a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801262c:	bf00      	nop
 801262e:	3708      	adds	r7, #8
 8012630:	46bd      	mov	sp, r7
 8012632:	bd80      	pop	{r7, pc}

08012634 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8012634:	b590      	push	{r4, r7, lr}
 8012636:	b08d      	sub	sp, #52	; 0x34
 8012638:	af04      	add	r7, sp, #16
 801263a:	6078      	str	r0, [r7, #4]
 801263c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	2b00      	cmp	r3, #0
 8012642:	d105      	bne.n	8012650 <tcp_input+0x1c>
 8012644:	4b9b      	ldr	r3, [pc, #620]	; (80128b4 <tcp_input+0x280>)
 8012646:	2283      	movs	r2, #131	; 0x83
 8012648:	499b      	ldr	r1, [pc, #620]	; (80128b8 <tcp_input+0x284>)
 801264a:	489c      	ldr	r0, [pc, #624]	; (80128bc <tcp_input+0x288>)
 801264c:	f004 fc62 	bl	8016f14 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	685b      	ldr	r3, [r3, #4]
 8012654:	4a9a      	ldr	r2, [pc, #616]	; (80128c0 <tcp_input+0x28c>)
 8012656:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	895b      	ldrh	r3, [r3, #10]
 801265c:	2b13      	cmp	r3, #19
 801265e:	f240 83d1 	bls.w	8012e04 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012662:	4b98      	ldr	r3, [pc, #608]	; (80128c4 <tcp_input+0x290>)
 8012664:	695b      	ldr	r3, [r3, #20]
 8012666:	4a97      	ldr	r2, [pc, #604]	; (80128c4 <tcp_input+0x290>)
 8012668:	6812      	ldr	r2, [r2, #0]
 801266a:	4611      	mov	r1, r2
 801266c:	4618      	mov	r0, r3
 801266e:	f7fb fe93 	bl	800e398 <ip4_addr_isbroadcast_u32>
 8012672:	4603      	mov	r3, r0
 8012674:	2b00      	cmp	r3, #0
 8012676:	f040 83c7 	bne.w	8012e08 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801267a:	4b92      	ldr	r3, [pc, #584]	; (80128c4 <tcp_input+0x290>)
 801267c:	695b      	ldr	r3, [r3, #20]
 801267e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012682:	2be0      	cmp	r3, #224	; 0xe0
 8012684:	f000 83c0 	beq.w	8012e08 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8012688:	4b8d      	ldr	r3, [pc, #564]	; (80128c0 <tcp_input+0x28c>)
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	899b      	ldrh	r3, [r3, #12]
 801268e:	b29b      	uxth	r3, r3
 8012690:	4618      	mov	r0, r3
 8012692:	f7fa f913 	bl	800c8bc <lwip_htons>
 8012696:	4603      	mov	r3, r0
 8012698:	0b1b      	lsrs	r3, r3, #12
 801269a:	b29b      	uxth	r3, r3
 801269c:	b2db      	uxtb	r3, r3
 801269e:	009b      	lsls	r3, r3, #2
 80126a0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80126a2:	7cbb      	ldrb	r3, [r7, #18]
 80126a4:	2b13      	cmp	r3, #19
 80126a6:	f240 83b1 	bls.w	8012e0c <tcp_input+0x7d8>
 80126aa:	7cbb      	ldrb	r3, [r7, #18]
 80126ac:	b29a      	uxth	r2, r3
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	891b      	ldrh	r3, [r3, #8]
 80126b2:	429a      	cmp	r2, r3
 80126b4:	f200 83aa 	bhi.w	8012e0c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80126b8:	7cbb      	ldrb	r3, [r7, #18]
 80126ba:	b29b      	uxth	r3, r3
 80126bc:	3b14      	subs	r3, #20
 80126be:	b29a      	uxth	r2, r3
 80126c0:	4b81      	ldr	r3, [pc, #516]	; (80128c8 <tcp_input+0x294>)
 80126c2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80126c4:	4b81      	ldr	r3, [pc, #516]	; (80128cc <tcp_input+0x298>)
 80126c6:	2200      	movs	r2, #0
 80126c8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	895a      	ldrh	r2, [r3, #10]
 80126ce:	7cbb      	ldrb	r3, [r7, #18]
 80126d0:	b29b      	uxth	r3, r3
 80126d2:	429a      	cmp	r2, r3
 80126d4:	d309      	bcc.n	80126ea <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80126d6:	4b7c      	ldr	r3, [pc, #496]	; (80128c8 <tcp_input+0x294>)
 80126d8:	881a      	ldrh	r2, [r3, #0]
 80126da:	4b7d      	ldr	r3, [pc, #500]	; (80128d0 <tcp_input+0x29c>)
 80126dc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80126de:	7cbb      	ldrb	r3, [r7, #18]
 80126e0:	4619      	mov	r1, r3
 80126e2:	6878      	ldr	r0, [r7, #4]
 80126e4:	f7fd fffa 	bl	80106dc <pbuf_remove_header>
 80126e8:	e04e      	b.n	8012788 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d105      	bne.n	80126fe <tcp_input+0xca>
 80126f2:	4b70      	ldr	r3, [pc, #448]	; (80128b4 <tcp_input+0x280>)
 80126f4:	22c2      	movs	r2, #194	; 0xc2
 80126f6:	4977      	ldr	r1, [pc, #476]	; (80128d4 <tcp_input+0x2a0>)
 80126f8:	4870      	ldr	r0, [pc, #448]	; (80128bc <tcp_input+0x288>)
 80126fa:	f004 fc0b 	bl	8016f14 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80126fe:	2114      	movs	r1, #20
 8012700:	6878      	ldr	r0, [r7, #4]
 8012702:	f7fd ffeb 	bl	80106dc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	895a      	ldrh	r2, [r3, #10]
 801270a:	4b71      	ldr	r3, [pc, #452]	; (80128d0 <tcp_input+0x29c>)
 801270c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801270e:	4b6e      	ldr	r3, [pc, #440]	; (80128c8 <tcp_input+0x294>)
 8012710:	881a      	ldrh	r2, [r3, #0]
 8012712:	4b6f      	ldr	r3, [pc, #444]	; (80128d0 <tcp_input+0x29c>)
 8012714:	881b      	ldrh	r3, [r3, #0]
 8012716:	1ad3      	subs	r3, r2, r3
 8012718:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801271a:	4b6d      	ldr	r3, [pc, #436]	; (80128d0 <tcp_input+0x29c>)
 801271c:	881b      	ldrh	r3, [r3, #0]
 801271e:	4619      	mov	r1, r3
 8012720:	6878      	ldr	r0, [r7, #4]
 8012722:	f7fd ffdb 	bl	80106dc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	895b      	ldrh	r3, [r3, #10]
 801272c:	8a3a      	ldrh	r2, [r7, #16]
 801272e:	429a      	cmp	r2, r3
 8012730:	f200 836e 	bhi.w	8012e10 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	681b      	ldr	r3, [r3, #0]
 8012738:	685b      	ldr	r3, [r3, #4]
 801273a:	4a64      	ldr	r2, [pc, #400]	; (80128cc <tcp_input+0x298>)
 801273c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	8a3a      	ldrh	r2, [r7, #16]
 8012744:	4611      	mov	r1, r2
 8012746:	4618      	mov	r0, r3
 8012748:	f7fd ffc8 	bl	80106dc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	891a      	ldrh	r2, [r3, #8]
 8012750:	8a3b      	ldrh	r3, [r7, #16]
 8012752:	1ad3      	subs	r3, r2, r3
 8012754:	b29a      	uxth	r2, r3
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	895b      	ldrh	r3, [r3, #10]
 801275e:	2b00      	cmp	r3, #0
 8012760:	d005      	beq.n	801276e <tcp_input+0x13a>
 8012762:	4b54      	ldr	r3, [pc, #336]	; (80128b4 <tcp_input+0x280>)
 8012764:	22df      	movs	r2, #223	; 0xdf
 8012766:	495c      	ldr	r1, [pc, #368]	; (80128d8 <tcp_input+0x2a4>)
 8012768:	4854      	ldr	r0, [pc, #336]	; (80128bc <tcp_input+0x288>)
 801276a:	f004 fbd3 	bl	8016f14 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	891a      	ldrh	r2, [r3, #8]
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	681b      	ldr	r3, [r3, #0]
 8012776:	891b      	ldrh	r3, [r3, #8]
 8012778:	429a      	cmp	r2, r3
 801277a:	d005      	beq.n	8012788 <tcp_input+0x154>
 801277c:	4b4d      	ldr	r3, [pc, #308]	; (80128b4 <tcp_input+0x280>)
 801277e:	22e0      	movs	r2, #224	; 0xe0
 8012780:	4956      	ldr	r1, [pc, #344]	; (80128dc <tcp_input+0x2a8>)
 8012782:	484e      	ldr	r0, [pc, #312]	; (80128bc <tcp_input+0x288>)
 8012784:	f004 fbc6 	bl	8016f14 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8012788:	4b4d      	ldr	r3, [pc, #308]	; (80128c0 <tcp_input+0x28c>)
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	881b      	ldrh	r3, [r3, #0]
 801278e:	b29b      	uxth	r3, r3
 8012790:	4a4b      	ldr	r2, [pc, #300]	; (80128c0 <tcp_input+0x28c>)
 8012792:	6814      	ldr	r4, [r2, #0]
 8012794:	4618      	mov	r0, r3
 8012796:	f7fa f891 	bl	800c8bc <lwip_htons>
 801279a:	4603      	mov	r3, r0
 801279c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801279e:	4b48      	ldr	r3, [pc, #288]	; (80128c0 <tcp_input+0x28c>)
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	885b      	ldrh	r3, [r3, #2]
 80127a4:	b29b      	uxth	r3, r3
 80127a6:	4a46      	ldr	r2, [pc, #280]	; (80128c0 <tcp_input+0x28c>)
 80127a8:	6814      	ldr	r4, [r2, #0]
 80127aa:	4618      	mov	r0, r3
 80127ac:	f7fa f886 	bl	800c8bc <lwip_htons>
 80127b0:	4603      	mov	r3, r0
 80127b2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80127b4:	4b42      	ldr	r3, [pc, #264]	; (80128c0 <tcp_input+0x28c>)
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	685b      	ldr	r3, [r3, #4]
 80127ba:	4a41      	ldr	r2, [pc, #260]	; (80128c0 <tcp_input+0x28c>)
 80127bc:	6814      	ldr	r4, [r2, #0]
 80127be:	4618      	mov	r0, r3
 80127c0:	f7fa f891 	bl	800c8e6 <lwip_htonl>
 80127c4:	4603      	mov	r3, r0
 80127c6:	6063      	str	r3, [r4, #4]
 80127c8:	6863      	ldr	r3, [r4, #4]
 80127ca:	4a45      	ldr	r2, [pc, #276]	; (80128e0 <tcp_input+0x2ac>)
 80127cc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80127ce:	4b3c      	ldr	r3, [pc, #240]	; (80128c0 <tcp_input+0x28c>)
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	689b      	ldr	r3, [r3, #8]
 80127d4:	4a3a      	ldr	r2, [pc, #232]	; (80128c0 <tcp_input+0x28c>)
 80127d6:	6814      	ldr	r4, [r2, #0]
 80127d8:	4618      	mov	r0, r3
 80127da:	f7fa f884 	bl	800c8e6 <lwip_htonl>
 80127de:	4603      	mov	r3, r0
 80127e0:	60a3      	str	r3, [r4, #8]
 80127e2:	68a3      	ldr	r3, [r4, #8]
 80127e4:	4a3f      	ldr	r2, [pc, #252]	; (80128e4 <tcp_input+0x2b0>)
 80127e6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80127e8:	4b35      	ldr	r3, [pc, #212]	; (80128c0 <tcp_input+0x28c>)
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	89db      	ldrh	r3, [r3, #14]
 80127ee:	b29b      	uxth	r3, r3
 80127f0:	4a33      	ldr	r2, [pc, #204]	; (80128c0 <tcp_input+0x28c>)
 80127f2:	6814      	ldr	r4, [r2, #0]
 80127f4:	4618      	mov	r0, r3
 80127f6:	f7fa f861 	bl	800c8bc <lwip_htons>
 80127fa:	4603      	mov	r3, r0
 80127fc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80127fe:	4b30      	ldr	r3, [pc, #192]	; (80128c0 <tcp_input+0x28c>)
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	899b      	ldrh	r3, [r3, #12]
 8012804:	b29b      	uxth	r3, r3
 8012806:	4618      	mov	r0, r3
 8012808:	f7fa f858 	bl	800c8bc <lwip_htons>
 801280c:	4603      	mov	r3, r0
 801280e:	b2db      	uxtb	r3, r3
 8012810:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012814:	b2da      	uxtb	r2, r3
 8012816:	4b34      	ldr	r3, [pc, #208]	; (80128e8 <tcp_input+0x2b4>)
 8012818:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	891a      	ldrh	r2, [r3, #8]
 801281e:	4b33      	ldr	r3, [pc, #204]	; (80128ec <tcp_input+0x2b8>)
 8012820:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8012822:	4b31      	ldr	r3, [pc, #196]	; (80128e8 <tcp_input+0x2b4>)
 8012824:	781b      	ldrb	r3, [r3, #0]
 8012826:	f003 0303 	and.w	r3, r3, #3
 801282a:	2b00      	cmp	r3, #0
 801282c:	d00c      	beq.n	8012848 <tcp_input+0x214>
    tcplen++;
 801282e:	4b2f      	ldr	r3, [pc, #188]	; (80128ec <tcp_input+0x2b8>)
 8012830:	881b      	ldrh	r3, [r3, #0]
 8012832:	3301      	adds	r3, #1
 8012834:	b29a      	uxth	r2, r3
 8012836:	4b2d      	ldr	r3, [pc, #180]	; (80128ec <tcp_input+0x2b8>)
 8012838:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	891a      	ldrh	r2, [r3, #8]
 801283e:	4b2b      	ldr	r3, [pc, #172]	; (80128ec <tcp_input+0x2b8>)
 8012840:	881b      	ldrh	r3, [r3, #0]
 8012842:	429a      	cmp	r2, r3
 8012844:	f200 82e6 	bhi.w	8012e14 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8012848:	2300      	movs	r3, #0
 801284a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801284c:	4b28      	ldr	r3, [pc, #160]	; (80128f0 <tcp_input+0x2bc>)
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	61fb      	str	r3, [r7, #28]
 8012852:	e09d      	b.n	8012990 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8012854:	69fb      	ldr	r3, [r7, #28]
 8012856:	7d1b      	ldrb	r3, [r3, #20]
 8012858:	2b00      	cmp	r3, #0
 801285a:	d105      	bne.n	8012868 <tcp_input+0x234>
 801285c:	4b15      	ldr	r3, [pc, #84]	; (80128b4 <tcp_input+0x280>)
 801285e:	22fb      	movs	r2, #251	; 0xfb
 8012860:	4924      	ldr	r1, [pc, #144]	; (80128f4 <tcp_input+0x2c0>)
 8012862:	4816      	ldr	r0, [pc, #88]	; (80128bc <tcp_input+0x288>)
 8012864:	f004 fb56 	bl	8016f14 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8012868:	69fb      	ldr	r3, [r7, #28]
 801286a:	7d1b      	ldrb	r3, [r3, #20]
 801286c:	2b0a      	cmp	r3, #10
 801286e:	d105      	bne.n	801287c <tcp_input+0x248>
 8012870:	4b10      	ldr	r3, [pc, #64]	; (80128b4 <tcp_input+0x280>)
 8012872:	22fc      	movs	r2, #252	; 0xfc
 8012874:	4920      	ldr	r1, [pc, #128]	; (80128f8 <tcp_input+0x2c4>)
 8012876:	4811      	ldr	r0, [pc, #68]	; (80128bc <tcp_input+0x288>)
 8012878:	f004 fb4c 	bl	8016f14 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801287c:	69fb      	ldr	r3, [r7, #28]
 801287e:	7d1b      	ldrb	r3, [r3, #20]
 8012880:	2b01      	cmp	r3, #1
 8012882:	d105      	bne.n	8012890 <tcp_input+0x25c>
 8012884:	4b0b      	ldr	r3, [pc, #44]	; (80128b4 <tcp_input+0x280>)
 8012886:	22fd      	movs	r2, #253	; 0xfd
 8012888:	491c      	ldr	r1, [pc, #112]	; (80128fc <tcp_input+0x2c8>)
 801288a:	480c      	ldr	r0, [pc, #48]	; (80128bc <tcp_input+0x288>)
 801288c:	f004 fb42 	bl	8016f14 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012890:	69fb      	ldr	r3, [r7, #28]
 8012892:	7a1b      	ldrb	r3, [r3, #8]
 8012894:	2b00      	cmp	r3, #0
 8012896:	d033      	beq.n	8012900 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012898:	69fb      	ldr	r3, [r7, #28]
 801289a:	7a1a      	ldrb	r2, [r3, #8]
 801289c:	4b09      	ldr	r3, [pc, #36]	; (80128c4 <tcp_input+0x290>)
 801289e:	685b      	ldr	r3, [r3, #4]
 80128a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80128a4:	3301      	adds	r3, #1
 80128a6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80128a8:	429a      	cmp	r2, r3
 80128aa:	d029      	beq.n	8012900 <tcp_input+0x2cc>
      prev = pcb;
 80128ac:	69fb      	ldr	r3, [r7, #28]
 80128ae:	61bb      	str	r3, [r7, #24]
      continue;
 80128b0:	e06b      	b.n	801298a <tcp_input+0x356>
 80128b2:	bf00      	nop
 80128b4:	08019958 	.word	0x08019958
 80128b8:	080199cc 	.word	0x080199cc
 80128bc:	080199e4 	.word	0x080199e4
 80128c0:	24015554 	.word	0x24015554
 80128c4:	2401241c 	.word	0x2401241c
 80128c8:	24015558 	.word	0x24015558
 80128cc:	2401555c 	.word	0x2401555c
 80128d0:	2401555a 	.word	0x2401555a
 80128d4:	08019a0c 	.word	0x08019a0c
 80128d8:	08019a1c 	.word	0x08019a1c
 80128dc:	08019a28 	.word	0x08019a28
 80128e0:	24015564 	.word	0x24015564
 80128e4:	24015568 	.word	0x24015568
 80128e8:	24015570 	.word	0x24015570
 80128ec:	2401556e 	.word	0x2401556e
 80128f0:	24015538 	.word	0x24015538
 80128f4:	08019a48 	.word	0x08019a48
 80128f8:	08019a70 	.word	0x08019a70
 80128fc:	08019a9c 	.word	0x08019a9c
    }

    if (pcb->remote_port == tcphdr->src &&
 8012900:	69fb      	ldr	r3, [r7, #28]
 8012902:	8b1a      	ldrh	r2, [r3, #24]
 8012904:	4b72      	ldr	r3, [pc, #456]	; (8012ad0 <tcp_input+0x49c>)
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	881b      	ldrh	r3, [r3, #0]
 801290a:	b29b      	uxth	r3, r3
 801290c:	429a      	cmp	r2, r3
 801290e:	d13a      	bne.n	8012986 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8012910:	69fb      	ldr	r3, [r7, #28]
 8012912:	8ada      	ldrh	r2, [r3, #22]
 8012914:	4b6e      	ldr	r3, [pc, #440]	; (8012ad0 <tcp_input+0x49c>)
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	885b      	ldrh	r3, [r3, #2]
 801291a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801291c:	429a      	cmp	r2, r3
 801291e:	d132      	bne.n	8012986 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012920:	69fb      	ldr	r3, [r7, #28]
 8012922:	685a      	ldr	r2, [r3, #4]
 8012924:	4b6b      	ldr	r3, [pc, #428]	; (8012ad4 <tcp_input+0x4a0>)
 8012926:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8012928:	429a      	cmp	r2, r3
 801292a:	d12c      	bne.n	8012986 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801292c:	69fb      	ldr	r3, [r7, #28]
 801292e:	681a      	ldr	r2, [r3, #0]
 8012930:	4b68      	ldr	r3, [pc, #416]	; (8012ad4 <tcp_input+0x4a0>)
 8012932:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012934:	429a      	cmp	r2, r3
 8012936:	d126      	bne.n	8012986 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8012938:	69fb      	ldr	r3, [r7, #28]
 801293a:	68db      	ldr	r3, [r3, #12]
 801293c:	69fa      	ldr	r2, [r7, #28]
 801293e:	429a      	cmp	r2, r3
 8012940:	d106      	bne.n	8012950 <tcp_input+0x31c>
 8012942:	4b65      	ldr	r3, [pc, #404]	; (8012ad8 <tcp_input+0x4a4>)
 8012944:	f240 120d 	movw	r2, #269	; 0x10d
 8012948:	4964      	ldr	r1, [pc, #400]	; (8012adc <tcp_input+0x4a8>)
 801294a:	4865      	ldr	r0, [pc, #404]	; (8012ae0 <tcp_input+0x4ac>)
 801294c:	f004 fae2 	bl	8016f14 <iprintf>
      if (prev != NULL) {
 8012950:	69bb      	ldr	r3, [r7, #24]
 8012952:	2b00      	cmp	r3, #0
 8012954:	d00a      	beq.n	801296c <tcp_input+0x338>
        prev->next = pcb->next;
 8012956:	69fb      	ldr	r3, [r7, #28]
 8012958:	68da      	ldr	r2, [r3, #12]
 801295a:	69bb      	ldr	r3, [r7, #24]
 801295c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801295e:	4b61      	ldr	r3, [pc, #388]	; (8012ae4 <tcp_input+0x4b0>)
 8012960:	681a      	ldr	r2, [r3, #0]
 8012962:	69fb      	ldr	r3, [r7, #28]
 8012964:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8012966:	4a5f      	ldr	r2, [pc, #380]	; (8012ae4 <tcp_input+0x4b0>)
 8012968:	69fb      	ldr	r3, [r7, #28]
 801296a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801296c:	69fb      	ldr	r3, [r7, #28]
 801296e:	68db      	ldr	r3, [r3, #12]
 8012970:	69fa      	ldr	r2, [r7, #28]
 8012972:	429a      	cmp	r2, r3
 8012974:	d111      	bne.n	801299a <tcp_input+0x366>
 8012976:	4b58      	ldr	r3, [pc, #352]	; (8012ad8 <tcp_input+0x4a4>)
 8012978:	f240 1215 	movw	r2, #277	; 0x115
 801297c:	495a      	ldr	r1, [pc, #360]	; (8012ae8 <tcp_input+0x4b4>)
 801297e:	4858      	ldr	r0, [pc, #352]	; (8012ae0 <tcp_input+0x4ac>)
 8012980:	f004 fac8 	bl	8016f14 <iprintf>
      break;
 8012984:	e009      	b.n	801299a <tcp_input+0x366>
    }
    prev = pcb;
 8012986:	69fb      	ldr	r3, [r7, #28]
 8012988:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801298a:	69fb      	ldr	r3, [r7, #28]
 801298c:	68db      	ldr	r3, [r3, #12]
 801298e:	61fb      	str	r3, [r7, #28]
 8012990:	69fb      	ldr	r3, [r7, #28]
 8012992:	2b00      	cmp	r3, #0
 8012994:	f47f af5e 	bne.w	8012854 <tcp_input+0x220>
 8012998:	e000      	b.n	801299c <tcp_input+0x368>
      break;
 801299a:	bf00      	nop
  }

  if (pcb == NULL) {
 801299c:	69fb      	ldr	r3, [r7, #28]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	f040 80aa 	bne.w	8012af8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80129a4:	4b51      	ldr	r3, [pc, #324]	; (8012aec <tcp_input+0x4b8>)
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	61fb      	str	r3, [r7, #28]
 80129aa:	e03f      	b.n	8012a2c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80129ac:	69fb      	ldr	r3, [r7, #28]
 80129ae:	7d1b      	ldrb	r3, [r3, #20]
 80129b0:	2b0a      	cmp	r3, #10
 80129b2:	d006      	beq.n	80129c2 <tcp_input+0x38e>
 80129b4:	4b48      	ldr	r3, [pc, #288]	; (8012ad8 <tcp_input+0x4a4>)
 80129b6:	f240 121f 	movw	r2, #287	; 0x11f
 80129ba:	494d      	ldr	r1, [pc, #308]	; (8012af0 <tcp_input+0x4bc>)
 80129bc:	4848      	ldr	r0, [pc, #288]	; (8012ae0 <tcp_input+0x4ac>)
 80129be:	f004 faa9 	bl	8016f14 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80129c2:	69fb      	ldr	r3, [r7, #28]
 80129c4:	7a1b      	ldrb	r3, [r3, #8]
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d009      	beq.n	80129de <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80129ca:	69fb      	ldr	r3, [r7, #28]
 80129cc:	7a1a      	ldrb	r2, [r3, #8]
 80129ce:	4b41      	ldr	r3, [pc, #260]	; (8012ad4 <tcp_input+0x4a0>)
 80129d0:	685b      	ldr	r3, [r3, #4]
 80129d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80129d6:	3301      	adds	r3, #1
 80129d8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80129da:	429a      	cmp	r2, r3
 80129dc:	d122      	bne.n	8012a24 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80129de:	69fb      	ldr	r3, [r7, #28]
 80129e0:	8b1a      	ldrh	r2, [r3, #24]
 80129e2:	4b3b      	ldr	r3, [pc, #236]	; (8012ad0 <tcp_input+0x49c>)
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	881b      	ldrh	r3, [r3, #0]
 80129e8:	b29b      	uxth	r3, r3
 80129ea:	429a      	cmp	r2, r3
 80129ec:	d11b      	bne.n	8012a26 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80129ee:	69fb      	ldr	r3, [r7, #28]
 80129f0:	8ada      	ldrh	r2, [r3, #22]
 80129f2:	4b37      	ldr	r3, [pc, #220]	; (8012ad0 <tcp_input+0x49c>)
 80129f4:	681b      	ldr	r3, [r3, #0]
 80129f6:	885b      	ldrh	r3, [r3, #2]
 80129f8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80129fa:	429a      	cmp	r2, r3
 80129fc:	d113      	bne.n	8012a26 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80129fe:	69fb      	ldr	r3, [r7, #28]
 8012a00:	685a      	ldr	r2, [r3, #4]
 8012a02:	4b34      	ldr	r3, [pc, #208]	; (8012ad4 <tcp_input+0x4a0>)
 8012a04:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8012a06:	429a      	cmp	r2, r3
 8012a08:	d10d      	bne.n	8012a26 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012a0a:	69fb      	ldr	r3, [r7, #28]
 8012a0c:	681a      	ldr	r2, [r3, #0]
 8012a0e:	4b31      	ldr	r3, [pc, #196]	; (8012ad4 <tcp_input+0x4a0>)
 8012a10:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012a12:	429a      	cmp	r2, r3
 8012a14:	d107      	bne.n	8012a26 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8012a16:	69f8      	ldr	r0, [r7, #28]
 8012a18:	f000 fb56 	bl	80130c8 <tcp_timewait_input>
        }
        pbuf_free(p);
 8012a1c:	6878      	ldr	r0, [r7, #4]
 8012a1e:	f7fd fee3 	bl	80107e8 <pbuf_free>
        return;
 8012a22:	e1fd      	b.n	8012e20 <tcp_input+0x7ec>
        continue;
 8012a24:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012a26:	69fb      	ldr	r3, [r7, #28]
 8012a28:	68db      	ldr	r3, [r3, #12]
 8012a2a:	61fb      	str	r3, [r7, #28]
 8012a2c:	69fb      	ldr	r3, [r7, #28]
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d1bc      	bne.n	80129ac <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8012a32:	2300      	movs	r3, #0
 8012a34:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012a36:	4b2f      	ldr	r3, [pc, #188]	; (8012af4 <tcp_input+0x4c0>)
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	617b      	str	r3, [r7, #20]
 8012a3c:	e02a      	b.n	8012a94 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012a3e:	697b      	ldr	r3, [r7, #20]
 8012a40:	7a1b      	ldrb	r3, [r3, #8]
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d00c      	beq.n	8012a60 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012a46:	697b      	ldr	r3, [r7, #20]
 8012a48:	7a1a      	ldrb	r2, [r3, #8]
 8012a4a:	4b22      	ldr	r3, [pc, #136]	; (8012ad4 <tcp_input+0x4a0>)
 8012a4c:	685b      	ldr	r3, [r3, #4]
 8012a4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012a52:	3301      	adds	r3, #1
 8012a54:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012a56:	429a      	cmp	r2, r3
 8012a58:	d002      	beq.n	8012a60 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8012a5a:	697b      	ldr	r3, [r7, #20]
 8012a5c:	61bb      	str	r3, [r7, #24]
        continue;
 8012a5e:	e016      	b.n	8012a8e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8012a60:	697b      	ldr	r3, [r7, #20]
 8012a62:	8ada      	ldrh	r2, [r3, #22]
 8012a64:	4b1a      	ldr	r3, [pc, #104]	; (8012ad0 <tcp_input+0x49c>)
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	885b      	ldrh	r3, [r3, #2]
 8012a6a:	b29b      	uxth	r3, r3
 8012a6c:	429a      	cmp	r2, r3
 8012a6e:	d10c      	bne.n	8012a8a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8012a70:	697b      	ldr	r3, [r7, #20]
 8012a72:	681a      	ldr	r2, [r3, #0]
 8012a74:	4b17      	ldr	r3, [pc, #92]	; (8012ad4 <tcp_input+0x4a0>)
 8012a76:	695b      	ldr	r3, [r3, #20]
 8012a78:	429a      	cmp	r2, r3
 8012a7a:	d00f      	beq.n	8012a9c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8012a7c:	697b      	ldr	r3, [r7, #20]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d00d      	beq.n	8012a9e <tcp_input+0x46a>
 8012a82:	697b      	ldr	r3, [r7, #20]
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d009      	beq.n	8012a9e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8012a8a:	697b      	ldr	r3, [r7, #20]
 8012a8c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012a8e:	697b      	ldr	r3, [r7, #20]
 8012a90:	68db      	ldr	r3, [r3, #12]
 8012a92:	617b      	str	r3, [r7, #20]
 8012a94:	697b      	ldr	r3, [r7, #20]
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d1d1      	bne.n	8012a3e <tcp_input+0x40a>
 8012a9a:	e000      	b.n	8012a9e <tcp_input+0x46a>
            break;
 8012a9c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8012a9e:	697b      	ldr	r3, [r7, #20]
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d029      	beq.n	8012af8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8012aa4:	69bb      	ldr	r3, [r7, #24]
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d00a      	beq.n	8012ac0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8012aaa:	697b      	ldr	r3, [r7, #20]
 8012aac:	68da      	ldr	r2, [r3, #12]
 8012aae:	69bb      	ldr	r3, [r7, #24]
 8012ab0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8012ab2:	4b10      	ldr	r3, [pc, #64]	; (8012af4 <tcp_input+0x4c0>)
 8012ab4:	681a      	ldr	r2, [r3, #0]
 8012ab6:	697b      	ldr	r3, [r7, #20]
 8012ab8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8012aba:	4a0e      	ldr	r2, [pc, #56]	; (8012af4 <tcp_input+0x4c0>)
 8012abc:	697b      	ldr	r3, [r7, #20]
 8012abe:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8012ac0:	6978      	ldr	r0, [r7, #20]
 8012ac2:	f000 fa03 	bl	8012ecc <tcp_listen_input>
      }
      pbuf_free(p);
 8012ac6:	6878      	ldr	r0, [r7, #4]
 8012ac8:	f7fd fe8e 	bl	80107e8 <pbuf_free>
      return;
 8012acc:	e1a8      	b.n	8012e20 <tcp_input+0x7ec>
 8012ace:	bf00      	nop
 8012ad0:	24015554 	.word	0x24015554
 8012ad4:	2401241c 	.word	0x2401241c
 8012ad8:	08019958 	.word	0x08019958
 8012adc:	08019ac4 	.word	0x08019ac4
 8012ae0:	080199e4 	.word	0x080199e4
 8012ae4:	24015538 	.word	0x24015538
 8012ae8:	08019af0 	.word	0x08019af0
 8012aec:	2401553c 	.word	0x2401553c
 8012af0:	08019b1c 	.word	0x08019b1c
 8012af4:	24015534 	.word	0x24015534
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8012af8:	69fb      	ldr	r3, [r7, #28]
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	f000 8158 	beq.w	8012db0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8012b00:	4b95      	ldr	r3, [pc, #596]	; (8012d58 <tcp_input+0x724>)
 8012b02:	2200      	movs	r2, #0
 8012b04:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	891a      	ldrh	r2, [r3, #8]
 8012b0a:	4b93      	ldr	r3, [pc, #588]	; (8012d58 <tcp_input+0x724>)
 8012b0c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8012b0e:	4a92      	ldr	r2, [pc, #584]	; (8012d58 <tcp_input+0x724>)
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8012b14:	4b91      	ldr	r3, [pc, #580]	; (8012d5c <tcp_input+0x728>)
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	4a8f      	ldr	r2, [pc, #572]	; (8012d58 <tcp_input+0x724>)
 8012b1a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8012b1c:	4b90      	ldr	r3, [pc, #576]	; (8012d60 <tcp_input+0x72c>)
 8012b1e:	2200      	movs	r2, #0
 8012b20:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8012b22:	4b90      	ldr	r3, [pc, #576]	; (8012d64 <tcp_input+0x730>)
 8012b24:	2200      	movs	r2, #0
 8012b26:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8012b28:	4b8f      	ldr	r3, [pc, #572]	; (8012d68 <tcp_input+0x734>)
 8012b2a:	2200      	movs	r2, #0
 8012b2c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8012b2e:	4b8f      	ldr	r3, [pc, #572]	; (8012d6c <tcp_input+0x738>)
 8012b30:	781b      	ldrb	r3, [r3, #0]
 8012b32:	f003 0308 	and.w	r3, r3, #8
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d006      	beq.n	8012b48 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	7b5b      	ldrb	r3, [r3, #13]
 8012b3e:	f043 0301 	orr.w	r3, r3, #1
 8012b42:	b2da      	uxtb	r2, r3
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8012b48:	69fb      	ldr	r3, [r7, #28]
 8012b4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d017      	beq.n	8012b80 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012b50:	69f8      	ldr	r0, [r7, #28]
 8012b52:	f7ff f929 	bl	8011da8 <tcp_process_refused_data>
 8012b56:	4603      	mov	r3, r0
 8012b58:	f113 0f0d 	cmn.w	r3, #13
 8012b5c:	d007      	beq.n	8012b6e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012b5e:	69fb      	ldr	r3, [r7, #28]
 8012b60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d00c      	beq.n	8012b80 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012b66:	4b82      	ldr	r3, [pc, #520]	; (8012d70 <tcp_input+0x73c>)
 8012b68:	881b      	ldrh	r3, [r3, #0]
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d008      	beq.n	8012b80 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8012b6e:	69fb      	ldr	r3, [r7, #28]
 8012b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	f040 80e3 	bne.w	8012d3e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8012b78:	69f8      	ldr	r0, [r7, #28]
 8012b7a:	f003 f9ad 	bl	8015ed8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8012b7e:	e0de      	b.n	8012d3e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8012b80:	4a7c      	ldr	r2, [pc, #496]	; (8012d74 <tcp_input+0x740>)
 8012b82:	69fb      	ldr	r3, [r7, #28]
 8012b84:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8012b86:	69f8      	ldr	r0, [r7, #28]
 8012b88:	f000 fb18 	bl	80131bc <tcp_process>
 8012b8c:	4603      	mov	r3, r0
 8012b8e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8012b90:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012b94:	f113 0f0d 	cmn.w	r3, #13
 8012b98:	f000 80d3 	beq.w	8012d42 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8012b9c:	4b71      	ldr	r3, [pc, #452]	; (8012d64 <tcp_input+0x730>)
 8012b9e:	781b      	ldrb	r3, [r3, #0]
 8012ba0:	f003 0308 	and.w	r3, r3, #8
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d015      	beq.n	8012bd4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8012ba8:	69fb      	ldr	r3, [r7, #28]
 8012baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d008      	beq.n	8012bc4 <tcp_input+0x590>
 8012bb2:	69fb      	ldr	r3, [r7, #28]
 8012bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012bb8:	69fa      	ldr	r2, [r7, #28]
 8012bba:	6912      	ldr	r2, [r2, #16]
 8012bbc:	f06f 010d 	mvn.w	r1, #13
 8012bc0:	4610      	mov	r0, r2
 8012bc2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012bc4:	69f9      	ldr	r1, [r7, #28]
 8012bc6:	486c      	ldr	r0, [pc, #432]	; (8012d78 <tcp_input+0x744>)
 8012bc8:	f7ff fbbc 	bl	8012344 <tcp_pcb_remove>
        tcp_free(pcb);
 8012bcc:	69f8      	ldr	r0, [r7, #28]
 8012bce:	f7fe f9a9 	bl	8010f24 <tcp_free>
 8012bd2:	e0da      	b.n	8012d8a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8012bd4:	2300      	movs	r3, #0
 8012bd6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8012bd8:	4b63      	ldr	r3, [pc, #396]	; (8012d68 <tcp_input+0x734>)
 8012bda:	881b      	ldrh	r3, [r3, #0]
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d01d      	beq.n	8012c1c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8012be0:	4b61      	ldr	r3, [pc, #388]	; (8012d68 <tcp_input+0x734>)
 8012be2:	881b      	ldrh	r3, [r3, #0]
 8012be4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8012be6:	69fb      	ldr	r3, [r7, #28]
 8012be8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d00a      	beq.n	8012c06 <tcp_input+0x5d2>
 8012bf0:	69fb      	ldr	r3, [r7, #28]
 8012bf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012bf6:	69fa      	ldr	r2, [r7, #28]
 8012bf8:	6910      	ldr	r0, [r2, #16]
 8012bfa:	89fa      	ldrh	r2, [r7, #14]
 8012bfc:	69f9      	ldr	r1, [r7, #28]
 8012bfe:	4798      	blx	r3
 8012c00:	4603      	mov	r3, r0
 8012c02:	74fb      	strb	r3, [r7, #19]
 8012c04:	e001      	b.n	8012c0a <tcp_input+0x5d6>
 8012c06:	2300      	movs	r3, #0
 8012c08:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012c0a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012c0e:	f113 0f0d 	cmn.w	r3, #13
 8012c12:	f000 8098 	beq.w	8012d46 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8012c16:	4b54      	ldr	r3, [pc, #336]	; (8012d68 <tcp_input+0x734>)
 8012c18:	2200      	movs	r2, #0
 8012c1a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8012c1c:	69f8      	ldr	r0, [r7, #28]
 8012c1e:	f000 f915 	bl	8012e4c <tcp_input_delayed_close>
 8012c22:	4603      	mov	r3, r0
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	f040 8090 	bne.w	8012d4a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8012c2a:	4b4d      	ldr	r3, [pc, #308]	; (8012d60 <tcp_input+0x72c>)
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d041      	beq.n	8012cb6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8012c32:	69fb      	ldr	r3, [r7, #28]
 8012c34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d006      	beq.n	8012c48 <tcp_input+0x614>
 8012c3a:	4b50      	ldr	r3, [pc, #320]	; (8012d7c <tcp_input+0x748>)
 8012c3c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8012c40:	494f      	ldr	r1, [pc, #316]	; (8012d80 <tcp_input+0x74c>)
 8012c42:	4850      	ldr	r0, [pc, #320]	; (8012d84 <tcp_input+0x750>)
 8012c44:	f004 f966 	bl	8016f14 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8012c48:	69fb      	ldr	r3, [r7, #28]
 8012c4a:	8b5b      	ldrh	r3, [r3, #26]
 8012c4c:	f003 0310 	and.w	r3, r3, #16
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d008      	beq.n	8012c66 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8012c54:	4b42      	ldr	r3, [pc, #264]	; (8012d60 <tcp_input+0x72c>)
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	4618      	mov	r0, r3
 8012c5a:	f7fd fdc5 	bl	80107e8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8012c5e:	69f8      	ldr	r0, [r7, #28]
 8012c60:	f7fe fc48 	bl	80114f4 <tcp_abort>
            goto aborted;
 8012c64:	e091      	b.n	8012d8a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8012c66:	69fb      	ldr	r3, [r7, #28]
 8012c68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d00c      	beq.n	8012c8a <tcp_input+0x656>
 8012c70:	69fb      	ldr	r3, [r7, #28]
 8012c72:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012c76:	69fb      	ldr	r3, [r7, #28]
 8012c78:	6918      	ldr	r0, [r3, #16]
 8012c7a:	4b39      	ldr	r3, [pc, #228]	; (8012d60 <tcp_input+0x72c>)
 8012c7c:	681a      	ldr	r2, [r3, #0]
 8012c7e:	2300      	movs	r3, #0
 8012c80:	69f9      	ldr	r1, [r7, #28]
 8012c82:	47a0      	blx	r4
 8012c84:	4603      	mov	r3, r0
 8012c86:	74fb      	strb	r3, [r7, #19]
 8012c88:	e008      	b.n	8012c9c <tcp_input+0x668>
 8012c8a:	4b35      	ldr	r3, [pc, #212]	; (8012d60 <tcp_input+0x72c>)
 8012c8c:	681a      	ldr	r2, [r3, #0]
 8012c8e:	2300      	movs	r3, #0
 8012c90:	69f9      	ldr	r1, [r7, #28]
 8012c92:	2000      	movs	r0, #0
 8012c94:	f7ff f95e 	bl	8011f54 <tcp_recv_null>
 8012c98:	4603      	mov	r3, r0
 8012c9a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8012c9c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012ca0:	f113 0f0d 	cmn.w	r3, #13
 8012ca4:	d053      	beq.n	8012d4e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8012ca6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d003      	beq.n	8012cb6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8012cae:	4b2c      	ldr	r3, [pc, #176]	; (8012d60 <tcp_input+0x72c>)
 8012cb0:	681a      	ldr	r2, [r3, #0]
 8012cb2:	69fb      	ldr	r3, [r7, #28]
 8012cb4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8012cb6:	4b2b      	ldr	r3, [pc, #172]	; (8012d64 <tcp_input+0x730>)
 8012cb8:	781b      	ldrb	r3, [r3, #0]
 8012cba:	f003 0320 	and.w	r3, r3, #32
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d030      	beq.n	8012d24 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8012cc2:	69fb      	ldr	r3, [r7, #28]
 8012cc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d009      	beq.n	8012cde <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8012cca:	69fb      	ldr	r3, [r7, #28]
 8012ccc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012cce:	7b5a      	ldrb	r2, [r3, #13]
 8012cd0:	69fb      	ldr	r3, [r7, #28]
 8012cd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012cd4:	f042 0220 	orr.w	r2, r2, #32
 8012cd8:	b2d2      	uxtb	r2, r2
 8012cda:	735a      	strb	r2, [r3, #13]
 8012cdc:	e022      	b.n	8012d24 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012cde:	69fb      	ldr	r3, [r7, #28]
 8012ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012ce2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8012ce6:	d005      	beq.n	8012cf4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8012ce8:	69fb      	ldr	r3, [r7, #28]
 8012cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012cec:	3301      	adds	r3, #1
 8012cee:	b29a      	uxth	r2, r3
 8012cf0:	69fb      	ldr	r3, [r7, #28]
 8012cf2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8012cf4:	69fb      	ldr	r3, [r7, #28]
 8012cf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d00b      	beq.n	8012d16 <tcp_input+0x6e2>
 8012cfe:	69fb      	ldr	r3, [r7, #28]
 8012d00:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012d04:	69fb      	ldr	r3, [r7, #28]
 8012d06:	6918      	ldr	r0, [r3, #16]
 8012d08:	2300      	movs	r3, #0
 8012d0a:	2200      	movs	r2, #0
 8012d0c:	69f9      	ldr	r1, [r7, #28]
 8012d0e:	47a0      	blx	r4
 8012d10:	4603      	mov	r3, r0
 8012d12:	74fb      	strb	r3, [r7, #19]
 8012d14:	e001      	b.n	8012d1a <tcp_input+0x6e6>
 8012d16:	2300      	movs	r3, #0
 8012d18:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012d1a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012d1e:	f113 0f0d 	cmn.w	r3, #13
 8012d22:	d016      	beq.n	8012d52 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8012d24:	4b13      	ldr	r3, [pc, #76]	; (8012d74 <tcp_input+0x740>)
 8012d26:	2200      	movs	r2, #0
 8012d28:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8012d2a:	69f8      	ldr	r0, [r7, #28]
 8012d2c:	f000 f88e 	bl	8012e4c <tcp_input_delayed_close>
 8012d30:	4603      	mov	r3, r0
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d128      	bne.n	8012d88 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8012d36:	69f8      	ldr	r0, [r7, #28]
 8012d38:	f002 fac8 	bl	80152cc <tcp_output>
 8012d3c:	e025      	b.n	8012d8a <tcp_input+0x756>
        goto aborted;
 8012d3e:	bf00      	nop
 8012d40:	e023      	b.n	8012d8a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8012d42:	bf00      	nop
 8012d44:	e021      	b.n	8012d8a <tcp_input+0x756>
              goto aborted;
 8012d46:	bf00      	nop
 8012d48:	e01f      	b.n	8012d8a <tcp_input+0x756>
          goto aborted;
 8012d4a:	bf00      	nop
 8012d4c:	e01d      	b.n	8012d8a <tcp_input+0x756>
            goto aborted;
 8012d4e:	bf00      	nop
 8012d50:	e01b      	b.n	8012d8a <tcp_input+0x756>
              goto aborted;
 8012d52:	bf00      	nop
 8012d54:	e019      	b.n	8012d8a <tcp_input+0x756>
 8012d56:	bf00      	nop
 8012d58:	24015544 	.word	0x24015544
 8012d5c:	24015554 	.word	0x24015554
 8012d60:	24015574 	.word	0x24015574
 8012d64:	24015571 	.word	0x24015571
 8012d68:	2401556c 	.word	0x2401556c
 8012d6c:	24015570 	.word	0x24015570
 8012d70:	2401556e 	.word	0x2401556e
 8012d74:	24015578 	.word	0x24015578
 8012d78:	24015538 	.word	0x24015538
 8012d7c:	08019958 	.word	0x08019958
 8012d80:	08019b4c 	.word	0x08019b4c
 8012d84:	080199e4 	.word	0x080199e4
          goto aborted;
 8012d88:	bf00      	nop
    tcp_input_pcb = NULL;
 8012d8a:	4b27      	ldr	r3, [pc, #156]	; (8012e28 <tcp_input+0x7f4>)
 8012d8c:	2200      	movs	r2, #0
 8012d8e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8012d90:	4b26      	ldr	r3, [pc, #152]	; (8012e2c <tcp_input+0x7f8>)
 8012d92:	2200      	movs	r2, #0
 8012d94:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8012d96:	4b26      	ldr	r3, [pc, #152]	; (8012e30 <tcp_input+0x7fc>)
 8012d98:	685b      	ldr	r3, [r3, #4]
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d03f      	beq.n	8012e1e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8012d9e:	4b24      	ldr	r3, [pc, #144]	; (8012e30 <tcp_input+0x7fc>)
 8012da0:	685b      	ldr	r3, [r3, #4]
 8012da2:	4618      	mov	r0, r3
 8012da4:	f7fd fd20 	bl	80107e8 <pbuf_free>
      inseg.p = NULL;
 8012da8:	4b21      	ldr	r3, [pc, #132]	; (8012e30 <tcp_input+0x7fc>)
 8012daa:	2200      	movs	r2, #0
 8012dac:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8012dae:	e036      	b.n	8012e1e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8012db0:	4b20      	ldr	r3, [pc, #128]	; (8012e34 <tcp_input+0x800>)
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	899b      	ldrh	r3, [r3, #12]
 8012db6:	b29b      	uxth	r3, r3
 8012db8:	4618      	mov	r0, r3
 8012dba:	f7f9 fd7f 	bl	800c8bc <lwip_htons>
 8012dbe:	4603      	mov	r3, r0
 8012dc0:	b2db      	uxtb	r3, r3
 8012dc2:	f003 0304 	and.w	r3, r3, #4
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d118      	bne.n	8012dfc <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012dca:	4b1b      	ldr	r3, [pc, #108]	; (8012e38 <tcp_input+0x804>)
 8012dcc:	6819      	ldr	r1, [r3, #0]
 8012dce:	4b1b      	ldr	r3, [pc, #108]	; (8012e3c <tcp_input+0x808>)
 8012dd0:	881b      	ldrh	r3, [r3, #0]
 8012dd2:	461a      	mov	r2, r3
 8012dd4:	4b1a      	ldr	r3, [pc, #104]	; (8012e40 <tcp_input+0x80c>)
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012dda:	4b16      	ldr	r3, [pc, #88]	; (8012e34 <tcp_input+0x800>)
 8012ddc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012dde:	885b      	ldrh	r3, [r3, #2]
 8012de0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012de2:	4a14      	ldr	r2, [pc, #80]	; (8012e34 <tcp_input+0x800>)
 8012de4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012de6:	8812      	ldrh	r2, [r2, #0]
 8012de8:	b292      	uxth	r2, r2
 8012dea:	9202      	str	r2, [sp, #8]
 8012dec:	9301      	str	r3, [sp, #4]
 8012dee:	4b15      	ldr	r3, [pc, #84]	; (8012e44 <tcp_input+0x810>)
 8012df0:	9300      	str	r3, [sp, #0]
 8012df2:	4b15      	ldr	r3, [pc, #84]	; (8012e48 <tcp_input+0x814>)
 8012df4:	4602      	mov	r2, r0
 8012df6:	2000      	movs	r0, #0
 8012df8:	f003 f81c 	bl	8015e34 <tcp_rst>
    pbuf_free(p);
 8012dfc:	6878      	ldr	r0, [r7, #4]
 8012dfe:	f7fd fcf3 	bl	80107e8 <pbuf_free>
  return;
 8012e02:	e00c      	b.n	8012e1e <tcp_input+0x7ea>
    goto dropped;
 8012e04:	bf00      	nop
 8012e06:	e006      	b.n	8012e16 <tcp_input+0x7e2>
    goto dropped;
 8012e08:	bf00      	nop
 8012e0a:	e004      	b.n	8012e16 <tcp_input+0x7e2>
    goto dropped;
 8012e0c:	bf00      	nop
 8012e0e:	e002      	b.n	8012e16 <tcp_input+0x7e2>
      goto dropped;
 8012e10:	bf00      	nop
 8012e12:	e000      	b.n	8012e16 <tcp_input+0x7e2>
      goto dropped;
 8012e14:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8012e16:	6878      	ldr	r0, [r7, #4]
 8012e18:	f7fd fce6 	bl	80107e8 <pbuf_free>
 8012e1c:	e000      	b.n	8012e20 <tcp_input+0x7ec>
  return;
 8012e1e:	bf00      	nop
}
 8012e20:	3724      	adds	r7, #36	; 0x24
 8012e22:	46bd      	mov	sp, r7
 8012e24:	bd90      	pop	{r4, r7, pc}
 8012e26:	bf00      	nop
 8012e28:	24015578 	.word	0x24015578
 8012e2c:	24015574 	.word	0x24015574
 8012e30:	24015544 	.word	0x24015544
 8012e34:	24015554 	.word	0x24015554
 8012e38:	24015568 	.word	0x24015568
 8012e3c:	2401556e 	.word	0x2401556e
 8012e40:	24015564 	.word	0x24015564
 8012e44:	2401242c 	.word	0x2401242c
 8012e48:	24012430 	.word	0x24012430

08012e4c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8012e4c:	b580      	push	{r7, lr}
 8012e4e:	b082      	sub	sp, #8
 8012e50:	af00      	add	r7, sp, #0
 8012e52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d106      	bne.n	8012e68 <tcp_input_delayed_close+0x1c>
 8012e5a:	4b17      	ldr	r3, [pc, #92]	; (8012eb8 <tcp_input_delayed_close+0x6c>)
 8012e5c:	f240 225a 	movw	r2, #602	; 0x25a
 8012e60:	4916      	ldr	r1, [pc, #88]	; (8012ebc <tcp_input_delayed_close+0x70>)
 8012e62:	4817      	ldr	r0, [pc, #92]	; (8012ec0 <tcp_input_delayed_close+0x74>)
 8012e64:	f004 f856 	bl	8016f14 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8012e68:	4b16      	ldr	r3, [pc, #88]	; (8012ec4 <tcp_input_delayed_close+0x78>)
 8012e6a:	781b      	ldrb	r3, [r3, #0]
 8012e6c:	f003 0310 	and.w	r3, r3, #16
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d01c      	beq.n	8012eae <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	8b5b      	ldrh	r3, [r3, #26]
 8012e78:	f003 0310 	and.w	r3, r3, #16
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d10d      	bne.n	8012e9c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d008      	beq.n	8012e9c <tcp_input_delayed_close+0x50>
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012e90:	687a      	ldr	r2, [r7, #4]
 8012e92:	6912      	ldr	r2, [r2, #16]
 8012e94:	f06f 010e 	mvn.w	r1, #14
 8012e98:	4610      	mov	r0, r2
 8012e9a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012e9c:	6879      	ldr	r1, [r7, #4]
 8012e9e:	480a      	ldr	r0, [pc, #40]	; (8012ec8 <tcp_input_delayed_close+0x7c>)
 8012ea0:	f7ff fa50 	bl	8012344 <tcp_pcb_remove>
    tcp_free(pcb);
 8012ea4:	6878      	ldr	r0, [r7, #4]
 8012ea6:	f7fe f83d 	bl	8010f24 <tcp_free>
    return 1;
 8012eaa:	2301      	movs	r3, #1
 8012eac:	e000      	b.n	8012eb0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8012eae:	2300      	movs	r3, #0
}
 8012eb0:	4618      	mov	r0, r3
 8012eb2:	3708      	adds	r7, #8
 8012eb4:	46bd      	mov	sp, r7
 8012eb6:	bd80      	pop	{r7, pc}
 8012eb8:	08019958 	.word	0x08019958
 8012ebc:	08019b68 	.word	0x08019b68
 8012ec0:	080199e4 	.word	0x080199e4
 8012ec4:	24015571 	.word	0x24015571
 8012ec8:	24015538 	.word	0x24015538

08012ecc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8012ecc:	b590      	push	{r4, r7, lr}
 8012ece:	b08b      	sub	sp, #44	; 0x2c
 8012ed0:	af04      	add	r7, sp, #16
 8012ed2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8012ed4:	4b6f      	ldr	r3, [pc, #444]	; (8013094 <tcp_listen_input+0x1c8>)
 8012ed6:	781b      	ldrb	r3, [r3, #0]
 8012ed8:	f003 0304 	and.w	r3, r3, #4
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	f040 80d2 	bne.w	8013086 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d106      	bne.n	8012ef6 <tcp_listen_input+0x2a>
 8012ee8:	4b6b      	ldr	r3, [pc, #428]	; (8013098 <tcp_listen_input+0x1cc>)
 8012eea:	f240 2281 	movw	r2, #641	; 0x281
 8012eee:	496b      	ldr	r1, [pc, #428]	; (801309c <tcp_listen_input+0x1d0>)
 8012ef0:	486b      	ldr	r0, [pc, #428]	; (80130a0 <tcp_listen_input+0x1d4>)
 8012ef2:	f004 f80f 	bl	8016f14 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8012ef6:	4b67      	ldr	r3, [pc, #412]	; (8013094 <tcp_listen_input+0x1c8>)
 8012ef8:	781b      	ldrb	r3, [r3, #0]
 8012efa:	f003 0310 	and.w	r3, r3, #16
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d019      	beq.n	8012f36 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012f02:	4b68      	ldr	r3, [pc, #416]	; (80130a4 <tcp_listen_input+0x1d8>)
 8012f04:	6819      	ldr	r1, [r3, #0]
 8012f06:	4b68      	ldr	r3, [pc, #416]	; (80130a8 <tcp_listen_input+0x1dc>)
 8012f08:	881b      	ldrh	r3, [r3, #0]
 8012f0a:	461a      	mov	r2, r3
 8012f0c:	4b67      	ldr	r3, [pc, #412]	; (80130ac <tcp_listen_input+0x1e0>)
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012f12:	4b67      	ldr	r3, [pc, #412]	; (80130b0 <tcp_listen_input+0x1e4>)
 8012f14:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012f16:	885b      	ldrh	r3, [r3, #2]
 8012f18:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012f1a:	4a65      	ldr	r2, [pc, #404]	; (80130b0 <tcp_listen_input+0x1e4>)
 8012f1c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012f1e:	8812      	ldrh	r2, [r2, #0]
 8012f20:	b292      	uxth	r2, r2
 8012f22:	9202      	str	r2, [sp, #8]
 8012f24:	9301      	str	r3, [sp, #4]
 8012f26:	4b63      	ldr	r3, [pc, #396]	; (80130b4 <tcp_listen_input+0x1e8>)
 8012f28:	9300      	str	r3, [sp, #0]
 8012f2a:	4b63      	ldr	r3, [pc, #396]	; (80130b8 <tcp_listen_input+0x1ec>)
 8012f2c:	4602      	mov	r2, r0
 8012f2e:	6878      	ldr	r0, [r7, #4]
 8012f30:	f002 ff80 	bl	8015e34 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8012f34:	e0a9      	b.n	801308a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8012f36:	4b57      	ldr	r3, [pc, #348]	; (8013094 <tcp_listen_input+0x1c8>)
 8012f38:	781b      	ldrb	r3, [r3, #0]
 8012f3a:	f003 0302 	and.w	r3, r3, #2
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	f000 80a3 	beq.w	801308a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	7d5b      	ldrb	r3, [r3, #21]
 8012f48:	4618      	mov	r0, r3
 8012f4a:	f7ff f927 	bl	801219c <tcp_alloc>
 8012f4e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8012f50:	697b      	ldr	r3, [r7, #20]
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d111      	bne.n	8012f7a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	699b      	ldr	r3, [r3, #24]
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d00a      	beq.n	8012f74 <tcp_listen_input+0xa8>
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	699b      	ldr	r3, [r3, #24]
 8012f62:	687a      	ldr	r2, [r7, #4]
 8012f64:	6910      	ldr	r0, [r2, #16]
 8012f66:	f04f 32ff 	mov.w	r2, #4294967295
 8012f6a:	2100      	movs	r1, #0
 8012f6c:	4798      	blx	r3
 8012f6e:	4603      	mov	r3, r0
 8012f70:	73bb      	strb	r3, [r7, #14]
      return;
 8012f72:	e08b      	b.n	801308c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012f74:	23f0      	movs	r3, #240	; 0xf0
 8012f76:	73bb      	strb	r3, [r7, #14]
      return;
 8012f78:	e088      	b.n	801308c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8012f7a:	4b50      	ldr	r3, [pc, #320]	; (80130bc <tcp_listen_input+0x1f0>)
 8012f7c:	695a      	ldr	r2, [r3, #20]
 8012f7e:	697b      	ldr	r3, [r7, #20]
 8012f80:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8012f82:	4b4e      	ldr	r3, [pc, #312]	; (80130bc <tcp_listen_input+0x1f0>)
 8012f84:	691a      	ldr	r2, [r3, #16]
 8012f86:	697b      	ldr	r3, [r7, #20]
 8012f88:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	8ada      	ldrh	r2, [r3, #22]
 8012f8e:	697b      	ldr	r3, [r7, #20]
 8012f90:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8012f92:	4b47      	ldr	r3, [pc, #284]	; (80130b0 <tcp_listen_input+0x1e4>)
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	881b      	ldrh	r3, [r3, #0]
 8012f98:	b29a      	uxth	r2, r3
 8012f9a:	697b      	ldr	r3, [r7, #20]
 8012f9c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8012f9e:	697b      	ldr	r3, [r7, #20]
 8012fa0:	2203      	movs	r2, #3
 8012fa2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8012fa4:	4b41      	ldr	r3, [pc, #260]	; (80130ac <tcp_listen_input+0x1e0>)
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	1c5a      	adds	r2, r3, #1
 8012faa:	697b      	ldr	r3, [r7, #20]
 8012fac:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8012fae:	697b      	ldr	r3, [r7, #20]
 8012fb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012fb2:	697b      	ldr	r3, [r7, #20]
 8012fb4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8012fb6:	6978      	ldr	r0, [r7, #20]
 8012fb8:	f7ff fa58 	bl	801246c <tcp_next_iss>
 8012fbc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8012fbe:	697b      	ldr	r3, [r7, #20]
 8012fc0:	693a      	ldr	r2, [r7, #16]
 8012fc2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8012fc4:	697b      	ldr	r3, [r7, #20]
 8012fc6:	693a      	ldr	r2, [r7, #16]
 8012fc8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8012fca:	697b      	ldr	r3, [r7, #20]
 8012fcc:	693a      	ldr	r2, [r7, #16]
 8012fce:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8012fd0:	697b      	ldr	r3, [r7, #20]
 8012fd2:	693a      	ldr	r2, [r7, #16]
 8012fd4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8012fd6:	4b35      	ldr	r3, [pc, #212]	; (80130ac <tcp_listen_input+0x1e0>)
 8012fd8:	681b      	ldr	r3, [r3, #0]
 8012fda:	1e5a      	subs	r2, r3, #1
 8012fdc:	697b      	ldr	r3, [r7, #20]
 8012fde:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	691a      	ldr	r2, [r3, #16]
 8012fe4:	697b      	ldr	r3, [r7, #20]
 8012fe6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8012fe8:	697b      	ldr	r3, [r7, #20]
 8012fea:	687a      	ldr	r2, [r7, #4]
 8012fec:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	7a5b      	ldrb	r3, [r3, #9]
 8012ff2:	f003 030c 	and.w	r3, r3, #12
 8012ff6:	b2da      	uxtb	r2, r3
 8012ff8:	697b      	ldr	r3, [r7, #20]
 8012ffa:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	7a1a      	ldrb	r2, [r3, #8]
 8013000:	697b      	ldr	r3, [r7, #20]
 8013002:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8013004:	4b2e      	ldr	r3, [pc, #184]	; (80130c0 <tcp_listen_input+0x1f4>)
 8013006:	681a      	ldr	r2, [r3, #0]
 8013008:	697b      	ldr	r3, [r7, #20]
 801300a:	60da      	str	r2, [r3, #12]
 801300c:	4a2c      	ldr	r2, [pc, #176]	; (80130c0 <tcp_listen_input+0x1f4>)
 801300e:	697b      	ldr	r3, [r7, #20]
 8013010:	6013      	str	r3, [r2, #0]
 8013012:	f003 fa73 	bl	80164fc <tcp_timer_needed>
 8013016:	4b2b      	ldr	r3, [pc, #172]	; (80130c4 <tcp_listen_input+0x1f8>)
 8013018:	2201      	movs	r2, #1
 801301a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801301c:	6978      	ldr	r0, [r7, #20]
 801301e:	f001 fd8f 	bl	8014b40 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8013022:	4b23      	ldr	r3, [pc, #140]	; (80130b0 <tcp_listen_input+0x1e4>)
 8013024:	681b      	ldr	r3, [r3, #0]
 8013026:	89db      	ldrh	r3, [r3, #14]
 8013028:	b29a      	uxth	r2, r3
 801302a:	697b      	ldr	r3, [r7, #20]
 801302c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8013030:	697b      	ldr	r3, [r7, #20]
 8013032:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013036:	697b      	ldr	r3, [r7, #20]
 8013038:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801303c:	697b      	ldr	r3, [r7, #20]
 801303e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8013040:	697b      	ldr	r3, [r7, #20]
 8013042:	3304      	adds	r3, #4
 8013044:	4618      	mov	r0, r3
 8013046:	f7fa ff11 	bl	800de6c <ip4_route>
 801304a:	4601      	mov	r1, r0
 801304c:	697b      	ldr	r3, [r7, #20]
 801304e:	3304      	adds	r3, #4
 8013050:	461a      	mov	r2, r3
 8013052:	4620      	mov	r0, r4
 8013054:	f7ff fa30 	bl	80124b8 <tcp_eff_send_mss_netif>
 8013058:	4603      	mov	r3, r0
 801305a:	461a      	mov	r2, r3
 801305c:	697b      	ldr	r3, [r7, #20]
 801305e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8013060:	2112      	movs	r1, #18
 8013062:	6978      	ldr	r0, [r7, #20]
 8013064:	f002 f844 	bl	80150f0 <tcp_enqueue_flags>
 8013068:	4603      	mov	r3, r0
 801306a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801306c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013070:	2b00      	cmp	r3, #0
 8013072:	d004      	beq.n	801307e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8013074:	2100      	movs	r1, #0
 8013076:	6978      	ldr	r0, [r7, #20]
 8013078:	f7fe f97e 	bl	8011378 <tcp_abandon>
      return;
 801307c:	e006      	b.n	801308c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801307e:	6978      	ldr	r0, [r7, #20]
 8013080:	f002 f924 	bl	80152cc <tcp_output>
  return;
 8013084:	e001      	b.n	801308a <tcp_listen_input+0x1be>
    return;
 8013086:	bf00      	nop
 8013088:	e000      	b.n	801308c <tcp_listen_input+0x1c0>
  return;
 801308a:	bf00      	nop
}
 801308c:	371c      	adds	r7, #28
 801308e:	46bd      	mov	sp, r7
 8013090:	bd90      	pop	{r4, r7, pc}
 8013092:	bf00      	nop
 8013094:	24015570 	.word	0x24015570
 8013098:	08019958 	.word	0x08019958
 801309c:	08019b90 	.word	0x08019b90
 80130a0:	080199e4 	.word	0x080199e4
 80130a4:	24015568 	.word	0x24015568
 80130a8:	2401556e 	.word	0x2401556e
 80130ac:	24015564 	.word	0x24015564
 80130b0:	24015554 	.word	0x24015554
 80130b4:	2401242c 	.word	0x2401242c
 80130b8:	24012430 	.word	0x24012430
 80130bc:	2401241c 	.word	0x2401241c
 80130c0:	24015538 	.word	0x24015538
 80130c4:	24015540 	.word	0x24015540

080130c8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80130c8:	b580      	push	{r7, lr}
 80130ca:	b086      	sub	sp, #24
 80130cc:	af04      	add	r7, sp, #16
 80130ce:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80130d0:	4b2f      	ldr	r3, [pc, #188]	; (8013190 <tcp_timewait_input+0xc8>)
 80130d2:	781b      	ldrb	r3, [r3, #0]
 80130d4:	f003 0304 	and.w	r3, r3, #4
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d153      	bne.n	8013184 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d106      	bne.n	80130f0 <tcp_timewait_input+0x28>
 80130e2:	4b2c      	ldr	r3, [pc, #176]	; (8013194 <tcp_timewait_input+0xcc>)
 80130e4:	f240 22ee 	movw	r2, #750	; 0x2ee
 80130e8:	492b      	ldr	r1, [pc, #172]	; (8013198 <tcp_timewait_input+0xd0>)
 80130ea:	482c      	ldr	r0, [pc, #176]	; (801319c <tcp_timewait_input+0xd4>)
 80130ec:	f003 ff12 	bl	8016f14 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80130f0:	4b27      	ldr	r3, [pc, #156]	; (8013190 <tcp_timewait_input+0xc8>)
 80130f2:	781b      	ldrb	r3, [r3, #0]
 80130f4:	f003 0302 	and.w	r3, r3, #2
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d02a      	beq.n	8013152 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80130fc:	4b28      	ldr	r3, [pc, #160]	; (80131a0 <tcp_timewait_input+0xd8>)
 80130fe:	681a      	ldr	r2, [r3, #0]
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013104:	1ad3      	subs	r3, r2, r3
 8013106:	2b00      	cmp	r3, #0
 8013108:	db2d      	blt.n	8013166 <tcp_timewait_input+0x9e>
 801310a:	4b25      	ldr	r3, [pc, #148]	; (80131a0 <tcp_timewait_input+0xd8>)
 801310c:	681a      	ldr	r2, [r3, #0]
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013112:	6879      	ldr	r1, [r7, #4]
 8013114:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013116:	440b      	add	r3, r1
 8013118:	1ad3      	subs	r3, r2, r3
 801311a:	2b00      	cmp	r3, #0
 801311c:	dc23      	bgt.n	8013166 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801311e:	4b21      	ldr	r3, [pc, #132]	; (80131a4 <tcp_timewait_input+0xdc>)
 8013120:	6819      	ldr	r1, [r3, #0]
 8013122:	4b21      	ldr	r3, [pc, #132]	; (80131a8 <tcp_timewait_input+0xe0>)
 8013124:	881b      	ldrh	r3, [r3, #0]
 8013126:	461a      	mov	r2, r3
 8013128:	4b1d      	ldr	r3, [pc, #116]	; (80131a0 <tcp_timewait_input+0xd8>)
 801312a:	681b      	ldr	r3, [r3, #0]
 801312c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801312e:	4b1f      	ldr	r3, [pc, #124]	; (80131ac <tcp_timewait_input+0xe4>)
 8013130:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013132:	885b      	ldrh	r3, [r3, #2]
 8013134:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013136:	4a1d      	ldr	r2, [pc, #116]	; (80131ac <tcp_timewait_input+0xe4>)
 8013138:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801313a:	8812      	ldrh	r2, [r2, #0]
 801313c:	b292      	uxth	r2, r2
 801313e:	9202      	str	r2, [sp, #8]
 8013140:	9301      	str	r3, [sp, #4]
 8013142:	4b1b      	ldr	r3, [pc, #108]	; (80131b0 <tcp_timewait_input+0xe8>)
 8013144:	9300      	str	r3, [sp, #0]
 8013146:	4b1b      	ldr	r3, [pc, #108]	; (80131b4 <tcp_timewait_input+0xec>)
 8013148:	4602      	mov	r2, r0
 801314a:	6878      	ldr	r0, [r7, #4]
 801314c:	f002 fe72 	bl	8015e34 <tcp_rst>
      return;
 8013150:	e01b      	b.n	801318a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8013152:	4b0f      	ldr	r3, [pc, #60]	; (8013190 <tcp_timewait_input+0xc8>)
 8013154:	781b      	ldrb	r3, [r3, #0]
 8013156:	f003 0301 	and.w	r3, r3, #1
 801315a:	2b00      	cmp	r3, #0
 801315c:	d003      	beq.n	8013166 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801315e:	4b16      	ldr	r3, [pc, #88]	; (80131b8 <tcp_timewait_input+0xf0>)
 8013160:	681a      	ldr	r2, [r3, #0]
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8013166:	4b10      	ldr	r3, [pc, #64]	; (80131a8 <tcp_timewait_input+0xe0>)
 8013168:	881b      	ldrh	r3, [r3, #0]
 801316a:	2b00      	cmp	r3, #0
 801316c:	d00c      	beq.n	8013188 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	8b5b      	ldrh	r3, [r3, #26]
 8013172:	f043 0302 	orr.w	r3, r3, #2
 8013176:	b29a      	uxth	r2, r3
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801317c:	6878      	ldr	r0, [r7, #4]
 801317e:	f002 f8a5 	bl	80152cc <tcp_output>
  }
  return;
 8013182:	e001      	b.n	8013188 <tcp_timewait_input+0xc0>
    return;
 8013184:	bf00      	nop
 8013186:	e000      	b.n	801318a <tcp_timewait_input+0xc2>
  return;
 8013188:	bf00      	nop
}
 801318a:	3708      	adds	r7, #8
 801318c:	46bd      	mov	sp, r7
 801318e:	bd80      	pop	{r7, pc}
 8013190:	24015570 	.word	0x24015570
 8013194:	08019958 	.word	0x08019958
 8013198:	08019bb0 	.word	0x08019bb0
 801319c:	080199e4 	.word	0x080199e4
 80131a0:	24015564 	.word	0x24015564
 80131a4:	24015568 	.word	0x24015568
 80131a8:	2401556e 	.word	0x2401556e
 80131ac:	24015554 	.word	0x24015554
 80131b0:	2401242c 	.word	0x2401242c
 80131b4:	24012430 	.word	0x24012430
 80131b8:	2401552c 	.word	0x2401552c

080131bc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80131bc:	b590      	push	{r4, r7, lr}
 80131be:	b08d      	sub	sp, #52	; 0x34
 80131c0:	af04      	add	r7, sp, #16
 80131c2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80131c4:	2300      	movs	r3, #0
 80131c6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80131c8:	2300      	movs	r3, #0
 80131ca:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d106      	bne.n	80131e0 <tcp_process+0x24>
 80131d2:	4b9d      	ldr	r3, [pc, #628]	; (8013448 <tcp_process+0x28c>)
 80131d4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80131d8:	499c      	ldr	r1, [pc, #624]	; (801344c <tcp_process+0x290>)
 80131da:	489d      	ldr	r0, [pc, #628]	; (8013450 <tcp_process+0x294>)
 80131dc:	f003 fe9a 	bl	8016f14 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80131e0:	4b9c      	ldr	r3, [pc, #624]	; (8013454 <tcp_process+0x298>)
 80131e2:	781b      	ldrb	r3, [r3, #0]
 80131e4:	f003 0304 	and.w	r3, r3, #4
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d04e      	beq.n	801328a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	7d1b      	ldrb	r3, [r3, #20]
 80131f0:	2b02      	cmp	r3, #2
 80131f2:	d108      	bne.n	8013206 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80131f8:	4b97      	ldr	r3, [pc, #604]	; (8013458 <tcp_process+0x29c>)
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	429a      	cmp	r2, r3
 80131fe:	d123      	bne.n	8013248 <tcp_process+0x8c>
        acceptable = 1;
 8013200:	2301      	movs	r3, #1
 8013202:	76fb      	strb	r3, [r7, #27]
 8013204:	e020      	b.n	8013248 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801320a:	4b94      	ldr	r3, [pc, #592]	; (801345c <tcp_process+0x2a0>)
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	429a      	cmp	r2, r3
 8013210:	d102      	bne.n	8013218 <tcp_process+0x5c>
        acceptable = 1;
 8013212:	2301      	movs	r3, #1
 8013214:	76fb      	strb	r3, [r7, #27]
 8013216:	e017      	b.n	8013248 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013218:	4b90      	ldr	r3, [pc, #576]	; (801345c <tcp_process+0x2a0>)
 801321a:	681a      	ldr	r2, [r3, #0]
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013220:	1ad3      	subs	r3, r2, r3
 8013222:	2b00      	cmp	r3, #0
 8013224:	db10      	blt.n	8013248 <tcp_process+0x8c>
 8013226:	4b8d      	ldr	r3, [pc, #564]	; (801345c <tcp_process+0x2a0>)
 8013228:	681a      	ldr	r2, [r3, #0]
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801322e:	6879      	ldr	r1, [r7, #4]
 8013230:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013232:	440b      	add	r3, r1
 8013234:	1ad3      	subs	r3, r2, r3
 8013236:	2b00      	cmp	r3, #0
 8013238:	dc06      	bgt.n	8013248 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	8b5b      	ldrh	r3, [r3, #26]
 801323e:	f043 0302 	orr.w	r3, r3, #2
 8013242:	b29a      	uxth	r2, r3
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8013248:	7efb      	ldrb	r3, [r7, #27]
 801324a:	2b00      	cmp	r3, #0
 801324c:	d01b      	beq.n	8013286 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	7d1b      	ldrb	r3, [r3, #20]
 8013252:	2b00      	cmp	r3, #0
 8013254:	d106      	bne.n	8013264 <tcp_process+0xa8>
 8013256:	4b7c      	ldr	r3, [pc, #496]	; (8013448 <tcp_process+0x28c>)
 8013258:	f44f 724e 	mov.w	r2, #824	; 0x338
 801325c:	4980      	ldr	r1, [pc, #512]	; (8013460 <tcp_process+0x2a4>)
 801325e:	487c      	ldr	r0, [pc, #496]	; (8013450 <tcp_process+0x294>)
 8013260:	f003 fe58 	bl	8016f14 <iprintf>
      recv_flags |= TF_RESET;
 8013264:	4b7f      	ldr	r3, [pc, #508]	; (8013464 <tcp_process+0x2a8>)
 8013266:	781b      	ldrb	r3, [r3, #0]
 8013268:	f043 0308 	orr.w	r3, r3, #8
 801326c:	b2da      	uxtb	r2, r3
 801326e:	4b7d      	ldr	r3, [pc, #500]	; (8013464 <tcp_process+0x2a8>)
 8013270:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	8b5b      	ldrh	r3, [r3, #26]
 8013276:	f023 0301 	bic.w	r3, r3, #1
 801327a:	b29a      	uxth	r2, r3
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8013280:	f06f 030d 	mvn.w	r3, #13
 8013284:	e37a      	b.n	801397c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8013286:	2300      	movs	r3, #0
 8013288:	e378      	b.n	801397c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801328a:	4b72      	ldr	r3, [pc, #456]	; (8013454 <tcp_process+0x298>)
 801328c:	781b      	ldrb	r3, [r3, #0]
 801328e:	f003 0302 	and.w	r3, r3, #2
 8013292:	2b00      	cmp	r3, #0
 8013294:	d010      	beq.n	80132b8 <tcp_process+0xfc>
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	7d1b      	ldrb	r3, [r3, #20]
 801329a:	2b02      	cmp	r3, #2
 801329c:	d00c      	beq.n	80132b8 <tcp_process+0xfc>
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	7d1b      	ldrb	r3, [r3, #20]
 80132a2:	2b03      	cmp	r3, #3
 80132a4:	d008      	beq.n	80132b8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	8b5b      	ldrh	r3, [r3, #26]
 80132aa:	f043 0302 	orr.w	r3, r3, #2
 80132ae:	b29a      	uxth	r2, r3
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80132b4:	2300      	movs	r3, #0
 80132b6:	e361      	b.n	801397c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	8b5b      	ldrh	r3, [r3, #26]
 80132bc:	f003 0310 	and.w	r3, r3, #16
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d103      	bne.n	80132cc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80132c4:	4b68      	ldr	r3, [pc, #416]	; (8013468 <tcp_process+0x2ac>)
 80132c6:	681a      	ldr	r2, [r3, #0]
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	2200      	movs	r2, #0
 80132d0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	2200      	movs	r2, #0
 80132d8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80132dc:	6878      	ldr	r0, [r7, #4]
 80132de:	f001 fc2f 	bl	8014b40 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	7d1b      	ldrb	r3, [r3, #20]
 80132e6:	3b02      	subs	r3, #2
 80132e8:	2b07      	cmp	r3, #7
 80132ea:	f200 8337 	bhi.w	801395c <tcp_process+0x7a0>
 80132ee:	a201      	add	r2, pc, #4	; (adr r2, 80132f4 <tcp_process+0x138>)
 80132f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132f4:	08013315 	.word	0x08013315
 80132f8:	08013545 	.word	0x08013545
 80132fc:	080136bd 	.word	0x080136bd
 8013300:	080136e7 	.word	0x080136e7
 8013304:	0801380b 	.word	0x0801380b
 8013308:	080136bd 	.word	0x080136bd
 801330c:	08013897 	.word	0x08013897
 8013310:	08013927 	.word	0x08013927
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8013314:	4b4f      	ldr	r3, [pc, #316]	; (8013454 <tcp_process+0x298>)
 8013316:	781b      	ldrb	r3, [r3, #0]
 8013318:	f003 0310 	and.w	r3, r3, #16
 801331c:	2b00      	cmp	r3, #0
 801331e:	f000 80e4 	beq.w	80134ea <tcp_process+0x32e>
 8013322:	4b4c      	ldr	r3, [pc, #304]	; (8013454 <tcp_process+0x298>)
 8013324:	781b      	ldrb	r3, [r3, #0]
 8013326:	f003 0302 	and.w	r3, r3, #2
 801332a:	2b00      	cmp	r3, #0
 801332c:	f000 80dd 	beq.w	80134ea <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013334:	1c5a      	adds	r2, r3, #1
 8013336:	4b48      	ldr	r3, [pc, #288]	; (8013458 <tcp_process+0x29c>)
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	429a      	cmp	r2, r3
 801333c:	f040 80d5 	bne.w	80134ea <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8013340:	4b46      	ldr	r3, [pc, #280]	; (801345c <tcp_process+0x2a0>)
 8013342:	681b      	ldr	r3, [r3, #0]
 8013344:	1c5a      	adds	r2, r3, #1
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8013352:	4b41      	ldr	r3, [pc, #260]	; (8013458 <tcp_process+0x29c>)
 8013354:	681a      	ldr	r2, [r3, #0]
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801335a:	4b44      	ldr	r3, [pc, #272]	; (801346c <tcp_process+0x2b0>)
 801335c:	681b      	ldr	r3, [r3, #0]
 801335e:	89db      	ldrh	r3, [r3, #14]
 8013360:	b29a      	uxth	r2, r3
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8013374:	4b39      	ldr	r3, [pc, #228]	; (801345c <tcp_process+0x2a0>)
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	1e5a      	subs	r2, r3, #1
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	2204      	movs	r2, #4
 8013382:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	3304      	adds	r3, #4
 801338c:	4618      	mov	r0, r3
 801338e:	f7fa fd6d 	bl	800de6c <ip4_route>
 8013392:	4601      	mov	r1, r0
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	3304      	adds	r3, #4
 8013398:	461a      	mov	r2, r3
 801339a:	4620      	mov	r0, r4
 801339c:	f7ff f88c 	bl	80124b8 <tcp_eff_send_mss_netif>
 80133a0:	4603      	mov	r3, r0
 80133a2:	461a      	mov	r2, r3
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80133ac:	009a      	lsls	r2, r3, #2
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80133b2:	005b      	lsls	r3, r3, #1
 80133b4:	f241 111c 	movw	r1, #4380	; 0x111c
 80133b8:	428b      	cmp	r3, r1
 80133ba:	bf38      	it	cc
 80133bc:	460b      	movcc	r3, r1
 80133be:	429a      	cmp	r2, r3
 80133c0:	d204      	bcs.n	80133cc <tcp_process+0x210>
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80133c6:	009b      	lsls	r3, r3, #2
 80133c8:	b29b      	uxth	r3, r3
 80133ca:	e00d      	b.n	80133e8 <tcp_process+0x22c>
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80133d0:	005b      	lsls	r3, r3, #1
 80133d2:	f241 121c 	movw	r2, #4380	; 0x111c
 80133d6:	4293      	cmp	r3, r2
 80133d8:	d904      	bls.n	80133e4 <tcp_process+0x228>
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80133de:	005b      	lsls	r3, r3, #1
 80133e0:	b29b      	uxth	r3, r3
 80133e2:	e001      	b.n	80133e8 <tcp_process+0x22c>
 80133e4:	f241 131c 	movw	r3, #4380	; 0x111c
 80133e8:	687a      	ldr	r2, [r7, #4]
 80133ea:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d106      	bne.n	8013406 <tcp_process+0x24a>
 80133f8:	4b13      	ldr	r3, [pc, #76]	; (8013448 <tcp_process+0x28c>)
 80133fa:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80133fe:	491c      	ldr	r1, [pc, #112]	; (8013470 <tcp_process+0x2b4>)
 8013400:	4813      	ldr	r0, [pc, #76]	; (8013450 <tcp_process+0x294>)
 8013402:	f003 fd87 	bl	8016f14 <iprintf>
        --pcb->snd_queuelen;
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801340c:	3b01      	subs	r3, #1
 801340e:	b29a      	uxth	r2, r3
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801341a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801341c:	69fb      	ldr	r3, [r7, #28]
 801341e:	2b00      	cmp	r3, #0
 8013420:	d12a      	bne.n	8013478 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013426:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8013428:	69fb      	ldr	r3, [r7, #28]
 801342a:	2b00      	cmp	r3, #0
 801342c:	d106      	bne.n	801343c <tcp_process+0x280>
 801342e:	4b06      	ldr	r3, [pc, #24]	; (8013448 <tcp_process+0x28c>)
 8013430:	f44f 725d 	mov.w	r2, #884	; 0x374
 8013434:	490f      	ldr	r1, [pc, #60]	; (8013474 <tcp_process+0x2b8>)
 8013436:	4806      	ldr	r0, [pc, #24]	; (8013450 <tcp_process+0x294>)
 8013438:	f003 fd6c 	bl	8016f14 <iprintf>
          pcb->unsent = rseg->next;
 801343c:	69fb      	ldr	r3, [r7, #28]
 801343e:	681a      	ldr	r2, [r3, #0]
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	66da      	str	r2, [r3, #108]	; 0x6c
 8013444:	e01c      	b.n	8013480 <tcp_process+0x2c4>
 8013446:	bf00      	nop
 8013448:	08019958 	.word	0x08019958
 801344c:	08019bd0 	.word	0x08019bd0
 8013450:	080199e4 	.word	0x080199e4
 8013454:	24015570 	.word	0x24015570
 8013458:	24015568 	.word	0x24015568
 801345c:	24015564 	.word	0x24015564
 8013460:	08019bec 	.word	0x08019bec
 8013464:	24015571 	.word	0x24015571
 8013468:	2401552c 	.word	0x2401552c
 801346c:	24015554 	.word	0x24015554
 8013470:	08019c0c 	.word	0x08019c0c
 8013474:	08019c24 	.word	0x08019c24
        } else {
          pcb->unacked = rseg->next;
 8013478:	69fb      	ldr	r3, [r7, #28]
 801347a:	681a      	ldr	r2, [r3, #0]
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8013480:	69f8      	ldr	r0, [r7, #28]
 8013482:	f7fe fd22 	bl	8011eca <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801348a:	2b00      	cmp	r3, #0
 801348c:	d104      	bne.n	8013498 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013494:	861a      	strh	r2, [r3, #48]	; 0x30
 8013496:	e006      	b.n	80134a6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	2200      	movs	r2, #0
 801349c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	2200      	movs	r2, #0
 80134a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d00a      	beq.n	80134c6 <tcp_process+0x30a>
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80134b6:	687a      	ldr	r2, [r7, #4]
 80134b8:	6910      	ldr	r0, [r2, #16]
 80134ba:	2200      	movs	r2, #0
 80134bc:	6879      	ldr	r1, [r7, #4]
 80134be:	4798      	blx	r3
 80134c0:	4603      	mov	r3, r0
 80134c2:	76bb      	strb	r3, [r7, #26]
 80134c4:	e001      	b.n	80134ca <tcp_process+0x30e>
 80134c6:	2300      	movs	r3, #0
 80134c8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80134ca:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80134ce:	f113 0f0d 	cmn.w	r3, #13
 80134d2:	d102      	bne.n	80134da <tcp_process+0x31e>
          return ERR_ABRT;
 80134d4:	f06f 030c 	mvn.w	r3, #12
 80134d8:	e250      	b.n	801397c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	8b5b      	ldrh	r3, [r3, #26]
 80134de:	f043 0302 	orr.w	r3, r3, #2
 80134e2:	b29a      	uxth	r2, r3
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80134e8:	e23a      	b.n	8013960 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80134ea:	4b98      	ldr	r3, [pc, #608]	; (801374c <tcp_process+0x590>)
 80134ec:	781b      	ldrb	r3, [r3, #0]
 80134ee:	f003 0310 	and.w	r3, r3, #16
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	f000 8234 	beq.w	8013960 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80134f8:	4b95      	ldr	r3, [pc, #596]	; (8013750 <tcp_process+0x594>)
 80134fa:	6819      	ldr	r1, [r3, #0]
 80134fc:	4b95      	ldr	r3, [pc, #596]	; (8013754 <tcp_process+0x598>)
 80134fe:	881b      	ldrh	r3, [r3, #0]
 8013500:	461a      	mov	r2, r3
 8013502:	4b95      	ldr	r3, [pc, #596]	; (8013758 <tcp_process+0x59c>)
 8013504:	681b      	ldr	r3, [r3, #0]
 8013506:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013508:	4b94      	ldr	r3, [pc, #592]	; (801375c <tcp_process+0x5a0>)
 801350a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801350c:	885b      	ldrh	r3, [r3, #2]
 801350e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013510:	4a92      	ldr	r2, [pc, #584]	; (801375c <tcp_process+0x5a0>)
 8013512:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013514:	8812      	ldrh	r2, [r2, #0]
 8013516:	b292      	uxth	r2, r2
 8013518:	9202      	str	r2, [sp, #8]
 801351a:	9301      	str	r3, [sp, #4]
 801351c:	4b90      	ldr	r3, [pc, #576]	; (8013760 <tcp_process+0x5a4>)
 801351e:	9300      	str	r3, [sp, #0]
 8013520:	4b90      	ldr	r3, [pc, #576]	; (8013764 <tcp_process+0x5a8>)
 8013522:	4602      	mov	r2, r0
 8013524:	6878      	ldr	r0, [r7, #4]
 8013526:	f002 fc85 	bl	8015e34 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013530:	2b05      	cmp	r3, #5
 8013532:	f200 8215 	bhi.w	8013960 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	2200      	movs	r2, #0
 801353a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801353c:	6878      	ldr	r0, [r7, #4]
 801353e:	f002 fa4f 	bl	80159e0 <tcp_rexmit_rto>
      break;
 8013542:	e20d      	b.n	8013960 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8013544:	4b81      	ldr	r3, [pc, #516]	; (801374c <tcp_process+0x590>)
 8013546:	781b      	ldrb	r3, [r3, #0]
 8013548:	f003 0310 	and.w	r3, r3, #16
 801354c:	2b00      	cmp	r3, #0
 801354e:	f000 80a1 	beq.w	8013694 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013552:	4b7f      	ldr	r3, [pc, #508]	; (8013750 <tcp_process+0x594>)
 8013554:	681a      	ldr	r2, [r3, #0]
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801355a:	1ad3      	subs	r3, r2, r3
 801355c:	3b01      	subs	r3, #1
 801355e:	2b00      	cmp	r3, #0
 8013560:	db7e      	blt.n	8013660 <tcp_process+0x4a4>
 8013562:	4b7b      	ldr	r3, [pc, #492]	; (8013750 <tcp_process+0x594>)
 8013564:	681a      	ldr	r2, [r3, #0]
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801356a:	1ad3      	subs	r3, r2, r3
 801356c:	2b00      	cmp	r3, #0
 801356e:	dc77      	bgt.n	8013660 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	2204      	movs	r2, #4
 8013574:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801357a:	2b00      	cmp	r3, #0
 801357c:	d102      	bne.n	8013584 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801357e:	23fa      	movs	r3, #250	; 0xfa
 8013580:	76bb      	strb	r3, [r7, #26]
 8013582:	e01d      	b.n	80135c0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013588:	699b      	ldr	r3, [r3, #24]
 801358a:	2b00      	cmp	r3, #0
 801358c:	d106      	bne.n	801359c <tcp_process+0x3e0>
 801358e:	4b76      	ldr	r3, [pc, #472]	; (8013768 <tcp_process+0x5ac>)
 8013590:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8013594:	4975      	ldr	r1, [pc, #468]	; (801376c <tcp_process+0x5b0>)
 8013596:	4876      	ldr	r0, [pc, #472]	; (8013770 <tcp_process+0x5b4>)
 8013598:	f003 fcbc 	bl	8016f14 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80135a0:	699b      	ldr	r3, [r3, #24]
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d00a      	beq.n	80135bc <tcp_process+0x400>
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80135aa:	699b      	ldr	r3, [r3, #24]
 80135ac:	687a      	ldr	r2, [r7, #4]
 80135ae:	6910      	ldr	r0, [r2, #16]
 80135b0:	2200      	movs	r2, #0
 80135b2:	6879      	ldr	r1, [r7, #4]
 80135b4:	4798      	blx	r3
 80135b6:	4603      	mov	r3, r0
 80135b8:	76bb      	strb	r3, [r7, #26]
 80135ba:	e001      	b.n	80135c0 <tcp_process+0x404>
 80135bc:	23f0      	movs	r3, #240	; 0xf0
 80135be:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80135c0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d00a      	beq.n	80135de <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80135c8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80135cc:	f113 0f0d 	cmn.w	r3, #13
 80135d0:	d002      	beq.n	80135d8 <tcp_process+0x41c>
              tcp_abort(pcb);
 80135d2:	6878      	ldr	r0, [r7, #4]
 80135d4:	f7fd ff8e 	bl	80114f4 <tcp_abort>
            }
            return ERR_ABRT;
 80135d8:	f06f 030c 	mvn.w	r3, #12
 80135dc:	e1ce      	b.n	801397c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80135de:	6878      	ldr	r0, [r7, #4]
 80135e0:	f000 fae0 	bl	8013ba4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80135e4:	4b63      	ldr	r3, [pc, #396]	; (8013774 <tcp_process+0x5b8>)
 80135e6:	881b      	ldrh	r3, [r3, #0]
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d005      	beq.n	80135f8 <tcp_process+0x43c>
            recv_acked--;
 80135ec:	4b61      	ldr	r3, [pc, #388]	; (8013774 <tcp_process+0x5b8>)
 80135ee:	881b      	ldrh	r3, [r3, #0]
 80135f0:	3b01      	subs	r3, #1
 80135f2:	b29a      	uxth	r2, r3
 80135f4:	4b5f      	ldr	r3, [pc, #380]	; (8013774 <tcp_process+0x5b8>)
 80135f6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80135fc:	009a      	lsls	r2, r3, #2
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013602:	005b      	lsls	r3, r3, #1
 8013604:	f241 111c 	movw	r1, #4380	; 0x111c
 8013608:	428b      	cmp	r3, r1
 801360a:	bf38      	it	cc
 801360c:	460b      	movcc	r3, r1
 801360e:	429a      	cmp	r2, r3
 8013610:	d204      	bcs.n	801361c <tcp_process+0x460>
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013616:	009b      	lsls	r3, r3, #2
 8013618:	b29b      	uxth	r3, r3
 801361a:	e00d      	b.n	8013638 <tcp_process+0x47c>
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013620:	005b      	lsls	r3, r3, #1
 8013622:	f241 121c 	movw	r2, #4380	; 0x111c
 8013626:	4293      	cmp	r3, r2
 8013628:	d904      	bls.n	8013634 <tcp_process+0x478>
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801362e:	005b      	lsls	r3, r3, #1
 8013630:	b29b      	uxth	r3, r3
 8013632:	e001      	b.n	8013638 <tcp_process+0x47c>
 8013634:	f241 131c 	movw	r3, #4380	; 0x111c
 8013638:	687a      	ldr	r2, [r7, #4]
 801363a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801363e:	4b4e      	ldr	r3, [pc, #312]	; (8013778 <tcp_process+0x5bc>)
 8013640:	781b      	ldrb	r3, [r3, #0]
 8013642:	f003 0320 	and.w	r3, r3, #32
 8013646:	2b00      	cmp	r3, #0
 8013648:	d037      	beq.n	80136ba <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	8b5b      	ldrh	r3, [r3, #26]
 801364e:	f043 0302 	orr.w	r3, r3, #2
 8013652:	b29a      	uxth	r2, r3
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	2207      	movs	r2, #7
 801365c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801365e:	e02c      	b.n	80136ba <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013660:	4b3b      	ldr	r3, [pc, #236]	; (8013750 <tcp_process+0x594>)
 8013662:	6819      	ldr	r1, [r3, #0]
 8013664:	4b3b      	ldr	r3, [pc, #236]	; (8013754 <tcp_process+0x598>)
 8013666:	881b      	ldrh	r3, [r3, #0]
 8013668:	461a      	mov	r2, r3
 801366a:	4b3b      	ldr	r3, [pc, #236]	; (8013758 <tcp_process+0x59c>)
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013670:	4b3a      	ldr	r3, [pc, #232]	; (801375c <tcp_process+0x5a0>)
 8013672:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013674:	885b      	ldrh	r3, [r3, #2]
 8013676:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013678:	4a38      	ldr	r2, [pc, #224]	; (801375c <tcp_process+0x5a0>)
 801367a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801367c:	8812      	ldrh	r2, [r2, #0]
 801367e:	b292      	uxth	r2, r2
 8013680:	9202      	str	r2, [sp, #8]
 8013682:	9301      	str	r3, [sp, #4]
 8013684:	4b36      	ldr	r3, [pc, #216]	; (8013760 <tcp_process+0x5a4>)
 8013686:	9300      	str	r3, [sp, #0]
 8013688:	4b36      	ldr	r3, [pc, #216]	; (8013764 <tcp_process+0x5a8>)
 801368a:	4602      	mov	r2, r0
 801368c:	6878      	ldr	r0, [r7, #4]
 801368e:	f002 fbd1 	bl	8015e34 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8013692:	e167      	b.n	8013964 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8013694:	4b2d      	ldr	r3, [pc, #180]	; (801374c <tcp_process+0x590>)
 8013696:	781b      	ldrb	r3, [r3, #0]
 8013698:	f003 0302 	and.w	r3, r3, #2
 801369c:	2b00      	cmp	r3, #0
 801369e:	f000 8161 	beq.w	8013964 <tcp_process+0x7a8>
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136a6:	1e5a      	subs	r2, r3, #1
 80136a8:	4b2b      	ldr	r3, [pc, #172]	; (8013758 <tcp_process+0x59c>)
 80136aa:	681b      	ldr	r3, [r3, #0]
 80136ac:	429a      	cmp	r2, r3
 80136ae:	f040 8159 	bne.w	8013964 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80136b2:	6878      	ldr	r0, [r7, #4]
 80136b4:	f002 f9b6 	bl	8015a24 <tcp_rexmit>
      break;
 80136b8:	e154      	b.n	8013964 <tcp_process+0x7a8>
 80136ba:	e153      	b.n	8013964 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80136bc:	6878      	ldr	r0, [r7, #4]
 80136be:	f000 fa71 	bl	8013ba4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80136c2:	4b2d      	ldr	r3, [pc, #180]	; (8013778 <tcp_process+0x5bc>)
 80136c4:	781b      	ldrb	r3, [r3, #0]
 80136c6:	f003 0320 	and.w	r3, r3, #32
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	f000 814c 	beq.w	8013968 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	8b5b      	ldrh	r3, [r3, #26]
 80136d4:	f043 0302 	orr.w	r3, r3, #2
 80136d8:	b29a      	uxth	r2, r3
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	2207      	movs	r2, #7
 80136e2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80136e4:	e140      	b.n	8013968 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80136e6:	6878      	ldr	r0, [r7, #4]
 80136e8:	f000 fa5c 	bl	8013ba4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80136ec:	4b22      	ldr	r3, [pc, #136]	; (8013778 <tcp_process+0x5bc>)
 80136ee:	781b      	ldrb	r3, [r3, #0]
 80136f0:	f003 0320 	and.w	r3, r3, #32
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d071      	beq.n	80137dc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80136f8:	4b14      	ldr	r3, [pc, #80]	; (801374c <tcp_process+0x590>)
 80136fa:	781b      	ldrb	r3, [r3, #0]
 80136fc:	f003 0310 	and.w	r3, r3, #16
 8013700:	2b00      	cmp	r3, #0
 8013702:	d060      	beq.n	80137c6 <tcp_process+0x60a>
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013708:	4b11      	ldr	r3, [pc, #68]	; (8013750 <tcp_process+0x594>)
 801370a:	681b      	ldr	r3, [r3, #0]
 801370c:	429a      	cmp	r2, r3
 801370e:	d15a      	bne.n	80137c6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013714:	2b00      	cmp	r3, #0
 8013716:	d156      	bne.n	80137c6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	8b5b      	ldrh	r3, [r3, #26]
 801371c:	f043 0302 	orr.w	r3, r3, #2
 8013720:	b29a      	uxth	r2, r3
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8013726:	6878      	ldr	r0, [r7, #4]
 8013728:	f7fe fdbc 	bl	80122a4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801372c:	4b13      	ldr	r3, [pc, #76]	; (801377c <tcp_process+0x5c0>)
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	687a      	ldr	r2, [r7, #4]
 8013732:	429a      	cmp	r2, r3
 8013734:	d105      	bne.n	8013742 <tcp_process+0x586>
 8013736:	4b11      	ldr	r3, [pc, #68]	; (801377c <tcp_process+0x5c0>)
 8013738:	681b      	ldr	r3, [r3, #0]
 801373a:	68db      	ldr	r3, [r3, #12]
 801373c:	4a0f      	ldr	r2, [pc, #60]	; (801377c <tcp_process+0x5c0>)
 801373e:	6013      	str	r3, [r2, #0]
 8013740:	e02e      	b.n	80137a0 <tcp_process+0x5e4>
 8013742:	4b0e      	ldr	r3, [pc, #56]	; (801377c <tcp_process+0x5c0>)
 8013744:	681b      	ldr	r3, [r3, #0]
 8013746:	617b      	str	r3, [r7, #20]
 8013748:	e027      	b.n	801379a <tcp_process+0x5de>
 801374a:	bf00      	nop
 801374c:	24015570 	.word	0x24015570
 8013750:	24015568 	.word	0x24015568
 8013754:	2401556e 	.word	0x2401556e
 8013758:	24015564 	.word	0x24015564
 801375c:	24015554 	.word	0x24015554
 8013760:	2401242c 	.word	0x2401242c
 8013764:	24012430 	.word	0x24012430
 8013768:	08019958 	.word	0x08019958
 801376c:	08019c38 	.word	0x08019c38
 8013770:	080199e4 	.word	0x080199e4
 8013774:	2401556c 	.word	0x2401556c
 8013778:	24015571 	.word	0x24015571
 801377c:	24015538 	.word	0x24015538
 8013780:	697b      	ldr	r3, [r7, #20]
 8013782:	68db      	ldr	r3, [r3, #12]
 8013784:	687a      	ldr	r2, [r7, #4]
 8013786:	429a      	cmp	r2, r3
 8013788:	d104      	bne.n	8013794 <tcp_process+0x5d8>
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	68da      	ldr	r2, [r3, #12]
 801378e:	697b      	ldr	r3, [r7, #20]
 8013790:	60da      	str	r2, [r3, #12]
 8013792:	e005      	b.n	80137a0 <tcp_process+0x5e4>
 8013794:	697b      	ldr	r3, [r7, #20]
 8013796:	68db      	ldr	r3, [r3, #12]
 8013798:	617b      	str	r3, [r7, #20]
 801379a:	697b      	ldr	r3, [r7, #20]
 801379c:	2b00      	cmp	r3, #0
 801379e:	d1ef      	bne.n	8013780 <tcp_process+0x5c4>
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	2200      	movs	r2, #0
 80137a4:	60da      	str	r2, [r3, #12]
 80137a6:	4b77      	ldr	r3, [pc, #476]	; (8013984 <tcp_process+0x7c8>)
 80137a8:	2201      	movs	r2, #1
 80137aa:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	220a      	movs	r2, #10
 80137b0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80137b2:	4b75      	ldr	r3, [pc, #468]	; (8013988 <tcp_process+0x7cc>)
 80137b4:	681a      	ldr	r2, [r3, #0]
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	60da      	str	r2, [r3, #12]
 80137ba:	4a73      	ldr	r2, [pc, #460]	; (8013988 <tcp_process+0x7cc>)
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	6013      	str	r3, [r2, #0]
 80137c0:	f002 fe9c 	bl	80164fc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80137c4:	e0d2      	b.n	801396c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	8b5b      	ldrh	r3, [r3, #26]
 80137ca:	f043 0302 	orr.w	r3, r3, #2
 80137ce:	b29a      	uxth	r2, r3
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	2208      	movs	r2, #8
 80137d8:	751a      	strb	r2, [r3, #20]
      break;
 80137da:	e0c7      	b.n	801396c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80137dc:	4b6b      	ldr	r3, [pc, #428]	; (801398c <tcp_process+0x7d0>)
 80137de:	781b      	ldrb	r3, [r3, #0]
 80137e0:	f003 0310 	and.w	r3, r3, #16
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	f000 80c1 	beq.w	801396c <tcp_process+0x7b0>
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80137ee:	4b68      	ldr	r3, [pc, #416]	; (8013990 <tcp_process+0x7d4>)
 80137f0:	681b      	ldr	r3, [r3, #0]
 80137f2:	429a      	cmp	r2, r3
 80137f4:	f040 80ba 	bne.w	801396c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	f040 80b5 	bne.w	801396c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	2206      	movs	r2, #6
 8013806:	751a      	strb	r2, [r3, #20]
      break;
 8013808:	e0b0      	b.n	801396c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801380a:	6878      	ldr	r0, [r7, #4]
 801380c:	f000 f9ca 	bl	8013ba4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013810:	4b60      	ldr	r3, [pc, #384]	; (8013994 <tcp_process+0x7d8>)
 8013812:	781b      	ldrb	r3, [r3, #0]
 8013814:	f003 0320 	and.w	r3, r3, #32
 8013818:	2b00      	cmp	r3, #0
 801381a:	f000 80a9 	beq.w	8013970 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	8b5b      	ldrh	r3, [r3, #26]
 8013822:	f043 0302 	orr.w	r3, r3, #2
 8013826:	b29a      	uxth	r2, r3
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801382c:	6878      	ldr	r0, [r7, #4]
 801382e:	f7fe fd39 	bl	80122a4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013832:	4b59      	ldr	r3, [pc, #356]	; (8013998 <tcp_process+0x7dc>)
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	687a      	ldr	r2, [r7, #4]
 8013838:	429a      	cmp	r2, r3
 801383a:	d105      	bne.n	8013848 <tcp_process+0x68c>
 801383c:	4b56      	ldr	r3, [pc, #344]	; (8013998 <tcp_process+0x7dc>)
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	68db      	ldr	r3, [r3, #12]
 8013842:	4a55      	ldr	r2, [pc, #340]	; (8013998 <tcp_process+0x7dc>)
 8013844:	6013      	str	r3, [r2, #0]
 8013846:	e013      	b.n	8013870 <tcp_process+0x6b4>
 8013848:	4b53      	ldr	r3, [pc, #332]	; (8013998 <tcp_process+0x7dc>)
 801384a:	681b      	ldr	r3, [r3, #0]
 801384c:	613b      	str	r3, [r7, #16]
 801384e:	e00c      	b.n	801386a <tcp_process+0x6ae>
 8013850:	693b      	ldr	r3, [r7, #16]
 8013852:	68db      	ldr	r3, [r3, #12]
 8013854:	687a      	ldr	r2, [r7, #4]
 8013856:	429a      	cmp	r2, r3
 8013858:	d104      	bne.n	8013864 <tcp_process+0x6a8>
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	68da      	ldr	r2, [r3, #12]
 801385e:	693b      	ldr	r3, [r7, #16]
 8013860:	60da      	str	r2, [r3, #12]
 8013862:	e005      	b.n	8013870 <tcp_process+0x6b4>
 8013864:	693b      	ldr	r3, [r7, #16]
 8013866:	68db      	ldr	r3, [r3, #12]
 8013868:	613b      	str	r3, [r7, #16]
 801386a:	693b      	ldr	r3, [r7, #16]
 801386c:	2b00      	cmp	r3, #0
 801386e:	d1ef      	bne.n	8013850 <tcp_process+0x694>
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	2200      	movs	r2, #0
 8013874:	60da      	str	r2, [r3, #12]
 8013876:	4b43      	ldr	r3, [pc, #268]	; (8013984 <tcp_process+0x7c8>)
 8013878:	2201      	movs	r2, #1
 801387a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	220a      	movs	r2, #10
 8013880:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013882:	4b41      	ldr	r3, [pc, #260]	; (8013988 <tcp_process+0x7cc>)
 8013884:	681a      	ldr	r2, [r3, #0]
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	60da      	str	r2, [r3, #12]
 801388a:	4a3f      	ldr	r2, [pc, #252]	; (8013988 <tcp_process+0x7cc>)
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	6013      	str	r3, [r2, #0]
 8013890:	f002 fe34 	bl	80164fc <tcp_timer_needed>
      }
      break;
 8013894:	e06c      	b.n	8013970 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8013896:	6878      	ldr	r0, [r7, #4]
 8013898:	f000 f984 	bl	8013ba4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801389c:	4b3b      	ldr	r3, [pc, #236]	; (801398c <tcp_process+0x7d0>)
 801389e:	781b      	ldrb	r3, [r3, #0]
 80138a0:	f003 0310 	and.w	r3, r3, #16
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d065      	beq.n	8013974 <tcp_process+0x7b8>
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80138ac:	4b38      	ldr	r3, [pc, #224]	; (8013990 <tcp_process+0x7d4>)
 80138ae:	681b      	ldr	r3, [r3, #0]
 80138b0:	429a      	cmp	r2, r3
 80138b2:	d15f      	bne.n	8013974 <tcp_process+0x7b8>
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d15b      	bne.n	8013974 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80138bc:	6878      	ldr	r0, [r7, #4]
 80138be:	f7fe fcf1 	bl	80122a4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80138c2:	4b35      	ldr	r3, [pc, #212]	; (8013998 <tcp_process+0x7dc>)
 80138c4:	681b      	ldr	r3, [r3, #0]
 80138c6:	687a      	ldr	r2, [r7, #4]
 80138c8:	429a      	cmp	r2, r3
 80138ca:	d105      	bne.n	80138d8 <tcp_process+0x71c>
 80138cc:	4b32      	ldr	r3, [pc, #200]	; (8013998 <tcp_process+0x7dc>)
 80138ce:	681b      	ldr	r3, [r3, #0]
 80138d0:	68db      	ldr	r3, [r3, #12]
 80138d2:	4a31      	ldr	r2, [pc, #196]	; (8013998 <tcp_process+0x7dc>)
 80138d4:	6013      	str	r3, [r2, #0]
 80138d6:	e013      	b.n	8013900 <tcp_process+0x744>
 80138d8:	4b2f      	ldr	r3, [pc, #188]	; (8013998 <tcp_process+0x7dc>)
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	60fb      	str	r3, [r7, #12]
 80138de:	e00c      	b.n	80138fa <tcp_process+0x73e>
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	68db      	ldr	r3, [r3, #12]
 80138e4:	687a      	ldr	r2, [r7, #4]
 80138e6:	429a      	cmp	r2, r3
 80138e8:	d104      	bne.n	80138f4 <tcp_process+0x738>
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	68da      	ldr	r2, [r3, #12]
 80138ee:	68fb      	ldr	r3, [r7, #12]
 80138f0:	60da      	str	r2, [r3, #12]
 80138f2:	e005      	b.n	8013900 <tcp_process+0x744>
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	68db      	ldr	r3, [r3, #12]
 80138f8:	60fb      	str	r3, [r7, #12]
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d1ef      	bne.n	80138e0 <tcp_process+0x724>
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	2200      	movs	r2, #0
 8013904:	60da      	str	r2, [r3, #12]
 8013906:	4b1f      	ldr	r3, [pc, #124]	; (8013984 <tcp_process+0x7c8>)
 8013908:	2201      	movs	r2, #1
 801390a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	220a      	movs	r2, #10
 8013910:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013912:	4b1d      	ldr	r3, [pc, #116]	; (8013988 <tcp_process+0x7cc>)
 8013914:	681a      	ldr	r2, [r3, #0]
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	60da      	str	r2, [r3, #12]
 801391a:	4a1b      	ldr	r2, [pc, #108]	; (8013988 <tcp_process+0x7cc>)
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	6013      	str	r3, [r2, #0]
 8013920:	f002 fdec 	bl	80164fc <tcp_timer_needed>
      }
      break;
 8013924:	e026      	b.n	8013974 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8013926:	6878      	ldr	r0, [r7, #4]
 8013928:	f000 f93c 	bl	8013ba4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801392c:	4b17      	ldr	r3, [pc, #92]	; (801398c <tcp_process+0x7d0>)
 801392e:	781b      	ldrb	r3, [r3, #0]
 8013930:	f003 0310 	and.w	r3, r3, #16
 8013934:	2b00      	cmp	r3, #0
 8013936:	d01f      	beq.n	8013978 <tcp_process+0x7bc>
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801393c:	4b14      	ldr	r3, [pc, #80]	; (8013990 <tcp_process+0x7d4>)
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	429a      	cmp	r2, r3
 8013942:	d119      	bne.n	8013978 <tcp_process+0x7bc>
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013948:	2b00      	cmp	r3, #0
 801394a:	d115      	bne.n	8013978 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801394c:	4b11      	ldr	r3, [pc, #68]	; (8013994 <tcp_process+0x7d8>)
 801394e:	781b      	ldrb	r3, [r3, #0]
 8013950:	f043 0310 	orr.w	r3, r3, #16
 8013954:	b2da      	uxtb	r2, r3
 8013956:	4b0f      	ldr	r3, [pc, #60]	; (8013994 <tcp_process+0x7d8>)
 8013958:	701a      	strb	r2, [r3, #0]
      }
      break;
 801395a:	e00d      	b.n	8013978 <tcp_process+0x7bc>
    default:
      break;
 801395c:	bf00      	nop
 801395e:	e00c      	b.n	801397a <tcp_process+0x7be>
      break;
 8013960:	bf00      	nop
 8013962:	e00a      	b.n	801397a <tcp_process+0x7be>
      break;
 8013964:	bf00      	nop
 8013966:	e008      	b.n	801397a <tcp_process+0x7be>
      break;
 8013968:	bf00      	nop
 801396a:	e006      	b.n	801397a <tcp_process+0x7be>
      break;
 801396c:	bf00      	nop
 801396e:	e004      	b.n	801397a <tcp_process+0x7be>
      break;
 8013970:	bf00      	nop
 8013972:	e002      	b.n	801397a <tcp_process+0x7be>
      break;
 8013974:	bf00      	nop
 8013976:	e000      	b.n	801397a <tcp_process+0x7be>
      break;
 8013978:	bf00      	nop
  }
  return ERR_OK;
 801397a:	2300      	movs	r3, #0
}
 801397c:	4618      	mov	r0, r3
 801397e:	3724      	adds	r7, #36	; 0x24
 8013980:	46bd      	mov	sp, r7
 8013982:	bd90      	pop	{r4, r7, pc}
 8013984:	24015540 	.word	0x24015540
 8013988:	2401553c 	.word	0x2401553c
 801398c:	24015570 	.word	0x24015570
 8013990:	24015568 	.word	0x24015568
 8013994:	24015571 	.word	0x24015571
 8013998:	24015538 	.word	0x24015538

0801399c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801399c:	b590      	push	{r4, r7, lr}
 801399e:	b085      	sub	sp, #20
 80139a0:	af00      	add	r7, sp, #0
 80139a2:	6078      	str	r0, [r7, #4]
 80139a4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d106      	bne.n	80139ba <tcp_oos_insert_segment+0x1e>
 80139ac:	4b3b      	ldr	r3, [pc, #236]	; (8013a9c <tcp_oos_insert_segment+0x100>)
 80139ae:	f240 421f 	movw	r2, #1055	; 0x41f
 80139b2:	493b      	ldr	r1, [pc, #236]	; (8013aa0 <tcp_oos_insert_segment+0x104>)
 80139b4:	483b      	ldr	r0, [pc, #236]	; (8013aa4 <tcp_oos_insert_segment+0x108>)
 80139b6:	f003 faad 	bl	8016f14 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	68db      	ldr	r3, [r3, #12]
 80139be:	899b      	ldrh	r3, [r3, #12]
 80139c0:	b29b      	uxth	r3, r3
 80139c2:	4618      	mov	r0, r3
 80139c4:	f7f8 ff7a 	bl	800c8bc <lwip_htons>
 80139c8:	4603      	mov	r3, r0
 80139ca:	b2db      	uxtb	r3, r3
 80139cc:	f003 0301 	and.w	r3, r3, #1
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d028      	beq.n	8013a26 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80139d4:	6838      	ldr	r0, [r7, #0]
 80139d6:	f7fe fa63 	bl	8011ea0 <tcp_segs_free>
    next = NULL;
 80139da:	2300      	movs	r3, #0
 80139dc:	603b      	str	r3, [r7, #0]
 80139de:	e056      	b.n	8013a8e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80139e0:	683b      	ldr	r3, [r7, #0]
 80139e2:	68db      	ldr	r3, [r3, #12]
 80139e4:	899b      	ldrh	r3, [r3, #12]
 80139e6:	b29b      	uxth	r3, r3
 80139e8:	4618      	mov	r0, r3
 80139ea:	f7f8 ff67 	bl	800c8bc <lwip_htons>
 80139ee:	4603      	mov	r3, r0
 80139f0:	b2db      	uxtb	r3, r3
 80139f2:	f003 0301 	and.w	r3, r3, #1
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d00d      	beq.n	8013a16 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	68db      	ldr	r3, [r3, #12]
 80139fe:	899b      	ldrh	r3, [r3, #12]
 8013a00:	b29c      	uxth	r4, r3
 8013a02:	2001      	movs	r0, #1
 8013a04:	f7f8 ff5a 	bl	800c8bc <lwip_htons>
 8013a08:	4603      	mov	r3, r0
 8013a0a:	461a      	mov	r2, r3
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	68db      	ldr	r3, [r3, #12]
 8013a10:	4322      	orrs	r2, r4
 8013a12:	b292      	uxth	r2, r2
 8013a14:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8013a16:	683b      	ldr	r3, [r7, #0]
 8013a18:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8013a1a:	683b      	ldr	r3, [r7, #0]
 8013a1c:	681b      	ldr	r3, [r3, #0]
 8013a1e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8013a20:	68f8      	ldr	r0, [r7, #12]
 8013a22:	f7fe fa52 	bl	8011eca <tcp_seg_free>
    while (next &&
 8013a26:	683b      	ldr	r3, [r7, #0]
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d00e      	beq.n	8013a4a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	891b      	ldrh	r3, [r3, #8]
 8013a30:	461a      	mov	r2, r3
 8013a32:	4b1d      	ldr	r3, [pc, #116]	; (8013aa8 <tcp_oos_insert_segment+0x10c>)
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	441a      	add	r2, r3
 8013a38:	683b      	ldr	r3, [r7, #0]
 8013a3a:	68db      	ldr	r3, [r3, #12]
 8013a3c:	685b      	ldr	r3, [r3, #4]
 8013a3e:	6839      	ldr	r1, [r7, #0]
 8013a40:	8909      	ldrh	r1, [r1, #8]
 8013a42:	440b      	add	r3, r1
 8013a44:	1ad3      	subs	r3, r2, r3
    while (next &&
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	daca      	bge.n	80139e0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8013a4a:	683b      	ldr	r3, [r7, #0]
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d01e      	beq.n	8013a8e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	891b      	ldrh	r3, [r3, #8]
 8013a54:	461a      	mov	r2, r3
 8013a56:	4b14      	ldr	r3, [pc, #80]	; (8013aa8 <tcp_oos_insert_segment+0x10c>)
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	441a      	add	r2, r3
 8013a5c:	683b      	ldr	r3, [r7, #0]
 8013a5e:	68db      	ldr	r3, [r3, #12]
 8013a60:	685b      	ldr	r3, [r3, #4]
 8013a62:	1ad3      	subs	r3, r2, r3
    if (next &&
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	dd12      	ble.n	8013a8e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8013a68:	683b      	ldr	r3, [r7, #0]
 8013a6a:	68db      	ldr	r3, [r3, #12]
 8013a6c:	685b      	ldr	r3, [r3, #4]
 8013a6e:	b29a      	uxth	r2, r3
 8013a70:	4b0d      	ldr	r3, [pc, #52]	; (8013aa8 <tcp_oos_insert_segment+0x10c>)
 8013a72:	681b      	ldr	r3, [r3, #0]
 8013a74:	b29b      	uxth	r3, r3
 8013a76:	1ad3      	subs	r3, r2, r3
 8013a78:	b29a      	uxth	r2, r3
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	685a      	ldr	r2, [r3, #4]
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	891b      	ldrh	r3, [r3, #8]
 8013a86:	4619      	mov	r1, r3
 8013a88:	4610      	mov	r0, r2
 8013a8a:	f7fc fd27 	bl	80104dc <pbuf_realloc>
    }
  }
  cseg->next = next;
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	683a      	ldr	r2, [r7, #0]
 8013a92:	601a      	str	r2, [r3, #0]
}
 8013a94:	bf00      	nop
 8013a96:	3714      	adds	r7, #20
 8013a98:	46bd      	mov	sp, r7
 8013a9a:	bd90      	pop	{r4, r7, pc}
 8013a9c:	08019958 	.word	0x08019958
 8013aa0:	08019c58 	.word	0x08019c58
 8013aa4:	080199e4 	.word	0x080199e4
 8013aa8:	24015564 	.word	0x24015564

08013aac <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8013aac:	b5b0      	push	{r4, r5, r7, lr}
 8013aae:	b086      	sub	sp, #24
 8013ab0:	af00      	add	r7, sp, #0
 8013ab2:	60f8      	str	r0, [r7, #12]
 8013ab4:	60b9      	str	r1, [r7, #8]
 8013ab6:	607a      	str	r2, [r7, #4]
 8013ab8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8013aba:	e03e      	b.n	8013b3a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8013abc:	68bb      	ldr	r3, [r7, #8]
 8013abe:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8013ac0:	68bb      	ldr	r3, [r7, #8]
 8013ac2:	681b      	ldr	r3, [r3, #0]
 8013ac4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8013ac6:	697b      	ldr	r3, [r7, #20]
 8013ac8:	685b      	ldr	r3, [r3, #4]
 8013aca:	4618      	mov	r0, r3
 8013acc:	f7fc ff1a 	bl	8010904 <pbuf_clen>
 8013ad0:	4603      	mov	r3, r0
 8013ad2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8013ad4:	68fb      	ldr	r3, [r7, #12]
 8013ad6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013ada:	8a7a      	ldrh	r2, [r7, #18]
 8013adc:	429a      	cmp	r2, r3
 8013ade:	d906      	bls.n	8013aee <tcp_free_acked_segments+0x42>
 8013ae0:	4b2a      	ldr	r3, [pc, #168]	; (8013b8c <tcp_free_acked_segments+0xe0>)
 8013ae2:	f240 4257 	movw	r2, #1111	; 0x457
 8013ae6:	492a      	ldr	r1, [pc, #168]	; (8013b90 <tcp_free_acked_segments+0xe4>)
 8013ae8:	482a      	ldr	r0, [pc, #168]	; (8013b94 <tcp_free_acked_segments+0xe8>)
 8013aea:	f003 fa13 	bl	8016f14 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8013aee:	68fb      	ldr	r3, [r7, #12]
 8013af0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8013af4:	8a7b      	ldrh	r3, [r7, #18]
 8013af6:	1ad3      	subs	r3, r2, r3
 8013af8:	b29a      	uxth	r2, r3
 8013afa:	68fb      	ldr	r3, [r7, #12]
 8013afc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8013b00:	697b      	ldr	r3, [r7, #20]
 8013b02:	891a      	ldrh	r2, [r3, #8]
 8013b04:	4b24      	ldr	r3, [pc, #144]	; (8013b98 <tcp_free_acked_segments+0xec>)
 8013b06:	881b      	ldrh	r3, [r3, #0]
 8013b08:	4413      	add	r3, r2
 8013b0a:	b29a      	uxth	r2, r3
 8013b0c:	4b22      	ldr	r3, [pc, #136]	; (8013b98 <tcp_free_acked_segments+0xec>)
 8013b0e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8013b10:	6978      	ldr	r0, [r7, #20]
 8013b12:	f7fe f9da 	bl	8011eca <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d00c      	beq.n	8013b3a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8013b20:	68bb      	ldr	r3, [r7, #8]
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d109      	bne.n	8013b3a <tcp_free_acked_segments+0x8e>
 8013b26:	683b      	ldr	r3, [r7, #0]
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d106      	bne.n	8013b3a <tcp_free_acked_segments+0x8e>
 8013b2c:	4b17      	ldr	r3, [pc, #92]	; (8013b8c <tcp_free_acked_segments+0xe0>)
 8013b2e:	f240 4261 	movw	r2, #1121	; 0x461
 8013b32:	491a      	ldr	r1, [pc, #104]	; (8013b9c <tcp_free_acked_segments+0xf0>)
 8013b34:	4817      	ldr	r0, [pc, #92]	; (8013b94 <tcp_free_acked_segments+0xe8>)
 8013b36:	f003 f9ed 	bl	8016f14 <iprintf>
  while (seg_list != NULL &&
 8013b3a:	68bb      	ldr	r3, [r7, #8]
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d020      	beq.n	8013b82 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8013b40:	68bb      	ldr	r3, [r7, #8]
 8013b42:	68db      	ldr	r3, [r3, #12]
 8013b44:	685b      	ldr	r3, [r3, #4]
 8013b46:	4618      	mov	r0, r3
 8013b48:	f7f8 fecd 	bl	800c8e6 <lwip_htonl>
 8013b4c:	4604      	mov	r4, r0
 8013b4e:	68bb      	ldr	r3, [r7, #8]
 8013b50:	891b      	ldrh	r3, [r3, #8]
 8013b52:	461d      	mov	r5, r3
 8013b54:	68bb      	ldr	r3, [r7, #8]
 8013b56:	68db      	ldr	r3, [r3, #12]
 8013b58:	899b      	ldrh	r3, [r3, #12]
 8013b5a:	b29b      	uxth	r3, r3
 8013b5c:	4618      	mov	r0, r3
 8013b5e:	f7f8 fead 	bl	800c8bc <lwip_htons>
 8013b62:	4603      	mov	r3, r0
 8013b64:	b2db      	uxtb	r3, r3
 8013b66:	f003 0303 	and.w	r3, r3, #3
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d001      	beq.n	8013b72 <tcp_free_acked_segments+0xc6>
 8013b6e:	2301      	movs	r3, #1
 8013b70:	e000      	b.n	8013b74 <tcp_free_acked_segments+0xc8>
 8013b72:	2300      	movs	r3, #0
 8013b74:	442b      	add	r3, r5
 8013b76:	18e2      	adds	r2, r4, r3
 8013b78:	4b09      	ldr	r3, [pc, #36]	; (8013ba0 <tcp_free_acked_segments+0xf4>)
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	dd9c      	ble.n	8013abc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8013b82:	68bb      	ldr	r3, [r7, #8]
}
 8013b84:	4618      	mov	r0, r3
 8013b86:	3718      	adds	r7, #24
 8013b88:	46bd      	mov	sp, r7
 8013b8a:	bdb0      	pop	{r4, r5, r7, pc}
 8013b8c:	08019958 	.word	0x08019958
 8013b90:	08019c80 	.word	0x08019c80
 8013b94:	080199e4 	.word	0x080199e4
 8013b98:	2401556c 	.word	0x2401556c
 8013b9c:	08019ca8 	.word	0x08019ca8
 8013ba0:	24015568 	.word	0x24015568

08013ba4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8013ba4:	b5b0      	push	{r4, r5, r7, lr}
 8013ba6:	b094      	sub	sp, #80	; 0x50
 8013ba8:	af00      	add	r7, sp, #0
 8013baa:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8013bac:	2300      	movs	r3, #0
 8013bae:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d106      	bne.n	8013bc4 <tcp_receive+0x20>
 8013bb6:	4b91      	ldr	r3, [pc, #580]	; (8013dfc <tcp_receive+0x258>)
 8013bb8:	f240 427b 	movw	r2, #1147	; 0x47b
 8013bbc:	4990      	ldr	r1, [pc, #576]	; (8013e00 <tcp_receive+0x25c>)
 8013bbe:	4891      	ldr	r0, [pc, #580]	; (8013e04 <tcp_receive+0x260>)
 8013bc0:	f003 f9a8 	bl	8016f14 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	7d1b      	ldrb	r3, [r3, #20]
 8013bc8:	2b03      	cmp	r3, #3
 8013bca:	d806      	bhi.n	8013bda <tcp_receive+0x36>
 8013bcc:	4b8b      	ldr	r3, [pc, #556]	; (8013dfc <tcp_receive+0x258>)
 8013bce:	f240 427c 	movw	r2, #1148	; 0x47c
 8013bd2:	498d      	ldr	r1, [pc, #564]	; (8013e08 <tcp_receive+0x264>)
 8013bd4:	488b      	ldr	r0, [pc, #556]	; (8013e04 <tcp_receive+0x260>)
 8013bd6:	f003 f99d 	bl	8016f14 <iprintf>

  if (flags & TCP_ACK) {
 8013bda:	4b8c      	ldr	r3, [pc, #560]	; (8013e0c <tcp_receive+0x268>)
 8013bdc:	781b      	ldrb	r3, [r3, #0]
 8013bde:	f003 0310 	and.w	r3, r3, #16
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	f000 8264 	beq.w	80140b0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013bee:	461a      	mov	r2, r3
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013bf4:	4413      	add	r3, r2
 8013bf6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013bfc:	4b84      	ldr	r3, [pc, #528]	; (8013e10 <tcp_receive+0x26c>)
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	1ad3      	subs	r3, r2, r3
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	db1b      	blt.n	8013c3e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013c0a:	4b81      	ldr	r3, [pc, #516]	; (8013e10 <tcp_receive+0x26c>)
 8013c0c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013c0e:	429a      	cmp	r2, r3
 8013c10:	d106      	bne.n	8013c20 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013c16:	4b7f      	ldr	r3, [pc, #508]	; (8013e14 <tcp_receive+0x270>)
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	1ad3      	subs	r3, r2, r3
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	db0e      	blt.n	8013c3e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013c24:	4b7b      	ldr	r3, [pc, #492]	; (8013e14 <tcp_receive+0x270>)
 8013c26:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013c28:	429a      	cmp	r2, r3
 8013c2a:	d125      	bne.n	8013c78 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013c2c:	4b7a      	ldr	r3, [pc, #488]	; (8013e18 <tcp_receive+0x274>)
 8013c2e:	681b      	ldr	r3, [r3, #0]
 8013c30:	89db      	ldrh	r3, [r3, #14]
 8013c32:	b29a      	uxth	r2, r3
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013c3a:	429a      	cmp	r2, r3
 8013c3c:	d91c      	bls.n	8013c78 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8013c3e:	4b76      	ldr	r3, [pc, #472]	; (8013e18 <tcp_receive+0x274>)
 8013c40:	681b      	ldr	r3, [r3, #0]
 8013c42:	89db      	ldrh	r3, [r3, #14]
 8013c44:	b29a      	uxth	r2, r3
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013c58:	429a      	cmp	r2, r3
 8013c5a:	d205      	bcs.n	8013c68 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8013c68:	4b69      	ldr	r3, [pc, #420]	; (8013e10 <tcp_receive+0x26c>)
 8013c6a:	681a      	ldr	r2, [r3, #0]
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8013c70:	4b68      	ldr	r3, [pc, #416]	; (8013e14 <tcp_receive+0x270>)
 8013c72:	681a      	ldr	r2, [r3, #0]
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8013c78:	4b66      	ldr	r3, [pc, #408]	; (8013e14 <tcp_receive+0x270>)
 8013c7a:	681a      	ldr	r2, [r3, #0]
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013c80:	1ad3      	subs	r3, r2, r3
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	dc58      	bgt.n	8013d38 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8013c86:	4b65      	ldr	r3, [pc, #404]	; (8013e1c <tcp_receive+0x278>)
 8013c88:	881b      	ldrh	r3, [r3, #0]
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d14b      	bne.n	8013d26 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013c92:	687a      	ldr	r2, [r7, #4]
 8013c94:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8013c98:	4413      	add	r3, r2
 8013c9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013c9c:	429a      	cmp	r2, r3
 8013c9e:	d142      	bne.n	8013d26 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	db3d      	blt.n	8013d26 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013cae:	4b59      	ldr	r3, [pc, #356]	; (8013e14 <tcp_receive+0x270>)
 8013cb0:	681b      	ldr	r3, [r3, #0]
 8013cb2:	429a      	cmp	r2, r3
 8013cb4:	d137      	bne.n	8013d26 <tcp_receive+0x182>
              found_dupack = 1;
 8013cb6:	2301      	movs	r3, #1
 8013cb8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013cc0:	2bff      	cmp	r3, #255	; 0xff
 8013cc2:	d007      	beq.n	8013cd4 <tcp_receive+0x130>
                ++pcb->dupacks;
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013cca:	3301      	adds	r3, #1
 8013ccc:	b2da      	uxtb	r2, r3
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013cda:	2b03      	cmp	r3, #3
 8013cdc:	d91b      	bls.n	8013d16 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013ce8:	4413      	add	r3, r2
 8013cea:	b29a      	uxth	r2, r3
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013cf2:	429a      	cmp	r2, r3
 8013cf4:	d30a      	bcc.n	8013d0c <tcp_receive+0x168>
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013d00:	4413      	add	r3, r2
 8013d02:	b29a      	uxth	r2, r3
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013d0a:	e004      	b.n	8013d16 <tcp_receive+0x172>
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013d12:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013d1c:	2b02      	cmp	r3, #2
 8013d1e:	d902      	bls.n	8013d26 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8013d20:	6878      	ldr	r0, [r7, #4]
 8013d22:	f001 feeb 	bl	8015afc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8013d26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	f040 8161 	bne.w	8013ff0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	2200      	movs	r2, #0
 8013d32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013d36:	e15b      	b.n	8013ff0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013d38:	4b36      	ldr	r3, [pc, #216]	; (8013e14 <tcp_receive+0x270>)
 8013d3a:	681a      	ldr	r2, [r3, #0]
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013d40:	1ad3      	subs	r3, r2, r3
 8013d42:	3b01      	subs	r3, #1
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	f2c0 814e 	blt.w	8013fe6 <tcp_receive+0x442>
 8013d4a:	4b32      	ldr	r3, [pc, #200]	; (8013e14 <tcp_receive+0x270>)
 8013d4c:	681a      	ldr	r2, [r3, #0]
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013d52:	1ad3      	subs	r3, r2, r3
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	f300 8146 	bgt.w	8013fe6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	8b5b      	ldrh	r3, [r3, #26]
 8013d5e:	f003 0304 	and.w	r3, r3, #4
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d010      	beq.n	8013d88 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	8b5b      	ldrh	r3, [r3, #26]
 8013d6a:	f023 0304 	bic.w	r3, r3, #4
 8013d6e:	b29a      	uxth	r2, r3
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	2200      	movs	r2, #0
 8013d84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	2200      	movs	r2, #0
 8013d8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013d96:	10db      	asrs	r3, r3, #3
 8013d98:	b21b      	sxth	r3, r3
 8013d9a:	b29a      	uxth	r2, r3
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013da2:	b29b      	uxth	r3, r3
 8013da4:	4413      	add	r3, r2
 8013da6:	b29b      	uxth	r3, r3
 8013da8:	b21a      	sxth	r2, r3
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8013db0:	4b18      	ldr	r3, [pc, #96]	; (8013e14 <tcp_receive+0x270>)
 8013db2:	681b      	ldr	r3, [r3, #0]
 8013db4:	b29a      	uxth	r2, r3
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013dba:	b29b      	uxth	r3, r3
 8013dbc:	1ad3      	subs	r3, r2, r3
 8013dbe:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	2200      	movs	r2, #0
 8013dc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8013dc8:	4b12      	ldr	r3, [pc, #72]	; (8013e14 <tcp_receive+0x270>)
 8013dca:	681a      	ldr	r2, [r3, #0]
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	7d1b      	ldrb	r3, [r3, #20]
 8013dd4:	2b03      	cmp	r3, #3
 8013dd6:	f240 8097 	bls.w	8013f08 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013de6:	429a      	cmp	r2, r3
 8013de8:	d245      	bcs.n	8013e76 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	8b5b      	ldrh	r3, [r3, #26]
 8013dee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d014      	beq.n	8013e20 <tcp_receive+0x27c>
 8013df6:	2301      	movs	r3, #1
 8013df8:	e013      	b.n	8013e22 <tcp_receive+0x27e>
 8013dfa:	bf00      	nop
 8013dfc:	08019958 	.word	0x08019958
 8013e00:	08019cc8 	.word	0x08019cc8
 8013e04:	080199e4 	.word	0x080199e4
 8013e08:	08019ce4 	.word	0x08019ce4
 8013e0c:	24015570 	.word	0x24015570
 8013e10:	24015564 	.word	0x24015564
 8013e14:	24015568 	.word	0x24015568
 8013e18:	24015554 	.word	0x24015554
 8013e1c:	2401556e 	.word	0x2401556e
 8013e20:	2302      	movs	r3, #2
 8013e22:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8013e26:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013e2a:	b29a      	uxth	r2, r3
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013e30:	fb12 f303 	smulbb	r3, r2, r3
 8013e34:	b29b      	uxth	r3, r3
 8013e36:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013e38:	4293      	cmp	r3, r2
 8013e3a:	bf28      	it	cs
 8013e3c:	4613      	movcs	r3, r2
 8013e3e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013e46:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013e48:	4413      	add	r3, r2
 8013e4a:	b29a      	uxth	r2, r3
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013e52:	429a      	cmp	r2, r3
 8013e54:	d309      	bcc.n	8013e6a <tcp_receive+0x2c6>
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013e5c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013e5e:	4413      	add	r3, r2
 8013e60:	b29a      	uxth	r2, r3
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013e68:	e04e      	b.n	8013f08 <tcp_receive+0x364>
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013e70:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013e74:	e048      	b.n	8013f08 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013e7c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013e7e:	4413      	add	r3, r2
 8013e80:	b29a      	uxth	r2, r3
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8013e88:	429a      	cmp	r2, r3
 8013e8a:	d309      	bcc.n	8013ea0 <tcp_receive+0x2fc>
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013e92:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013e94:	4413      	add	r3, r2
 8013e96:	b29a      	uxth	r2, r3
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8013e9e:	e004      	b.n	8013eaa <tcp_receive+0x306>
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013ea6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013eb6:	429a      	cmp	r2, r3
 8013eb8:	d326      	bcc.n	8013f08 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013ec6:	1ad3      	subs	r3, r2, r3
 8013ec8:	b29a      	uxth	r2, r3
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013eda:	4413      	add	r3, r2
 8013edc:	b29a      	uxth	r2, r3
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013ee4:	429a      	cmp	r2, r3
 8013ee6:	d30a      	bcc.n	8013efe <tcp_receive+0x35a>
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013ef2:	4413      	add	r3, r2
 8013ef4:	b29a      	uxth	r2, r3
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013efc:	e004      	b.n	8013f08 <tcp_receive+0x364>
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013f04:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f10:	4a98      	ldr	r2, [pc, #608]	; (8014174 <tcp_receive+0x5d0>)
 8013f12:	6878      	ldr	r0, [r7, #4]
 8013f14:	f7ff fdca 	bl	8013aac <tcp_free_acked_segments>
 8013f18:	4602      	mov	r2, r0
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f26:	4a94      	ldr	r2, [pc, #592]	; (8014178 <tcp_receive+0x5d4>)
 8013f28:	6878      	ldr	r0, [r7, #4]
 8013f2a:	f7ff fdbf 	bl	8013aac <tcp_free_acked_segments>
 8013f2e:	4602      	mov	r2, r0
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d104      	bne.n	8013f46 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013f42:	861a      	strh	r2, [r3, #48]	; 0x30
 8013f44:	e002      	b.n	8013f4c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	2200      	movs	r2, #0
 8013f4a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	2200      	movs	r2, #0
 8013f50:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d103      	bne.n	8013f62 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	2200      	movs	r2, #0
 8013f5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8013f68:	4b84      	ldr	r3, [pc, #528]	; (801417c <tcp_receive+0x5d8>)
 8013f6a:	881b      	ldrh	r3, [r3, #0]
 8013f6c:	4413      	add	r3, r2
 8013f6e:	b29a      	uxth	r2, r3
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	8b5b      	ldrh	r3, [r3, #26]
 8013f7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d035      	beq.n	8013fee <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d118      	bne.n	8013fbc <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d00c      	beq.n	8013fac <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f9a:	68db      	ldr	r3, [r3, #12]
 8013f9c:	685b      	ldr	r3, [r3, #4]
 8013f9e:	4618      	mov	r0, r3
 8013fa0:	f7f8 fca1 	bl	800c8e6 <lwip_htonl>
 8013fa4:	4603      	mov	r3, r0
 8013fa6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	dc20      	bgt.n	8013fee <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	8b5b      	ldrh	r3, [r3, #26]
 8013fb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013fb4:	b29a      	uxth	r2, r3
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013fba:	e018      	b.n	8013fee <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013fc4:	68db      	ldr	r3, [r3, #12]
 8013fc6:	685b      	ldr	r3, [r3, #4]
 8013fc8:	4618      	mov	r0, r3
 8013fca:	f7f8 fc8c 	bl	800c8e6 <lwip_htonl>
 8013fce:	4603      	mov	r3, r0
 8013fd0:	1ae3      	subs	r3, r4, r3
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	dc0b      	bgt.n	8013fee <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	8b5b      	ldrh	r3, [r3, #26]
 8013fda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013fde:	b29a      	uxth	r2, r3
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013fe4:	e003      	b.n	8013fee <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8013fe6:	6878      	ldr	r0, [r7, #4]
 8013fe8:	f001 ff76 	bl	8015ed8 <tcp_send_empty_ack>
 8013fec:	e000      	b.n	8013ff0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013fee:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d05b      	beq.n	80140b0 <tcp_receive+0x50c>
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013ffc:	4b60      	ldr	r3, [pc, #384]	; (8014180 <tcp_receive+0x5dc>)
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	1ad3      	subs	r3, r2, r3
 8014002:	2b00      	cmp	r3, #0
 8014004:	da54      	bge.n	80140b0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8014006:	4b5f      	ldr	r3, [pc, #380]	; (8014184 <tcp_receive+0x5e0>)
 8014008:	681b      	ldr	r3, [r3, #0]
 801400a:	b29a      	uxth	r2, r3
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014010:	b29b      	uxth	r3, r3
 8014012:	1ad3      	subs	r3, r2, r3
 8014014:	b29b      	uxth	r3, r3
 8014016:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801401a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014024:	10db      	asrs	r3, r3, #3
 8014026:	b21b      	sxth	r3, r3
 8014028:	b29b      	uxth	r3, r3
 801402a:	1ad3      	subs	r3, r2, r3
 801402c:	b29b      	uxth	r3, r3
 801402e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014038:	b29a      	uxth	r2, r3
 801403a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801403e:	4413      	add	r3, r2
 8014040:	b29b      	uxth	r3, r3
 8014042:	b21a      	sxth	r2, r3
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8014048:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801404c:	2b00      	cmp	r3, #0
 801404e:	da05      	bge.n	801405c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8014050:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014054:	425b      	negs	r3, r3
 8014056:	b29b      	uxth	r3, r3
 8014058:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801405c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014066:	109b      	asrs	r3, r3, #2
 8014068:	b21b      	sxth	r3, r3
 801406a:	b29b      	uxth	r3, r3
 801406c:	1ad3      	subs	r3, r2, r3
 801406e:	b29b      	uxth	r3, r3
 8014070:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801407a:	b29a      	uxth	r2, r3
 801407c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014080:	4413      	add	r3, r2
 8014082:	b29b      	uxth	r3, r3
 8014084:	b21a      	sxth	r2, r3
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014090:	10db      	asrs	r3, r3, #3
 8014092:	b21b      	sxth	r3, r3
 8014094:	b29a      	uxth	r2, r3
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801409c:	b29b      	uxth	r3, r3
 801409e:	4413      	add	r3, r2
 80140a0:	b29b      	uxth	r3, r3
 80140a2:	b21a      	sxth	r2, r3
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	2200      	movs	r2, #0
 80140ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80140b0:	4b35      	ldr	r3, [pc, #212]	; (8014188 <tcp_receive+0x5e4>)
 80140b2:	881b      	ldrh	r3, [r3, #0]
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	f000 84e2 	beq.w	8014a7e <tcp_receive+0xeda>
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	7d1b      	ldrb	r3, [r3, #20]
 80140be:	2b06      	cmp	r3, #6
 80140c0:	f200 84dd 	bhi.w	8014a7e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80140c8:	4b30      	ldr	r3, [pc, #192]	; (801418c <tcp_receive+0x5e8>)
 80140ca:	681b      	ldr	r3, [r3, #0]
 80140cc:	1ad3      	subs	r3, r2, r3
 80140ce:	3b01      	subs	r3, #1
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	f2c0 808f 	blt.w	80141f4 <tcp_receive+0x650>
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80140da:	4b2b      	ldr	r3, [pc, #172]	; (8014188 <tcp_receive+0x5e4>)
 80140dc:	881b      	ldrh	r3, [r3, #0]
 80140de:	4619      	mov	r1, r3
 80140e0:	4b2a      	ldr	r3, [pc, #168]	; (801418c <tcp_receive+0x5e8>)
 80140e2:	681b      	ldr	r3, [r3, #0]
 80140e4:	440b      	add	r3, r1
 80140e6:	1ad3      	subs	r3, r2, r3
 80140e8:	3301      	adds	r3, #1
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	f300 8082 	bgt.w	80141f4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80140f0:	4b27      	ldr	r3, [pc, #156]	; (8014190 <tcp_receive+0x5ec>)
 80140f2:	685b      	ldr	r3, [r3, #4]
 80140f4:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80140fa:	4b24      	ldr	r3, [pc, #144]	; (801418c <tcp_receive+0x5e8>)
 80140fc:	681b      	ldr	r3, [r3, #0]
 80140fe:	1ad3      	subs	r3, r2, r3
 8014100:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8014102:	4b23      	ldr	r3, [pc, #140]	; (8014190 <tcp_receive+0x5ec>)
 8014104:	685b      	ldr	r3, [r3, #4]
 8014106:	2b00      	cmp	r3, #0
 8014108:	d106      	bne.n	8014118 <tcp_receive+0x574>
 801410a:	4b22      	ldr	r3, [pc, #136]	; (8014194 <tcp_receive+0x5f0>)
 801410c:	f240 5294 	movw	r2, #1428	; 0x594
 8014110:	4921      	ldr	r1, [pc, #132]	; (8014198 <tcp_receive+0x5f4>)
 8014112:	4822      	ldr	r0, [pc, #136]	; (801419c <tcp_receive+0x5f8>)
 8014114:	f002 fefe 	bl	8016f14 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8014118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801411a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801411e:	4293      	cmp	r3, r2
 8014120:	d906      	bls.n	8014130 <tcp_receive+0x58c>
 8014122:	4b1c      	ldr	r3, [pc, #112]	; (8014194 <tcp_receive+0x5f0>)
 8014124:	f240 5295 	movw	r2, #1429	; 0x595
 8014128:	491d      	ldr	r1, [pc, #116]	; (80141a0 <tcp_receive+0x5fc>)
 801412a:	481c      	ldr	r0, [pc, #112]	; (801419c <tcp_receive+0x5f8>)
 801412c:	f002 fef2 	bl	8016f14 <iprintf>
      off = (u16_t)off32;
 8014130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014132:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8014136:	4b16      	ldr	r3, [pc, #88]	; (8014190 <tcp_receive+0x5ec>)
 8014138:	685b      	ldr	r3, [r3, #4]
 801413a:	891b      	ldrh	r3, [r3, #8]
 801413c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014140:	429a      	cmp	r2, r3
 8014142:	d906      	bls.n	8014152 <tcp_receive+0x5ae>
 8014144:	4b13      	ldr	r3, [pc, #76]	; (8014194 <tcp_receive+0x5f0>)
 8014146:	f240 5297 	movw	r2, #1431	; 0x597
 801414a:	4916      	ldr	r1, [pc, #88]	; (80141a4 <tcp_receive+0x600>)
 801414c:	4813      	ldr	r0, [pc, #76]	; (801419c <tcp_receive+0x5f8>)
 801414e:	f002 fee1 	bl	8016f14 <iprintf>
      inseg.len -= off;
 8014152:	4b0f      	ldr	r3, [pc, #60]	; (8014190 <tcp_receive+0x5ec>)
 8014154:	891a      	ldrh	r2, [r3, #8]
 8014156:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801415a:	1ad3      	subs	r3, r2, r3
 801415c:	b29a      	uxth	r2, r3
 801415e:	4b0c      	ldr	r3, [pc, #48]	; (8014190 <tcp_receive+0x5ec>)
 8014160:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8014162:	4b0b      	ldr	r3, [pc, #44]	; (8014190 <tcp_receive+0x5ec>)
 8014164:	685b      	ldr	r3, [r3, #4]
 8014166:	891a      	ldrh	r2, [r3, #8]
 8014168:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801416c:	1ad3      	subs	r3, r2, r3
 801416e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8014170:	e02a      	b.n	80141c8 <tcp_receive+0x624>
 8014172:	bf00      	nop
 8014174:	08019d00 	.word	0x08019d00
 8014178:	08019d08 	.word	0x08019d08
 801417c:	2401556c 	.word	0x2401556c
 8014180:	24015568 	.word	0x24015568
 8014184:	2401552c 	.word	0x2401552c
 8014188:	2401556e 	.word	0x2401556e
 801418c:	24015564 	.word	0x24015564
 8014190:	24015544 	.word	0x24015544
 8014194:	08019958 	.word	0x08019958
 8014198:	08019d10 	.word	0x08019d10
 801419c:	080199e4 	.word	0x080199e4
 80141a0:	08019d20 	.word	0x08019d20
 80141a4:	08019d30 	.word	0x08019d30
        off -= p->len;
 80141a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80141aa:	895b      	ldrh	r3, [r3, #10]
 80141ac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80141b0:	1ad3      	subs	r3, r2, r3
 80141b2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80141b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80141b8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80141ba:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80141bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80141be:	2200      	movs	r2, #0
 80141c0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80141c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80141c4:	681b      	ldr	r3, [r3, #0]
 80141c6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80141c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80141ca:	895b      	ldrh	r3, [r3, #10]
 80141cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80141d0:	429a      	cmp	r2, r3
 80141d2:	d8e9      	bhi.n	80141a8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80141d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80141d8:	4619      	mov	r1, r3
 80141da:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80141dc:	f7fc fa7e 	bl	80106dc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141e4:	4a91      	ldr	r2, [pc, #580]	; (801442c <tcp_receive+0x888>)
 80141e6:	6013      	str	r3, [r2, #0]
 80141e8:	4b91      	ldr	r3, [pc, #580]	; (8014430 <tcp_receive+0x88c>)
 80141ea:	68db      	ldr	r3, [r3, #12]
 80141ec:	4a8f      	ldr	r2, [pc, #572]	; (801442c <tcp_receive+0x888>)
 80141ee:	6812      	ldr	r2, [r2, #0]
 80141f0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80141f2:	e00d      	b.n	8014210 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80141f4:	4b8d      	ldr	r3, [pc, #564]	; (801442c <tcp_receive+0x888>)
 80141f6:	681a      	ldr	r2, [r3, #0]
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141fc:	1ad3      	subs	r3, r2, r3
 80141fe:	2b00      	cmp	r3, #0
 8014200:	da06      	bge.n	8014210 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	8b5b      	ldrh	r3, [r3, #26]
 8014206:	f043 0302 	orr.w	r3, r3, #2
 801420a:	b29a      	uxth	r2, r3
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014210:	4b86      	ldr	r3, [pc, #536]	; (801442c <tcp_receive+0x888>)
 8014212:	681a      	ldr	r2, [r3, #0]
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014218:	1ad3      	subs	r3, r2, r3
 801421a:	2b00      	cmp	r3, #0
 801421c:	f2c0 842a 	blt.w	8014a74 <tcp_receive+0xed0>
 8014220:	4b82      	ldr	r3, [pc, #520]	; (801442c <tcp_receive+0x888>)
 8014222:	681a      	ldr	r2, [r3, #0]
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014228:	6879      	ldr	r1, [r7, #4]
 801422a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801422c:	440b      	add	r3, r1
 801422e:	1ad3      	subs	r3, r2, r3
 8014230:	3301      	adds	r3, #1
 8014232:	2b00      	cmp	r3, #0
 8014234:	f300 841e 	bgt.w	8014a74 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801423c:	4b7b      	ldr	r3, [pc, #492]	; (801442c <tcp_receive+0x888>)
 801423e:	681b      	ldr	r3, [r3, #0]
 8014240:	429a      	cmp	r2, r3
 8014242:	f040 829a 	bne.w	801477a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8014246:	4b7a      	ldr	r3, [pc, #488]	; (8014430 <tcp_receive+0x88c>)
 8014248:	891c      	ldrh	r4, [r3, #8]
 801424a:	4b79      	ldr	r3, [pc, #484]	; (8014430 <tcp_receive+0x88c>)
 801424c:	68db      	ldr	r3, [r3, #12]
 801424e:	899b      	ldrh	r3, [r3, #12]
 8014250:	b29b      	uxth	r3, r3
 8014252:	4618      	mov	r0, r3
 8014254:	f7f8 fb32 	bl	800c8bc <lwip_htons>
 8014258:	4603      	mov	r3, r0
 801425a:	b2db      	uxtb	r3, r3
 801425c:	f003 0303 	and.w	r3, r3, #3
 8014260:	2b00      	cmp	r3, #0
 8014262:	d001      	beq.n	8014268 <tcp_receive+0x6c4>
 8014264:	2301      	movs	r3, #1
 8014266:	e000      	b.n	801426a <tcp_receive+0x6c6>
 8014268:	2300      	movs	r3, #0
 801426a:	4423      	add	r3, r4
 801426c:	b29a      	uxth	r2, r3
 801426e:	4b71      	ldr	r3, [pc, #452]	; (8014434 <tcp_receive+0x890>)
 8014270:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014276:	4b6f      	ldr	r3, [pc, #444]	; (8014434 <tcp_receive+0x890>)
 8014278:	881b      	ldrh	r3, [r3, #0]
 801427a:	429a      	cmp	r2, r3
 801427c:	d275      	bcs.n	801436a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801427e:	4b6c      	ldr	r3, [pc, #432]	; (8014430 <tcp_receive+0x88c>)
 8014280:	68db      	ldr	r3, [r3, #12]
 8014282:	899b      	ldrh	r3, [r3, #12]
 8014284:	b29b      	uxth	r3, r3
 8014286:	4618      	mov	r0, r3
 8014288:	f7f8 fb18 	bl	800c8bc <lwip_htons>
 801428c:	4603      	mov	r3, r0
 801428e:	b2db      	uxtb	r3, r3
 8014290:	f003 0301 	and.w	r3, r3, #1
 8014294:	2b00      	cmp	r3, #0
 8014296:	d01f      	beq.n	80142d8 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8014298:	4b65      	ldr	r3, [pc, #404]	; (8014430 <tcp_receive+0x88c>)
 801429a:	68db      	ldr	r3, [r3, #12]
 801429c:	899b      	ldrh	r3, [r3, #12]
 801429e:	b29b      	uxth	r3, r3
 80142a0:	b21b      	sxth	r3, r3
 80142a2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80142a6:	b21c      	sxth	r4, r3
 80142a8:	4b61      	ldr	r3, [pc, #388]	; (8014430 <tcp_receive+0x88c>)
 80142aa:	68db      	ldr	r3, [r3, #12]
 80142ac:	899b      	ldrh	r3, [r3, #12]
 80142ae:	b29b      	uxth	r3, r3
 80142b0:	4618      	mov	r0, r3
 80142b2:	f7f8 fb03 	bl	800c8bc <lwip_htons>
 80142b6:	4603      	mov	r3, r0
 80142b8:	b2db      	uxtb	r3, r3
 80142ba:	b29b      	uxth	r3, r3
 80142bc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80142c0:	b29b      	uxth	r3, r3
 80142c2:	4618      	mov	r0, r3
 80142c4:	f7f8 fafa 	bl	800c8bc <lwip_htons>
 80142c8:	4603      	mov	r3, r0
 80142ca:	b21b      	sxth	r3, r3
 80142cc:	4323      	orrs	r3, r4
 80142ce:	b21a      	sxth	r2, r3
 80142d0:	4b57      	ldr	r3, [pc, #348]	; (8014430 <tcp_receive+0x88c>)
 80142d2:	68db      	ldr	r3, [r3, #12]
 80142d4:	b292      	uxth	r2, r2
 80142d6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80142dc:	4b54      	ldr	r3, [pc, #336]	; (8014430 <tcp_receive+0x88c>)
 80142de:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80142e0:	4b53      	ldr	r3, [pc, #332]	; (8014430 <tcp_receive+0x88c>)
 80142e2:	68db      	ldr	r3, [r3, #12]
 80142e4:	899b      	ldrh	r3, [r3, #12]
 80142e6:	b29b      	uxth	r3, r3
 80142e8:	4618      	mov	r0, r3
 80142ea:	f7f8 fae7 	bl	800c8bc <lwip_htons>
 80142ee:	4603      	mov	r3, r0
 80142f0:	b2db      	uxtb	r3, r3
 80142f2:	f003 0302 	and.w	r3, r3, #2
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d005      	beq.n	8014306 <tcp_receive+0x762>
            inseg.len -= 1;
 80142fa:	4b4d      	ldr	r3, [pc, #308]	; (8014430 <tcp_receive+0x88c>)
 80142fc:	891b      	ldrh	r3, [r3, #8]
 80142fe:	3b01      	subs	r3, #1
 8014300:	b29a      	uxth	r2, r3
 8014302:	4b4b      	ldr	r3, [pc, #300]	; (8014430 <tcp_receive+0x88c>)
 8014304:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8014306:	4b4a      	ldr	r3, [pc, #296]	; (8014430 <tcp_receive+0x88c>)
 8014308:	685b      	ldr	r3, [r3, #4]
 801430a:	4a49      	ldr	r2, [pc, #292]	; (8014430 <tcp_receive+0x88c>)
 801430c:	8912      	ldrh	r2, [r2, #8]
 801430e:	4611      	mov	r1, r2
 8014310:	4618      	mov	r0, r3
 8014312:	f7fc f8e3 	bl	80104dc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8014316:	4b46      	ldr	r3, [pc, #280]	; (8014430 <tcp_receive+0x88c>)
 8014318:	891c      	ldrh	r4, [r3, #8]
 801431a:	4b45      	ldr	r3, [pc, #276]	; (8014430 <tcp_receive+0x88c>)
 801431c:	68db      	ldr	r3, [r3, #12]
 801431e:	899b      	ldrh	r3, [r3, #12]
 8014320:	b29b      	uxth	r3, r3
 8014322:	4618      	mov	r0, r3
 8014324:	f7f8 faca 	bl	800c8bc <lwip_htons>
 8014328:	4603      	mov	r3, r0
 801432a:	b2db      	uxtb	r3, r3
 801432c:	f003 0303 	and.w	r3, r3, #3
 8014330:	2b00      	cmp	r3, #0
 8014332:	d001      	beq.n	8014338 <tcp_receive+0x794>
 8014334:	2301      	movs	r3, #1
 8014336:	e000      	b.n	801433a <tcp_receive+0x796>
 8014338:	2300      	movs	r3, #0
 801433a:	4423      	add	r3, r4
 801433c:	b29a      	uxth	r2, r3
 801433e:	4b3d      	ldr	r3, [pc, #244]	; (8014434 <tcp_receive+0x890>)
 8014340:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014342:	4b3c      	ldr	r3, [pc, #240]	; (8014434 <tcp_receive+0x890>)
 8014344:	881b      	ldrh	r3, [r3, #0]
 8014346:	461a      	mov	r2, r3
 8014348:	4b38      	ldr	r3, [pc, #224]	; (801442c <tcp_receive+0x888>)
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	441a      	add	r2, r3
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014352:	6879      	ldr	r1, [r7, #4]
 8014354:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014356:	440b      	add	r3, r1
 8014358:	429a      	cmp	r2, r3
 801435a:	d006      	beq.n	801436a <tcp_receive+0x7c6>
 801435c:	4b36      	ldr	r3, [pc, #216]	; (8014438 <tcp_receive+0x894>)
 801435e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8014362:	4936      	ldr	r1, [pc, #216]	; (801443c <tcp_receive+0x898>)
 8014364:	4836      	ldr	r0, [pc, #216]	; (8014440 <tcp_receive+0x89c>)
 8014366:	f002 fdd5 	bl	8016f14 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801436e:	2b00      	cmp	r3, #0
 8014370:	f000 80e7 	beq.w	8014542 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014374:	4b2e      	ldr	r3, [pc, #184]	; (8014430 <tcp_receive+0x88c>)
 8014376:	68db      	ldr	r3, [r3, #12]
 8014378:	899b      	ldrh	r3, [r3, #12]
 801437a:	b29b      	uxth	r3, r3
 801437c:	4618      	mov	r0, r3
 801437e:	f7f8 fa9d 	bl	800c8bc <lwip_htons>
 8014382:	4603      	mov	r3, r0
 8014384:	b2db      	uxtb	r3, r3
 8014386:	f003 0301 	and.w	r3, r3, #1
 801438a:	2b00      	cmp	r3, #0
 801438c:	d010      	beq.n	80143b0 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801438e:	e00a      	b.n	80143a6 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014394:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801439a:	681a      	ldr	r2, [r3, #0]
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80143a0:	68f8      	ldr	r0, [r7, #12]
 80143a2:	f7fd fd92 	bl	8011eca <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	d1f0      	bne.n	8014390 <tcp_receive+0x7ec>
 80143ae:	e0c8      	b.n	8014542 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80143b4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80143b6:	e052      	b.n	801445e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80143b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80143ba:	68db      	ldr	r3, [r3, #12]
 80143bc:	899b      	ldrh	r3, [r3, #12]
 80143be:	b29b      	uxth	r3, r3
 80143c0:	4618      	mov	r0, r3
 80143c2:	f7f8 fa7b 	bl	800c8bc <lwip_htons>
 80143c6:	4603      	mov	r3, r0
 80143c8:	b2db      	uxtb	r3, r3
 80143ca:	f003 0301 	and.w	r3, r3, #1
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d03d      	beq.n	801444e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80143d2:	4b17      	ldr	r3, [pc, #92]	; (8014430 <tcp_receive+0x88c>)
 80143d4:	68db      	ldr	r3, [r3, #12]
 80143d6:	899b      	ldrh	r3, [r3, #12]
 80143d8:	b29b      	uxth	r3, r3
 80143da:	4618      	mov	r0, r3
 80143dc:	f7f8 fa6e 	bl	800c8bc <lwip_htons>
 80143e0:	4603      	mov	r3, r0
 80143e2:	b2db      	uxtb	r3, r3
 80143e4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d130      	bne.n	801444e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80143ec:	4b10      	ldr	r3, [pc, #64]	; (8014430 <tcp_receive+0x88c>)
 80143ee:	68db      	ldr	r3, [r3, #12]
 80143f0:	899b      	ldrh	r3, [r3, #12]
 80143f2:	b29c      	uxth	r4, r3
 80143f4:	2001      	movs	r0, #1
 80143f6:	f7f8 fa61 	bl	800c8bc <lwip_htons>
 80143fa:	4603      	mov	r3, r0
 80143fc:	461a      	mov	r2, r3
 80143fe:	4b0c      	ldr	r3, [pc, #48]	; (8014430 <tcp_receive+0x88c>)
 8014400:	68db      	ldr	r3, [r3, #12]
 8014402:	4322      	orrs	r2, r4
 8014404:	b292      	uxth	r2, r2
 8014406:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8014408:	4b09      	ldr	r3, [pc, #36]	; (8014430 <tcp_receive+0x88c>)
 801440a:	891c      	ldrh	r4, [r3, #8]
 801440c:	4b08      	ldr	r3, [pc, #32]	; (8014430 <tcp_receive+0x88c>)
 801440e:	68db      	ldr	r3, [r3, #12]
 8014410:	899b      	ldrh	r3, [r3, #12]
 8014412:	b29b      	uxth	r3, r3
 8014414:	4618      	mov	r0, r3
 8014416:	f7f8 fa51 	bl	800c8bc <lwip_htons>
 801441a:	4603      	mov	r3, r0
 801441c:	b2db      	uxtb	r3, r3
 801441e:	f003 0303 	and.w	r3, r3, #3
 8014422:	2b00      	cmp	r3, #0
 8014424:	d00e      	beq.n	8014444 <tcp_receive+0x8a0>
 8014426:	2301      	movs	r3, #1
 8014428:	e00d      	b.n	8014446 <tcp_receive+0x8a2>
 801442a:	bf00      	nop
 801442c:	24015564 	.word	0x24015564
 8014430:	24015544 	.word	0x24015544
 8014434:	2401556e 	.word	0x2401556e
 8014438:	08019958 	.word	0x08019958
 801443c:	08019d40 	.word	0x08019d40
 8014440:	080199e4 	.word	0x080199e4
 8014444:	2300      	movs	r3, #0
 8014446:	4423      	add	r3, r4
 8014448:	b29a      	uxth	r2, r3
 801444a:	4b98      	ldr	r3, [pc, #608]	; (80146ac <tcp_receive+0xb08>)
 801444c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801444e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014450:	613b      	str	r3, [r7, #16]
              next = next->next;
 8014452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014454:	681b      	ldr	r3, [r3, #0]
 8014456:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8014458:	6938      	ldr	r0, [r7, #16]
 801445a:	f7fd fd36 	bl	8011eca <tcp_seg_free>
            while (next &&
 801445e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014460:	2b00      	cmp	r3, #0
 8014462:	d00e      	beq.n	8014482 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8014464:	4b91      	ldr	r3, [pc, #580]	; (80146ac <tcp_receive+0xb08>)
 8014466:	881b      	ldrh	r3, [r3, #0]
 8014468:	461a      	mov	r2, r3
 801446a:	4b91      	ldr	r3, [pc, #580]	; (80146b0 <tcp_receive+0xb0c>)
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	441a      	add	r2, r3
 8014470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014472:	68db      	ldr	r3, [r3, #12]
 8014474:	685b      	ldr	r3, [r3, #4]
 8014476:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014478:	8909      	ldrh	r1, [r1, #8]
 801447a:	440b      	add	r3, r1
 801447c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801447e:	2b00      	cmp	r3, #0
 8014480:	da9a      	bge.n	80143b8 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8014482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014484:	2b00      	cmp	r3, #0
 8014486:	d059      	beq.n	801453c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8014488:	4b88      	ldr	r3, [pc, #544]	; (80146ac <tcp_receive+0xb08>)
 801448a:	881b      	ldrh	r3, [r3, #0]
 801448c:	461a      	mov	r2, r3
 801448e:	4b88      	ldr	r3, [pc, #544]	; (80146b0 <tcp_receive+0xb0c>)
 8014490:	681b      	ldr	r3, [r3, #0]
 8014492:	441a      	add	r2, r3
 8014494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014496:	68db      	ldr	r3, [r3, #12]
 8014498:	685b      	ldr	r3, [r3, #4]
 801449a:	1ad3      	subs	r3, r2, r3
            if (next &&
 801449c:	2b00      	cmp	r3, #0
 801449e:	dd4d      	ble.n	801453c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80144a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80144a2:	68db      	ldr	r3, [r3, #12]
 80144a4:	685b      	ldr	r3, [r3, #4]
 80144a6:	b29a      	uxth	r2, r3
 80144a8:	4b81      	ldr	r3, [pc, #516]	; (80146b0 <tcp_receive+0xb0c>)
 80144aa:	681b      	ldr	r3, [r3, #0]
 80144ac:	b29b      	uxth	r3, r3
 80144ae:	1ad3      	subs	r3, r2, r3
 80144b0:	b29a      	uxth	r2, r3
 80144b2:	4b80      	ldr	r3, [pc, #512]	; (80146b4 <tcp_receive+0xb10>)
 80144b4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80144b6:	4b7f      	ldr	r3, [pc, #508]	; (80146b4 <tcp_receive+0xb10>)
 80144b8:	68db      	ldr	r3, [r3, #12]
 80144ba:	899b      	ldrh	r3, [r3, #12]
 80144bc:	b29b      	uxth	r3, r3
 80144be:	4618      	mov	r0, r3
 80144c0:	f7f8 f9fc 	bl	800c8bc <lwip_htons>
 80144c4:	4603      	mov	r3, r0
 80144c6:	b2db      	uxtb	r3, r3
 80144c8:	f003 0302 	and.w	r3, r3, #2
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d005      	beq.n	80144dc <tcp_receive+0x938>
                inseg.len -= 1;
 80144d0:	4b78      	ldr	r3, [pc, #480]	; (80146b4 <tcp_receive+0xb10>)
 80144d2:	891b      	ldrh	r3, [r3, #8]
 80144d4:	3b01      	subs	r3, #1
 80144d6:	b29a      	uxth	r2, r3
 80144d8:	4b76      	ldr	r3, [pc, #472]	; (80146b4 <tcp_receive+0xb10>)
 80144da:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80144dc:	4b75      	ldr	r3, [pc, #468]	; (80146b4 <tcp_receive+0xb10>)
 80144de:	685b      	ldr	r3, [r3, #4]
 80144e0:	4a74      	ldr	r2, [pc, #464]	; (80146b4 <tcp_receive+0xb10>)
 80144e2:	8912      	ldrh	r2, [r2, #8]
 80144e4:	4611      	mov	r1, r2
 80144e6:	4618      	mov	r0, r3
 80144e8:	f7fb fff8 	bl	80104dc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80144ec:	4b71      	ldr	r3, [pc, #452]	; (80146b4 <tcp_receive+0xb10>)
 80144ee:	891c      	ldrh	r4, [r3, #8]
 80144f0:	4b70      	ldr	r3, [pc, #448]	; (80146b4 <tcp_receive+0xb10>)
 80144f2:	68db      	ldr	r3, [r3, #12]
 80144f4:	899b      	ldrh	r3, [r3, #12]
 80144f6:	b29b      	uxth	r3, r3
 80144f8:	4618      	mov	r0, r3
 80144fa:	f7f8 f9df 	bl	800c8bc <lwip_htons>
 80144fe:	4603      	mov	r3, r0
 8014500:	b2db      	uxtb	r3, r3
 8014502:	f003 0303 	and.w	r3, r3, #3
 8014506:	2b00      	cmp	r3, #0
 8014508:	d001      	beq.n	801450e <tcp_receive+0x96a>
 801450a:	2301      	movs	r3, #1
 801450c:	e000      	b.n	8014510 <tcp_receive+0x96c>
 801450e:	2300      	movs	r3, #0
 8014510:	4423      	add	r3, r4
 8014512:	b29a      	uxth	r2, r3
 8014514:	4b65      	ldr	r3, [pc, #404]	; (80146ac <tcp_receive+0xb08>)
 8014516:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8014518:	4b64      	ldr	r3, [pc, #400]	; (80146ac <tcp_receive+0xb08>)
 801451a:	881b      	ldrh	r3, [r3, #0]
 801451c:	461a      	mov	r2, r3
 801451e:	4b64      	ldr	r3, [pc, #400]	; (80146b0 <tcp_receive+0xb0c>)
 8014520:	681b      	ldr	r3, [r3, #0]
 8014522:	441a      	add	r2, r3
 8014524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014526:	68db      	ldr	r3, [r3, #12]
 8014528:	685b      	ldr	r3, [r3, #4]
 801452a:	429a      	cmp	r2, r3
 801452c:	d006      	beq.n	801453c <tcp_receive+0x998>
 801452e:	4b62      	ldr	r3, [pc, #392]	; (80146b8 <tcp_receive+0xb14>)
 8014530:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8014534:	4961      	ldr	r1, [pc, #388]	; (80146bc <tcp_receive+0xb18>)
 8014536:	4862      	ldr	r0, [pc, #392]	; (80146c0 <tcp_receive+0xb1c>)
 8014538:	f002 fcec 	bl	8016f14 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014540:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8014542:	4b5a      	ldr	r3, [pc, #360]	; (80146ac <tcp_receive+0xb08>)
 8014544:	881b      	ldrh	r3, [r3, #0]
 8014546:	461a      	mov	r2, r3
 8014548:	4b59      	ldr	r3, [pc, #356]	; (80146b0 <tcp_receive+0xb0c>)
 801454a:	681b      	ldr	r3, [r3, #0]
 801454c:	441a      	add	r2, r3
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014556:	4b55      	ldr	r3, [pc, #340]	; (80146ac <tcp_receive+0xb08>)
 8014558:	881b      	ldrh	r3, [r3, #0]
 801455a:	429a      	cmp	r2, r3
 801455c:	d206      	bcs.n	801456c <tcp_receive+0x9c8>
 801455e:	4b56      	ldr	r3, [pc, #344]	; (80146b8 <tcp_receive+0xb14>)
 8014560:	f240 6207 	movw	r2, #1543	; 0x607
 8014564:	4957      	ldr	r1, [pc, #348]	; (80146c4 <tcp_receive+0xb20>)
 8014566:	4856      	ldr	r0, [pc, #344]	; (80146c0 <tcp_receive+0xb1c>)
 8014568:	f002 fcd4 	bl	8016f14 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014570:	4b4e      	ldr	r3, [pc, #312]	; (80146ac <tcp_receive+0xb08>)
 8014572:	881b      	ldrh	r3, [r3, #0]
 8014574:	1ad3      	subs	r3, r2, r3
 8014576:	b29a      	uxth	r2, r3
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801457c:	6878      	ldr	r0, [r7, #4]
 801457e:	f7fc ffc5 	bl	801150c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8014582:	4b4c      	ldr	r3, [pc, #304]	; (80146b4 <tcp_receive+0xb10>)
 8014584:	685b      	ldr	r3, [r3, #4]
 8014586:	891b      	ldrh	r3, [r3, #8]
 8014588:	2b00      	cmp	r3, #0
 801458a:	d006      	beq.n	801459a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 801458c:	4b49      	ldr	r3, [pc, #292]	; (80146b4 <tcp_receive+0xb10>)
 801458e:	685b      	ldr	r3, [r3, #4]
 8014590:	4a4d      	ldr	r2, [pc, #308]	; (80146c8 <tcp_receive+0xb24>)
 8014592:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8014594:	4b47      	ldr	r3, [pc, #284]	; (80146b4 <tcp_receive+0xb10>)
 8014596:	2200      	movs	r2, #0
 8014598:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801459a:	4b46      	ldr	r3, [pc, #280]	; (80146b4 <tcp_receive+0xb10>)
 801459c:	68db      	ldr	r3, [r3, #12]
 801459e:	899b      	ldrh	r3, [r3, #12]
 80145a0:	b29b      	uxth	r3, r3
 80145a2:	4618      	mov	r0, r3
 80145a4:	f7f8 f98a 	bl	800c8bc <lwip_htons>
 80145a8:	4603      	mov	r3, r0
 80145aa:	b2db      	uxtb	r3, r3
 80145ac:	f003 0301 	and.w	r3, r3, #1
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	f000 80b8 	beq.w	8014726 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80145b6:	4b45      	ldr	r3, [pc, #276]	; (80146cc <tcp_receive+0xb28>)
 80145b8:	781b      	ldrb	r3, [r3, #0]
 80145ba:	f043 0320 	orr.w	r3, r3, #32
 80145be:	b2da      	uxtb	r2, r3
 80145c0:	4b42      	ldr	r3, [pc, #264]	; (80146cc <tcp_receive+0xb28>)
 80145c2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80145c4:	e0af      	b.n	8014726 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80145ca:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80145d0:	68db      	ldr	r3, [r3, #12]
 80145d2:	685b      	ldr	r3, [r3, #4]
 80145d4:	4a36      	ldr	r2, [pc, #216]	; (80146b0 <tcp_receive+0xb0c>)
 80145d6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80145d8:	68bb      	ldr	r3, [r7, #8]
 80145da:	891b      	ldrh	r3, [r3, #8]
 80145dc:	461c      	mov	r4, r3
 80145de:	68bb      	ldr	r3, [r7, #8]
 80145e0:	68db      	ldr	r3, [r3, #12]
 80145e2:	899b      	ldrh	r3, [r3, #12]
 80145e4:	b29b      	uxth	r3, r3
 80145e6:	4618      	mov	r0, r3
 80145e8:	f7f8 f968 	bl	800c8bc <lwip_htons>
 80145ec:	4603      	mov	r3, r0
 80145ee:	b2db      	uxtb	r3, r3
 80145f0:	f003 0303 	and.w	r3, r3, #3
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d001      	beq.n	80145fc <tcp_receive+0xa58>
 80145f8:	2301      	movs	r3, #1
 80145fa:	e000      	b.n	80145fe <tcp_receive+0xa5a>
 80145fc:	2300      	movs	r3, #0
 80145fe:	191a      	adds	r2, r3, r4
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014604:	441a      	add	r2, r3
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801460e:	461c      	mov	r4, r3
 8014610:	68bb      	ldr	r3, [r7, #8]
 8014612:	891b      	ldrh	r3, [r3, #8]
 8014614:	461d      	mov	r5, r3
 8014616:	68bb      	ldr	r3, [r7, #8]
 8014618:	68db      	ldr	r3, [r3, #12]
 801461a:	899b      	ldrh	r3, [r3, #12]
 801461c:	b29b      	uxth	r3, r3
 801461e:	4618      	mov	r0, r3
 8014620:	f7f8 f94c 	bl	800c8bc <lwip_htons>
 8014624:	4603      	mov	r3, r0
 8014626:	b2db      	uxtb	r3, r3
 8014628:	f003 0303 	and.w	r3, r3, #3
 801462c:	2b00      	cmp	r3, #0
 801462e:	d001      	beq.n	8014634 <tcp_receive+0xa90>
 8014630:	2301      	movs	r3, #1
 8014632:	e000      	b.n	8014636 <tcp_receive+0xa92>
 8014634:	2300      	movs	r3, #0
 8014636:	442b      	add	r3, r5
 8014638:	429c      	cmp	r4, r3
 801463a:	d206      	bcs.n	801464a <tcp_receive+0xaa6>
 801463c:	4b1e      	ldr	r3, [pc, #120]	; (80146b8 <tcp_receive+0xb14>)
 801463e:	f240 622b 	movw	r2, #1579	; 0x62b
 8014642:	4923      	ldr	r1, [pc, #140]	; (80146d0 <tcp_receive+0xb2c>)
 8014644:	481e      	ldr	r0, [pc, #120]	; (80146c0 <tcp_receive+0xb1c>)
 8014646:	f002 fc65 	bl	8016f14 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801464a:	68bb      	ldr	r3, [r7, #8]
 801464c:	891b      	ldrh	r3, [r3, #8]
 801464e:	461c      	mov	r4, r3
 8014650:	68bb      	ldr	r3, [r7, #8]
 8014652:	68db      	ldr	r3, [r3, #12]
 8014654:	899b      	ldrh	r3, [r3, #12]
 8014656:	b29b      	uxth	r3, r3
 8014658:	4618      	mov	r0, r3
 801465a:	f7f8 f92f 	bl	800c8bc <lwip_htons>
 801465e:	4603      	mov	r3, r0
 8014660:	b2db      	uxtb	r3, r3
 8014662:	f003 0303 	and.w	r3, r3, #3
 8014666:	2b00      	cmp	r3, #0
 8014668:	d001      	beq.n	801466e <tcp_receive+0xaca>
 801466a:	2301      	movs	r3, #1
 801466c:	e000      	b.n	8014670 <tcp_receive+0xacc>
 801466e:	2300      	movs	r3, #0
 8014670:	1919      	adds	r1, r3, r4
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014676:	b28b      	uxth	r3, r1
 8014678:	1ad3      	subs	r3, r2, r3
 801467a:	b29a      	uxth	r2, r3
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8014680:	6878      	ldr	r0, [r7, #4]
 8014682:	f7fc ff43 	bl	801150c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8014686:	68bb      	ldr	r3, [r7, #8]
 8014688:	685b      	ldr	r3, [r3, #4]
 801468a:	891b      	ldrh	r3, [r3, #8]
 801468c:	2b00      	cmp	r3, #0
 801468e:	d028      	beq.n	80146e2 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8014690:	4b0d      	ldr	r3, [pc, #52]	; (80146c8 <tcp_receive+0xb24>)
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	2b00      	cmp	r3, #0
 8014696:	d01d      	beq.n	80146d4 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8014698:	4b0b      	ldr	r3, [pc, #44]	; (80146c8 <tcp_receive+0xb24>)
 801469a:	681a      	ldr	r2, [r3, #0]
 801469c:	68bb      	ldr	r3, [r7, #8]
 801469e:	685b      	ldr	r3, [r3, #4]
 80146a0:	4619      	mov	r1, r3
 80146a2:	4610      	mov	r0, r2
 80146a4:	f7fc f96e 	bl	8010984 <pbuf_cat>
 80146a8:	e018      	b.n	80146dc <tcp_receive+0xb38>
 80146aa:	bf00      	nop
 80146ac:	2401556e 	.word	0x2401556e
 80146b0:	24015564 	.word	0x24015564
 80146b4:	24015544 	.word	0x24015544
 80146b8:	08019958 	.word	0x08019958
 80146bc:	08019d78 	.word	0x08019d78
 80146c0:	080199e4 	.word	0x080199e4
 80146c4:	08019db4 	.word	0x08019db4
 80146c8:	24015574 	.word	0x24015574
 80146cc:	24015571 	.word	0x24015571
 80146d0:	08019dd4 	.word	0x08019dd4
            } else {
              recv_data = cseg->p;
 80146d4:	68bb      	ldr	r3, [r7, #8]
 80146d6:	685b      	ldr	r3, [r3, #4]
 80146d8:	4a70      	ldr	r2, [pc, #448]	; (801489c <tcp_receive+0xcf8>)
 80146da:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80146dc:	68bb      	ldr	r3, [r7, #8]
 80146de:	2200      	movs	r2, #0
 80146e0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80146e2:	68bb      	ldr	r3, [r7, #8]
 80146e4:	68db      	ldr	r3, [r3, #12]
 80146e6:	899b      	ldrh	r3, [r3, #12]
 80146e8:	b29b      	uxth	r3, r3
 80146ea:	4618      	mov	r0, r3
 80146ec:	f7f8 f8e6 	bl	800c8bc <lwip_htons>
 80146f0:	4603      	mov	r3, r0
 80146f2:	b2db      	uxtb	r3, r3
 80146f4:	f003 0301 	and.w	r3, r3, #1
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d00d      	beq.n	8014718 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80146fc:	4b68      	ldr	r3, [pc, #416]	; (80148a0 <tcp_receive+0xcfc>)
 80146fe:	781b      	ldrb	r3, [r3, #0]
 8014700:	f043 0320 	orr.w	r3, r3, #32
 8014704:	b2da      	uxtb	r2, r3
 8014706:	4b66      	ldr	r3, [pc, #408]	; (80148a0 <tcp_receive+0xcfc>)
 8014708:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	7d1b      	ldrb	r3, [r3, #20]
 801470e:	2b04      	cmp	r3, #4
 8014710:	d102      	bne.n	8014718 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	2207      	movs	r2, #7
 8014716:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8014718:	68bb      	ldr	r3, [r7, #8]
 801471a:	681a      	ldr	r2, [r3, #0]
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8014720:	68b8      	ldr	r0, [r7, #8]
 8014722:	f7fd fbd2 	bl	8011eca <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801472a:	2b00      	cmp	r3, #0
 801472c:	d008      	beq.n	8014740 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014732:	68db      	ldr	r3, [r3, #12]
 8014734:	685a      	ldr	r2, [r3, #4]
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801473a:	429a      	cmp	r2, r3
 801473c:	f43f af43 	beq.w	80145c6 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	8b5b      	ldrh	r3, [r3, #26]
 8014744:	f003 0301 	and.w	r3, r3, #1
 8014748:	2b00      	cmp	r3, #0
 801474a:	d00e      	beq.n	801476a <tcp_receive+0xbc6>
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	8b5b      	ldrh	r3, [r3, #26]
 8014750:	f023 0301 	bic.w	r3, r3, #1
 8014754:	b29a      	uxth	r2, r3
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	835a      	strh	r2, [r3, #26]
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	8b5b      	ldrh	r3, [r3, #26]
 801475e:	f043 0302 	orr.w	r3, r3, #2
 8014762:	b29a      	uxth	r2, r3
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014768:	e188      	b.n	8014a7c <tcp_receive+0xed8>
        tcp_ack(pcb);
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	8b5b      	ldrh	r3, [r3, #26]
 801476e:	f043 0301 	orr.w	r3, r3, #1
 8014772:	b29a      	uxth	r2, r3
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014778:	e180      	b.n	8014a7c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801477e:	2b00      	cmp	r3, #0
 8014780:	d106      	bne.n	8014790 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8014782:	4848      	ldr	r0, [pc, #288]	; (80148a4 <tcp_receive+0xd00>)
 8014784:	f7fd fbba 	bl	8011efc <tcp_seg_copy>
 8014788:	4602      	mov	r2, r0
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	675a      	str	r2, [r3, #116]	; 0x74
 801478e:	e16d      	b.n	8014a6c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8014790:	2300      	movs	r3, #0
 8014792:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014798:	63bb      	str	r3, [r7, #56]	; 0x38
 801479a:	e157      	b.n	8014a4c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 801479c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801479e:	68db      	ldr	r3, [r3, #12]
 80147a0:	685a      	ldr	r2, [r3, #4]
 80147a2:	4b41      	ldr	r3, [pc, #260]	; (80148a8 <tcp_receive+0xd04>)
 80147a4:	681b      	ldr	r3, [r3, #0]
 80147a6:	429a      	cmp	r2, r3
 80147a8:	d11d      	bne.n	80147e6 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80147aa:	4b3e      	ldr	r3, [pc, #248]	; (80148a4 <tcp_receive+0xd00>)
 80147ac:	891a      	ldrh	r2, [r3, #8]
 80147ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147b0:	891b      	ldrh	r3, [r3, #8]
 80147b2:	429a      	cmp	r2, r3
 80147b4:	f240 814f 	bls.w	8014a56 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80147b8:	483a      	ldr	r0, [pc, #232]	; (80148a4 <tcp_receive+0xd00>)
 80147ba:	f7fd fb9f 	bl	8011efc <tcp_seg_copy>
 80147be:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80147c0:	697b      	ldr	r3, [r7, #20]
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	f000 8149 	beq.w	8014a5a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 80147c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d003      	beq.n	80147d6 <tcp_receive+0xc32>
                    prev->next = cseg;
 80147ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80147d0:	697a      	ldr	r2, [r7, #20]
 80147d2:	601a      	str	r2, [r3, #0]
 80147d4:	e002      	b.n	80147dc <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	697a      	ldr	r2, [r7, #20]
 80147da:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80147dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80147de:	6978      	ldr	r0, [r7, #20]
 80147e0:	f7ff f8dc 	bl	801399c <tcp_oos_insert_segment>
                }
                break;
 80147e4:	e139      	b.n	8014a5a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80147e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d117      	bne.n	801481c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80147ec:	4b2e      	ldr	r3, [pc, #184]	; (80148a8 <tcp_receive+0xd04>)
 80147ee:	681a      	ldr	r2, [r3, #0]
 80147f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147f2:	68db      	ldr	r3, [r3, #12]
 80147f4:	685b      	ldr	r3, [r3, #4]
 80147f6:	1ad3      	subs	r3, r2, r3
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	da57      	bge.n	80148ac <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80147fc:	4829      	ldr	r0, [pc, #164]	; (80148a4 <tcp_receive+0xd00>)
 80147fe:	f7fd fb7d 	bl	8011efc <tcp_seg_copy>
 8014802:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8014804:	69bb      	ldr	r3, [r7, #24]
 8014806:	2b00      	cmp	r3, #0
 8014808:	f000 8129 	beq.w	8014a5e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	69ba      	ldr	r2, [r7, #24]
 8014810:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8014812:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014814:	69b8      	ldr	r0, [r7, #24]
 8014816:	f7ff f8c1 	bl	801399c <tcp_oos_insert_segment>
                  }
                  break;
 801481a:	e120      	b.n	8014a5e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801481c:	4b22      	ldr	r3, [pc, #136]	; (80148a8 <tcp_receive+0xd04>)
 801481e:	681a      	ldr	r2, [r3, #0]
 8014820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014822:	68db      	ldr	r3, [r3, #12]
 8014824:	685b      	ldr	r3, [r3, #4]
 8014826:	1ad3      	subs	r3, r2, r3
 8014828:	3b01      	subs	r3, #1
 801482a:	2b00      	cmp	r3, #0
 801482c:	db3e      	blt.n	80148ac <tcp_receive+0xd08>
 801482e:	4b1e      	ldr	r3, [pc, #120]	; (80148a8 <tcp_receive+0xd04>)
 8014830:	681a      	ldr	r2, [r3, #0]
 8014832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014834:	68db      	ldr	r3, [r3, #12]
 8014836:	685b      	ldr	r3, [r3, #4]
 8014838:	1ad3      	subs	r3, r2, r3
 801483a:	3301      	adds	r3, #1
 801483c:	2b00      	cmp	r3, #0
 801483e:	dc35      	bgt.n	80148ac <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014840:	4818      	ldr	r0, [pc, #96]	; (80148a4 <tcp_receive+0xd00>)
 8014842:	f7fd fb5b 	bl	8011efc <tcp_seg_copy>
 8014846:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8014848:	69fb      	ldr	r3, [r7, #28]
 801484a:	2b00      	cmp	r3, #0
 801484c:	f000 8109 	beq.w	8014a62 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8014850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014852:	68db      	ldr	r3, [r3, #12]
 8014854:	685b      	ldr	r3, [r3, #4]
 8014856:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014858:	8912      	ldrh	r2, [r2, #8]
 801485a:	441a      	add	r2, r3
 801485c:	4b12      	ldr	r3, [pc, #72]	; (80148a8 <tcp_receive+0xd04>)
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	1ad3      	subs	r3, r2, r3
 8014862:	2b00      	cmp	r3, #0
 8014864:	dd12      	ble.n	801488c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8014866:	4b10      	ldr	r3, [pc, #64]	; (80148a8 <tcp_receive+0xd04>)
 8014868:	681b      	ldr	r3, [r3, #0]
 801486a:	b29a      	uxth	r2, r3
 801486c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801486e:	68db      	ldr	r3, [r3, #12]
 8014870:	685b      	ldr	r3, [r3, #4]
 8014872:	b29b      	uxth	r3, r3
 8014874:	1ad3      	subs	r3, r2, r3
 8014876:	b29a      	uxth	r2, r3
 8014878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801487a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801487c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801487e:	685a      	ldr	r2, [r3, #4]
 8014880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014882:	891b      	ldrh	r3, [r3, #8]
 8014884:	4619      	mov	r1, r3
 8014886:	4610      	mov	r0, r2
 8014888:	f7fb fe28 	bl	80104dc <pbuf_realloc>
                    }
                    prev->next = cseg;
 801488c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801488e:	69fa      	ldr	r2, [r7, #28]
 8014890:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8014892:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014894:	69f8      	ldr	r0, [r7, #28]
 8014896:	f7ff f881 	bl	801399c <tcp_oos_insert_segment>
                  }
                  break;
 801489a:	e0e2      	b.n	8014a62 <tcp_receive+0xebe>
 801489c:	24015574 	.word	0x24015574
 80148a0:	24015571 	.word	0x24015571
 80148a4:	24015544 	.word	0x24015544
 80148a8:	24015564 	.word	0x24015564
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80148ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148ae:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80148b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148b2:	681b      	ldr	r3, [r3, #0]
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	f040 80c6 	bne.w	8014a46 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80148ba:	4b80      	ldr	r3, [pc, #512]	; (8014abc <tcp_receive+0xf18>)
 80148bc:	681a      	ldr	r2, [r3, #0]
 80148be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148c0:	68db      	ldr	r3, [r3, #12]
 80148c2:	685b      	ldr	r3, [r3, #4]
 80148c4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	f340 80bd 	ble.w	8014a46 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80148cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148ce:	68db      	ldr	r3, [r3, #12]
 80148d0:	899b      	ldrh	r3, [r3, #12]
 80148d2:	b29b      	uxth	r3, r3
 80148d4:	4618      	mov	r0, r3
 80148d6:	f7f7 fff1 	bl	800c8bc <lwip_htons>
 80148da:	4603      	mov	r3, r0
 80148dc:	b2db      	uxtb	r3, r3
 80148de:	f003 0301 	and.w	r3, r3, #1
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	f040 80bf 	bne.w	8014a66 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80148e8:	4875      	ldr	r0, [pc, #468]	; (8014ac0 <tcp_receive+0xf1c>)
 80148ea:	f7fd fb07 	bl	8011efc <tcp_seg_copy>
 80148ee:	4602      	mov	r2, r0
 80148f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148f2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80148f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	f000 80b6 	beq.w	8014a6a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80148fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014900:	68db      	ldr	r3, [r3, #12]
 8014902:	685b      	ldr	r3, [r3, #4]
 8014904:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014906:	8912      	ldrh	r2, [r2, #8]
 8014908:	441a      	add	r2, r3
 801490a:	4b6c      	ldr	r3, [pc, #432]	; (8014abc <tcp_receive+0xf18>)
 801490c:	681b      	ldr	r3, [r3, #0]
 801490e:	1ad3      	subs	r3, r2, r3
 8014910:	2b00      	cmp	r3, #0
 8014912:	dd12      	ble.n	801493a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8014914:	4b69      	ldr	r3, [pc, #420]	; (8014abc <tcp_receive+0xf18>)
 8014916:	681b      	ldr	r3, [r3, #0]
 8014918:	b29a      	uxth	r2, r3
 801491a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801491c:	68db      	ldr	r3, [r3, #12]
 801491e:	685b      	ldr	r3, [r3, #4]
 8014920:	b29b      	uxth	r3, r3
 8014922:	1ad3      	subs	r3, r2, r3
 8014924:	b29a      	uxth	r2, r3
 8014926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014928:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801492a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801492c:	685a      	ldr	r2, [r3, #4]
 801492e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014930:	891b      	ldrh	r3, [r3, #8]
 8014932:	4619      	mov	r1, r3
 8014934:	4610      	mov	r0, r2
 8014936:	f7fb fdd1 	bl	80104dc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801493a:	4b62      	ldr	r3, [pc, #392]	; (8014ac4 <tcp_receive+0xf20>)
 801493c:	881b      	ldrh	r3, [r3, #0]
 801493e:	461a      	mov	r2, r3
 8014940:	4b5e      	ldr	r3, [pc, #376]	; (8014abc <tcp_receive+0xf18>)
 8014942:	681b      	ldr	r3, [r3, #0]
 8014944:	441a      	add	r2, r3
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801494a:	6879      	ldr	r1, [r7, #4]
 801494c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801494e:	440b      	add	r3, r1
 8014950:	1ad3      	subs	r3, r2, r3
 8014952:	2b00      	cmp	r3, #0
 8014954:	f340 8089 	ble.w	8014a6a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8014958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801495a:	681b      	ldr	r3, [r3, #0]
 801495c:	68db      	ldr	r3, [r3, #12]
 801495e:	899b      	ldrh	r3, [r3, #12]
 8014960:	b29b      	uxth	r3, r3
 8014962:	4618      	mov	r0, r3
 8014964:	f7f7 ffaa 	bl	800c8bc <lwip_htons>
 8014968:	4603      	mov	r3, r0
 801496a:	b2db      	uxtb	r3, r3
 801496c:	f003 0301 	and.w	r3, r3, #1
 8014970:	2b00      	cmp	r3, #0
 8014972:	d022      	beq.n	80149ba <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8014974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014976:	681b      	ldr	r3, [r3, #0]
 8014978:	68db      	ldr	r3, [r3, #12]
 801497a:	899b      	ldrh	r3, [r3, #12]
 801497c:	b29b      	uxth	r3, r3
 801497e:	b21b      	sxth	r3, r3
 8014980:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014984:	b21c      	sxth	r4, r3
 8014986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014988:	681b      	ldr	r3, [r3, #0]
 801498a:	68db      	ldr	r3, [r3, #12]
 801498c:	899b      	ldrh	r3, [r3, #12]
 801498e:	b29b      	uxth	r3, r3
 8014990:	4618      	mov	r0, r3
 8014992:	f7f7 ff93 	bl	800c8bc <lwip_htons>
 8014996:	4603      	mov	r3, r0
 8014998:	b2db      	uxtb	r3, r3
 801499a:	b29b      	uxth	r3, r3
 801499c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80149a0:	b29b      	uxth	r3, r3
 80149a2:	4618      	mov	r0, r3
 80149a4:	f7f7 ff8a 	bl	800c8bc <lwip_htons>
 80149a8:	4603      	mov	r3, r0
 80149aa:	b21b      	sxth	r3, r3
 80149ac:	4323      	orrs	r3, r4
 80149ae:	b21a      	sxth	r2, r3
 80149b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	68db      	ldr	r3, [r3, #12]
 80149b6:	b292      	uxth	r2, r2
 80149b8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149be:	b29a      	uxth	r2, r3
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80149c4:	4413      	add	r3, r2
 80149c6:	b299      	uxth	r1, r3
 80149c8:	4b3c      	ldr	r3, [pc, #240]	; (8014abc <tcp_receive+0xf18>)
 80149ca:	681b      	ldr	r3, [r3, #0]
 80149cc:	b29a      	uxth	r2, r3
 80149ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149d0:	681b      	ldr	r3, [r3, #0]
 80149d2:	1a8a      	subs	r2, r1, r2
 80149d4:	b292      	uxth	r2, r2
 80149d6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80149d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149da:	681b      	ldr	r3, [r3, #0]
 80149dc:	685a      	ldr	r2, [r3, #4]
 80149de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149e0:	681b      	ldr	r3, [r3, #0]
 80149e2:	891b      	ldrh	r3, [r3, #8]
 80149e4:	4619      	mov	r1, r3
 80149e6:	4610      	mov	r0, r2
 80149e8:	f7fb fd78 	bl	80104dc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80149ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149ee:	681b      	ldr	r3, [r3, #0]
 80149f0:	891c      	ldrh	r4, [r3, #8]
 80149f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149f4:	681b      	ldr	r3, [r3, #0]
 80149f6:	68db      	ldr	r3, [r3, #12]
 80149f8:	899b      	ldrh	r3, [r3, #12]
 80149fa:	b29b      	uxth	r3, r3
 80149fc:	4618      	mov	r0, r3
 80149fe:	f7f7 ff5d 	bl	800c8bc <lwip_htons>
 8014a02:	4603      	mov	r3, r0
 8014a04:	b2db      	uxtb	r3, r3
 8014a06:	f003 0303 	and.w	r3, r3, #3
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d001      	beq.n	8014a12 <tcp_receive+0xe6e>
 8014a0e:	2301      	movs	r3, #1
 8014a10:	e000      	b.n	8014a14 <tcp_receive+0xe70>
 8014a12:	2300      	movs	r3, #0
 8014a14:	4423      	add	r3, r4
 8014a16:	b29a      	uxth	r2, r3
 8014a18:	4b2a      	ldr	r3, [pc, #168]	; (8014ac4 <tcp_receive+0xf20>)
 8014a1a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014a1c:	4b29      	ldr	r3, [pc, #164]	; (8014ac4 <tcp_receive+0xf20>)
 8014a1e:	881b      	ldrh	r3, [r3, #0]
 8014a20:	461a      	mov	r2, r3
 8014a22:	4b26      	ldr	r3, [pc, #152]	; (8014abc <tcp_receive+0xf18>)
 8014a24:	681b      	ldr	r3, [r3, #0]
 8014a26:	441a      	add	r2, r3
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a2c:	6879      	ldr	r1, [r7, #4]
 8014a2e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014a30:	440b      	add	r3, r1
 8014a32:	429a      	cmp	r2, r3
 8014a34:	d019      	beq.n	8014a6a <tcp_receive+0xec6>
 8014a36:	4b24      	ldr	r3, [pc, #144]	; (8014ac8 <tcp_receive+0xf24>)
 8014a38:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8014a3c:	4923      	ldr	r1, [pc, #140]	; (8014acc <tcp_receive+0xf28>)
 8014a3e:	4824      	ldr	r0, [pc, #144]	; (8014ad0 <tcp_receive+0xf2c>)
 8014a40:	f002 fa68 	bl	8016f14 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8014a44:	e011      	b.n	8014a6a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a48:	681b      	ldr	r3, [r3, #0]
 8014a4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8014a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	f47f aea4 	bne.w	801479c <tcp_receive+0xbf8>
 8014a54:	e00a      	b.n	8014a6c <tcp_receive+0xec8>
                break;
 8014a56:	bf00      	nop
 8014a58:	e008      	b.n	8014a6c <tcp_receive+0xec8>
                break;
 8014a5a:	bf00      	nop
 8014a5c:	e006      	b.n	8014a6c <tcp_receive+0xec8>
                  break;
 8014a5e:	bf00      	nop
 8014a60:	e004      	b.n	8014a6c <tcp_receive+0xec8>
                  break;
 8014a62:	bf00      	nop
 8014a64:	e002      	b.n	8014a6c <tcp_receive+0xec8>
                  break;
 8014a66:	bf00      	nop
 8014a68:	e000      	b.n	8014a6c <tcp_receive+0xec8>
                break;
 8014a6a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8014a6c:	6878      	ldr	r0, [r7, #4]
 8014a6e:	f001 fa33 	bl	8015ed8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8014a72:	e003      	b.n	8014a7c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8014a74:	6878      	ldr	r0, [r7, #4]
 8014a76:	f001 fa2f 	bl	8015ed8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014a7a:	e01a      	b.n	8014ab2 <tcp_receive+0xf0e>
 8014a7c:	e019      	b.n	8014ab2 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8014a7e:	4b0f      	ldr	r3, [pc, #60]	; (8014abc <tcp_receive+0xf18>)
 8014a80:	681a      	ldr	r2, [r3, #0]
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a86:	1ad3      	subs	r3, r2, r3
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	db0a      	blt.n	8014aa2 <tcp_receive+0xefe>
 8014a8c:	4b0b      	ldr	r3, [pc, #44]	; (8014abc <tcp_receive+0xf18>)
 8014a8e:	681a      	ldr	r2, [r3, #0]
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a94:	6879      	ldr	r1, [r7, #4]
 8014a96:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014a98:	440b      	add	r3, r1
 8014a9a:	1ad3      	subs	r3, r2, r3
 8014a9c:	3301      	adds	r3, #1
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	dd07      	ble.n	8014ab2 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	8b5b      	ldrh	r3, [r3, #26]
 8014aa6:	f043 0302 	orr.w	r3, r3, #2
 8014aaa:	b29a      	uxth	r2, r3
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8014ab0:	e7ff      	b.n	8014ab2 <tcp_receive+0xf0e>
 8014ab2:	bf00      	nop
 8014ab4:	3750      	adds	r7, #80	; 0x50
 8014ab6:	46bd      	mov	sp, r7
 8014ab8:	bdb0      	pop	{r4, r5, r7, pc}
 8014aba:	bf00      	nop
 8014abc:	24015564 	.word	0x24015564
 8014ac0:	24015544 	.word	0x24015544
 8014ac4:	2401556e 	.word	0x2401556e
 8014ac8:	08019958 	.word	0x08019958
 8014acc:	08019d40 	.word	0x08019d40
 8014ad0:	080199e4 	.word	0x080199e4

08014ad4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8014ad4:	b480      	push	{r7}
 8014ad6:	b083      	sub	sp, #12
 8014ad8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8014ada:	4b15      	ldr	r3, [pc, #84]	; (8014b30 <tcp_get_next_optbyte+0x5c>)
 8014adc:	881b      	ldrh	r3, [r3, #0]
 8014ade:	1c5a      	adds	r2, r3, #1
 8014ae0:	b291      	uxth	r1, r2
 8014ae2:	4a13      	ldr	r2, [pc, #76]	; (8014b30 <tcp_get_next_optbyte+0x5c>)
 8014ae4:	8011      	strh	r1, [r2, #0]
 8014ae6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8014ae8:	4b12      	ldr	r3, [pc, #72]	; (8014b34 <tcp_get_next_optbyte+0x60>)
 8014aea:	681b      	ldr	r3, [r3, #0]
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	d004      	beq.n	8014afa <tcp_get_next_optbyte+0x26>
 8014af0:	4b11      	ldr	r3, [pc, #68]	; (8014b38 <tcp_get_next_optbyte+0x64>)
 8014af2:	881b      	ldrh	r3, [r3, #0]
 8014af4:	88fa      	ldrh	r2, [r7, #6]
 8014af6:	429a      	cmp	r2, r3
 8014af8:	d208      	bcs.n	8014b0c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8014afa:	4b10      	ldr	r3, [pc, #64]	; (8014b3c <tcp_get_next_optbyte+0x68>)
 8014afc:	681b      	ldr	r3, [r3, #0]
 8014afe:	3314      	adds	r3, #20
 8014b00:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8014b02:	88fb      	ldrh	r3, [r7, #6]
 8014b04:	683a      	ldr	r2, [r7, #0]
 8014b06:	4413      	add	r3, r2
 8014b08:	781b      	ldrb	r3, [r3, #0]
 8014b0a:	e00b      	b.n	8014b24 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8014b0c:	88fb      	ldrh	r3, [r7, #6]
 8014b0e:	b2da      	uxtb	r2, r3
 8014b10:	4b09      	ldr	r3, [pc, #36]	; (8014b38 <tcp_get_next_optbyte+0x64>)
 8014b12:	881b      	ldrh	r3, [r3, #0]
 8014b14:	b2db      	uxtb	r3, r3
 8014b16:	1ad3      	subs	r3, r2, r3
 8014b18:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8014b1a:	4b06      	ldr	r3, [pc, #24]	; (8014b34 <tcp_get_next_optbyte+0x60>)
 8014b1c:	681a      	ldr	r2, [r3, #0]
 8014b1e:	797b      	ldrb	r3, [r7, #5]
 8014b20:	4413      	add	r3, r2
 8014b22:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014b24:	4618      	mov	r0, r3
 8014b26:	370c      	adds	r7, #12
 8014b28:	46bd      	mov	sp, r7
 8014b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b2e:	4770      	bx	lr
 8014b30:	24015560 	.word	0x24015560
 8014b34:	2401555c 	.word	0x2401555c
 8014b38:	2401555a 	.word	0x2401555a
 8014b3c:	24015554 	.word	0x24015554

08014b40 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8014b40:	b580      	push	{r7, lr}
 8014b42:	b084      	sub	sp, #16
 8014b44:	af00      	add	r7, sp, #0
 8014b46:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	d106      	bne.n	8014b5c <tcp_parseopt+0x1c>
 8014b4e:	4b32      	ldr	r3, [pc, #200]	; (8014c18 <tcp_parseopt+0xd8>)
 8014b50:	f240 727d 	movw	r2, #1917	; 0x77d
 8014b54:	4931      	ldr	r1, [pc, #196]	; (8014c1c <tcp_parseopt+0xdc>)
 8014b56:	4832      	ldr	r0, [pc, #200]	; (8014c20 <tcp_parseopt+0xe0>)
 8014b58:	f002 f9dc 	bl	8016f14 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8014b5c:	4b31      	ldr	r3, [pc, #196]	; (8014c24 <tcp_parseopt+0xe4>)
 8014b5e:	881b      	ldrh	r3, [r3, #0]
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	d055      	beq.n	8014c10 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014b64:	4b30      	ldr	r3, [pc, #192]	; (8014c28 <tcp_parseopt+0xe8>)
 8014b66:	2200      	movs	r2, #0
 8014b68:	801a      	strh	r2, [r3, #0]
 8014b6a:	e045      	b.n	8014bf8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8014b6c:	f7ff ffb2 	bl	8014ad4 <tcp_get_next_optbyte>
 8014b70:	4603      	mov	r3, r0
 8014b72:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8014b74:	7bfb      	ldrb	r3, [r7, #15]
 8014b76:	2b02      	cmp	r3, #2
 8014b78:	d006      	beq.n	8014b88 <tcp_parseopt+0x48>
 8014b7a:	2b02      	cmp	r3, #2
 8014b7c:	dc2b      	bgt.n	8014bd6 <tcp_parseopt+0x96>
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d041      	beq.n	8014c06 <tcp_parseopt+0xc6>
 8014b82:	2b01      	cmp	r3, #1
 8014b84:	d127      	bne.n	8014bd6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8014b86:	e037      	b.n	8014bf8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8014b88:	f7ff ffa4 	bl	8014ad4 <tcp_get_next_optbyte>
 8014b8c:	4603      	mov	r3, r0
 8014b8e:	2b04      	cmp	r3, #4
 8014b90:	d13b      	bne.n	8014c0a <tcp_parseopt+0xca>
 8014b92:	4b25      	ldr	r3, [pc, #148]	; (8014c28 <tcp_parseopt+0xe8>)
 8014b94:	881b      	ldrh	r3, [r3, #0]
 8014b96:	3301      	adds	r3, #1
 8014b98:	4a22      	ldr	r2, [pc, #136]	; (8014c24 <tcp_parseopt+0xe4>)
 8014b9a:	8812      	ldrh	r2, [r2, #0]
 8014b9c:	4293      	cmp	r3, r2
 8014b9e:	da34      	bge.n	8014c0a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8014ba0:	f7ff ff98 	bl	8014ad4 <tcp_get_next_optbyte>
 8014ba4:	4603      	mov	r3, r0
 8014ba6:	b29b      	uxth	r3, r3
 8014ba8:	021b      	lsls	r3, r3, #8
 8014baa:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8014bac:	f7ff ff92 	bl	8014ad4 <tcp_get_next_optbyte>
 8014bb0:	4603      	mov	r3, r0
 8014bb2:	b29a      	uxth	r2, r3
 8014bb4:	89bb      	ldrh	r3, [r7, #12]
 8014bb6:	4313      	orrs	r3, r2
 8014bb8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8014bba:	89bb      	ldrh	r3, [r7, #12]
 8014bbc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8014bc0:	d804      	bhi.n	8014bcc <tcp_parseopt+0x8c>
 8014bc2:	89bb      	ldrh	r3, [r7, #12]
 8014bc4:	2b00      	cmp	r3, #0
 8014bc6:	d001      	beq.n	8014bcc <tcp_parseopt+0x8c>
 8014bc8:	89ba      	ldrh	r2, [r7, #12]
 8014bca:	e001      	b.n	8014bd0 <tcp_parseopt+0x90>
 8014bcc:	f44f 7206 	mov.w	r2, #536	; 0x218
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8014bd4:	e010      	b.n	8014bf8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8014bd6:	f7ff ff7d 	bl	8014ad4 <tcp_get_next_optbyte>
 8014bda:	4603      	mov	r3, r0
 8014bdc:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8014bde:	7afb      	ldrb	r3, [r7, #11]
 8014be0:	2b01      	cmp	r3, #1
 8014be2:	d914      	bls.n	8014c0e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8014be4:	7afb      	ldrb	r3, [r7, #11]
 8014be6:	b29a      	uxth	r2, r3
 8014be8:	4b0f      	ldr	r3, [pc, #60]	; (8014c28 <tcp_parseopt+0xe8>)
 8014bea:	881b      	ldrh	r3, [r3, #0]
 8014bec:	4413      	add	r3, r2
 8014bee:	b29b      	uxth	r3, r3
 8014bf0:	3b02      	subs	r3, #2
 8014bf2:	b29a      	uxth	r2, r3
 8014bf4:	4b0c      	ldr	r3, [pc, #48]	; (8014c28 <tcp_parseopt+0xe8>)
 8014bf6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014bf8:	4b0b      	ldr	r3, [pc, #44]	; (8014c28 <tcp_parseopt+0xe8>)
 8014bfa:	881a      	ldrh	r2, [r3, #0]
 8014bfc:	4b09      	ldr	r3, [pc, #36]	; (8014c24 <tcp_parseopt+0xe4>)
 8014bfe:	881b      	ldrh	r3, [r3, #0]
 8014c00:	429a      	cmp	r2, r3
 8014c02:	d3b3      	bcc.n	8014b6c <tcp_parseopt+0x2c>
 8014c04:	e004      	b.n	8014c10 <tcp_parseopt+0xd0>
          return;
 8014c06:	bf00      	nop
 8014c08:	e002      	b.n	8014c10 <tcp_parseopt+0xd0>
            return;
 8014c0a:	bf00      	nop
 8014c0c:	e000      	b.n	8014c10 <tcp_parseopt+0xd0>
            return;
 8014c0e:	bf00      	nop
      }
    }
  }
}
 8014c10:	3710      	adds	r7, #16
 8014c12:	46bd      	mov	sp, r7
 8014c14:	bd80      	pop	{r7, pc}
 8014c16:	bf00      	nop
 8014c18:	08019958 	.word	0x08019958
 8014c1c:	08019dfc 	.word	0x08019dfc
 8014c20:	080199e4 	.word	0x080199e4
 8014c24:	24015558 	.word	0x24015558
 8014c28:	24015560 	.word	0x24015560

08014c2c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8014c2c:	b480      	push	{r7}
 8014c2e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8014c30:	4b05      	ldr	r3, [pc, #20]	; (8014c48 <tcp_trigger_input_pcb_close+0x1c>)
 8014c32:	781b      	ldrb	r3, [r3, #0]
 8014c34:	f043 0310 	orr.w	r3, r3, #16
 8014c38:	b2da      	uxtb	r2, r3
 8014c3a:	4b03      	ldr	r3, [pc, #12]	; (8014c48 <tcp_trigger_input_pcb_close+0x1c>)
 8014c3c:	701a      	strb	r2, [r3, #0]
}
 8014c3e:	bf00      	nop
 8014c40:	46bd      	mov	sp, r7
 8014c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c46:	4770      	bx	lr
 8014c48:	24015571 	.word	0x24015571

08014c4c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8014c4c:	b580      	push	{r7, lr}
 8014c4e:	b084      	sub	sp, #16
 8014c50:	af00      	add	r7, sp, #0
 8014c52:	60f8      	str	r0, [r7, #12]
 8014c54:	60b9      	str	r1, [r7, #8]
 8014c56:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8014c58:	68fb      	ldr	r3, [r7, #12]
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	d00a      	beq.n	8014c74 <tcp_route+0x28>
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	7a1b      	ldrb	r3, [r3, #8]
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	d006      	beq.n	8014c74 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	7a1b      	ldrb	r3, [r3, #8]
 8014c6a:	4618      	mov	r0, r3
 8014c6c:	f7fb fa2e 	bl	80100cc <netif_get_by_index>
 8014c70:	4603      	mov	r3, r0
 8014c72:	e003      	b.n	8014c7c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8014c74:	6878      	ldr	r0, [r7, #4]
 8014c76:	f7f9 f8f9 	bl	800de6c <ip4_route>
 8014c7a:	4603      	mov	r3, r0
  }
}
 8014c7c:	4618      	mov	r0, r3
 8014c7e:	3710      	adds	r7, #16
 8014c80:	46bd      	mov	sp, r7
 8014c82:	bd80      	pop	{r7, pc}

08014c84 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8014c84:	b590      	push	{r4, r7, lr}
 8014c86:	b087      	sub	sp, #28
 8014c88:	af00      	add	r7, sp, #0
 8014c8a:	60f8      	str	r0, [r7, #12]
 8014c8c:	60b9      	str	r1, [r7, #8]
 8014c8e:	603b      	str	r3, [r7, #0]
 8014c90:	4613      	mov	r3, r2
 8014c92:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d105      	bne.n	8014ca6 <tcp_create_segment+0x22>
 8014c9a:	4b44      	ldr	r3, [pc, #272]	; (8014dac <tcp_create_segment+0x128>)
 8014c9c:	22a3      	movs	r2, #163	; 0xa3
 8014c9e:	4944      	ldr	r1, [pc, #272]	; (8014db0 <tcp_create_segment+0x12c>)
 8014ca0:	4844      	ldr	r0, [pc, #272]	; (8014db4 <tcp_create_segment+0x130>)
 8014ca2:	f002 f937 	bl	8016f14 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8014ca6:	68bb      	ldr	r3, [r7, #8]
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d105      	bne.n	8014cb8 <tcp_create_segment+0x34>
 8014cac:	4b3f      	ldr	r3, [pc, #252]	; (8014dac <tcp_create_segment+0x128>)
 8014cae:	22a4      	movs	r2, #164	; 0xa4
 8014cb0:	4941      	ldr	r1, [pc, #260]	; (8014db8 <tcp_create_segment+0x134>)
 8014cb2:	4840      	ldr	r0, [pc, #256]	; (8014db4 <tcp_create_segment+0x130>)
 8014cb4:	f002 f92e 	bl	8016f14 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014cb8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014cbc:	009b      	lsls	r3, r3, #2
 8014cbe:	b2db      	uxtb	r3, r3
 8014cc0:	f003 0304 	and.w	r3, r3, #4
 8014cc4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8014cc6:	2003      	movs	r0, #3
 8014cc8:	f7fa fe74 	bl	800f9b4 <memp_malloc>
 8014ccc:	6138      	str	r0, [r7, #16]
 8014cce:	693b      	ldr	r3, [r7, #16]
 8014cd0:	2b00      	cmp	r3, #0
 8014cd2:	d104      	bne.n	8014cde <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8014cd4:	68b8      	ldr	r0, [r7, #8]
 8014cd6:	f7fb fd87 	bl	80107e8 <pbuf_free>
    return NULL;
 8014cda:	2300      	movs	r3, #0
 8014cdc:	e061      	b.n	8014da2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8014cde:	693b      	ldr	r3, [r7, #16]
 8014ce0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8014ce4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8014ce6:	693b      	ldr	r3, [r7, #16]
 8014ce8:	2200      	movs	r2, #0
 8014cea:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8014cec:	693b      	ldr	r3, [r7, #16]
 8014cee:	68ba      	ldr	r2, [r7, #8]
 8014cf0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8014cf2:	68bb      	ldr	r3, [r7, #8]
 8014cf4:	891a      	ldrh	r2, [r3, #8]
 8014cf6:	7dfb      	ldrb	r3, [r7, #23]
 8014cf8:	b29b      	uxth	r3, r3
 8014cfa:	429a      	cmp	r2, r3
 8014cfc:	d205      	bcs.n	8014d0a <tcp_create_segment+0x86>
 8014cfe:	4b2b      	ldr	r3, [pc, #172]	; (8014dac <tcp_create_segment+0x128>)
 8014d00:	22b0      	movs	r2, #176	; 0xb0
 8014d02:	492e      	ldr	r1, [pc, #184]	; (8014dbc <tcp_create_segment+0x138>)
 8014d04:	482b      	ldr	r0, [pc, #172]	; (8014db4 <tcp_create_segment+0x130>)
 8014d06:	f002 f905 	bl	8016f14 <iprintf>
  seg->len = p->tot_len - optlen;
 8014d0a:	68bb      	ldr	r3, [r7, #8]
 8014d0c:	891a      	ldrh	r2, [r3, #8]
 8014d0e:	7dfb      	ldrb	r3, [r7, #23]
 8014d10:	b29b      	uxth	r3, r3
 8014d12:	1ad3      	subs	r3, r2, r3
 8014d14:	b29a      	uxth	r2, r3
 8014d16:	693b      	ldr	r3, [r7, #16]
 8014d18:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8014d1a:	2114      	movs	r1, #20
 8014d1c:	68b8      	ldr	r0, [r7, #8]
 8014d1e:	f7fb fccd 	bl	80106bc <pbuf_add_header>
 8014d22:	4603      	mov	r3, r0
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	d004      	beq.n	8014d32 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8014d28:	6938      	ldr	r0, [r7, #16]
 8014d2a:	f7fd f8ce 	bl	8011eca <tcp_seg_free>
    return NULL;
 8014d2e:	2300      	movs	r3, #0
 8014d30:	e037      	b.n	8014da2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8014d32:	693b      	ldr	r3, [r7, #16]
 8014d34:	685b      	ldr	r3, [r3, #4]
 8014d36:	685a      	ldr	r2, [r3, #4]
 8014d38:	693b      	ldr	r3, [r7, #16]
 8014d3a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8014d3c:	68fb      	ldr	r3, [r7, #12]
 8014d3e:	8ada      	ldrh	r2, [r3, #22]
 8014d40:	693b      	ldr	r3, [r7, #16]
 8014d42:	68dc      	ldr	r4, [r3, #12]
 8014d44:	4610      	mov	r0, r2
 8014d46:	f7f7 fdb9 	bl	800c8bc <lwip_htons>
 8014d4a:	4603      	mov	r3, r0
 8014d4c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8014d4e:	68fb      	ldr	r3, [r7, #12]
 8014d50:	8b1a      	ldrh	r2, [r3, #24]
 8014d52:	693b      	ldr	r3, [r7, #16]
 8014d54:	68dc      	ldr	r4, [r3, #12]
 8014d56:	4610      	mov	r0, r2
 8014d58:	f7f7 fdb0 	bl	800c8bc <lwip_htons>
 8014d5c:	4603      	mov	r3, r0
 8014d5e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8014d60:	693b      	ldr	r3, [r7, #16]
 8014d62:	68dc      	ldr	r4, [r3, #12]
 8014d64:	6838      	ldr	r0, [r7, #0]
 8014d66:	f7f7 fdbe 	bl	800c8e6 <lwip_htonl>
 8014d6a:	4603      	mov	r3, r0
 8014d6c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8014d6e:	7dfb      	ldrb	r3, [r7, #23]
 8014d70:	089b      	lsrs	r3, r3, #2
 8014d72:	b2db      	uxtb	r3, r3
 8014d74:	b29b      	uxth	r3, r3
 8014d76:	3305      	adds	r3, #5
 8014d78:	b29b      	uxth	r3, r3
 8014d7a:	031b      	lsls	r3, r3, #12
 8014d7c:	b29a      	uxth	r2, r3
 8014d7e:	79fb      	ldrb	r3, [r7, #7]
 8014d80:	b29b      	uxth	r3, r3
 8014d82:	4313      	orrs	r3, r2
 8014d84:	b29a      	uxth	r2, r3
 8014d86:	693b      	ldr	r3, [r7, #16]
 8014d88:	68dc      	ldr	r4, [r3, #12]
 8014d8a:	4610      	mov	r0, r2
 8014d8c:	f7f7 fd96 	bl	800c8bc <lwip_htons>
 8014d90:	4603      	mov	r3, r0
 8014d92:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8014d94:	693b      	ldr	r3, [r7, #16]
 8014d96:	68db      	ldr	r3, [r3, #12]
 8014d98:	2200      	movs	r2, #0
 8014d9a:	749a      	strb	r2, [r3, #18]
 8014d9c:	2200      	movs	r2, #0
 8014d9e:	74da      	strb	r2, [r3, #19]
  return seg;
 8014da0:	693b      	ldr	r3, [r7, #16]
}
 8014da2:	4618      	mov	r0, r3
 8014da4:	371c      	adds	r7, #28
 8014da6:	46bd      	mov	sp, r7
 8014da8:	bd90      	pop	{r4, r7, pc}
 8014daa:	bf00      	nop
 8014dac:	08019e18 	.word	0x08019e18
 8014db0:	08019e8c 	.word	0x08019e8c
 8014db4:	08019eac 	.word	0x08019eac
 8014db8:	08019ed4 	.word	0x08019ed4
 8014dbc:	08019ef8 	.word	0x08019ef8

08014dc0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8014dc0:	b590      	push	{r4, r7, lr}
 8014dc2:	b08b      	sub	sp, #44	; 0x2c
 8014dc4:	af02      	add	r7, sp, #8
 8014dc6:	6078      	str	r0, [r7, #4]
 8014dc8:	460b      	mov	r3, r1
 8014dca:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8014dcc:	2300      	movs	r3, #0
 8014dce:	61fb      	str	r3, [r7, #28]
 8014dd0:	2300      	movs	r3, #0
 8014dd2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8014dd4:	2300      	movs	r3, #0
 8014dd6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	d106      	bne.n	8014dec <tcp_split_unsent_seg+0x2c>
 8014dde:	4b95      	ldr	r3, [pc, #596]	; (8015034 <tcp_split_unsent_seg+0x274>)
 8014de0:	f240 324b 	movw	r2, #843	; 0x34b
 8014de4:	4994      	ldr	r1, [pc, #592]	; (8015038 <tcp_split_unsent_seg+0x278>)
 8014de6:	4895      	ldr	r0, [pc, #596]	; (801503c <tcp_split_unsent_seg+0x27c>)
 8014de8:	f002 f894 	bl	8016f14 <iprintf>

  useg = pcb->unsent;
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014df0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8014df2:	697b      	ldr	r3, [r7, #20]
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d102      	bne.n	8014dfe <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8014df8:	f04f 33ff 	mov.w	r3, #4294967295
 8014dfc:	e116      	b.n	801502c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8014dfe:	887b      	ldrh	r3, [r7, #2]
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	d109      	bne.n	8014e18 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8014e04:	4b8b      	ldr	r3, [pc, #556]	; (8015034 <tcp_split_unsent_seg+0x274>)
 8014e06:	f240 3253 	movw	r2, #851	; 0x353
 8014e0a:	498d      	ldr	r1, [pc, #564]	; (8015040 <tcp_split_unsent_seg+0x280>)
 8014e0c:	488b      	ldr	r0, [pc, #556]	; (801503c <tcp_split_unsent_seg+0x27c>)
 8014e0e:	f002 f881 	bl	8016f14 <iprintf>
    return ERR_VAL;
 8014e12:	f06f 0305 	mvn.w	r3, #5
 8014e16:	e109      	b.n	801502c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8014e18:	697b      	ldr	r3, [r7, #20]
 8014e1a:	891b      	ldrh	r3, [r3, #8]
 8014e1c:	887a      	ldrh	r2, [r7, #2]
 8014e1e:	429a      	cmp	r2, r3
 8014e20:	d301      	bcc.n	8014e26 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8014e22:	2300      	movs	r3, #0
 8014e24:	e102      	b.n	801502c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014e2a:	887a      	ldrh	r2, [r7, #2]
 8014e2c:	429a      	cmp	r2, r3
 8014e2e:	d906      	bls.n	8014e3e <tcp_split_unsent_seg+0x7e>
 8014e30:	4b80      	ldr	r3, [pc, #512]	; (8015034 <tcp_split_unsent_seg+0x274>)
 8014e32:	f240 325b 	movw	r2, #859	; 0x35b
 8014e36:	4983      	ldr	r1, [pc, #524]	; (8015044 <tcp_split_unsent_seg+0x284>)
 8014e38:	4880      	ldr	r0, [pc, #512]	; (801503c <tcp_split_unsent_seg+0x27c>)
 8014e3a:	f002 f86b 	bl	8016f14 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8014e3e:	697b      	ldr	r3, [r7, #20]
 8014e40:	891b      	ldrh	r3, [r3, #8]
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	d106      	bne.n	8014e54 <tcp_split_unsent_seg+0x94>
 8014e46:	4b7b      	ldr	r3, [pc, #492]	; (8015034 <tcp_split_unsent_seg+0x274>)
 8014e48:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8014e4c:	497e      	ldr	r1, [pc, #504]	; (8015048 <tcp_split_unsent_seg+0x288>)
 8014e4e:	487b      	ldr	r0, [pc, #492]	; (801503c <tcp_split_unsent_seg+0x27c>)
 8014e50:	f002 f860 	bl	8016f14 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8014e54:	697b      	ldr	r3, [r7, #20]
 8014e56:	7a9b      	ldrb	r3, [r3, #10]
 8014e58:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8014e5a:	7bfb      	ldrb	r3, [r7, #15]
 8014e5c:	009b      	lsls	r3, r3, #2
 8014e5e:	b2db      	uxtb	r3, r3
 8014e60:	f003 0304 	and.w	r3, r3, #4
 8014e64:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8014e66:	697b      	ldr	r3, [r7, #20]
 8014e68:	891a      	ldrh	r2, [r3, #8]
 8014e6a:	887b      	ldrh	r3, [r7, #2]
 8014e6c:	1ad3      	subs	r3, r2, r3
 8014e6e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8014e70:	7bbb      	ldrb	r3, [r7, #14]
 8014e72:	b29a      	uxth	r2, r3
 8014e74:	89bb      	ldrh	r3, [r7, #12]
 8014e76:	4413      	add	r3, r2
 8014e78:	b29b      	uxth	r3, r3
 8014e7a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014e7e:	4619      	mov	r1, r3
 8014e80:	2036      	movs	r0, #54	; 0x36
 8014e82:	f7fb f9cd 	bl	8010220 <pbuf_alloc>
 8014e86:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014e88:	693b      	ldr	r3, [r7, #16]
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	f000 80b7 	beq.w	8014ffe <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8014e90:	697b      	ldr	r3, [r7, #20]
 8014e92:	685b      	ldr	r3, [r3, #4]
 8014e94:	891a      	ldrh	r2, [r3, #8]
 8014e96:	697b      	ldr	r3, [r7, #20]
 8014e98:	891b      	ldrh	r3, [r3, #8]
 8014e9a:	1ad3      	subs	r3, r2, r3
 8014e9c:	b29a      	uxth	r2, r3
 8014e9e:	887b      	ldrh	r3, [r7, #2]
 8014ea0:	4413      	add	r3, r2
 8014ea2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8014ea4:	697b      	ldr	r3, [r7, #20]
 8014ea6:	6858      	ldr	r0, [r3, #4]
 8014ea8:	693b      	ldr	r3, [r7, #16]
 8014eaa:	685a      	ldr	r2, [r3, #4]
 8014eac:	7bbb      	ldrb	r3, [r7, #14]
 8014eae:	18d1      	adds	r1, r2, r3
 8014eb0:	897b      	ldrh	r3, [r7, #10]
 8014eb2:	89ba      	ldrh	r2, [r7, #12]
 8014eb4:	f7fb fe8e 	bl	8010bd4 <pbuf_copy_partial>
 8014eb8:	4603      	mov	r3, r0
 8014eba:	461a      	mov	r2, r3
 8014ebc:	89bb      	ldrh	r3, [r7, #12]
 8014ebe:	4293      	cmp	r3, r2
 8014ec0:	f040 809f 	bne.w	8015002 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8014ec4:	697b      	ldr	r3, [r7, #20]
 8014ec6:	68db      	ldr	r3, [r3, #12]
 8014ec8:	899b      	ldrh	r3, [r3, #12]
 8014eca:	b29b      	uxth	r3, r3
 8014ecc:	4618      	mov	r0, r3
 8014ece:	f7f7 fcf5 	bl	800c8bc <lwip_htons>
 8014ed2:	4603      	mov	r3, r0
 8014ed4:	b2db      	uxtb	r3, r3
 8014ed6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014eda:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8014edc:	2300      	movs	r3, #0
 8014ede:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8014ee0:	7efb      	ldrb	r3, [r7, #27]
 8014ee2:	f003 0308 	and.w	r3, r3, #8
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	d007      	beq.n	8014efa <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8014eea:	7efb      	ldrb	r3, [r7, #27]
 8014eec:	f023 0308 	bic.w	r3, r3, #8
 8014ef0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8014ef2:	7ebb      	ldrb	r3, [r7, #26]
 8014ef4:	f043 0308 	orr.w	r3, r3, #8
 8014ef8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8014efa:	7efb      	ldrb	r3, [r7, #27]
 8014efc:	f003 0301 	and.w	r3, r3, #1
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d007      	beq.n	8014f14 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8014f04:	7efb      	ldrb	r3, [r7, #27]
 8014f06:	f023 0301 	bic.w	r3, r3, #1
 8014f0a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8014f0c:	7ebb      	ldrb	r3, [r7, #26]
 8014f0e:	f043 0301 	orr.w	r3, r3, #1
 8014f12:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8014f14:	697b      	ldr	r3, [r7, #20]
 8014f16:	68db      	ldr	r3, [r3, #12]
 8014f18:	685b      	ldr	r3, [r3, #4]
 8014f1a:	4618      	mov	r0, r3
 8014f1c:	f7f7 fce3 	bl	800c8e6 <lwip_htonl>
 8014f20:	4602      	mov	r2, r0
 8014f22:	887b      	ldrh	r3, [r7, #2]
 8014f24:	18d1      	adds	r1, r2, r3
 8014f26:	7eba      	ldrb	r2, [r7, #26]
 8014f28:	7bfb      	ldrb	r3, [r7, #15]
 8014f2a:	9300      	str	r3, [sp, #0]
 8014f2c:	460b      	mov	r3, r1
 8014f2e:	6939      	ldr	r1, [r7, #16]
 8014f30:	6878      	ldr	r0, [r7, #4]
 8014f32:	f7ff fea7 	bl	8014c84 <tcp_create_segment>
 8014f36:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8014f38:	69fb      	ldr	r3, [r7, #28]
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d063      	beq.n	8015006 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8014f3e:	697b      	ldr	r3, [r7, #20]
 8014f40:	685b      	ldr	r3, [r3, #4]
 8014f42:	4618      	mov	r0, r3
 8014f44:	f7fb fcde 	bl	8010904 <pbuf_clen>
 8014f48:	4603      	mov	r3, r0
 8014f4a:	461a      	mov	r2, r3
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014f52:	1a9b      	subs	r3, r3, r2
 8014f54:	b29a      	uxth	r2, r3
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8014f5c:	697b      	ldr	r3, [r7, #20]
 8014f5e:	6858      	ldr	r0, [r3, #4]
 8014f60:	697b      	ldr	r3, [r7, #20]
 8014f62:	685b      	ldr	r3, [r3, #4]
 8014f64:	891a      	ldrh	r2, [r3, #8]
 8014f66:	89bb      	ldrh	r3, [r7, #12]
 8014f68:	1ad3      	subs	r3, r2, r3
 8014f6a:	b29b      	uxth	r3, r3
 8014f6c:	4619      	mov	r1, r3
 8014f6e:	f7fb fab5 	bl	80104dc <pbuf_realloc>
  useg->len -= remainder;
 8014f72:	697b      	ldr	r3, [r7, #20]
 8014f74:	891a      	ldrh	r2, [r3, #8]
 8014f76:	89bb      	ldrh	r3, [r7, #12]
 8014f78:	1ad3      	subs	r3, r2, r3
 8014f7a:	b29a      	uxth	r2, r3
 8014f7c:	697b      	ldr	r3, [r7, #20]
 8014f7e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8014f80:	697b      	ldr	r3, [r7, #20]
 8014f82:	68db      	ldr	r3, [r3, #12]
 8014f84:	899b      	ldrh	r3, [r3, #12]
 8014f86:	b29c      	uxth	r4, r3
 8014f88:	7efb      	ldrb	r3, [r7, #27]
 8014f8a:	b29b      	uxth	r3, r3
 8014f8c:	4618      	mov	r0, r3
 8014f8e:	f7f7 fc95 	bl	800c8bc <lwip_htons>
 8014f92:	4603      	mov	r3, r0
 8014f94:	461a      	mov	r2, r3
 8014f96:	697b      	ldr	r3, [r7, #20]
 8014f98:	68db      	ldr	r3, [r3, #12]
 8014f9a:	4322      	orrs	r2, r4
 8014f9c:	b292      	uxth	r2, r2
 8014f9e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8014fa0:	697b      	ldr	r3, [r7, #20]
 8014fa2:	685b      	ldr	r3, [r3, #4]
 8014fa4:	4618      	mov	r0, r3
 8014fa6:	f7fb fcad 	bl	8010904 <pbuf_clen>
 8014faa:	4603      	mov	r3, r0
 8014fac:	461a      	mov	r2, r3
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014fb4:	4413      	add	r3, r2
 8014fb6:	b29a      	uxth	r2, r3
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8014fbe:	69fb      	ldr	r3, [r7, #28]
 8014fc0:	685b      	ldr	r3, [r3, #4]
 8014fc2:	4618      	mov	r0, r3
 8014fc4:	f7fb fc9e 	bl	8010904 <pbuf_clen>
 8014fc8:	4603      	mov	r3, r0
 8014fca:	461a      	mov	r2, r3
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014fd2:	4413      	add	r3, r2
 8014fd4:	b29a      	uxth	r2, r3
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8014fdc:	697b      	ldr	r3, [r7, #20]
 8014fde:	681a      	ldr	r2, [r3, #0]
 8014fe0:	69fb      	ldr	r3, [r7, #28]
 8014fe2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8014fe4:	697b      	ldr	r3, [r7, #20]
 8014fe6:	69fa      	ldr	r2, [r7, #28]
 8014fe8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8014fea:	69fb      	ldr	r3, [r7, #28]
 8014fec:	681b      	ldr	r3, [r3, #0]
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	d103      	bne.n	8014ffa <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	2200      	movs	r2, #0
 8014ff6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8014ffa:	2300      	movs	r3, #0
 8014ffc:	e016      	b.n	801502c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8014ffe:	bf00      	nop
 8015000:	e002      	b.n	8015008 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8015002:	bf00      	nop
 8015004:	e000      	b.n	8015008 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8015006:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8015008:	69fb      	ldr	r3, [r7, #28]
 801500a:	2b00      	cmp	r3, #0
 801500c:	d006      	beq.n	801501c <tcp_split_unsent_seg+0x25c>
 801500e:	4b09      	ldr	r3, [pc, #36]	; (8015034 <tcp_split_unsent_seg+0x274>)
 8015010:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8015014:	490d      	ldr	r1, [pc, #52]	; (801504c <tcp_split_unsent_seg+0x28c>)
 8015016:	4809      	ldr	r0, [pc, #36]	; (801503c <tcp_split_unsent_seg+0x27c>)
 8015018:	f001 ff7c 	bl	8016f14 <iprintf>
  if (p != NULL) {
 801501c:	693b      	ldr	r3, [r7, #16]
 801501e:	2b00      	cmp	r3, #0
 8015020:	d002      	beq.n	8015028 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8015022:	6938      	ldr	r0, [r7, #16]
 8015024:	f7fb fbe0 	bl	80107e8 <pbuf_free>
  }

  return ERR_MEM;
 8015028:	f04f 33ff 	mov.w	r3, #4294967295
}
 801502c:	4618      	mov	r0, r3
 801502e:	3724      	adds	r7, #36	; 0x24
 8015030:	46bd      	mov	sp, r7
 8015032:	bd90      	pop	{r4, r7, pc}
 8015034:	08019e18 	.word	0x08019e18
 8015038:	0801a1ec 	.word	0x0801a1ec
 801503c:	08019eac 	.word	0x08019eac
 8015040:	0801a210 	.word	0x0801a210
 8015044:	0801a234 	.word	0x0801a234
 8015048:	0801a244 	.word	0x0801a244
 801504c:	0801a254 	.word	0x0801a254

08015050 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8015050:	b590      	push	{r4, r7, lr}
 8015052:	b085      	sub	sp, #20
 8015054:	af00      	add	r7, sp, #0
 8015056:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	2b00      	cmp	r3, #0
 801505c:	d106      	bne.n	801506c <tcp_send_fin+0x1c>
 801505e:	4b21      	ldr	r3, [pc, #132]	; (80150e4 <tcp_send_fin+0x94>)
 8015060:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8015064:	4920      	ldr	r1, [pc, #128]	; (80150e8 <tcp_send_fin+0x98>)
 8015066:	4821      	ldr	r0, [pc, #132]	; (80150ec <tcp_send_fin+0x9c>)
 8015068:	f001 ff54 	bl	8016f14 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015070:	2b00      	cmp	r3, #0
 8015072:	d02e      	beq.n	80150d2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015078:	60fb      	str	r3, [r7, #12]
 801507a:	e002      	b.n	8015082 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801507c:	68fb      	ldr	r3, [r7, #12]
 801507e:	681b      	ldr	r3, [r3, #0]
 8015080:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015082:	68fb      	ldr	r3, [r7, #12]
 8015084:	681b      	ldr	r3, [r3, #0]
 8015086:	2b00      	cmp	r3, #0
 8015088:	d1f8      	bne.n	801507c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801508a:	68fb      	ldr	r3, [r7, #12]
 801508c:	68db      	ldr	r3, [r3, #12]
 801508e:	899b      	ldrh	r3, [r3, #12]
 8015090:	b29b      	uxth	r3, r3
 8015092:	4618      	mov	r0, r3
 8015094:	f7f7 fc12 	bl	800c8bc <lwip_htons>
 8015098:	4603      	mov	r3, r0
 801509a:	b2db      	uxtb	r3, r3
 801509c:	f003 0307 	and.w	r3, r3, #7
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	d116      	bne.n	80150d2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80150a4:	68fb      	ldr	r3, [r7, #12]
 80150a6:	68db      	ldr	r3, [r3, #12]
 80150a8:	899b      	ldrh	r3, [r3, #12]
 80150aa:	b29c      	uxth	r4, r3
 80150ac:	2001      	movs	r0, #1
 80150ae:	f7f7 fc05 	bl	800c8bc <lwip_htons>
 80150b2:	4603      	mov	r3, r0
 80150b4:	461a      	mov	r2, r3
 80150b6:	68fb      	ldr	r3, [r7, #12]
 80150b8:	68db      	ldr	r3, [r3, #12]
 80150ba:	4322      	orrs	r2, r4
 80150bc:	b292      	uxth	r2, r2
 80150be:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	8b5b      	ldrh	r3, [r3, #26]
 80150c4:	f043 0320 	orr.w	r3, r3, #32
 80150c8:	b29a      	uxth	r2, r3
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80150ce:	2300      	movs	r3, #0
 80150d0:	e004      	b.n	80150dc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80150d2:	2101      	movs	r1, #1
 80150d4:	6878      	ldr	r0, [r7, #4]
 80150d6:	f000 f80b 	bl	80150f0 <tcp_enqueue_flags>
 80150da:	4603      	mov	r3, r0
}
 80150dc:	4618      	mov	r0, r3
 80150de:	3714      	adds	r7, #20
 80150e0:	46bd      	mov	sp, r7
 80150e2:	bd90      	pop	{r4, r7, pc}
 80150e4:	08019e18 	.word	0x08019e18
 80150e8:	0801a260 	.word	0x0801a260
 80150ec:	08019eac 	.word	0x08019eac

080150f0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80150f0:	b580      	push	{r7, lr}
 80150f2:	b08a      	sub	sp, #40	; 0x28
 80150f4:	af02      	add	r7, sp, #8
 80150f6:	6078      	str	r0, [r7, #4]
 80150f8:	460b      	mov	r3, r1
 80150fa:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80150fc:	2300      	movs	r3, #0
 80150fe:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8015100:	2300      	movs	r3, #0
 8015102:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8015104:	78fb      	ldrb	r3, [r7, #3]
 8015106:	f003 0303 	and.w	r3, r3, #3
 801510a:	2b00      	cmp	r3, #0
 801510c:	d106      	bne.n	801511c <tcp_enqueue_flags+0x2c>
 801510e:	4b67      	ldr	r3, [pc, #412]	; (80152ac <tcp_enqueue_flags+0x1bc>)
 8015110:	f240 4211 	movw	r2, #1041	; 0x411
 8015114:	4966      	ldr	r1, [pc, #408]	; (80152b0 <tcp_enqueue_flags+0x1c0>)
 8015116:	4867      	ldr	r0, [pc, #412]	; (80152b4 <tcp_enqueue_flags+0x1c4>)
 8015118:	f001 fefc 	bl	8016f14 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	2b00      	cmp	r3, #0
 8015120:	d106      	bne.n	8015130 <tcp_enqueue_flags+0x40>
 8015122:	4b62      	ldr	r3, [pc, #392]	; (80152ac <tcp_enqueue_flags+0x1bc>)
 8015124:	f240 4213 	movw	r2, #1043	; 0x413
 8015128:	4963      	ldr	r1, [pc, #396]	; (80152b8 <tcp_enqueue_flags+0x1c8>)
 801512a:	4862      	ldr	r0, [pc, #392]	; (80152b4 <tcp_enqueue_flags+0x1c4>)
 801512c:	f001 fef2 	bl	8016f14 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8015130:	78fb      	ldrb	r3, [r7, #3]
 8015132:	f003 0302 	and.w	r3, r3, #2
 8015136:	2b00      	cmp	r3, #0
 8015138:	d001      	beq.n	801513e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801513a:	2301      	movs	r3, #1
 801513c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801513e:	7ffb      	ldrb	r3, [r7, #31]
 8015140:	009b      	lsls	r3, r3, #2
 8015142:	b2db      	uxtb	r3, r3
 8015144:	f003 0304 	and.w	r3, r3, #4
 8015148:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801514a:	7dfb      	ldrb	r3, [r7, #23]
 801514c:	b29b      	uxth	r3, r3
 801514e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015152:	4619      	mov	r1, r3
 8015154:	2036      	movs	r0, #54	; 0x36
 8015156:	f7fb f863 	bl	8010220 <pbuf_alloc>
 801515a:	6138      	str	r0, [r7, #16]
 801515c:	693b      	ldr	r3, [r7, #16]
 801515e:	2b00      	cmp	r3, #0
 8015160:	d109      	bne.n	8015176 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	8b5b      	ldrh	r3, [r3, #26]
 8015166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801516a:	b29a      	uxth	r2, r3
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8015170:	f04f 33ff 	mov.w	r3, #4294967295
 8015174:	e095      	b.n	80152a2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8015176:	693b      	ldr	r3, [r7, #16]
 8015178:	895a      	ldrh	r2, [r3, #10]
 801517a:	7dfb      	ldrb	r3, [r7, #23]
 801517c:	b29b      	uxth	r3, r3
 801517e:	429a      	cmp	r2, r3
 8015180:	d206      	bcs.n	8015190 <tcp_enqueue_flags+0xa0>
 8015182:	4b4a      	ldr	r3, [pc, #296]	; (80152ac <tcp_enqueue_flags+0x1bc>)
 8015184:	f240 4239 	movw	r2, #1081	; 0x439
 8015188:	494c      	ldr	r1, [pc, #304]	; (80152bc <tcp_enqueue_flags+0x1cc>)
 801518a:	484a      	ldr	r0, [pc, #296]	; (80152b4 <tcp_enqueue_flags+0x1c4>)
 801518c:	f001 fec2 	bl	8016f14 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8015194:	78fa      	ldrb	r2, [r7, #3]
 8015196:	7ffb      	ldrb	r3, [r7, #31]
 8015198:	9300      	str	r3, [sp, #0]
 801519a:	460b      	mov	r3, r1
 801519c:	6939      	ldr	r1, [r7, #16]
 801519e:	6878      	ldr	r0, [r7, #4]
 80151a0:	f7ff fd70 	bl	8014c84 <tcp_create_segment>
 80151a4:	60f8      	str	r0, [r7, #12]
 80151a6:	68fb      	ldr	r3, [r7, #12]
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d109      	bne.n	80151c0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	8b5b      	ldrh	r3, [r3, #26]
 80151b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80151b4:	b29a      	uxth	r2, r3
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80151ba:	f04f 33ff 	mov.w	r3, #4294967295
 80151be:	e070      	b.n	80152a2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80151c0:	68fb      	ldr	r3, [r7, #12]
 80151c2:	68db      	ldr	r3, [r3, #12]
 80151c4:	f003 0303 	and.w	r3, r3, #3
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	d006      	beq.n	80151da <tcp_enqueue_flags+0xea>
 80151cc:	4b37      	ldr	r3, [pc, #220]	; (80152ac <tcp_enqueue_flags+0x1bc>)
 80151ce:	f240 4242 	movw	r2, #1090	; 0x442
 80151d2:	493b      	ldr	r1, [pc, #236]	; (80152c0 <tcp_enqueue_flags+0x1d0>)
 80151d4:	4837      	ldr	r0, [pc, #220]	; (80152b4 <tcp_enqueue_flags+0x1c4>)
 80151d6:	f001 fe9d 	bl	8016f14 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80151da:	68fb      	ldr	r3, [r7, #12]
 80151dc:	891b      	ldrh	r3, [r3, #8]
 80151de:	2b00      	cmp	r3, #0
 80151e0:	d006      	beq.n	80151f0 <tcp_enqueue_flags+0x100>
 80151e2:	4b32      	ldr	r3, [pc, #200]	; (80152ac <tcp_enqueue_flags+0x1bc>)
 80151e4:	f240 4243 	movw	r2, #1091	; 0x443
 80151e8:	4936      	ldr	r1, [pc, #216]	; (80152c4 <tcp_enqueue_flags+0x1d4>)
 80151ea:	4832      	ldr	r0, [pc, #200]	; (80152b4 <tcp_enqueue_flags+0x1c4>)
 80151ec:	f001 fe92 	bl	8016f14 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	d103      	bne.n	8015200 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	68fa      	ldr	r2, [r7, #12]
 80151fc:	66da      	str	r2, [r3, #108]	; 0x6c
 80151fe:	e00d      	b.n	801521c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015204:	61bb      	str	r3, [r7, #24]
 8015206:	e002      	b.n	801520e <tcp_enqueue_flags+0x11e>
 8015208:	69bb      	ldr	r3, [r7, #24]
 801520a:	681b      	ldr	r3, [r3, #0]
 801520c:	61bb      	str	r3, [r7, #24]
 801520e:	69bb      	ldr	r3, [r7, #24]
 8015210:	681b      	ldr	r3, [r3, #0]
 8015212:	2b00      	cmp	r3, #0
 8015214:	d1f8      	bne.n	8015208 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8015216:	69bb      	ldr	r3, [r7, #24]
 8015218:	68fa      	ldr	r2, [r7, #12]
 801521a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	2200      	movs	r2, #0
 8015220:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8015224:	78fb      	ldrb	r3, [r7, #3]
 8015226:	f003 0302 	and.w	r3, r3, #2
 801522a:	2b00      	cmp	r3, #0
 801522c:	d104      	bne.n	8015238 <tcp_enqueue_flags+0x148>
 801522e:	78fb      	ldrb	r3, [r7, #3]
 8015230:	f003 0301 	and.w	r3, r3, #1
 8015234:	2b00      	cmp	r3, #0
 8015236:	d004      	beq.n	8015242 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801523c:	1c5a      	adds	r2, r3, #1
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8015242:	78fb      	ldrb	r3, [r7, #3]
 8015244:	f003 0301 	and.w	r3, r3, #1
 8015248:	2b00      	cmp	r3, #0
 801524a:	d006      	beq.n	801525a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	8b5b      	ldrh	r3, [r3, #26]
 8015250:	f043 0320 	orr.w	r3, r3, #32
 8015254:	b29a      	uxth	r2, r3
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801525a:	68fb      	ldr	r3, [r7, #12]
 801525c:	685b      	ldr	r3, [r3, #4]
 801525e:	4618      	mov	r0, r3
 8015260:	f7fb fb50 	bl	8010904 <pbuf_clen>
 8015264:	4603      	mov	r3, r0
 8015266:	461a      	mov	r2, r3
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801526e:	4413      	add	r3, r2
 8015270:	b29a      	uxth	r2, r3
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801527e:	2b00      	cmp	r3, #0
 8015280:	d00e      	beq.n	80152a0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015286:	2b00      	cmp	r3, #0
 8015288:	d10a      	bne.n	80152a0 <tcp_enqueue_flags+0x1b0>
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801528e:	2b00      	cmp	r3, #0
 8015290:	d106      	bne.n	80152a0 <tcp_enqueue_flags+0x1b0>
 8015292:	4b06      	ldr	r3, [pc, #24]	; (80152ac <tcp_enqueue_flags+0x1bc>)
 8015294:	f240 4265 	movw	r2, #1125	; 0x465
 8015298:	490b      	ldr	r1, [pc, #44]	; (80152c8 <tcp_enqueue_flags+0x1d8>)
 801529a:	4806      	ldr	r0, [pc, #24]	; (80152b4 <tcp_enqueue_flags+0x1c4>)
 801529c:	f001 fe3a 	bl	8016f14 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80152a0:	2300      	movs	r3, #0
}
 80152a2:	4618      	mov	r0, r3
 80152a4:	3720      	adds	r7, #32
 80152a6:	46bd      	mov	sp, r7
 80152a8:	bd80      	pop	{r7, pc}
 80152aa:	bf00      	nop
 80152ac:	08019e18 	.word	0x08019e18
 80152b0:	0801a27c 	.word	0x0801a27c
 80152b4:	08019eac 	.word	0x08019eac
 80152b8:	0801a2d4 	.word	0x0801a2d4
 80152bc:	0801a2f4 	.word	0x0801a2f4
 80152c0:	0801a330 	.word	0x0801a330
 80152c4:	0801a348 	.word	0x0801a348
 80152c8:	0801a374 	.word	0x0801a374

080152cc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80152cc:	b5b0      	push	{r4, r5, r7, lr}
 80152ce:	b08a      	sub	sp, #40	; 0x28
 80152d0:	af00      	add	r7, sp, #0
 80152d2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	d106      	bne.n	80152e8 <tcp_output+0x1c>
 80152da:	4b8a      	ldr	r3, [pc, #552]	; (8015504 <tcp_output+0x238>)
 80152dc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80152e0:	4989      	ldr	r1, [pc, #548]	; (8015508 <tcp_output+0x23c>)
 80152e2:	488a      	ldr	r0, [pc, #552]	; (801550c <tcp_output+0x240>)
 80152e4:	f001 fe16 	bl	8016f14 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	7d1b      	ldrb	r3, [r3, #20]
 80152ec:	2b01      	cmp	r3, #1
 80152ee:	d106      	bne.n	80152fe <tcp_output+0x32>
 80152f0:	4b84      	ldr	r3, [pc, #528]	; (8015504 <tcp_output+0x238>)
 80152f2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80152f6:	4986      	ldr	r1, [pc, #536]	; (8015510 <tcp_output+0x244>)
 80152f8:	4884      	ldr	r0, [pc, #528]	; (801550c <tcp_output+0x240>)
 80152fa:	f001 fe0b 	bl	8016f14 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80152fe:	4b85      	ldr	r3, [pc, #532]	; (8015514 <tcp_output+0x248>)
 8015300:	681b      	ldr	r3, [r3, #0]
 8015302:	687a      	ldr	r2, [r7, #4]
 8015304:	429a      	cmp	r2, r3
 8015306:	d101      	bne.n	801530c <tcp_output+0x40>
    return ERR_OK;
 8015308:	2300      	movs	r3, #0
 801530a:	e1ce      	b.n	80156aa <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015318:	4293      	cmp	r3, r2
 801531a:	bf28      	it	cs
 801531c:	4613      	movcs	r3, r2
 801531e:	b29b      	uxth	r3, r3
 8015320:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015326:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8015328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801532a:	2b00      	cmp	r3, #0
 801532c:	d10b      	bne.n	8015346 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	8b5b      	ldrh	r3, [r3, #26]
 8015332:	f003 0302 	and.w	r3, r3, #2
 8015336:	2b00      	cmp	r3, #0
 8015338:	f000 81aa 	beq.w	8015690 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801533c:	6878      	ldr	r0, [r7, #4]
 801533e:	f000 fdcb 	bl	8015ed8 <tcp_send_empty_ack>
 8015342:	4603      	mov	r3, r0
 8015344:	e1b1      	b.n	80156aa <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8015346:	6879      	ldr	r1, [r7, #4]
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	3304      	adds	r3, #4
 801534c:	461a      	mov	r2, r3
 801534e:	6878      	ldr	r0, [r7, #4]
 8015350:	f7ff fc7c 	bl	8014c4c <tcp_route>
 8015354:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8015356:	697b      	ldr	r3, [r7, #20]
 8015358:	2b00      	cmp	r3, #0
 801535a:	d102      	bne.n	8015362 <tcp_output+0x96>
    return ERR_RTE;
 801535c:	f06f 0303 	mvn.w	r3, #3
 8015360:	e1a3      	b.n	80156aa <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	2b00      	cmp	r3, #0
 8015366:	d003      	beq.n	8015370 <tcp_output+0xa4>
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	681b      	ldr	r3, [r3, #0]
 801536c:	2b00      	cmp	r3, #0
 801536e:	d111      	bne.n	8015394 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8015370:	697b      	ldr	r3, [r7, #20]
 8015372:	2b00      	cmp	r3, #0
 8015374:	d002      	beq.n	801537c <tcp_output+0xb0>
 8015376:	697b      	ldr	r3, [r7, #20]
 8015378:	3304      	adds	r3, #4
 801537a:	e000      	b.n	801537e <tcp_output+0xb2>
 801537c:	2300      	movs	r3, #0
 801537e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8015380:	693b      	ldr	r3, [r7, #16]
 8015382:	2b00      	cmp	r3, #0
 8015384:	d102      	bne.n	801538c <tcp_output+0xc0>
      return ERR_RTE;
 8015386:	f06f 0303 	mvn.w	r3, #3
 801538a:	e18e      	b.n	80156aa <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801538c:	693b      	ldr	r3, [r7, #16]
 801538e:	681a      	ldr	r2, [r3, #0]
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8015394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015396:	68db      	ldr	r3, [r3, #12]
 8015398:	685b      	ldr	r3, [r3, #4]
 801539a:	4618      	mov	r0, r3
 801539c:	f7f7 faa3 	bl	800c8e6 <lwip_htonl>
 80153a0:	4602      	mov	r2, r0
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80153a6:	1ad3      	subs	r3, r2, r3
 80153a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80153aa:	8912      	ldrh	r2, [r2, #8]
 80153ac:	4413      	add	r3, r2
 80153ae:	69ba      	ldr	r2, [r7, #24]
 80153b0:	429a      	cmp	r2, r3
 80153b2:	d227      	bcs.n	8015404 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80153ba:	461a      	mov	r2, r3
 80153bc:	69bb      	ldr	r3, [r7, #24]
 80153be:	4293      	cmp	r3, r2
 80153c0:	d114      	bne.n	80153ec <tcp_output+0x120>
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	d110      	bne.n	80153ec <tcp_output+0x120>
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d10b      	bne.n	80153ec <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	2200      	movs	r2, #0
 80153d8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	2201      	movs	r2, #1
 80153e0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	2200      	movs	r2, #0
 80153e8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	8b5b      	ldrh	r3, [r3, #26]
 80153f0:	f003 0302 	and.w	r3, r3, #2
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	f000 814d 	beq.w	8015694 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80153fa:	6878      	ldr	r0, [r7, #4]
 80153fc:	f000 fd6c 	bl	8015ed8 <tcp_send_empty_ack>
 8015400:	4603      	mov	r3, r0
 8015402:	e152      	b.n	80156aa <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	2200      	movs	r2, #0
 8015408:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015410:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8015412:	6a3b      	ldr	r3, [r7, #32]
 8015414:	2b00      	cmp	r3, #0
 8015416:	f000 811c 	beq.w	8015652 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801541a:	e002      	b.n	8015422 <tcp_output+0x156>
 801541c:	6a3b      	ldr	r3, [r7, #32]
 801541e:	681b      	ldr	r3, [r3, #0]
 8015420:	623b      	str	r3, [r7, #32]
 8015422:	6a3b      	ldr	r3, [r7, #32]
 8015424:	681b      	ldr	r3, [r3, #0]
 8015426:	2b00      	cmp	r3, #0
 8015428:	d1f8      	bne.n	801541c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801542a:	e112      	b.n	8015652 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801542c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801542e:	68db      	ldr	r3, [r3, #12]
 8015430:	899b      	ldrh	r3, [r3, #12]
 8015432:	b29b      	uxth	r3, r3
 8015434:	4618      	mov	r0, r3
 8015436:	f7f7 fa41 	bl	800c8bc <lwip_htons>
 801543a:	4603      	mov	r3, r0
 801543c:	b2db      	uxtb	r3, r3
 801543e:	f003 0304 	and.w	r3, r3, #4
 8015442:	2b00      	cmp	r3, #0
 8015444:	d006      	beq.n	8015454 <tcp_output+0x188>
 8015446:	4b2f      	ldr	r3, [pc, #188]	; (8015504 <tcp_output+0x238>)
 8015448:	f240 5236 	movw	r2, #1334	; 0x536
 801544c:	4932      	ldr	r1, [pc, #200]	; (8015518 <tcp_output+0x24c>)
 801544e:	482f      	ldr	r0, [pc, #188]	; (801550c <tcp_output+0x240>)
 8015450:	f001 fd60 	bl	8016f14 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015458:	2b00      	cmp	r3, #0
 801545a:	d01f      	beq.n	801549c <tcp_output+0x1d0>
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	8b5b      	ldrh	r3, [r3, #26]
 8015460:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8015464:	2b00      	cmp	r3, #0
 8015466:	d119      	bne.n	801549c <tcp_output+0x1d0>
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801546c:	2b00      	cmp	r3, #0
 801546e:	d00b      	beq.n	8015488 <tcp_output+0x1bc>
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015474:	681b      	ldr	r3, [r3, #0]
 8015476:	2b00      	cmp	r3, #0
 8015478:	d110      	bne.n	801549c <tcp_output+0x1d0>
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801547e:	891a      	ldrh	r2, [r3, #8]
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015484:	429a      	cmp	r2, r3
 8015486:	d209      	bcs.n	801549c <tcp_output+0x1d0>
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801548e:	2b00      	cmp	r3, #0
 8015490:	d004      	beq.n	801549c <tcp_output+0x1d0>
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015498:	2b08      	cmp	r3, #8
 801549a:	d901      	bls.n	80154a0 <tcp_output+0x1d4>
 801549c:	2301      	movs	r3, #1
 801549e:	e000      	b.n	80154a2 <tcp_output+0x1d6>
 80154a0:	2300      	movs	r3, #0
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d106      	bne.n	80154b4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	8b5b      	ldrh	r3, [r3, #26]
 80154aa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	f000 80e4 	beq.w	801567c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	7d1b      	ldrb	r3, [r3, #20]
 80154b8:	2b02      	cmp	r3, #2
 80154ba:	d00d      	beq.n	80154d8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80154bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154be:	68db      	ldr	r3, [r3, #12]
 80154c0:	899b      	ldrh	r3, [r3, #12]
 80154c2:	b29c      	uxth	r4, r3
 80154c4:	2010      	movs	r0, #16
 80154c6:	f7f7 f9f9 	bl	800c8bc <lwip_htons>
 80154ca:	4603      	mov	r3, r0
 80154cc:	461a      	mov	r2, r3
 80154ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154d0:	68db      	ldr	r3, [r3, #12]
 80154d2:	4322      	orrs	r2, r4
 80154d4:	b292      	uxth	r2, r2
 80154d6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80154d8:	697a      	ldr	r2, [r7, #20]
 80154da:	6879      	ldr	r1, [r7, #4]
 80154dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80154de:	f000 f909 	bl	80156f4 <tcp_output_segment>
 80154e2:	4603      	mov	r3, r0
 80154e4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80154e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d016      	beq.n	801551c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	8b5b      	ldrh	r3, [r3, #26]
 80154f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80154f6:	b29a      	uxth	r2, r3
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	835a      	strh	r2, [r3, #26]
      return err;
 80154fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015500:	e0d3      	b.n	80156aa <tcp_output+0x3de>
 8015502:	bf00      	nop
 8015504:	08019e18 	.word	0x08019e18
 8015508:	0801a39c 	.word	0x0801a39c
 801550c:	08019eac 	.word	0x08019eac
 8015510:	0801a3b4 	.word	0x0801a3b4
 8015514:	24015578 	.word	0x24015578
 8015518:	0801a3dc 	.word	0x0801a3dc
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801551c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801551e:	681a      	ldr	r2, [r3, #0]
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	7d1b      	ldrb	r3, [r3, #20]
 8015528:	2b02      	cmp	r3, #2
 801552a:	d006      	beq.n	801553a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	8b5b      	ldrh	r3, [r3, #26]
 8015530:	f023 0303 	bic.w	r3, r3, #3
 8015534:	b29a      	uxth	r2, r3
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801553c:	68db      	ldr	r3, [r3, #12]
 801553e:	685b      	ldr	r3, [r3, #4]
 8015540:	4618      	mov	r0, r3
 8015542:	f7f7 f9d0 	bl	800c8e6 <lwip_htonl>
 8015546:	4604      	mov	r4, r0
 8015548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801554a:	891b      	ldrh	r3, [r3, #8]
 801554c:	461d      	mov	r5, r3
 801554e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015550:	68db      	ldr	r3, [r3, #12]
 8015552:	899b      	ldrh	r3, [r3, #12]
 8015554:	b29b      	uxth	r3, r3
 8015556:	4618      	mov	r0, r3
 8015558:	f7f7 f9b0 	bl	800c8bc <lwip_htons>
 801555c:	4603      	mov	r3, r0
 801555e:	b2db      	uxtb	r3, r3
 8015560:	f003 0303 	and.w	r3, r3, #3
 8015564:	2b00      	cmp	r3, #0
 8015566:	d001      	beq.n	801556c <tcp_output+0x2a0>
 8015568:	2301      	movs	r3, #1
 801556a:	e000      	b.n	801556e <tcp_output+0x2a2>
 801556c:	2300      	movs	r3, #0
 801556e:	442b      	add	r3, r5
 8015570:	4423      	add	r3, r4
 8015572:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015578:	68bb      	ldr	r3, [r7, #8]
 801557a:	1ad3      	subs	r3, r2, r3
 801557c:	2b00      	cmp	r3, #0
 801557e:	da02      	bge.n	8015586 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	68ba      	ldr	r2, [r7, #8]
 8015584:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8015586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015588:	891b      	ldrh	r3, [r3, #8]
 801558a:	461c      	mov	r4, r3
 801558c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801558e:	68db      	ldr	r3, [r3, #12]
 8015590:	899b      	ldrh	r3, [r3, #12]
 8015592:	b29b      	uxth	r3, r3
 8015594:	4618      	mov	r0, r3
 8015596:	f7f7 f991 	bl	800c8bc <lwip_htons>
 801559a:	4603      	mov	r3, r0
 801559c:	b2db      	uxtb	r3, r3
 801559e:	f003 0303 	and.w	r3, r3, #3
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	d001      	beq.n	80155aa <tcp_output+0x2de>
 80155a6:	2301      	movs	r3, #1
 80155a8:	e000      	b.n	80155ac <tcp_output+0x2e0>
 80155aa:	2300      	movs	r3, #0
 80155ac:	4423      	add	r3, r4
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	d049      	beq.n	8015646 <tcp_output+0x37a>
      seg->next = NULL;
 80155b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155b4:	2200      	movs	r2, #0
 80155b6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80155bc:	2b00      	cmp	r3, #0
 80155be:	d105      	bne.n	80155cc <tcp_output+0x300>
        pcb->unacked = seg;
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80155c4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80155c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155c8:	623b      	str	r3, [r7, #32]
 80155ca:	e03f      	b.n	801564c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80155cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155ce:	68db      	ldr	r3, [r3, #12]
 80155d0:	685b      	ldr	r3, [r3, #4]
 80155d2:	4618      	mov	r0, r3
 80155d4:	f7f7 f987 	bl	800c8e6 <lwip_htonl>
 80155d8:	4604      	mov	r4, r0
 80155da:	6a3b      	ldr	r3, [r7, #32]
 80155dc:	68db      	ldr	r3, [r3, #12]
 80155de:	685b      	ldr	r3, [r3, #4]
 80155e0:	4618      	mov	r0, r3
 80155e2:	f7f7 f980 	bl	800c8e6 <lwip_htonl>
 80155e6:	4603      	mov	r3, r0
 80155e8:	1ae3      	subs	r3, r4, r3
 80155ea:	2b00      	cmp	r3, #0
 80155ec:	da24      	bge.n	8015638 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	3370      	adds	r3, #112	; 0x70
 80155f2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80155f4:	e002      	b.n	80155fc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80155f6:	69fb      	ldr	r3, [r7, #28]
 80155f8:	681b      	ldr	r3, [r3, #0]
 80155fa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80155fc:	69fb      	ldr	r3, [r7, #28]
 80155fe:	681b      	ldr	r3, [r3, #0]
 8015600:	2b00      	cmp	r3, #0
 8015602:	d011      	beq.n	8015628 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015604:	69fb      	ldr	r3, [r7, #28]
 8015606:	681b      	ldr	r3, [r3, #0]
 8015608:	68db      	ldr	r3, [r3, #12]
 801560a:	685b      	ldr	r3, [r3, #4]
 801560c:	4618      	mov	r0, r3
 801560e:	f7f7 f96a 	bl	800c8e6 <lwip_htonl>
 8015612:	4604      	mov	r4, r0
 8015614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015616:	68db      	ldr	r3, [r3, #12]
 8015618:	685b      	ldr	r3, [r3, #4]
 801561a:	4618      	mov	r0, r3
 801561c:	f7f7 f963 	bl	800c8e6 <lwip_htonl>
 8015620:	4603      	mov	r3, r0
 8015622:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8015624:	2b00      	cmp	r3, #0
 8015626:	dbe6      	blt.n	80155f6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8015628:	69fb      	ldr	r3, [r7, #28]
 801562a:	681a      	ldr	r2, [r3, #0]
 801562c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801562e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8015630:	69fb      	ldr	r3, [r7, #28]
 8015632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015634:	601a      	str	r2, [r3, #0]
 8015636:	e009      	b.n	801564c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8015638:	6a3b      	ldr	r3, [r7, #32]
 801563a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801563c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801563e:	6a3b      	ldr	r3, [r7, #32]
 8015640:	681b      	ldr	r3, [r3, #0]
 8015642:	623b      	str	r3, [r7, #32]
 8015644:	e002      	b.n	801564c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8015646:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015648:	f7fc fc3f 	bl	8011eca <tcp_seg_free>
    }
    seg = pcb->unsent;
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015650:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8015652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015654:	2b00      	cmp	r3, #0
 8015656:	d012      	beq.n	801567e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8015658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801565a:	68db      	ldr	r3, [r3, #12]
 801565c:	685b      	ldr	r3, [r3, #4]
 801565e:	4618      	mov	r0, r3
 8015660:	f7f7 f941 	bl	800c8e6 <lwip_htonl>
 8015664:	4602      	mov	r2, r0
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801566a:	1ad3      	subs	r3, r2, r3
 801566c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801566e:	8912      	ldrh	r2, [r2, #8]
 8015670:	4413      	add	r3, r2
  while (seg != NULL &&
 8015672:	69ba      	ldr	r2, [r7, #24]
 8015674:	429a      	cmp	r2, r3
 8015676:	f4bf aed9 	bcs.w	801542c <tcp_output+0x160>
 801567a:	e000      	b.n	801567e <tcp_output+0x3b2>
      break;
 801567c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015682:	2b00      	cmp	r3, #0
 8015684:	d108      	bne.n	8015698 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	2200      	movs	r2, #0
 801568a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801568e:	e004      	b.n	801569a <tcp_output+0x3ce>
    goto output_done;
 8015690:	bf00      	nop
 8015692:	e002      	b.n	801569a <tcp_output+0x3ce>
    goto output_done;
 8015694:	bf00      	nop
 8015696:	e000      	b.n	801569a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8015698:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	8b5b      	ldrh	r3, [r3, #26]
 801569e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80156a2:	b29a      	uxth	r2, r3
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80156a8:	2300      	movs	r3, #0
}
 80156aa:	4618      	mov	r0, r3
 80156ac:	3728      	adds	r7, #40	; 0x28
 80156ae:	46bd      	mov	sp, r7
 80156b0:	bdb0      	pop	{r4, r5, r7, pc}
 80156b2:	bf00      	nop

080156b4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80156b4:	b580      	push	{r7, lr}
 80156b6:	b082      	sub	sp, #8
 80156b8:	af00      	add	r7, sp, #0
 80156ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	2b00      	cmp	r3, #0
 80156c0:	d106      	bne.n	80156d0 <tcp_output_segment_busy+0x1c>
 80156c2:	4b09      	ldr	r3, [pc, #36]	; (80156e8 <tcp_output_segment_busy+0x34>)
 80156c4:	f240 529a 	movw	r2, #1434	; 0x59a
 80156c8:	4908      	ldr	r1, [pc, #32]	; (80156ec <tcp_output_segment_busy+0x38>)
 80156ca:	4809      	ldr	r0, [pc, #36]	; (80156f0 <tcp_output_segment_busy+0x3c>)
 80156cc:	f001 fc22 	bl	8016f14 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	685b      	ldr	r3, [r3, #4]
 80156d4:	7b9b      	ldrb	r3, [r3, #14]
 80156d6:	2b01      	cmp	r3, #1
 80156d8:	d001      	beq.n	80156de <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80156da:	2301      	movs	r3, #1
 80156dc:	e000      	b.n	80156e0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80156de:	2300      	movs	r3, #0
}
 80156e0:	4618      	mov	r0, r3
 80156e2:	3708      	adds	r7, #8
 80156e4:	46bd      	mov	sp, r7
 80156e6:	bd80      	pop	{r7, pc}
 80156e8:	08019e18 	.word	0x08019e18
 80156ec:	0801a3f4 	.word	0x0801a3f4
 80156f0:	08019eac 	.word	0x08019eac

080156f4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80156f4:	b5b0      	push	{r4, r5, r7, lr}
 80156f6:	b08c      	sub	sp, #48	; 0x30
 80156f8:	af04      	add	r7, sp, #16
 80156fa:	60f8      	str	r0, [r7, #12]
 80156fc:	60b9      	str	r1, [r7, #8]
 80156fe:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8015700:	68fb      	ldr	r3, [r7, #12]
 8015702:	2b00      	cmp	r3, #0
 8015704:	d106      	bne.n	8015714 <tcp_output_segment+0x20>
 8015706:	4b63      	ldr	r3, [pc, #396]	; (8015894 <tcp_output_segment+0x1a0>)
 8015708:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801570c:	4962      	ldr	r1, [pc, #392]	; (8015898 <tcp_output_segment+0x1a4>)
 801570e:	4863      	ldr	r0, [pc, #396]	; (801589c <tcp_output_segment+0x1a8>)
 8015710:	f001 fc00 	bl	8016f14 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8015714:	68bb      	ldr	r3, [r7, #8]
 8015716:	2b00      	cmp	r3, #0
 8015718:	d106      	bne.n	8015728 <tcp_output_segment+0x34>
 801571a:	4b5e      	ldr	r3, [pc, #376]	; (8015894 <tcp_output_segment+0x1a0>)
 801571c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8015720:	495f      	ldr	r1, [pc, #380]	; (80158a0 <tcp_output_segment+0x1ac>)
 8015722:	485e      	ldr	r0, [pc, #376]	; (801589c <tcp_output_segment+0x1a8>)
 8015724:	f001 fbf6 	bl	8016f14 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	2b00      	cmp	r3, #0
 801572c:	d106      	bne.n	801573c <tcp_output_segment+0x48>
 801572e:	4b59      	ldr	r3, [pc, #356]	; (8015894 <tcp_output_segment+0x1a0>)
 8015730:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8015734:	495b      	ldr	r1, [pc, #364]	; (80158a4 <tcp_output_segment+0x1b0>)
 8015736:	4859      	ldr	r0, [pc, #356]	; (801589c <tcp_output_segment+0x1a8>)
 8015738:	f001 fbec 	bl	8016f14 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801573c:	68f8      	ldr	r0, [r7, #12]
 801573e:	f7ff ffb9 	bl	80156b4 <tcp_output_segment_busy>
 8015742:	4603      	mov	r3, r0
 8015744:	2b00      	cmp	r3, #0
 8015746:	d001      	beq.n	801574c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8015748:	2300      	movs	r3, #0
 801574a:	e09f      	b.n	801588c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801574c:	68bb      	ldr	r3, [r7, #8]
 801574e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015750:	68fb      	ldr	r3, [r7, #12]
 8015752:	68dc      	ldr	r4, [r3, #12]
 8015754:	4610      	mov	r0, r2
 8015756:	f7f7 f8c6 	bl	800c8e6 <lwip_htonl>
 801575a:	4603      	mov	r3, r0
 801575c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801575e:	68bb      	ldr	r3, [r7, #8]
 8015760:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8015762:	68fb      	ldr	r3, [r7, #12]
 8015764:	68dc      	ldr	r4, [r3, #12]
 8015766:	4610      	mov	r0, r2
 8015768:	f7f7 f8a8 	bl	800c8bc <lwip_htons>
 801576c:	4603      	mov	r3, r0
 801576e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015770:	68bb      	ldr	r3, [r7, #8]
 8015772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015774:	68ba      	ldr	r2, [r7, #8]
 8015776:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8015778:	441a      	add	r2, r3
 801577a:	68bb      	ldr	r3, [r7, #8]
 801577c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801577e:	68fb      	ldr	r3, [r7, #12]
 8015780:	68db      	ldr	r3, [r3, #12]
 8015782:	3314      	adds	r3, #20
 8015784:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8015786:	68fb      	ldr	r3, [r7, #12]
 8015788:	7a9b      	ldrb	r3, [r3, #10]
 801578a:	f003 0301 	and.w	r3, r3, #1
 801578e:	2b00      	cmp	r3, #0
 8015790:	d015      	beq.n	80157be <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8015792:	68bb      	ldr	r3, [r7, #8]
 8015794:	3304      	adds	r3, #4
 8015796:	461a      	mov	r2, r3
 8015798:	6879      	ldr	r1, [r7, #4]
 801579a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801579e:	f7fc fe8b 	bl	80124b8 <tcp_eff_send_mss_netif>
 80157a2:	4603      	mov	r3, r0
 80157a4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80157a6:	8b7b      	ldrh	r3, [r7, #26]
 80157a8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80157ac:	4618      	mov	r0, r3
 80157ae:	f7f7 f89a 	bl	800c8e6 <lwip_htonl>
 80157b2:	4602      	mov	r2, r0
 80157b4:	69fb      	ldr	r3, [r7, #28]
 80157b6:	601a      	str	r2, [r3, #0]
    opts += 1;
 80157b8:	69fb      	ldr	r3, [r7, #28]
 80157ba:	3304      	adds	r3, #4
 80157bc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80157be:	68bb      	ldr	r3, [r7, #8]
 80157c0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	da02      	bge.n	80157ce <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80157c8:	68bb      	ldr	r3, [r7, #8]
 80157ca:	2200      	movs	r2, #0
 80157cc:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80157ce:	68bb      	ldr	r3, [r7, #8]
 80157d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	d10c      	bne.n	80157f0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80157d6:	4b34      	ldr	r3, [pc, #208]	; (80158a8 <tcp_output_segment+0x1b4>)
 80157d8:	681a      	ldr	r2, [r3, #0]
 80157da:	68bb      	ldr	r3, [r7, #8]
 80157dc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80157de:	68fb      	ldr	r3, [r7, #12]
 80157e0:	68db      	ldr	r3, [r3, #12]
 80157e2:	685b      	ldr	r3, [r3, #4]
 80157e4:	4618      	mov	r0, r3
 80157e6:	f7f7 f87e 	bl	800c8e6 <lwip_htonl>
 80157ea:	4602      	mov	r2, r0
 80157ec:	68bb      	ldr	r3, [r7, #8]
 80157ee:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80157f0:	68fb      	ldr	r3, [r7, #12]
 80157f2:	68da      	ldr	r2, [r3, #12]
 80157f4:	68fb      	ldr	r3, [r7, #12]
 80157f6:	685b      	ldr	r3, [r3, #4]
 80157f8:	685b      	ldr	r3, [r3, #4]
 80157fa:	1ad3      	subs	r3, r2, r3
 80157fc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80157fe:	68fb      	ldr	r3, [r7, #12]
 8015800:	685b      	ldr	r3, [r3, #4]
 8015802:	8959      	ldrh	r1, [r3, #10]
 8015804:	68fb      	ldr	r3, [r7, #12]
 8015806:	685b      	ldr	r3, [r3, #4]
 8015808:	8b3a      	ldrh	r2, [r7, #24]
 801580a:	1a8a      	subs	r2, r1, r2
 801580c:	b292      	uxth	r2, r2
 801580e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8015810:	68fb      	ldr	r3, [r7, #12]
 8015812:	685b      	ldr	r3, [r3, #4]
 8015814:	8919      	ldrh	r1, [r3, #8]
 8015816:	68fb      	ldr	r3, [r7, #12]
 8015818:	685b      	ldr	r3, [r3, #4]
 801581a:	8b3a      	ldrh	r2, [r7, #24]
 801581c:	1a8a      	subs	r2, r1, r2
 801581e:	b292      	uxth	r2, r2
 8015820:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8015822:	68fb      	ldr	r3, [r7, #12]
 8015824:	685b      	ldr	r3, [r3, #4]
 8015826:	68fa      	ldr	r2, [r7, #12]
 8015828:	68d2      	ldr	r2, [r2, #12]
 801582a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801582c:	68fb      	ldr	r3, [r7, #12]
 801582e:	68db      	ldr	r3, [r3, #12]
 8015830:	2200      	movs	r2, #0
 8015832:	741a      	strb	r2, [r3, #16]
 8015834:	2200      	movs	r2, #0
 8015836:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8015838:	68fb      	ldr	r3, [r7, #12]
 801583a:	68db      	ldr	r3, [r3, #12]
 801583c:	f103 0214 	add.w	r2, r3, #20
 8015840:	68fb      	ldr	r3, [r7, #12]
 8015842:	7a9b      	ldrb	r3, [r3, #10]
 8015844:	009b      	lsls	r3, r3, #2
 8015846:	f003 0304 	and.w	r3, r3, #4
 801584a:	4413      	add	r3, r2
 801584c:	69fa      	ldr	r2, [r7, #28]
 801584e:	429a      	cmp	r2, r3
 8015850:	d006      	beq.n	8015860 <tcp_output_segment+0x16c>
 8015852:	4b10      	ldr	r3, [pc, #64]	; (8015894 <tcp_output_segment+0x1a0>)
 8015854:	f240 621c 	movw	r2, #1564	; 0x61c
 8015858:	4914      	ldr	r1, [pc, #80]	; (80158ac <tcp_output_segment+0x1b8>)
 801585a:	4810      	ldr	r0, [pc, #64]	; (801589c <tcp_output_segment+0x1a8>)
 801585c:	f001 fb5a 	bl	8016f14 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8015860:	68fb      	ldr	r3, [r7, #12]
 8015862:	6858      	ldr	r0, [r3, #4]
 8015864:	68b9      	ldr	r1, [r7, #8]
 8015866:	68bb      	ldr	r3, [r7, #8]
 8015868:	1d1c      	adds	r4, r3, #4
 801586a:	68bb      	ldr	r3, [r7, #8]
 801586c:	7add      	ldrb	r5, [r3, #11]
 801586e:	68bb      	ldr	r3, [r7, #8]
 8015870:	7a9b      	ldrb	r3, [r3, #10]
 8015872:	687a      	ldr	r2, [r7, #4]
 8015874:	9202      	str	r2, [sp, #8]
 8015876:	2206      	movs	r2, #6
 8015878:	9201      	str	r2, [sp, #4]
 801587a:	9300      	str	r3, [sp, #0]
 801587c:	462b      	mov	r3, r5
 801587e:	4622      	mov	r2, r4
 8015880:	f7f8 fcb2 	bl	800e1e8 <ip4_output_if>
 8015884:	4603      	mov	r3, r0
 8015886:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8015888:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801588c:	4618      	mov	r0, r3
 801588e:	3720      	adds	r7, #32
 8015890:	46bd      	mov	sp, r7
 8015892:	bdb0      	pop	{r4, r5, r7, pc}
 8015894:	08019e18 	.word	0x08019e18
 8015898:	0801a41c 	.word	0x0801a41c
 801589c:	08019eac 	.word	0x08019eac
 80158a0:	0801a43c 	.word	0x0801a43c
 80158a4:	0801a45c 	.word	0x0801a45c
 80158a8:	2401552c 	.word	0x2401552c
 80158ac:	0801a480 	.word	0x0801a480

080158b0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80158b0:	b5b0      	push	{r4, r5, r7, lr}
 80158b2:	b084      	sub	sp, #16
 80158b4:	af00      	add	r7, sp, #0
 80158b6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d106      	bne.n	80158cc <tcp_rexmit_rto_prepare+0x1c>
 80158be:	4b31      	ldr	r3, [pc, #196]	; (8015984 <tcp_rexmit_rto_prepare+0xd4>)
 80158c0:	f240 6263 	movw	r2, #1635	; 0x663
 80158c4:	4930      	ldr	r1, [pc, #192]	; (8015988 <tcp_rexmit_rto_prepare+0xd8>)
 80158c6:	4831      	ldr	r0, [pc, #196]	; (801598c <tcp_rexmit_rto_prepare+0xdc>)
 80158c8:	f001 fb24 	bl	8016f14 <iprintf>

  if (pcb->unacked == NULL) {
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d102      	bne.n	80158da <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80158d4:	f06f 0305 	mvn.w	r3, #5
 80158d8:	e050      	b.n	801597c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80158de:	60fb      	str	r3, [r7, #12]
 80158e0:	e00b      	b.n	80158fa <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80158e2:	68f8      	ldr	r0, [r7, #12]
 80158e4:	f7ff fee6 	bl	80156b4 <tcp_output_segment_busy>
 80158e8:	4603      	mov	r3, r0
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	d002      	beq.n	80158f4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80158ee:	f06f 0305 	mvn.w	r3, #5
 80158f2:	e043      	b.n	801597c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80158f4:	68fb      	ldr	r3, [r7, #12]
 80158f6:	681b      	ldr	r3, [r3, #0]
 80158f8:	60fb      	str	r3, [r7, #12]
 80158fa:	68fb      	ldr	r3, [r7, #12]
 80158fc:	681b      	ldr	r3, [r3, #0]
 80158fe:	2b00      	cmp	r3, #0
 8015900:	d1ef      	bne.n	80158e2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8015902:	68f8      	ldr	r0, [r7, #12]
 8015904:	f7ff fed6 	bl	80156b4 <tcp_output_segment_busy>
 8015908:	4603      	mov	r3, r0
 801590a:	2b00      	cmp	r3, #0
 801590c:	d002      	beq.n	8015914 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801590e:	f06f 0305 	mvn.w	r3, #5
 8015912:	e033      	b.n	801597c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8015918:	68fb      	ldr	r3, [r7, #12]
 801591a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	2200      	movs	r2, #0
 8015928:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	8b5b      	ldrh	r3, [r3, #26]
 801592e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8015932:	b29a      	uxth	r2, r3
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015938:	68fb      	ldr	r3, [r7, #12]
 801593a:	68db      	ldr	r3, [r3, #12]
 801593c:	685b      	ldr	r3, [r3, #4]
 801593e:	4618      	mov	r0, r3
 8015940:	f7f6 ffd1 	bl	800c8e6 <lwip_htonl>
 8015944:	4604      	mov	r4, r0
 8015946:	68fb      	ldr	r3, [r7, #12]
 8015948:	891b      	ldrh	r3, [r3, #8]
 801594a:	461d      	mov	r5, r3
 801594c:	68fb      	ldr	r3, [r7, #12]
 801594e:	68db      	ldr	r3, [r3, #12]
 8015950:	899b      	ldrh	r3, [r3, #12]
 8015952:	b29b      	uxth	r3, r3
 8015954:	4618      	mov	r0, r3
 8015956:	f7f6 ffb1 	bl	800c8bc <lwip_htons>
 801595a:	4603      	mov	r3, r0
 801595c:	b2db      	uxtb	r3, r3
 801595e:	f003 0303 	and.w	r3, r3, #3
 8015962:	2b00      	cmp	r3, #0
 8015964:	d001      	beq.n	801596a <tcp_rexmit_rto_prepare+0xba>
 8015966:	2301      	movs	r3, #1
 8015968:	e000      	b.n	801596c <tcp_rexmit_rto_prepare+0xbc>
 801596a:	2300      	movs	r3, #0
 801596c:	442b      	add	r3, r5
 801596e:	18e2      	adds	r2, r4, r3
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	2200      	movs	r2, #0
 8015978:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801597a:	2300      	movs	r3, #0
}
 801597c:	4618      	mov	r0, r3
 801597e:	3710      	adds	r7, #16
 8015980:	46bd      	mov	sp, r7
 8015982:	bdb0      	pop	{r4, r5, r7, pc}
 8015984:	08019e18 	.word	0x08019e18
 8015988:	0801a494 	.word	0x0801a494
 801598c:	08019eac 	.word	0x08019eac

08015990 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8015990:	b580      	push	{r7, lr}
 8015992:	b082      	sub	sp, #8
 8015994:	af00      	add	r7, sp, #0
 8015996:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	2b00      	cmp	r3, #0
 801599c:	d106      	bne.n	80159ac <tcp_rexmit_rto_commit+0x1c>
 801599e:	4b0d      	ldr	r3, [pc, #52]	; (80159d4 <tcp_rexmit_rto_commit+0x44>)
 80159a0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80159a4:	490c      	ldr	r1, [pc, #48]	; (80159d8 <tcp_rexmit_rto_commit+0x48>)
 80159a6:	480d      	ldr	r0, [pc, #52]	; (80159dc <tcp_rexmit_rto_commit+0x4c>)
 80159a8:	f001 fab4 	bl	8016f14 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80159b2:	2bff      	cmp	r3, #255	; 0xff
 80159b4:	d007      	beq.n	80159c6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80159bc:	3301      	adds	r3, #1
 80159be:	b2da      	uxtb	r2, r3
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80159c6:	6878      	ldr	r0, [r7, #4]
 80159c8:	f7ff fc80 	bl	80152cc <tcp_output>
}
 80159cc:	bf00      	nop
 80159ce:	3708      	adds	r7, #8
 80159d0:	46bd      	mov	sp, r7
 80159d2:	bd80      	pop	{r7, pc}
 80159d4:	08019e18 	.word	0x08019e18
 80159d8:	0801a4b8 	.word	0x0801a4b8
 80159dc:	08019eac 	.word	0x08019eac

080159e0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80159e0:	b580      	push	{r7, lr}
 80159e2:	b082      	sub	sp, #8
 80159e4:	af00      	add	r7, sp, #0
 80159e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	d106      	bne.n	80159fc <tcp_rexmit_rto+0x1c>
 80159ee:	4b0a      	ldr	r3, [pc, #40]	; (8015a18 <tcp_rexmit_rto+0x38>)
 80159f0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80159f4:	4909      	ldr	r1, [pc, #36]	; (8015a1c <tcp_rexmit_rto+0x3c>)
 80159f6:	480a      	ldr	r0, [pc, #40]	; (8015a20 <tcp_rexmit_rto+0x40>)
 80159f8:	f001 fa8c 	bl	8016f14 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80159fc:	6878      	ldr	r0, [r7, #4]
 80159fe:	f7ff ff57 	bl	80158b0 <tcp_rexmit_rto_prepare>
 8015a02:	4603      	mov	r3, r0
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	d102      	bne.n	8015a0e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8015a08:	6878      	ldr	r0, [r7, #4]
 8015a0a:	f7ff ffc1 	bl	8015990 <tcp_rexmit_rto_commit>
  }
}
 8015a0e:	bf00      	nop
 8015a10:	3708      	adds	r7, #8
 8015a12:	46bd      	mov	sp, r7
 8015a14:	bd80      	pop	{r7, pc}
 8015a16:	bf00      	nop
 8015a18:	08019e18 	.word	0x08019e18
 8015a1c:	0801a4dc 	.word	0x0801a4dc
 8015a20:	08019eac 	.word	0x08019eac

08015a24 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8015a24:	b590      	push	{r4, r7, lr}
 8015a26:	b085      	sub	sp, #20
 8015a28:	af00      	add	r7, sp, #0
 8015a2a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d106      	bne.n	8015a40 <tcp_rexmit+0x1c>
 8015a32:	4b2f      	ldr	r3, [pc, #188]	; (8015af0 <tcp_rexmit+0xcc>)
 8015a34:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8015a38:	492e      	ldr	r1, [pc, #184]	; (8015af4 <tcp_rexmit+0xd0>)
 8015a3a:	482f      	ldr	r0, [pc, #188]	; (8015af8 <tcp_rexmit+0xd4>)
 8015a3c:	f001 fa6a 	bl	8016f14 <iprintf>

  if (pcb->unacked == NULL) {
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	d102      	bne.n	8015a4e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8015a48:	f06f 0305 	mvn.w	r3, #5
 8015a4c:	e04c      	b.n	8015ae8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015a52:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8015a54:	68b8      	ldr	r0, [r7, #8]
 8015a56:	f7ff fe2d 	bl	80156b4 <tcp_output_segment_busy>
 8015a5a:	4603      	mov	r3, r0
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d002      	beq.n	8015a66 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8015a60:	f06f 0305 	mvn.w	r3, #5
 8015a64:	e040      	b.n	8015ae8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8015a66:	68bb      	ldr	r3, [r7, #8]
 8015a68:	681a      	ldr	r2, [r3, #0]
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	336c      	adds	r3, #108	; 0x6c
 8015a72:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015a74:	e002      	b.n	8015a7c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8015a76:	68fb      	ldr	r3, [r7, #12]
 8015a78:	681b      	ldr	r3, [r3, #0]
 8015a7a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	681b      	ldr	r3, [r3, #0]
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	d011      	beq.n	8015aa8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015a84:	68fb      	ldr	r3, [r7, #12]
 8015a86:	681b      	ldr	r3, [r3, #0]
 8015a88:	68db      	ldr	r3, [r3, #12]
 8015a8a:	685b      	ldr	r3, [r3, #4]
 8015a8c:	4618      	mov	r0, r3
 8015a8e:	f7f6 ff2a 	bl	800c8e6 <lwip_htonl>
 8015a92:	4604      	mov	r4, r0
 8015a94:	68bb      	ldr	r3, [r7, #8]
 8015a96:	68db      	ldr	r3, [r3, #12]
 8015a98:	685b      	ldr	r3, [r3, #4]
 8015a9a:	4618      	mov	r0, r3
 8015a9c:	f7f6 ff23 	bl	800c8e6 <lwip_htonl>
 8015aa0:	4603      	mov	r3, r0
 8015aa2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	dbe6      	blt.n	8015a76 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8015aa8:	68fb      	ldr	r3, [r7, #12]
 8015aaa:	681a      	ldr	r2, [r3, #0]
 8015aac:	68bb      	ldr	r3, [r7, #8]
 8015aae:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8015ab0:	68fb      	ldr	r3, [r7, #12]
 8015ab2:	68ba      	ldr	r2, [r7, #8]
 8015ab4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8015ab6:	68bb      	ldr	r3, [r7, #8]
 8015ab8:	681b      	ldr	r3, [r3, #0]
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	d103      	bne.n	8015ac6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	2200      	movs	r2, #0
 8015ac2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015acc:	2bff      	cmp	r3, #255	; 0xff
 8015ace:	d007      	beq.n	8015ae0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015ad6:	3301      	adds	r3, #1
 8015ad8:	b2da      	uxtb	r2, r3
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	2200      	movs	r2, #0
 8015ae4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8015ae6:	2300      	movs	r3, #0
}
 8015ae8:	4618      	mov	r0, r3
 8015aea:	3714      	adds	r7, #20
 8015aec:	46bd      	mov	sp, r7
 8015aee:	bd90      	pop	{r4, r7, pc}
 8015af0:	08019e18 	.word	0x08019e18
 8015af4:	0801a4f8 	.word	0x0801a4f8
 8015af8:	08019eac 	.word	0x08019eac

08015afc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8015afc:	b580      	push	{r7, lr}
 8015afe:	b082      	sub	sp, #8
 8015b00:	af00      	add	r7, sp, #0
 8015b02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	d106      	bne.n	8015b18 <tcp_rexmit_fast+0x1c>
 8015b0a:	4b2a      	ldr	r3, [pc, #168]	; (8015bb4 <tcp_rexmit_fast+0xb8>)
 8015b0c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8015b10:	4929      	ldr	r1, [pc, #164]	; (8015bb8 <tcp_rexmit_fast+0xbc>)
 8015b12:	482a      	ldr	r0, [pc, #168]	; (8015bbc <tcp_rexmit_fast+0xc0>)
 8015b14:	f001 f9fe 	bl	8016f14 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	d045      	beq.n	8015bac <tcp_rexmit_fast+0xb0>
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	8b5b      	ldrh	r3, [r3, #26]
 8015b24:	f003 0304 	and.w	r3, r3, #4
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	d13f      	bne.n	8015bac <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8015b2c:	6878      	ldr	r0, [r7, #4]
 8015b2e:	f7ff ff79 	bl	8015a24 <tcp_rexmit>
 8015b32:	4603      	mov	r3, r0
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d139      	bne.n	8015bac <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015b44:	4293      	cmp	r3, r2
 8015b46:	bf28      	it	cs
 8015b48:	4613      	movcs	r3, r2
 8015b4a:	b29b      	uxth	r3, r3
 8015b4c:	2b00      	cmp	r3, #0
 8015b4e:	da00      	bge.n	8015b52 <tcp_rexmit_fast+0x56>
 8015b50:	3301      	adds	r3, #1
 8015b52:	105b      	asrs	r3, r3, #1
 8015b54:	b29a      	uxth	r2, r3
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8015b62:	461a      	mov	r2, r3
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015b68:	005b      	lsls	r3, r3, #1
 8015b6a:	429a      	cmp	r2, r3
 8015b6c:	d206      	bcs.n	8015b7c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015b72:	005b      	lsls	r3, r3, #1
 8015b74:	b29a      	uxth	r2, r3
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015b86:	4619      	mov	r1, r3
 8015b88:	0049      	lsls	r1, r1, #1
 8015b8a:	440b      	add	r3, r1
 8015b8c:	b29b      	uxth	r3, r3
 8015b8e:	4413      	add	r3, r2
 8015b90:	b29a      	uxth	r2, r3
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	8b5b      	ldrh	r3, [r3, #26]
 8015b9c:	f043 0304 	orr.w	r3, r3, #4
 8015ba0:	b29a      	uxth	r2, r3
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	2200      	movs	r2, #0
 8015baa:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8015bac:	bf00      	nop
 8015bae:	3708      	adds	r7, #8
 8015bb0:	46bd      	mov	sp, r7
 8015bb2:	bd80      	pop	{r7, pc}
 8015bb4:	08019e18 	.word	0x08019e18
 8015bb8:	0801a510 	.word	0x0801a510
 8015bbc:	08019eac 	.word	0x08019eac

08015bc0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8015bc0:	b580      	push	{r7, lr}
 8015bc2:	b086      	sub	sp, #24
 8015bc4:	af00      	add	r7, sp, #0
 8015bc6:	60f8      	str	r0, [r7, #12]
 8015bc8:	607b      	str	r3, [r7, #4]
 8015bca:	460b      	mov	r3, r1
 8015bcc:	817b      	strh	r3, [r7, #10]
 8015bce:	4613      	mov	r3, r2
 8015bd0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8015bd2:	897a      	ldrh	r2, [r7, #10]
 8015bd4:	893b      	ldrh	r3, [r7, #8]
 8015bd6:	4413      	add	r3, r2
 8015bd8:	b29b      	uxth	r3, r3
 8015bda:	3314      	adds	r3, #20
 8015bdc:	b29b      	uxth	r3, r3
 8015bde:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015be2:	4619      	mov	r1, r3
 8015be4:	2022      	movs	r0, #34	; 0x22
 8015be6:	f7fa fb1b 	bl	8010220 <pbuf_alloc>
 8015bea:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8015bec:	697b      	ldr	r3, [r7, #20]
 8015bee:	2b00      	cmp	r3, #0
 8015bf0:	d04d      	beq.n	8015c8e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8015bf2:	897b      	ldrh	r3, [r7, #10]
 8015bf4:	3313      	adds	r3, #19
 8015bf6:	697a      	ldr	r2, [r7, #20]
 8015bf8:	8952      	ldrh	r2, [r2, #10]
 8015bfa:	4293      	cmp	r3, r2
 8015bfc:	db06      	blt.n	8015c0c <tcp_output_alloc_header_common+0x4c>
 8015bfe:	4b26      	ldr	r3, [pc, #152]	; (8015c98 <tcp_output_alloc_header_common+0xd8>)
 8015c00:	f240 7223 	movw	r2, #1827	; 0x723
 8015c04:	4925      	ldr	r1, [pc, #148]	; (8015c9c <tcp_output_alloc_header_common+0xdc>)
 8015c06:	4826      	ldr	r0, [pc, #152]	; (8015ca0 <tcp_output_alloc_header_common+0xe0>)
 8015c08:	f001 f984 	bl	8016f14 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8015c0c:	697b      	ldr	r3, [r7, #20]
 8015c0e:	685b      	ldr	r3, [r3, #4]
 8015c10:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8015c12:	8c3b      	ldrh	r3, [r7, #32]
 8015c14:	4618      	mov	r0, r3
 8015c16:	f7f6 fe51 	bl	800c8bc <lwip_htons>
 8015c1a:	4603      	mov	r3, r0
 8015c1c:	461a      	mov	r2, r3
 8015c1e:	693b      	ldr	r3, [r7, #16]
 8015c20:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8015c22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015c24:	4618      	mov	r0, r3
 8015c26:	f7f6 fe49 	bl	800c8bc <lwip_htons>
 8015c2a:	4603      	mov	r3, r0
 8015c2c:	461a      	mov	r2, r3
 8015c2e:	693b      	ldr	r3, [r7, #16]
 8015c30:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8015c32:	693b      	ldr	r3, [r7, #16]
 8015c34:	687a      	ldr	r2, [r7, #4]
 8015c36:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8015c38:	68f8      	ldr	r0, [r7, #12]
 8015c3a:	f7f6 fe54 	bl	800c8e6 <lwip_htonl>
 8015c3e:	4602      	mov	r2, r0
 8015c40:	693b      	ldr	r3, [r7, #16]
 8015c42:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8015c44:	897b      	ldrh	r3, [r7, #10]
 8015c46:	089b      	lsrs	r3, r3, #2
 8015c48:	b29b      	uxth	r3, r3
 8015c4a:	3305      	adds	r3, #5
 8015c4c:	b29b      	uxth	r3, r3
 8015c4e:	031b      	lsls	r3, r3, #12
 8015c50:	b29a      	uxth	r2, r3
 8015c52:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015c56:	b29b      	uxth	r3, r3
 8015c58:	4313      	orrs	r3, r2
 8015c5a:	b29b      	uxth	r3, r3
 8015c5c:	4618      	mov	r0, r3
 8015c5e:	f7f6 fe2d 	bl	800c8bc <lwip_htons>
 8015c62:	4603      	mov	r3, r0
 8015c64:	461a      	mov	r2, r3
 8015c66:	693b      	ldr	r3, [r7, #16]
 8015c68:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8015c6a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8015c6c:	4618      	mov	r0, r3
 8015c6e:	f7f6 fe25 	bl	800c8bc <lwip_htons>
 8015c72:	4603      	mov	r3, r0
 8015c74:	461a      	mov	r2, r3
 8015c76:	693b      	ldr	r3, [r7, #16]
 8015c78:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8015c7a:	693b      	ldr	r3, [r7, #16]
 8015c7c:	2200      	movs	r2, #0
 8015c7e:	741a      	strb	r2, [r3, #16]
 8015c80:	2200      	movs	r2, #0
 8015c82:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8015c84:	693b      	ldr	r3, [r7, #16]
 8015c86:	2200      	movs	r2, #0
 8015c88:	749a      	strb	r2, [r3, #18]
 8015c8a:	2200      	movs	r2, #0
 8015c8c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8015c8e:	697b      	ldr	r3, [r7, #20]
}
 8015c90:	4618      	mov	r0, r3
 8015c92:	3718      	adds	r7, #24
 8015c94:	46bd      	mov	sp, r7
 8015c96:	bd80      	pop	{r7, pc}
 8015c98:	08019e18 	.word	0x08019e18
 8015c9c:	0801a530 	.word	0x0801a530
 8015ca0:	08019eac 	.word	0x08019eac

08015ca4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8015ca4:	b5b0      	push	{r4, r5, r7, lr}
 8015ca6:	b08a      	sub	sp, #40	; 0x28
 8015ca8:	af04      	add	r7, sp, #16
 8015caa:	60f8      	str	r0, [r7, #12]
 8015cac:	607b      	str	r3, [r7, #4]
 8015cae:	460b      	mov	r3, r1
 8015cb0:	817b      	strh	r3, [r7, #10]
 8015cb2:	4613      	mov	r3, r2
 8015cb4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8015cb6:	68fb      	ldr	r3, [r7, #12]
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	d106      	bne.n	8015cca <tcp_output_alloc_header+0x26>
 8015cbc:	4b15      	ldr	r3, [pc, #84]	; (8015d14 <tcp_output_alloc_header+0x70>)
 8015cbe:	f240 7242 	movw	r2, #1858	; 0x742
 8015cc2:	4915      	ldr	r1, [pc, #84]	; (8015d18 <tcp_output_alloc_header+0x74>)
 8015cc4:	4815      	ldr	r0, [pc, #84]	; (8015d1c <tcp_output_alloc_header+0x78>)
 8015cc6:	f001 f925 	bl	8016f14 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8015cca:	68fb      	ldr	r3, [r7, #12]
 8015ccc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8015cce:	68fb      	ldr	r3, [r7, #12]
 8015cd0:	8adb      	ldrh	r3, [r3, #22]
 8015cd2:	68fa      	ldr	r2, [r7, #12]
 8015cd4:	8b12      	ldrh	r2, [r2, #24]
 8015cd6:	68f9      	ldr	r1, [r7, #12]
 8015cd8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8015cda:	893d      	ldrh	r5, [r7, #8]
 8015cdc:	897c      	ldrh	r4, [r7, #10]
 8015cde:	9103      	str	r1, [sp, #12]
 8015ce0:	2110      	movs	r1, #16
 8015ce2:	9102      	str	r1, [sp, #8]
 8015ce4:	9201      	str	r2, [sp, #4]
 8015ce6:	9300      	str	r3, [sp, #0]
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	462a      	mov	r2, r5
 8015cec:	4621      	mov	r1, r4
 8015cee:	f7ff ff67 	bl	8015bc0 <tcp_output_alloc_header_common>
 8015cf2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8015cf4:	697b      	ldr	r3, [r7, #20]
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d006      	beq.n	8015d08 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015cfa:	68fb      	ldr	r3, [r7, #12]
 8015cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015cfe:	68fa      	ldr	r2, [r7, #12]
 8015d00:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8015d02:	441a      	add	r2, r3
 8015d04:	68fb      	ldr	r3, [r7, #12]
 8015d06:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8015d08:	697b      	ldr	r3, [r7, #20]
}
 8015d0a:	4618      	mov	r0, r3
 8015d0c:	3718      	adds	r7, #24
 8015d0e:	46bd      	mov	sp, r7
 8015d10:	bdb0      	pop	{r4, r5, r7, pc}
 8015d12:	bf00      	nop
 8015d14:	08019e18 	.word	0x08019e18
 8015d18:	0801a560 	.word	0x0801a560
 8015d1c:	08019eac 	.word	0x08019eac

08015d20 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8015d20:	b580      	push	{r7, lr}
 8015d22:	b088      	sub	sp, #32
 8015d24:	af00      	add	r7, sp, #0
 8015d26:	60f8      	str	r0, [r7, #12]
 8015d28:	60b9      	str	r1, [r7, #8]
 8015d2a:	4611      	mov	r1, r2
 8015d2c:	461a      	mov	r2, r3
 8015d2e:	460b      	mov	r3, r1
 8015d30:	71fb      	strb	r3, [r7, #7]
 8015d32:	4613      	mov	r3, r2
 8015d34:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8015d36:	2300      	movs	r3, #0
 8015d38:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8015d3a:	68bb      	ldr	r3, [r7, #8]
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	d106      	bne.n	8015d4e <tcp_output_fill_options+0x2e>
 8015d40:	4b13      	ldr	r3, [pc, #76]	; (8015d90 <tcp_output_fill_options+0x70>)
 8015d42:	f240 7256 	movw	r2, #1878	; 0x756
 8015d46:	4913      	ldr	r1, [pc, #76]	; (8015d94 <tcp_output_fill_options+0x74>)
 8015d48:	4813      	ldr	r0, [pc, #76]	; (8015d98 <tcp_output_fill_options+0x78>)
 8015d4a:	f001 f8e3 	bl	8016f14 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8015d4e:	68bb      	ldr	r3, [r7, #8]
 8015d50:	685b      	ldr	r3, [r3, #4]
 8015d52:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8015d54:	69bb      	ldr	r3, [r7, #24]
 8015d56:	3314      	adds	r3, #20
 8015d58:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8015d5a:	69bb      	ldr	r3, [r7, #24]
 8015d5c:	f103 0214 	add.w	r2, r3, #20
 8015d60:	8bfb      	ldrh	r3, [r7, #30]
 8015d62:	009b      	lsls	r3, r3, #2
 8015d64:	4619      	mov	r1, r3
 8015d66:	79fb      	ldrb	r3, [r7, #7]
 8015d68:	009b      	lsls	r3, r3, #2
 8015d6a:	f003 0304 	and.w	r3, r3, #4
 8015d6e:	440b      	add	r3, r1
 8015d70:	4413      	add	r3, r2
 8015d72:	697a      	ldr	r2, [r7, #20]
 8015d74:	429a      	cmp	r2, r3
 8015d76:	d006      	beq.n	8015d86 <tcp_output_fill_options+0x66>
 8015d78:	4b05      	ldr	r3, [pc, #20]	; (8015d90 <tcp_output_fill_options+0x70>)
 8015d7a:	f240 7275 	movw	r2, #1909	; 0x775
 8015d7e:	4907      	ldr	r1, [pc, #28]	; (8015d9c <tcp_output_fill_options+0x7c>)
 8015d80:	4805      	ldr	r0, [pc, #20]	; (8015d98 <tcp_output_fill_options+0x78>)
 8015d82:	f001 f8c7 	bl	8016f14 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8015d86:	bf00      	nop
 8015d88:	3720      	adds	r7, #32
 8015d8a:	46bd      	mov	sp, r7
 8015d8c:	bd80      	pop	{r7, pc}
 8015d8e:	bf00      	nop
 8015d90:	08019e18 	.word	0x08019e18
 8015d94:	0801a588 	.word	0x0801a588
 8015d98:	08019eac 	.word	0x08019eac
 8015d9c:	0801a480 	.word	0x0801a480

08015da0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8015da0:	b580      	push	{r7, lr}
 8015da2:	b08a      	sub	sp, #40	; 0x28
 8015da4:	af04      	add	r7, sp, #16
 8015da6:	60f8      	str	r0, [r7, #12]
 8015da8:	60b9      	str	r1, [r7, #8]
 8015daa:	607a      	str	r2, [r7, #4]
 8015dac:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8015dae:	68bb      	ldr	r3, [r7, #8]
 8015db0:	2b00      	cmp	r3, #0
 8015db2:	d106      	bne.n	8015dc2 <tcp_output_control_segment+0x22>
 8015db4:	4b1c      	ldr	r3, [pc, #112]	; (8015e28 <tcp_output_control_segment+0x88>)
 8015db6:	f240 7287 	movw	r2, #1927	; 0x787
 8015dba:	491c      	ldr	r1, [pc, #112]	; (8015e2c <tcp_output_control_segment+0x8c>)
 8015dbc:	481c      	ldr	r0, [pc, #112]	; (8015e30 <tcp_output_control_segment+0x90>)
 8015dbe:	f001 f8a9 	bl	8016f14 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8015dc2:	683a      	ldr	r2, [r7, #0]
 8015dc4:	6879      	ldr	r1, [r7, #4]
 8015dc6:	68f8      	ldr	r0, [r7, #12]
 8015dc8:	f7fe ff40 	bl	8014c4c <tcp_route>
 8015dcc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8015dce:	693b      	ldr	r3, [r7, #16]
 8015dd0:	2b00      	cmp	r3, #0
 8015dd2:	d102      	bne.n	8015dda <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8015dd4:	23fc      	movs	r3, #252	; 0xfc
 8015dd6:	75fb      	strb	r3, [r7, #23]
 8015dd8:	e01c      	b.n	8015e14 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8015dda:	68fb      	ldr	r3, [r7, #12]
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	d006      	beq.n	8015dee <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8015de0:	68fb      	ldr	r3, [r7, #12]
 8015de2:	7adb      	ldrb	r3, [r3, #11]
 8015de4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8015de6:	68fb      	ldr	r3, [r7, #12]
 8015de8:	7a9b      	ldrb	r3, [r3, #10]
 8015dea:	757b      	strb	r3, [r7, #21]
 8015dec:	e003      	b.n	8015df6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8015dee:	23ff      	movs	r3, #255	; 0xff
 8015df0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8015df2:	2300      	movs	r3, #0
 8015df4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8015df6:	7dba      	ldrb	r2, [r7, #22]
 8015df8:	693b      	ldr	r3, [r7, #16]
 8015dfa:	9302      	str	r3, [sp, #8]
 8015dfc:	2306      	movs	r3, #6
 8015dfe:	9301      	str	r3, [sp, #4]
 8015e00:	7d7b      	ldrb	r3, [r7, #21]
 8015e02:	9300      	str	r3, [sp, #0]
 8015e04:	4613      	mov	r3, r2
 8015e06:	683a      	ldr	r2, [r7, #0]
 8015e08:	6879      	ldr	r1, [r7, #4]
 8015e0a:	68b8      	ldr	r0, [r7, #8]
 8015e0c:	f7f8 f9ec 	bl	800e1e8 <ip4_output_if>
 8015e10:	4603      	mov	r3, r0
 8015e12:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8015e14:	68b8      	ldr	r0, [r7, #8]
 8015e16:	f7fa fce7 	bl	80107e8 <pbuf_free>
  return err;
 8015e1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015e1e:	4618      	mov	r0, r3
 8015e20:	3718      	adds	r7, #24
 8015e22:	46bd      	mov	sp, r7
 8015e24:	bd80      	pop	{r7, pc}
 8015e26:	bf00      	nop
 8015e28:	08019e18 	.word	0x08019e18
 8015e2c:	0801a5b0 	.word	0x0801a5b0
 8015e30:	08019eac 	.word	0x08019eac

08015e34 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8015e34:	b590      	push	{r4, r7, lr}
 8015e36:	b08b      	sub	sp, #44	; 0x2c
 8015e38:	af04      	add	r7, sp, #16
 8015e3a:	60f8      	str	r0, [r7, #12]
 8015e3c:	60b9      	str	r1, [r7, #8]
 8015e3e:	607a      	str	r2, [r7, #4]
 8015e40:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8015e42:	683b      	ldr	r3, [r7, #0]
 8015e44:	2b00      	cmp	r3, #0
 8015e46:	d106      	bne.n	8015e56 <tcp_rst+0x22>
 8015e48:	4b1f      	ldr	r3, [pc, #124]	; (8015ec8 <tcp_rst+0x94>)
 8015e4a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8015e4e:	491f      	ldr	r1, [pc, #124]	; (8015ecc <tcp_rst+0x98>)
 8015e50:	481f      	ldr	r0, [pc, #124]	; (8015ed0 <tcp_rst+0x9c>)
 8015e52:	f001 f85f 	bl	8016f14 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8015e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	d106      	bne.n	8015e6a <tcp_rst+0x36>
 8015e5c:	4b1a      	ldr	r3, [pc, #104]	; (8015ec8 <tcp_rst+0x94>)
 8015e5e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8015e62:	491c      	ldr	r1, [pc, #112]	; (8015ed4 <tcp_rst+0xa0>)
 8015e64:	481a      	ldr	r0, [pc, #104]	; (8015ed0 <tcp_rst+0x9c>)
 8015e66:	f001 f855 	bl	8016f14 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015e6a:	2300      	movs	r3, #0
 8015e6c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8015e6e:	f246 0308 	movw	r3, #24584	; 0x6008
 8015e72:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8015e74:	7dfb      	ldrb	r3, [r7, #23]
 8015e76:	b29c      	uxth	r4, r3
 8015e78:	68b8      	ldr	r0, [r7, #8]
 8015e7a:	f7f6 fd34 	bl	800c8e6 <lwip_htonl>
 8015e7e:	4602      	mov	r2, r0
 8015e80:	8abb      	ldrh	r3, [r7, #20]
 8015e82:	9303      	str	r3, [sp, #12]
 8015e84:	2314      	movs	r3, #20
 8015e86:	9302      	str	r3, [sp, #8]
 8015e88:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8015e8a:	9301      	str	r3, [sp, #4]
 8015e8c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8015e8e:	9300      	str	r3, [sp, #0]
 8015e90:	4613      	mov	r3, r2
 8015e92:	2200      	movs	r2, #0
 8015e94:	4621      	mov	r1, r4
 8015e96:	6878      	ldr	r0, [r7, #4]
 8015e98:	f7ff fe92 	bl	8015bc0 <tcp_output_alloc_header_common>
 8015e9c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8015e9e:	693b      	ldr	r3, [r7, #16]
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	d00c      	beq.n	8015ebe <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015ea4:	7dfb      	ldrb	r3, [r7, #23]
 8015ea6:	2200      	movs	r2, #0
 8015ea8:	6939      	ldr	r1, [r7, #16]
 8015eaa:	68f8      	ldr	r0, [r7, #12]
 8015eac:	f7ff ff38 	bl	8015d20 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8015eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015eb2:	683a      	ldr	r2, [r7, #0]
 8015eb4:	6939      	ldr	r1, [r7, #16]
 8015eb6:	68f8      	ldr	r0, [r7, #12]
 8015eb8:	f7ff ff72 	bl	8015da0 <tcp_output_control_segment>
 8015ebc:	e000      	b.n	8015ec0 <tcp_rst+0x8c>
    return;
 8015ebe:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8015ec0:	371c      	adds	r7, #28
 8015ec2:	46bd      	mov	sp, r7
 8015ec4:	bd90      	pop	{r4, r7, pc}
 8015ec6:	bf00      	nop
 8015ec8:	08019e18 	.word	0x08019e18
 8015ecc:	0801a5dc 	.word	0x0801a5dc
 8015ed0:	08019eac 	.word	0x08019eac
 8015ed4:	0801a5f8 	.word	0x0801a5f8

08015ed8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8015ed8:	b590      	push	{r4, r7, lr}
 8015eda:	b087      	sub	sp, #28
 8015edc:	af00      	add	r7, sp, #0
 8015ede:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8015ee0:	2300      	movs	r3, #0
 8015ee2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8015ee4:	2300      	movs	r3, #0
 8015ee6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	d106      	bne.n	8015efc <tcp_send_empty_ack+0x24>
 8015eee:	4b28      	ldr	r3, [pc, #160]	; (8015f90 <tcp_send_empty_ack+0xb8>)
 8015ef0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8015ef4:	4927      	ldr	r1, [pc, #156]	; (8015f94 <tcp_send_empty_ack+0xbc>)
 8015ef6:	4828      	ldr	r0, [pc, #160]	; (8015f98 <tcp_send_empty_ack+0xc0>)
 8015ef8:	f001 f80c 	bl	8016f14 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015efc:	7dfb      	ldrb	r3, [r7, #23]
 8015efe:	009b      	lsls	r3, r3, #2
 8015f00:	b2db      	uxtb	r3, r3
 8015f02:	f003 0304 	and.w	r3, r3, #4
 8015f06:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8015f08:	7d7b      	ldrb	r3, [r7, #21]
 8015f0a:	b29c      	uxth	r4, r3
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015f10:	4618      	mov	r0, r3
 8015f12:	f7f6 fce8 	bl	800c8e6 <lwip_htonl>
 8015f16:	4603      	mov	r3, r0
 8015f18:	2200      	movs	r2, #0
 8015f1a:	4621      	mov	r1, r4
 8015f1c:	6878      	ldr	r0, [r7, #4]
 8015f1e:	f7ff fec1 	bl	8015ca4 <tcp_output_alloc_header>
 8015f22:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015f24:	693b      	ldr	r3, [r7, #16]
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	d109      	bne.n	8015f3e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	8b5b      	ldrh	r3, [r3, #26]
 8015f2e:	f043 0303 	orr.w	r3, r3, #3
 8015f32:	b29a      	uxth	r2, r3
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8015f38:	f06f 0301 	mvn.w	r3, #1
 8015f3c:	e023      	b.n	8015f86 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8015f3e:	7dbb      	ldrb	r3, [r7, #22]
 8015f40:	7dfa      	ldrb	r2, [r7, #23]
 8015f42:	6939      	ldr	r1, [r7, #16]
 8015f44:	6878      	ldr	r0, [r7, #4]
 8015f46:	f7ff feeb 	bl	8015d20 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015f4a:	687a      	ldr	r2, [r7, #4]
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	3304      	adds	r3, #4
 8015f50:	6939      	ldr	r1, [r7, #16]
 8015f52:	6878      	ldr	r0, [r7, #4]
 8015f54:	f7ff ff24 	bl	8015da0 <tcp_output_control_segment>
 8015f58:	4603      	mov	r3, r0
 8015f5a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8015f5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015f60:	2b00      	cmp	r3, #0
 8015f62:	d007      	beq.n	8015f74 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	8b5b      	ldrh	r3, [r3, #26]
 8015f68:	f043 0303 	orr.w	r3, r3, #3
 8015f6c:	b29a      	uxth	r2, r3
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	835a      	strh	r2, [r3, #26]
 8015f72:	e006      	b.n	8015f82 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	8b5b      	ldrh	r3, [r3, #26]
 8015f78:	f023 0303 	bic.w	r3, r3, #3
 8015f7c:	b29a      	uxth	r2, r3
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8015f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015f86:	4618      	mov	r0, r3
 8015f88:	371c      	adds	r7, #28
 8015f8a:	46bd      	mov	sp, r7
 8015f8c:	bd90      	pop	{r4, r7, pc}
 8015f8e:	bf00      	nop
 8015f90:	08019e18 	.word	0x08019e18
 8015f94:	0801a614 	.word	0x0801a614
 8015f98:	08019eac 	.word	0x08019eac

08015f9c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8015f9c:	b590      	push	{r4, r7, lr}
 8015f9e:	b087      	sub	sp, #28
 8015fa0:	af00      	add	r7, sp, #0
 8015fa2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015fa4:	2300      	movs	r3, #0
 8015fa6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d106      	bne.n	8015fbc <tcp_keepalive+0x20>
 8015fae:	4b18      	ldr	r3, [pc, #96]	; (8016010 <tcp_keepalive+0x74>)
 8015fb0:	f640 0224 	movw	r2, #2084	; 0x824
 8015fb4:	4917      	ldr	r1, [pc, #92]	; (8016014 <tcp_keepalive+0x78>)
 8015fb6:	4818      	ldr	r0, [pc, #96]	; (8016018 <tcp_keepalive+0x7c>)
 8015fb8:	f000 ffac 	bl	8016f14 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8015fbc:	7dfb      	ldrb	r3, [r7, #23]
 8015fbe:	b29c      	uxth	r4, r3
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015fc4:	3b01      	subs	r3, #1
 8015fc6:	4618      	mov	r0, r3
 8015fc8:	f7f6 fc8d 	bl	800c8e6 <lwip_htonl>
 8015fcc:	4603      	mov	r3, r0
 8015fce:	2200      	movs	r2, #0
 8015fd0:	4621      	mov	r1, r4
 8015fd2:	6878      	ldr	r0, [r7, #4]
 8015fd4:	f7ff fe66 	bl	8015ca4 <tcp_output_alloc_header>
 8015fd8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015fda:	693b      	ldr	r3, [r7, #16]
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d102      	bne.n	8015fe6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8015fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8015fe4:	e010      	b.n	8016008 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015fe6:	7dfb      	ldrb	r3, [r7, #23]
 8015fe8:	2200      	movs	r2, #0
 8015fea:	6939      	ldr	r1, [r7, #16]
 8015fec:	6878      	ldr	r0, [r7, #4]
 8015fee:	f7ff fe97 	bl	8015d20 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015ff2:	687a      	ldr	r2, [r7, #4]
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	3304      	adds	r3, #4
 8015ff8:	6939      	ldr	r1, [r7, #16]
 8015ffa:	6878      	ldr	r0, [r7, #4]
 8015ffc:	f7ff fed0 	bl	8015da0 <tcp_output_control_segment>
 8016000:	4603      	mov	r3, r0
 8016002:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8016004:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016008:	4618      	mov	r0, r3
 801600a:	371c      	adds	r7, #28
 801600c:	46bd      	mov	sp, r7
 801600e:	bd90      	pop	{r4, r7, pc}
 8016010:	08019e18 	.word	0x08019e18
 8016014:	0801a634 	.word	0x0801a634
 8016018:	08019eac 	.word	0x08019eac

0801601c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801601c:	b590      	push	{r4, r7, lr}
 801601e:	b08b      	sub	sp, #44	; 0x2c
 8016020:	af00      	add	r7, sp, #0
 8016022:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016024:	2300      	movs	r3, #0
 8016026:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	2b00      	cmp	r3, #0
 801602e:	d106      	bne.n	801603e <tcp_zero_window_probe+0x22>
 8016030:	4b4c      	ldr	r3, [pc, #304]	; (8016164 <tcp_zero_window_probe+0x148>)
 8016032:	f640 024f 	movw	r2, #2127	; 0x84f
 8016036:	494c      	ldr	r1, [pc, #304]	; (8016168 <tcp_zero_window_probe+0x14c>)
 8016038:	484c      	ldr	r0, [pc, #304]	; (801616c <tcp_zero_window_probe+0x150>)
 801603a:	f000 ff6b 	bl	8016f14 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016042:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8016044:	6a3b      	ldr	r3, [r7, #32]
 8016046:	2b00      	cmp	r3, #0
 8016048:	d101      	bne.n	801604e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801604a:	2300      	movs	r3, #0
 801604c:	e086      	b.n	801615c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8016054:	2bff      	cmp	r3, #255	; 0xff
 8016056:	d007      	beq.n	8016068 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801605e:	3301      	adds	r3, #1
 8016060:	b2da      	uxtb	r2, r3
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8016068:	6a3b      	ldr	r3, [r7, #32]
 801606a:	68db      	ldr	r3, [r3, #12]
 801606c:	899b      	ldrh	r3, [r3, #12]
 801606e:	b29b      	uxth	r3, r3
 8016070:	4618      	mov	r0, r3
 8016072:	f7f6 fc23 	bl	800c8bc <lwip_htons>
 8016076:	4603      	mov	r3, r0
 8016078:	b2db      	uxtb	r3, r3
 801607a:	f003 0301 	and.w	r3, r3, #1
 801607e:	2b00      	cmp	r3, #0
 8016080:	d005      	beq.n	801608e <tcp_zero_window_probe+0x72>
 8016082:	6a3b      	ldr	r3, [r7, #32]
 8016084:	891b      	ldrh	r3, [r3, #8]
 8016086:	2b00      	cmp	r3, #0
 8016088:	d101      	bne.n	801608e <tcp_zero_window_probe+0x72>
 801608a:	2301      	movs	r3, #1
 801608c:	e000      	b.n	8016090 <tcp_zero_window_probe+0x74>
 801608e:	2300      	movs	r3, #0
 8016090:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8016092:	7ffb      	ldrb	r3, [r7, #31]
 8016094:	2b00      	cmp	r3, #0
 8016096:	bf0c      	ite	eq
 8016098:	2301      	moveq	r3, #1
 801609a:	2300      	movne	r3, #0
 801609c:	b2db      	uxtb	r3, r3
 801609e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80160a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80160a4:	b299      	uxth	r1, r3
 80160a6:	6a3b      	ldr	r3, [r7, #32]
 80160a8:	68db      	ldr	r3, [r3, #12]
 80160aa:	685b      	ldr	r3, [r3, #4]
 80160ac:	8bba      	ldrh	r2, [r7, #28]
 80160ae:	6878      	ldr	r0, [r7, #4]
 80160b0:	f7ff fdf8 	bl	8015ca4 <tcp_output_alloc_header>
 80160b4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80160b6:	69bb      	ldr	r3, [r7, #24]
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d102      	bne.n	80160c2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80160bc:	f04f 33ff 	mov.w	r3, #4294967295
 80160c0:	e04c      	b.n	801615c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80160c2:	69bb      	ldr	r3, [r7, #24]
 80160c4:	685b      	ldr	r3, [r3, #4]
 80160c6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80160c8:	7ffb      	ldrb	r3, [r7, #31]
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	d011      	beq.n	80160f2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80160ce:	697b      	ldr	r3, [r7, #20]
 80160d0:	899b      	ldrh	r3, [r3, #12]
 80160d2:	b29b      	uxth	r3, r3
 80160d4:	b21b      	sxth	r3, r3
 80160d6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80160da:	b21c      	sxth	r4, r3
 80160dc:	2011      	movs	r0, #17
 80160de:	f7f6 fbed 	bl	800c8bc <lwip_htons>
 80160e2:	4603      	mov	r3, r0
 80160e4:	b21b      	sxth	r3, r3
 80160e6:	4323      	orrs	r3, r4
 80160e8:	b21b      	sxth	r3, r3
 80160ea:	b29a      	uxth	r2, r3
 80160ec:	697b      	ldr	r3, [r7, #20]
 80160ee:	819a      	strh	r2, [r3, #12]
 80160f0:	e010      	b.n	8016114 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80160f2:	69bb      	ldr	r3, [r7, #24]
 80160f4:	685b      	ldr	r3, [r3, #4]
 80160f6:	3314      	adds	r3, #20
 80160f8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80160fa:	6a3b      	ldr	r3, [r7, #32]
 80160fc:	6858      	ldr	r0, [r3, #4]
 80160fe:	6a3b      	ldr	r3, [r7, #32]
 8016100:	685b      	ldr	r3, [r3, #4]
 8016102:	891a      	ldrh	r2, [r3, #8]
 8016104:	6a3b      	ldr	r3, [r7, #32]
 8016106:	891b      	ldrh	r3, [r3, #8]
 8016108:	1ad3      	subs	r3, r2, r3
 801610a:	b29b      	uxth	r3, r3
 801610c:	2201      	movs	r2, #1
 801610e:	6939      	ldr	r1, [r7, #16]
 8016110:	f7fa fd60 	bl	8010bd4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8016114:	6a3b      	ldr	r3, [r7, #32]
 8016116:	68db      	ldr	r3, [r3, #12]
 8016118:	685b      	ldr	r3, [r3, #4]
 801611a:	4618      	mov	r0, r3
 801611c:	f7f6 fbe3 	bl	800c8e6 <lwip_htonl>
 8016120:	4603      	mov	r3, r0
 8016122:	3301      	adds	r3, #1
 8016124:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801612a:	68fb      	ldr	r3, [r7, #12]
 801612c:	1ad3      	subs	r3, r2, r3
 801612e:	2b00      	cmp	r3, #0
 8016130:	da02      	bge.n	8016138 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	68fa      	ldr	r2, [r7, #12]
 8016136:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016138:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801613c:	2200      	movs	r2, #0
 801613e:	69b9      	ldr	r1, [r7, #24]
 8016140:	6878      	ldr	r0, [r7, #4]
 8016142:	f7ff fded 	bl	8015d20 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8016146:	687a      	ldr	r2, [r7, #4]
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	3304      	adds	r3, #4
 801614c:	69b9      	ldr	r1, [r7, #24]
 801614e:	6878      	ldr	r0, [r7, #4]
 8016150:	f7ff fe26 	bl	8015da0 <tcp_output_control_segment>
 8016154:	4603      	mov	r3, r0
 8016156:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8016158:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801615c:	4618      	mov	r0, r3
 801615e:	372c      	adds	r7, #44	; 0x2c
 8016160:	46bd      	mov	sp, r7
 8016162:	bd90      	pop	{r4, r7, pc}
 8016164:	08019e18 	.word	0x08019e18
 8016168:	0801a650 	.word	0x0801a650
 801616c:	08019eac 	.word	0x08019eac

08016170 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8016170:	b580      	push	{r7, lr}
 8016172:	b084      	sub	sp, #16
 8016174:	af00      	add	r7, sp, #0
 8016176:	6078      	str	r0, [r7, #4]
 8016178:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 801617a:	f000 fb01 	bl	8016780 <sys_timeouts_sleeptime>
 801617e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8016180:	68fb      	ldr	r3, [r7, #12]
 8016182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016186:	d10b      	bne.n	80161a0 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8016188:	4813      	ldr	r0, [pc, #76]	; (80161d8 <tcpip_timeouts_mbox_fetch+0x68>)
 801618a:	f7fa fe6e 	bl	8010e6a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801618e:	2200      	movs	r2, #0
 8016190:	6839      	ldr	r1, [r7, #0]
 8016192:	6878      	ldr	r0, [r7, #4]
 8016194:	f7fa fdf6 	bl	8010d84 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8016198:	480f      	ldr	r0, [pc, #60]	; (80161d8 <tcpip_timeouts_mbox_fetch+0x68>)
 801619a:	f7fa fe57 	bl	8010e4c <sys_mutex_lock>
    return;
 801619e:	e018      	b.n	80161d2 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 80161a0:	68fb      	ldr	r3, [r7, #12]
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	d102      	bne.n	80161ac <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 80161a6:	f000 fab1 	bl	801670c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80161aa:	e7e6      	b.n	801617a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80161ac:	480a      	ldr	r0, [pc, #40]	; (80161d8 <tcpip_timeouts_mbox_fetch+0x68>)
 80161ae:	f7fa fe5c 	bl	8010e6a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80161b2:	68fa      	ldr	r2, [r7, #12]
 80161b4:	6839      	ldr	r1, [r7, #0]
 80161b6:	6878      	ldr	r0, [r7, #4]
 80161b8:	f7fa fde4 	bl	8010d84 <sys_arch_mbox_fetch>
 80161bc:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80161be:	4806      	ldr	r0, [pc, #24]	; (80161d8 <tcpip_timeouts_mbox_fetch+0x68>)
 80161c0:	f7fa fe44 	bl	8010e4c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80161c4:	68bb      	ldr	r3, [r7, #8]
 80161c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80161ca:	d102      	bne.n	80161d2 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80161cc:	f000 fa9e 	bl	801670c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80161d0:	e7d3      	b.n	801617a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80161d2:	3710      	adds	r7, #16
 80161d4:	46bd      	mov	sp, r7
 80161d6:	bd80      	pop	{r7, pc}
 80161d8:	24015588 	.word	0x24015588

080161dc <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80161dc:	b580      	push	{r7, lr}
 80161de:	b084      	sub	sp, #16
 80161e0:	af00      	add	r7, sp, #0
 80161e2:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80161e4:	4810      	ldr	r0, [pc, #64]	; (8016228 <tcpip_thread+0x4c>)
 80161e6:	f7fa fe31 	bl	8010e4c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80161ea:	4b10      	ldr	r3, [pc, #64]	; (801622c <tcpip_thread+0x50>)
 80161ec:	681b      	ldr	r3, [r3, #0]
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	d005      	beq.n	80161fe <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80161f2:	4b0e      	ldr	r3, [pc, #56]	; (801622c <tcpip_thread+0x50>)
 80161f4:	681b      	ldr	r3, [r3, #0]
 80161f6:	4a0e      	ldr	r2, [pc, #56]	; (8016230 <tcpip_thread+0x54>)
 80161f8:	6812      	ldr	r2, [r2, #0]
 80161fa:	4610      	mov	r0, r2
 80161fc:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80161fe:	f107 030c 	add.w	r3, r7, #12
 8016202:	4619      	mov	r1, r3
 8016204:	480b      	ldr	r0, [pc, #44]	; (8016234 <tcpip_thread+0x58>)
 8016206:	f7ff ffb3 	bl	8016170 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 801620a:	68fb      	ldr	r3, [r7, #12]
 801620c:	2b00      	cmp	r3, #0
 801620e:	d106      	bne.n	801621e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8016210:	4b09      	ldr	r3, [pc, #36]	; (8016238 <tcpip_thread+0x5c>)
 8016212:	2291      	movs	r2, #145	; 0x91
 8016214:	4909      	ldr	r1, [pc, #36]	; (801623c <tcpip_thread+0x60>)
 8016216:	480a      	ldr	r0, [pc, #40]	; (8016240 <tcpip_thread+0x64>)
 8016218:	f000 fe7c 	bl	8016f14 <iprintf>
      continue;
 801621c:	e003      	b.n	8016226 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 801621e:	68fb      	ldr	r3, [r7, #12]
 8016220:	4618      	mov	r0, r3
 8016222:	f000 f80f 	bl	8016244 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8016226:	e7ea      	b.n	80161fe <tcpip_thread+0x22>
 8016228:	24015588 	.word	0x24015588
 801622c:	2401557c 	.word	0x2401557c
 8016230:	24015580 	.word	0x24015580
 8016234:	24015584 	.word	0x24015584
 8016238:	0801a674 	.word	0x0801a674
 801623c:	0801a6e8 	.word	0x0801a6e8
 8016240:	0801a708 	.word	0x0801a708

08016244 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8016244:	b580      	push	{r7, lr}
 8016246:	b082      	sub	sp, #8
 8016248:	af00      	add	r7, sp, #0
 801624a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	781b      	ldrb	r3, [r3, #0]
 8016250:	2b02      	cmp	r3, #2
 8016252:	d026      	beq.n	80162a2 <tcpip_thread_handle_msg+0x5e>
 8016254:	2b02      	cmp	r3, #2
 8016256:	dc2b      	bgt.n	80162b0 <tcpip_thread_handle_msg+0x6c>
 8016258:	2b00      	cmp	r3, #0
 801625a:	d002      	beq.n	8016262 <tcpip_thread_handle_msg+0x1e>
 801625c:	2b01      	cmp	r3, #1
 801625e:	d015      	beq.n	801628c <tcpip_thread_handle_msg+0x48>
 8016260:	e026      	b.n	80162b0 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	68db      	ldr	r3, [r3, #12]
 8016266:	687a      	ldr	r2, [r7, #4]
 8016268:	6850      	ldr	r0, [r2, #4]
 801626a:	687a      	ldr	r2, [r7, #4]
 801626c:	6892      	ldr	r2, [r2, #8]
 801626e:	4611      	mov	r1, r2
 8016270:	4798      	blx	r3
 8016272:	4603      	mov	r3, r0
 8016274:	2b00      	cmp	r3, #0
 8016276:	d004      	beq.n	8016282 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	685b      	ldr	r3, [r3, #4]
 801627c:	4618      	mov	r0, r3
 801627e:	f7fa fab3 	bl	80107e8 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8016282:	6879      	ldr	r1, [r7, #4]
 8016284:	2009      	movs	r0, #9
 8016286:	f7f9 fc0b 	bl	800faa0 <memp_free>
      break;
 801628a:	e018      	b.n	80162be <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	685b      	ldr	r3, [r3, #4]
 8016290:	687a      	ldr	r2, [r7, #4]
 8016292:	6892      	ldr	r2, [r2, #8]
 8016294:	4610      	mov	r0, r2
 8016296:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8016298:	6879      	ldr	r1, [r7, #4]
 801629a:	2008      	movs	r0, #8
 801629c:	f7f9 fc00 	bl	800faa0 <memp_free>
      break;
 80162a0:	e00d      	b.n	80162be <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	685b      	ldr	r3, [r3, #4]
 80162a6:	687a      	ldr	r2, [r7, #4]
 80162a8:	6892      	ldr	r2, [r2, #8]
 80162aa:	4610      	mov	r0, r2
 80162ac:	4798      	blx	r3
      break;
 80162ae:	e006      	b.n	80162be <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80162b0:	4b05      	ldr	r3, [pc, #20]	; (80162c8 <tcpip_thread_handle_msg+0x84>)
 80162b2:	22cf      	movs	r2, #207	; 0xcf
 80162b4:	4905      	ldr	r1, [pc, #20]	; (80162cc <tcpip_thread_handle_msg+0x88>)
 80162b6:	4806      	ldr	r0, [pc, #24]	; (80162d0 <tcpip_thread_handle_msg+0x8c>)
 80162b8:	f000 fe2c 	bl	8016f14 <iprintf>
      break;
 80162bc:	bf00      	nop
  }
}
 80162be:	bf00      	nop
 80162c0:	3708      	adds	r7, #8
 80162c2:	46bd      	mov	sp, r7
 80162c4:	bd80      	pop	{r7, pc}
 80162c6:	bf00      	nop
 80162c8:	0801a674 	.word	0x0801a674
 80162cc:	0801a6e8 	.word	0x0801a6e8
 80162d0:	0801a708 	.word	0x0801a708

080162d4 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80162d4:	b580      	push	{r7, lr}
 80162d6:	b086      	sub	sp, #24
 80162d8:	af00      	add	r7, sp, #0
 80162da:	60f8      	str	r0, [r7, #12]
 80162dc:	60b9      	str	r1, [r7, #8]
 80162de:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80162e0:	481a      	ldr	r0, [pc, #104]	; (801634c <tcpip_inpkt+0x78>)
 80162e2:	f7fa fd80 	bl	8010de6 <sys_mbox_valid>
 80162e6:	4603      	mov	r3, r0
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	d105      	bne.n	80162f8 <tcpip_inpkt+0x24>
 80162ec:	4b18      	ldr	r3, [pc, #96]	; (8016350 <tcpip_inpkt+0x7c>)
 80162ee:	22fc      	movs	r2, #252	; 0xfc
 80162f0:	4918      	ldr	r1, [pc, #96]	; (8016354 <tcpip_inpkt+0x80>)
 80162f2:	4819      	ldr	r0, [pc, #100]	; (8016358 <tcpip_inpkt+0x84>)
 80162f4:	f000 fe0e 	bl	8016f14 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80162f8:	2009      	movs	r0, #9
 80162fa:	f7f9 fb5b 	bl	800f9b4 <memp_malloc>
 80162fe:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8016300:	697b      	ldr	r3, [r7, #20]
 8016302:	2b00      	cmp	r3, #0
 8016304:	d102      	bne.n	801630c <tcpip_inpkt+0x38>
    return ERR_MEM;
 8016306:	f04f 33ff 	mov.w	r3, #4294967295
 801630a:	e01a      	b.n	8016342 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 801630c:	697b      	ldr	r3, [r7, #20]
 801630e:	2200      	movs	r2, #0
 8016310:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8016312:	697b      	ldr	r3, [r7, #20]
 8016314:	68fa      	ldr	r2, [r7, #12]
 8016316:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8016318:	697b      	ldr	r3, [r7, #20]
 801631a:	68ba      	ldr	r2, [r7, #8]
 801631c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 801631e:	697b      	ldr	r3, [r7, #20]
 8016320:	687a      	ldr	r2, [r7, #4]
 8016322:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8016324:	6979      	ldr	r1, [r7, #20]
 8016326:	4809      	ldr	r0, [pc, #36]	; (801634c <tcpip_inpkt+0x78>)
 8016328:	f7fa fd12 	bl	8010d50 <sys_mbox_trypost>
 801632c:	4603      	mov	r3, r0
 801632e:	2b00      	cmp	r3, #0
 8016330:	d006      	beq.n	8016340 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8016332:	6979      	ldr	r1, [r7, #20]
 8016334:	2009      	movs	r0, #9
 8016336:	f7f9 fbb3 	bl	800faa0 <memp_free>
    return ERR_MEM;
 801633a:	f04f 33ff 	mov.w	r3, #4294967295
 801633e:	e000      	b.n	8016342 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8016340:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8016342:	4618      	mov	r0, r3
 8016344:	3718      	adds	r7, #24
 8016346:	46bd      	mov	sp, r7
 8016348:	bd80      	pop	{r7, pc}
 801634a:	bf00      	nop
 801634c:	24015584 	.word	0x24015584
 8016350:	0801a674 	.word	0x0801a674
 8016354:	0801a730 	.word	0x0801a730
 8016358:	0801a708 	.word	0x0801a708

0801635c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 801635c:	b580      	push	{r7, lr}
 801635e:	b082      	sub	sp, #8
 8016360:	af00      	add	r7, sp, #0
 8016362:	6078      	str	r0, [r7, #4]
 8016364:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8016366:	683b      	ldr	r3, [r7, #0]
 8016368:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801636c:	f003 0318 	and.w	r3, r3, #24
 8016370:	2b00      	cmp	r3, #0
 8016372:	d006      	beq.n	8016382 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8016374:	4a08      	ldr	r2, [pc, #32]	; (8016398 <tcpip_input+0x3c>)
 8016376:	6839      	ldr	r1, [r7, #0]
 8016378:	6878      	ldr	r0, [r7, #4]
 801637a:	f7ff ffab 	bl	80162d4 <tcpip_inpkt>
 801637e:	4603      	mov	r3, r0
 8016380:	e005      	b.n	801638e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8016382:	4a06      	ldr	r2, [pc, #24]	; (801639c <tcpip_input+0x40>)
 8016384:	6839      	ldr	r1, [r7, #0]
 8016386:	6878      	ldr	r0, [r7, #4]
 8016388:	f7ff ffa4 	bl	80162d4 <tcpip_inpkt>
 801638c:	4603      	mov	r3, r0
}
 801638e:	4618      	mov	r0, r3
 8016390:	3708      	adds	r7, #8
 8016392:	46bd      	mov	sp, r7
 8016394:	bd80      	pop	{r7, pc}
 8016396:	bf00      	nop
 8016398:	0800d7b1 	.word	0x0800d7b1
 801639c:	0800dfa1 	.word	0x0800dfa1

080163a0 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 80163a0:	b580      	push	{r7, lr}
 80163a2:	b084      	sub	sp, #16
 80163a4:	af00      	add	r7, sp, #0
 80163a6:	6078      	str	r0, [r7, #4]
 80163a8:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80163aa:	4819      	ldr	r0, [pc, #100]	; (8016410 <tcpip_try_callback+0x70>)
 80163ac:	f7fa fd1b 	bl	8010de6 <sys_mbox_valid>
 80163b0:	4603      	mov	r3, r0
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	d106      	bne.n	80163c4 <tcpip_try_callback+0x24>
 80163b6:	4b17      	ldr	r3, [pc, #92]	; (8016414 <tcpip_try_callback+0x74>)
 80163b8:	f240 125d 	movw	r2, #349	; 0x15d
 80163bc:	4916      	ldr	r1, [pc, #88]	; (8016418 <tcpip_try_callback+0x78>)
 80163be:	4817      	ldr	r0, [pc, #92]	; (801641c <tcpip_try_callback+0x7c>)
 80163c0:	f000 fda8 	bl	8016f14 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80163c4:	2008      	movs	r0, #8
 80163c6:	f7f9 faf5 	bl	800f9b4 <memp_malloc>
 80163ca:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80163cc:	68fb      	ldr	r3, [r7, #12]
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	d102      	bne.n	80163d8 <tcpip_try_callback+0x38>
    return ERR_MEM;
 80163d2:	f04f 33ff 	mov.w	r3, #4294967295
 80163d6:	e017      	b.n	8016408 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80163d8:	68fb      	ldr	r3, [r7, #12]
 80163da:	2201      	movs	r2, #1
 80163dc:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80163de:	68fb      	ldr	r3, [r7, #12]
 80163e0:	687a      	ldr	r2, [r7, #4]
 80163e2:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80163e4:	68fb      	ldr	r3, [r7, #12]
 80163e6:	683a      	ldr	r2, [r7, #0]
 80163e8:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80163ea:	68f9      	ldr	r1, [r7, #12]
 80163ec:	4808      	ldr	r0, [pc, #32]	; (8016410 <tcpip_try_callback+0x70>)
 80163ee:	f7fa fcaf 	bl	8010d50 <sys_mbox_trypost>
 80163f2:	4603      	mov	r3, r0
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d006      	beq.n	8016406 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80163f8:	68f9      	ldr	r1, [r7, #12]
 80163fa:	2008      	movs	r0, #8
 80163fc:	f7f9 fb50 	bl	800faa0 <memp_free>
    return ERR_MEM;
 8016400:	f04f 33ff 	mov.w	r3, #4294967295
 8016404:	e000      	b.n	8016408 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8016406:	2300      	movs	r3, #0
}
 8016408:	4618      	mov	r0, r3
 801640a:	3710      	adds	r7, #16
 801640c:	46bd      	mov	sp, r7
 801640e:	bd80      	pop	{r7, pc}
 8016410:	24015584 	.word	0x24015584
 8016414:	0801a674 	.word	0x0801a674
 8016418:	0801a730 	.word	0x0801a730
 801641c:	0801a708 	.word	0x0801a708

08016420 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8016420:	b580      	push	{r7, lr}
 8016422:	b084      	sub	sp, #16
 8016424:	af02      	add	r7, sp, #8
 8016426:	6078      	str	r0, [r7, #4]
 8016428:	6039      	str	r1, [r7, #0]
  lwip_init();
 801642a:	f7f7 fd07 	bl	800de3c <lwip_init>

  tcpip_init_done = initfunc;
 801642e:	4a17      	ldr	r2, [pc, #92]	; (801648c <tcpip_init+0x6c>)
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8016434:	4a16      	ldr	r2, [pc, #88]	; (8016490 <tcpip_init+0x70>)
 8016436:	683b      	ldr	r3, [r7, #0]
 8016438:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 801643a:	2106      	movs	r1, #6
 801643c:	4815      	ldr	r0, [pc, #84]	; (8016494 <tcpip_init+0x74>)
 801643e:	f7fa fc6d 	bl	8010d1c <sys_mbox_new>
 8016442:	4603      	mov	r3, r0
 8016444:	2b00      	cmp	r3, #0
 8016446:	d006      	beq.n	8016456 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8016448:	4b13      	ldr	r3, [pc, #76]	; (8016498 <tcpip_init+0x78>)
 801644a:	f240 2261 	movw	r2, #609	; 0x261
 801644e:	4913      	ldr	r1, [pc, #76]	; (801649c <tcpip_init+0x7c>)
 8016450:	4813      	ldr	r0, [pc, #76]	; (80164a0 <tcpip_init+0x80>)
 8016452:	f000 fd5f 	bl	8016f14 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8016456:	4813      	ldr	r0, [pc, #76]	; (80164a4 <tcpip_init+0x84>)
 8016458:	f7fa fce2 	bl	8010e20 <sys_mutex_new>
 801645c:	4603      	mov	r3, r0
 801645e:	2b00      	cmp	r3, #0
 8016460:	d006      	beq.n	8016470 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8016462:	4b0d      	ldr	r3, [pc, #52]	; (8016498 <tcpip_init+0x78>)
 8016464:	f240 2265 	movw	r2, #613	; 0x265
 8016468:	490f      	ldr	r1, [pc, #60]	; (80164a8 <tcpip_init+0x88>)
 801646a:	480d      	ldr	r0, [pc, #52]	; (80164a0 <tcpip_init+0x80>)
 801646c:	f000 fd52 	bl	8016f14 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8016470:	2318      	movs	r3, #24
 8016472:	9300      	str	r3, [sp, #0]
 8016474:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016478:	2200      	movs	r2, #0
 801647a:	490c      	ldr	r1, [pc, #48]	; (80164ac <tcpip_init+0x8c>)
 801647c:	480c      	ldr	r0, [pc, #48]	; (80164b0 <tcpip_init+0x90>)
 801647e:	f7fa fd01 	bl	8010e84 <sys_thread_new>
}
 8016482:	bf00      	nop
 8016484:	3708      	adds	r7, #8
 8016486:	46bd      	mov	sp, r7
 8016488:	bd80      	pop	{r7, pc}
 801648a:	bf00      	nop
 801648c:	2401557c 	.word	0x2401557c
 8016490:	24015580 	.word	0x24015580
 8016494:	24015584 	.word	0x24015584
 8016498:	0801a674 	.word	0x0801a674
 801649c:	0801a740 	.word	0x0801a740
 80164a0:	0801a708 	.word	0x0801a708
 80164a4:	24015588 	.word	0x24015588
 80164a8:	0801a764 	.word	0x0801a764
 80164ac:	080161dd 	.word	0x080161dd
 80164b0:	0801a788 	.word	0x0801a788

080164b4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80164b4:	b580      	push	{r7, lr}
 80164b6:	b082      	sub	sp, #8
 80164b8:	af00      	add	r7, sp, #0
 80164ba:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80164bc:	f7fa fd6a 	bl	8010f94 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80164c0:	4b0a      	ldr	r3, [pc, #40]	; (80164ec <tcpip_tcp_timer+0x38>)
 80164c2:	681b      	ldr	r3, [r3, #0]
 80164c4:	2b00      	cmp	r3, #0
 80164c6:	d103      	bne.n	80164d0 <tcpip_tcp_timer+0x1c>
 80164c8:	4b09      	ldr	r3, [pc, #36]	; (80164f0 <tcpip_tcp_timer+0x3c>)
 80164ca:	681b      	ldr	r3, [r3, #0]
 80164cc:	2b00      	cmp	r3, #0
 80164ce:	d005      	beq.n	80164dc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80164d0:	2200      	movs	r2, #0
 80164d2:	4908      	ldr	r1, [pc, #32]	; (80164f4 <tcpip_tcp_timer+0x40>)
 80164d4:	20fa      	movs	r0, #250	; 0xfa
 80164d6:	f000 f8f3 	bl	80166c0 <sys_timeout>
 80164da:	e003      	b.n	80164e4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80164dc:	4b06      	ldr	r3, [pc, #24]	; (80164f8 <tcpip_tcp_timer+0x44>)
 80164de:	2200      	movs	r2, #0
 80164e0:	601a      	str	r2, [r3, #0]
  }
}
 80164e2:	bf00      	nop
 80164e4:	bf00      	nop
 80164e6:	3708      	adds	r7, #8
 80164e8:	46bd      	mov	sp, r7
 80164ea:	bd80      	pop	{r7, pc}
 80164ec:	24015538 	.word	0x24015538
 80164f0:	2401553c 	.word	0x2401553c
 80164f4:	080164b5 	.word	0x080164b5
 80164f8:	24015594 	.word	0x24015594

080164fc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80164fc:	b580      	push	{r7, lr}
 80164fe:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8016500:	4b0a      	ldr	r3, [pc, #40]	; (801652c <tcp_timer_needed+0x30>)
 8016502:	681b      	ldr	r3, [r3, #0]
 8016504:	2b00      	cmp	r3, #0
 8016506:	d10f      	bne.n	8016528 <tcp_timer_needed+0x2c>
 8016508:	4b09      	ldr	r3, [pc, #36]	; (8016530 <tcp_timer_needed+0x34>)
 801650a:	681b      	ldr	r3, [r3, #0]
 801650c:	2b00      	cmp	r3, #0
 801650e:	d103      	bne.n	8016518 <tcp_timer_needed+0x1c>
 8016510:	4b08      	ldr	r3, [pc, #32]	; (8016534 <tcp_timer_needed+0x38>)
 8016512:	681b      	ldr	r3, [r3, #0]
 8016514:	2b00      	cmp	r3, #0
 8016516:	d007      	beq.n	8016528 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8016518:	4b04      	ldr	r3, [pc, #16]	; (801652c <tcp_timer_needed+0x30>)
 801651a:	2201      	movs	r2, #1
 801651c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801651e:	2200      	movs	r2, #0
 8016520:	4905      	ldr	r1, [pc, #20]	; (8016538 <tcp_timer_needed+0x3c>)
 8016522:	20fa      	movs	r0, #250	; 0xfa
 8016524:	f000 f8cc 	bl	80166c0 <sys_timeout>
  }
}
 8016528:	bf00      	nop
 801652a:	bd80      	pop	{r7, pc}
 801652c:	24015594 	.word	0x24015594
 8016530:	24015538 	.word	0x24015538
 8016534:	2401553c 	.word	0x2401553c
 8016538:	080164b5 	.word	0x080164b5

0801653c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801653c:	b580      	push	{r7, lr}
 801653e:	b086      	sub	sp, #24
 8016540:	af00      	add	r7, sp, #0
 8016542:	60f8      	str	r0, [r7, #12]
 8016544:	60b9      	str	r1, [r7, #8]
 8016546:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8016548:	200a      	movs	r0, #10
 801654a:	f7f9 fa33 	bl	800f9b4 <memp_malloc>
 801654e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8016550:	693b      	ldr	r3, [r7, #16]
 8016552:	2b00      	cmp	r3, #0
 8016554:	d109      	bne.n	801656a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8016556:	693b      	ldr	r3, [r7, #16]
 8016558:	2b00      	cmp	r3, #0
 801655a:	d151      	bne.n	8016600 <sys_timeout_abs+0xc4>
 801655c:	4b2a      	ldr	r3, [pc, #168]	; (8016608 <sys_timeout_abs+0xcc>)
 801655e:	22be      	movs	r2, #190	; 0xbe
 8016560:	492a      	ldr	r1, [pc, #168]	; (801660c <sys_timeout_abs+0xd0>)
 8016562:	482b      	ldr	r0, [pc, #172]	; (8016610 <sys_timeout_abs+0xd4>)
 8016564:	f000 fcd6 	bl	8016f14 <iprintf>
    return;
 8016568:	e04a      	b.n	8016600 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801656a:	693b      	ldr	r3, [r7, #16]
 801656c:	2200      	movs	r2, #0
 801656e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8016570:	693b      	ldr	r3, [r7, #16]
 8016572:	68ba      	ldr	r2, [r7, #8]
 8016574:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8016576:	693b      	ldr	r3, [r7, #16]
 8016578:	687a      	ldr	r2, [r7, #4]
 801657a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801657c:	693b      	ldr	r3, [r7, #16]
 801657e:	68fa      	ldr	r2, [r7, #12]
 8016580:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8016582:	4b24      	ldr	r3, [pc, #144]	; (8016614 <sys_timeout_abs+0xd8>)
 8016584:	681b      	ldr	r3, [r3, #0]
 8016586:	2b00      	cmp	r3, #0
 8016588:	d103      	bne.n	8016592 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801658a:	4a22      	ldr	r2, [pc, #136]	; (8016614 <sys_timeout_abs+0xd8>)
 801658c:	693b      	ldr	r3, [r7, #16]
 801658e:	6013      	str	r3, [r2, #0]
    return;
 8016590:	e037      	b.n	8016602 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8016592:	693b      	ldr	r3, [r7, #16]
 8016594:	685a      	ldr	r2, [r3, #4]
 8016596:	4b1f      	ldr	r3, [pc, #124]	; (8016614 <sys_timeout_abs+0xd8>)
 8016598:	681b      	ldr	r3, [r3, #0]
 801659a:	685b      	ldr	r3, [r3, #4]
 801659c:	1ad3      	subs	r3, r2, r3
 801659e:	0fdb      	lsrs	r3, r3, #31
 80165a0:	f003 0301 	and.w	r3, r3, #1
 80165a4:	b2db      	uxtb	r3, r3
 80165a6:	2b00      	cmp	r3, #0
 80165a8:	d007      	beq.n	80165ba <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80165aa:	4b1a      	ldr	r3, [pc, #104]	; (8016614 <sys_timeout_abs+0xd8>)
 80165ac:	681a      	ldr	r2, [r3, #0]
 80165ae:	693b      	ldr	r3, [r7, #16]
 80165b0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80165b2:	4a18      	ldr	r2, [pc, #96]	; (8016614 <sys_timeout_abs+0xd8>)
 80165b4:	693b      	ldr	r3, [r7, #16]
 80165b6:	6013      	str	r3, [r2, #0]
 80165b8:	e023      	b.n	8016602 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80165ba:	4b16      	ldr	r3, [pc, #88]	; (8016614 <sys_timeout_abs+0xd8>)
 80165bc:	681b      	ldr	r3, [r3, #0]
 80165be:	617b      	str	r3, [r7, #20]
 80165c0:	e01a      	b.n	80165f8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80165c2:	697b      	ldr	r3, [r7, #20]
 80165c4:	681b      	ldr	r3, [r3, #0]
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d00b      	beq.n	80165e2 <sys_timeout_abs+0xa6>
 80165ca:	693b      	ldr	r3, [r7, #16]
 80165cc:	685a      	ldr	r2, [r3, #4]
 80165ce:	697b      	ldr	r3, [r7, #20]
 80165d0:	681b      	ldr	r3, [r3, #0]
 80165d2:	685b      	ldr	r3, [r3, #4]
 80165d4:	1ad3      	subs	r3, r2, r3
 80165d6:	0fdb      	lsrs	r3, r3, #31
 80165d8:	f003 0301 	and.w	r3, r3, #1
 80165dc:	b2db      	uxtb	r3, r3
 80165de:	2b00      	cmp	r3, #0
 80165e0:	d007      	beq.n	80165f2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80165e2:	697b      	ldr	r3, [r7, #20]
 80165e4:	681a      	ldr	r2, [r3, #0]
 80165e6:	693b      	ldr	r3, [r7, #16]
 80165e8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80165ea:	697b      	ldr	r3, [r7, #20]
 80165ec:	693a      	ldr	r2, [r7, #16]
 80165ee:	601a      	str	r2, [r3, #0]
        break;
 80165f0:	e007      	b.n	8016602 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80165f2:	697b      	ldr	r3, [r7, #20]
 80165f4:	681b      	ldr	r3, [r3, #0]
 80165f6:	617b      	str	r3, [r7, #20]
 80165f8:	697b      	ldr	r3, [r7, #20]
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	d1e1      	bne.n	80165c2 <sys_timeout_abs+0x86>
 80165fe:	e000      	b.n	8016602 <sys_timeout_abs+0xc6>
    return;
 8016600:	bf00      	nop
      }
    }
  }
}
 8016602:	3718      	adds	r7, #24
 8016604:	46bd      	mov	sp, r7
 8016606:	bd80      	pop	{r7, pc}
 8016608:	0801a798 	.word	0x0801a798
 801660c:	0801a810 	.word	0x0801a810
 8016610:	0801a850 	.word	0x0801a850
 8016614:	2401558c 	.word	0x2401558c

08016618 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8016618:	b580      	push	{r7, lr}
 801661a:	b086      	sub	sp, #24
 801661c:	af00      	add	r7, sp, #0
 801661e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8016624:	697b      	ldr	r3, [r7, #20]
 8016626:	685b      	ldr	r3, [r3, #4]
 8016628:	4798      	blx	r3

  now = sys_now();
 801662a:	f7f2 f8c7 	bl	80087bc <sys_now>
 801662e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8016630:	697b      	ldr	r3, [r7, #20]
 8016632:	681a      	ldr	r2, [r3, #0]
 8016634:	4b0f      	ldr	r3, [pc, #60]	; (8016674 <lwip_cyclic_timer+0x5c>)
 8016636:	681b      	ldr	r3, [r3, #0]
 8016638:	4413      	add	r3, r2
 801663a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801663c:	68fa      	ldr	r2, [r7, #12]
 801663e:	693b      	ldr	r3, [r7, #16]
 8016640:	1ad3      	subs	r3, r2, r3
 8016642:	0fdb      	lsrs	r3, r3, #31
 8016644:	f003 0301 	and.w	r3, r3, #1
 8016648:	b2db      	uxtb	r3, r3
 801664a:	2b00      	cmp	r3, #0
 801664c:	d009      	beq.n	8016662 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801664e:	697b      	ldr	r3, [r7, #20]
 8016650:	681a      	ldr	r2, [r3, #0]
 8016652:	693b      	ldr	r3, [r7, #16]
 8016654:	4413      	add	r3, r2
 8016656:	687a      	ldr	r2, [r7, #4]
 8016658:	4907      	ldr	r1, [pc, #28]	; (8016678 <lwip_cyclic_timer+0x60>)
 801665a:	4618      	mov	r0, r3
 801665c:	f7ff ff6e 	bl	801653c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8016660:	e004      	b.n	801666c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8016662:	687a      	ldr	r2, [r7, #4]
 8016664:	4904      	ldr	r1, [pc, #16]	; (8016678 <lwip_cyclic_timer+0x60>)
 8016666:	68f8      	ldr	r0, [r7, #12]
 8016668:	f7ff ff68 	bl	801653c <sys_timeout_abs>
}
 801666c:	bf00      	nop
 801666e:	3718      	adds	r7, #24
 8016670:	46bd      	mov	sp, r7
 8016672:	bd80      	pop	{r7, pc}
 8016674:	24015590 	.word	0x24015590
 8016678:	08016619 	.word	0x08016619

0801667c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801667c:	b580      	push	{r7, lr}
 801667e:	b082      	sub	sp, #8
 8016680:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8016682:	2301      	movs	r3, #1
 8016684:	607b      	str	r3, [r7, #4]
 8016686:	e00e      	b.n	80166a6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8016688:	4a0b      	ldr	r2, [pc, #44]	; (80166b8 <sys_timeouts_init+0x3c>)
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	00db      	lsls	r3, r3, #3
 8016694:	4a08      	ldr	r2, [pc, #32]	; (80166b8 <sys_timeouts_init+0x3c>)
 8016696:	4413      	add	r3, r2
 8016698:	461a      	mov	r2, r3
 801669a:	4908      	ldr	r1, [pc, #32]	; (80166bc <sys_timeouts_init+0x40>)
 801669c:	f000 f810 	bl	80166c0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80166a0:	687b      	ldr	r3, [r7, #4]
 80166a2:	3301      	adds	r3, #1
 80166a4:	607b      	str	r3, [r7, #4]
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	2b02      	cmp	r3, #2
 80166aa:	d9ed      	bls.n	8016688 <sys_timeouts_init+0xc>
  }
}
 80166ac:	bf00      	nop
 80166ae:	bf00      	nop
 80166b0:	3708      	adds	r7, #8
 80166b2:	46bd      	mov	sp, r7
 80166b4:	bd80      	pop	{r7, pc}
 80166b6:	bf00      	nop
 80166b8:	0801addc 	.word	0x0801addc
 80166bc:	08016619 	.word	0x08016619

080166c0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80166c0:	b580      	push	{r7, lr}
 80166c2:	b086      	sub	sp, #24
 80166c4:	af00      	add	r7, sp, #0
 80166c6:	60f8      	str	r0, [r7, #12]
 80166c8:	60b9      	str	r1, [r7, #8]
 80166ca:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80166cc:	68fb      	ldr	r3, [r7, #12]
 80166ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80166d2:	d306      	bcc.n	80166e2 <sys_timeout+0x22>
 80166d4:	4b0a      	ldr	r3, [pc, #40]	; (8016700 <sys_timeout+0x40>)
 80166d6:	f240 1229 	movw	r2, #297	; 0x129
 80166da:	490a      	ldr	r1, [pc, #40]	; (8016704 <sys_timeout+0x44>)
 80166dc:	480a      	ldr	r0, [pc, #40]	; (8016708 <sys_timeout+0x48>)
 80166de:	f000 fc19 	bl	8016f14 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80166e2:	f7f2 f86b 	bl	80087bc <sys_now>
 80166e6:	4602      	mov	r2, r0
 80166e8:	68fb      	ldr	r3, [r7, #12]
 80166ea:	4413      	add	r3, r2
 80166ec:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80166ee:	687a      	ldr	r2, [r7, #4]
 80166f0:	68b9      	ldr	r1, [r7, #8]
 80166f2:	6978      	ldr	r0, [r7, #20]
 80166f4:	f7ff ff22 	bl	801653c <sys_timeout_abs>
#endif
}
 80166f8:	bf00      	nop
 80166fa:	3718      	adds	r7, #24
 80166fc:	46bd      	mov	sp, r7
 80166fe:	bd80      	pop	{r7, pc}
 8016700:	0801a798 	.word	0x0801a798
 8016704:	0801a878 	.word	0x0801a878
 8016708:	0801a850 	.word	0x0801a850

0801670c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801670c:	b580      	push	{r7, lr}
 801670e:	b084      	sub	sp, #16
 8016710:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8016712:	f7f2 f853 	bl	80087bc <sys_now>
 8016716:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8016718:	4b17      	ldr	r3, [pc, #92]	; (8016778 <sys_check_timeouts+0x6c>)
 801671a:	681b      	ldr	r3, [r3, #0]
 801671c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801671e:	68bb      	ldr	r3, [r7, #8]
 8016720:	2b00      	cmp	r3, #0
 8016722:	d022      	beq.n	801676a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8016724:	68bb      	ldr	r3, [r7, #8]
 8016726:	685b      	ldr	r3, [r3, #4]
 8016728:	68fa      	ldr	r2, [r7, #12]
 801672a:	1ad3      	subs	r3, r2, r3
 801672c:	0fdb      	lsrs	r3, r3, #31
 801672e:	f003 0301 	and.w	r3, r3, #1
 8016732:	b2db      	uxtb	r3, r3
 8016734:	2b00      	cmp	r3, #0
 8016736:	d11a      	bne.n	801676e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8016738:	68bb      	ldr	r3, [r7, #8]
 801673a:	681b      	ldr	r3, [r3, #0]
 801673c:	4a0e      	ldr	r2, [pc, #56]	; (8016778 <sys_check_timeouts+0x6c>)
 801673e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8016740:	68bb      	ldr	r3, [r7, #8]
 8016742:	689b      	ldr	r3, [r3, #8]
 8016744:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8016746:	68bb      	ldr	r3, [r7, #8]
 8016748:	68db      	ldr	r3, [r3, #12]
 801674a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801674c:	68bb      	ldr	r3, [r7, #8]
 801674e:	685b      	ldr	r3, [r3, #4]
 8016750:	4a0a      	ldr	r2, [pc, #40]	; (801677c <sys_check_timeouts+0x70>)
 8016752:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8016754:	68b9      	ldr	r1, [r7, #8]
 8016756:	200a      	movs	r0, #10
 8016758:	f7f9 f9a2 	bl	800faa0 <memp_free>
    if (handler != NULL) {
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	2b00      	cmp	r3, #0
 8016760:	d0da      	beq.n	8016718 <sys_check_timeouts+0xc>
      handler(arg);
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	6838      	ldr	r0, [r7, #0]
 8016766:	4798      	blx	r3
  do {
 8016768:	e7d6      	b.n	8016718 <sys_check_timeouts+0xc>
      return;
 801676a:	bf00      	nop
 801676c:	e000      	b.n	8016770 <sys_check_timeouts+0x64>
      return;
 801676e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8016770:	3710      	adds	r7, #16
 8016772:	46bd      	mov	sp, r7
 8016774:	bd80      	pop	{r7, pc}
 8016776:	bf00      	nop
 8016778:	2401558c 	.word	0x2401558c
 801677c:	24015590 	.word	0x24015590

08016780 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8016780:	b580      	push	{r7, lr}
 8016782:	b082      	sub	sp, #8
 8016784:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8016786:	4b16      	ldr	r3, [pc, #88]	; (80167e0 <sys_timeouts_sleeptime+0x60>)
 8016788:	681b      	ldr	r3, [r3, #0]
 801678a:	2b00      	cmp	r3, #0
 801678c:	d102      	bne.n	8016794 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801678e:	f04f 33ff 	mov.w	r3, #4294967295
 8016792:	e020      	b.n	80167d6 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8016794:	f7f2 f812 	bl	80087bc <sys_now>
 8016798:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801679a:	4b11      	ldr	r3, [pc, #68]	; (80167e0 <sys_timeouts_sleeptime+0x60>)
 801679c:	681b      	ldr	r3, [r3, #0]
 801679e:	685a      	ldr	r2, [r3, #4]
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	1ad3      	subs	r3, r2, r3
 80167a4:	0fdb      	lsrs	r3, r3, #31
 80167a6:	f003 0301 	and.w	r3, r3, #1
 80167aa:	b2db      	uxtb	r3, r3
 80167ac:	2b00      	cmp	r3, #0
 80167ae:	d001      	beq.n	80167b4 <sys_timeouts_sleeptime+0x34>
    return 0;
 80167b0:	2300      	movs	r3, #0
 80167b2:	e010      	b.n	80167d6 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80167b4:	4b0a      	ldr	r3, [pc, #40]	; (80167e0 <sys_timeouts_sleeptime+0x60>)
 80167b6:	681b      	ldr	r3, [r3, #0]
 80167b8:	685a      	ldr	r2, [r3, #4]
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	1ad3      	subs	r3, r2, r3
 80167be:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80167c0:	683b      	ldr	r3, [r7, #0]
 80167c2:	2b00      	cmp	r3, #0
 80167c4:	da06      	bge.n	80167d4 <sys_timeouts_sleeptime+0x54>
 80167c6:	4b07      	ldr	r3, [pc, #28]	; (80167e4 <sys_timeouts_sleeptime+0x64>)
 80167c8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80167cc:	4906      	ldr	r1, [pc, #24]	; (80167e8 <sys_timeouts_sleeptime+0x68>)
 80167ce:	4807      	ldr	r0, [pc, #28]	; (80167ec <sys_timeouts_sleeptime+0x6c>)
 80167d0:	f000 fba0 	bl	8016f14 <iprintf>
    return ret;
 80167d4:	683b      	ldr	r3, [r7, #0]
  }
}
 80167d6:	4618      	mov	r0, r3
 80167d8:	3708      	adds	r7, #8
 80167da:	46bd      	mov	sp, r7
 80167dc:	bd80      	pop	{r7, pc}
 80167de:	bf00      	nop
 80167e0:	2401558c 	.word	0x2401558c
 80167e4:	0801a798 	.word	0x0801a798
 80167e8:	0801a8b0 	.word	0x0801a8b0
 80167ec:	0801a850 	.word	0x0801a850

080167f0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80167f0:	b580      	push	{r7, lr}
 80167f2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80167f4:	f000 fba6 	bl	8016f44 <rand>
 80167f8:	4603      	mov	r3, r0
 80167fa:	b29b      	uxth	r3, r3
 80167fc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8016800:	b29b      	uxth	r3, r3
 8016802:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8016806:	b29a      	uxth	r2, r3
 8016808:	4b01      	ldr	r3, [pc, #4]	; (8016810 <udp_init+0x20>)
 801680a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801680c:	bf00      	nop
 801680e:	bd80      	pop	{r7, pc}
 8016810:	24000030 	.word	0x24000030

08016814 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8016814:	b580      	push	{r7, lr}
 8016816:	b084      	sub	sp, #16
 8016818:	af00      	add	r7, sp, #0
 801681a:	60f8      	str	r0, [r7, #12]
 801681c:	60b9      	str	r1, [r7, #8]
 801681e:	4613      	mov	r3, r2
 8016820:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8016822:	68fb      	ldr	r3, [r7, #12]
 8016824:	2b00      	cmp	r3, #0
 8016826:	d105      	bne.n	8016834 <udp_input_local_match+0x20>
 8016828:	4b27      	ldr	r3, [pc, #156]	; (80168c8 <udp_input_local_match+0xb4>)
 801682a:	2287      	movs	r2, #135	; 0x87
 801682c:	4927      	ldr	r1, [pc, #156]	; (80168cc <udp_input_local_match+0xb8>)
 801682e:	4828      	ldr	r0, [pc, #160]	; (80168d0 <udp_input_local_match+0xbc>)
 8016830:	f000 fb70 	bl	8016f14 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8016834:	68bb      	ldr	r3, [r7, #8]
 8016836:	2b00      	cmp	r3, #0
 8016838:	d105      	bne.n	8016846 <udp_input_local_match+0x32>
 801683a:	4b23      	ldr	r3, [pc, #140]	; (80168c8 <udp_input_local_match+0xb4>)
 801683c:	2288      	movs	r2, #136	; 0x88
 801683e:	4925      	ldr	r1, [pc, #148]	; (80168d4 <udp_input_local_match+0xc0>)
 8016840:	4823      	ldr	r0, [pc, #140]	; (80168d0 <udp_input_local_match+0xbc>)
 8016842:	f000 fb67 	bl	8016f14 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016846:	68fb      	ldr	r3, [r7, #12]
 8016848:	7a1b      	ldrb	r3, [r3, #8]
 801684a:	2b00      	cmp	r3, #0
 801684c:	d00b      	beq.n	8016866 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801684e:	68fb      	ldr	r3, [r7, #12]
 8016850:	7a1a      	ldrb	r2, [r3, #8]
 8016852:	4b21      	ldr	r3, [pc, #132]	; (80168d8 <udp_input_local_match+0xc4>)
 8016854:	685b      	ldr	r3, [r3, #4]
 8016856:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801685a:	3301      	adds	r3, #1
 801685c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801685e:	429a      	cmp	r2, r3
 8016860:	d001      	beq.n	8016866 <udp_input_local_match+0x52>
    return 0;
 8016862:	2300      	movs	r3, #0
 8016864:	e02b      	b.n	80168be <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8016866:	79fb      	ldrb	r3, [r7, #7]
 8016868:	2b00      	cmp	r3, #0
 801686a:	d018      	beq.n	801689e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801686c:	68fb      	ldr	r3, [r7, #12]
 801686e:	2b00      	cmp	r3, #0
 8016870:	d013      	beq.n	801689a <udp_input_local_match+0x86>
 8016872:	68fb      	ldr	r3, [r7, #12]
 8016874:	681b      	ldr	r3, [r3, #0]
 8016876:	2b00      	cmp	r3, #0
 8016878:	d00f      	beq.n	801689a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801687a:	4b17      	ldr	r3, [pc, #92]	; (80168d8 <udp_input_local_match+0xc4>)
 801687c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801687e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016882:	d00a      	beq.n	801689a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8016884:	68fb      	ldr	r3, [r7, #12]
 8016886:	681a      	ldr	r2, [r3, #0]
 8016888:	4b13      	ldr	r3, [pc, #76]	; (80168d8 <udp_input_local_match+0xc4>)
 801688a:	695b      	ldr	r3, [r3, #20]
 801688c:	405a      	eors	r2, r3
 801688e:	68bb      	ldr	r3, [r7, #8]
 8016890:	3308      	adds	r3, #8
 8016892:	681b      	ldr	r3, [r3, #0]
 8016894:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016896:	2b00      	cmp	r3, #0
 8016898:	d110      	bne.n	80168bc <udp_input_local_match+0xa8>
          return 1;
 801689a:	2301      	movs	r3, #1
 801689c:	e00f      	b.n	80168be <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801689e:	68fb      	ldr	r3, [r7, #12]
 80168a0:	2b00      	cmp	r3, #0
 80168a2:	d009      	beq.n	80168b8 <udp_input_local_match+0xa4>
 80168a4:	68fb      	ldr	r3, [r7, #12]
 80168a6:	681b      	ldr	r3, [r3, #0]
 80168a8:	2b00      	cmp	r3, #0
 80168aa:	d005      	beq.n	80168b8 <udp_input_local_match+0xa4>
 80168ac:	68fb      	ldr	r3, [r7, #12]
 80168ae:	681a      	ldr	r2, [r3, #0]
 80168b0:	4b09      	ldr	r3, [pc, #36]	; (80168d8 <udp_input_local_match+0xc4>)
 80168b2:	695b      	ldr	r3, [r3, #20]
 80168b4:	429a      	cmp	r2, r3
 80168b6:	d101      	bne.n	80168bc <udp_input_local_match+0xa8>
        return 1;
 80168b8:	2301      	movs	r3, #1
 80168ba:	e000      	b.n	80168be <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80168bc:	2300      	movs	r3, #0
}
 80168be:	4618      	mov	r0, r3
 80168c0:	3710      	adds	r7, #16
 80168c2:	46bd      	mov	sp, r7
 80168c4:	bd80      	pop	{r7, pc}
 80168c6:	bf00      	nop
 80168c8:	0801a8c4 	.word	0x0801a8c4
 80168cc:	0801a934 	.word	0x0801a934
 80168d0:	0801a958 	.word	0x0801a958
 80168d4:	0801a980 	.word	0x0801a980
 80168d8:	2401241c 	.word	0x2401241c

080168dc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80168dc:	b590      	push	{r4, r7, lr}
 80168de:	b08d      	sub	sp, #52	; 0x34
 80168e0:	af02      	add	r7, sp, #8
 80168e2:	6078      	str	r0, [r7, #4]
 80168e4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80168e6:	2300      	movs	r3, #0
 80168e8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	2b00      	cmp	r3, #0
 80168ee:	d105      	bne.n	80168fc <udp_input+0x20>
 80168f0:	4b7c      	ldr	r3, [pc, #496]	; (8016ae4 <udp_input+0x208>)
 80168f2:	22cf      	movs	r2, #207	; 0xcf
 80168f4:	497c      	ldr	r1, [pc, #496]	; (8016ae8 <udp_input+0x20c>)
 80168f6:	487d      	ldr	r0, [pc, #500]	; (8016aec <udp_input+0x210>)
 80168f8:	f000 fb0c 	bl	8016f14 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80168fc:	683b      	ldr	r3, [r7, #0]
 80168fe:	2b00      	cmp	r3, #0
 8016900:	d105      	bne.n	801690e <udp_input+0x32>
 8016902:	4b78      	ldr	r3, [pc, #480]	; (8016ae4 <udp_input+0x208>)
 8016904:	22d0      	movs	r2, #208	; 0xd0
 8016906:	497a      	ldr	r1, [pc, #488]	; (8016af0 <udp_input+0x214>)
 8016908:	4878      	ldr	r0, [pc, #480]	; (8016aec <udp_input+0x210>)
 801690a:	f000 fb03 	bl	8016f14 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	895b      	ldrh	r3, [r3, #10]
 8016912:	2b07      	cmp	r3, #7
 8016914:	d803      	bhi.n	801691e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8016916:	6878      	ldr	r0, [r7, #4]
 8016918:	f7f9 ff66 	bl	80107e8 <pbuf_free>
    goto end;
 801691c:	e0de      	b.n	8016adc <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	685b      	ldr	r3, [r3, #4]
 8016922:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8016924:	4b73      	ldr	r3, [pc, #460]	; (8016af4 <udp_input+0x218>)
 8016926:	695b      	ldr	r3, [r3, #20]
 8016928:	4a72      	ldr	r2, [pc, #456]	; (8016af4 <udp_input+0x218>)
 801692a:	6812      	ldr	r2, [r2, #0]
 801692c:	4611      	mov	r1, r2
 801692e:	4618      	mov	r0, r3
 8016930:	f7f7 fd32 	bl	800e398 <ip4_addr_isbroadcast_u32>
 8016934:	4603      	mov	r3, r0
 8016936:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8016938:	697b      	ldr	r3, [r7, #20]
 801693a:	881b      	ldrh	r3, [r3, #0]
 801693c:	b29b      	uxth	r3, r3
 801693e:	4618      	mov	r0, r3
 8016940:	f7f5 ffbc 	bl	800c8bc <lwip_htons>
 8016944:	4603      	mov	r3, r0
 8016946:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8016948:	697b      	ldr	r3, [r7, #20]
 801694a:	885b      	ldrh	r3, [r3, #2]
 801694c:	b29b      	uxth	r3, r3
 801694e:	4618      	mov	r0, r3
 8016950:	f7f5 ffb4 	bl	800c8bc <lwip_htons>
 8016954:	4603      	mov	r3, r0
 8016956:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8016958:	2300      	movs	r3, #0
 801695a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801695c:	2300      	movs	r3, #0
 801695e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8016960:	2300      	movs	r3, #0
 8016962:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016964:	4b64      	ldr	r3, [pc, #400]	; (8016af8 <udp_input+0x21c>)
 8016966:	681b      	ldr	r3, [r3, #0]
 8016968:	627b      	str	r3, [r7, #36]	; 0x24
 801696a:	e054      	b.n	8016a16 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801696c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801696e:	8a5b      	ldrh	r3, [r3, #18]
 8016970:	89fa      	ldrh	r2, [r7, #14]
 8016972:	429a      	cmp	r2, r3
 8016974:	d14a      	bne.n	8016a0c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8016976:	7cfb      	ldrb	r3, [r7, #19]
 8016978:	461a      	mov	r2, r3
 801697a:	6839      	ldr	r1, [r7, #0]
 801697c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801697e:	f7ff ff49 	bl	8016814 <udp_input_local_match>
 8016982:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8016984:	2b00      	cmp	r3, #0
 8016986:	d041      	beq.n	8016a0c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8016988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801698a:	7c1b      	ldrb	r3, [r3, #16]
 801698c:	f003 0304 	and.w	r3, r3, #4
 8016990:	2b00      	cmp	r3, #0
 8016992:	d11d      	bne.n	80169d0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8016994:	69fb      	ldr	r3, [r7, #28]
 8016996:	2b00      	cmp	r3, #0
 8016998:	d102      	bne.n	80169a0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801699a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801699c:	61fb      	str	r3, [r7, #28]
 801699e:	e017      	b.n	80169d0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80169a0:	7cfb      	ldrb	r3, [r7, #19]
 80169a2:	2b00      	cmp	r3, #0
 80169a4:	d014      	beq.n	80169d0 <udp_input+0xf4>
 80169a6:	4b53      	ldr	r3, [pc, #332]	; (8016af4 <udp_input+0x218>)
 80169a8:	695b      	ldr	r3, [r3, #20]
 80169aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80169ae:	d10f      	bne.n	80169d0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80169b0:	69fb      	ldr	r3, [r7, #28]
 80169b2:	681a      	ldr	r2, [r3, #0]
 80169b4:	683b      	ldr	r3, [r7, #0]
 80169b6:	3304      	adds	r3, #4
 80169b8:	681b      	ldr	r3, [r3, #0]
 80169ba:	429a      	cmp	r2, r3
 80169bc:	d008      	beq.n	80169d0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80169be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169c0:	681a      	ldr	r2, [r3, #0]
 80169c2:	683b      	ldr	r3, [r7, #0]
 80169c4:	3304      	adds	r3, #4
 80169c6:	681b      	ldr	r3, [r3, #0]
 80169c8:	429a      	cmp	r2, r3
 80169ca:	d101      	bne.n	80169d0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80169cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169ce:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80169d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169d2:	8a9b      	ldrh	r3, [r3, #20]
 80169d4:	8a3a      	ldrh	r2, [r7, #16]
 80169d6:	429a      	cmp	r2, r3
 80169d8:	d118      	bne.n	8016a0c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80169da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169dc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80169de:	2b00      	cmp	r3, #0
 80169e0:	d005      	beq.n	80169ee <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80169e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169e4:	685a      	ldr	r2, [r3, #4]
 80169e6:	4b43      	ldr	r3, [pc, #268]	; (8016af4 <udp_input+0x218>)
 80169e8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80169ea:	429a      	cmp	r2, r3
 80169ec:	d10e      	bne.n	8016a0c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80169ee:	6a3b      	ldr	r3, [r7, #32]
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	d014      	beq.n	8016a1e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80169f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169f6:	68da      	ldr	r2, [r3, #12]
 80169f8:	6a3b      	ldr	r3, [r7, #32]
 80169fa:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80169fc:	4b3e      	ldr	r3, [pc, #248]	; (8016af8 <udp_input+0x21c>)
 80169fe:	681a      	ldr	r2, [r3, #0]
 8016a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a02:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8016a04:	4a3c      	ldr	r2, [pc, #240]	; (8016af8 <udp_input+0x21c>)
 8016a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a08:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8016a0a:	e008      	b.n	8016a1e <udp_input+0x142>
      }
    }

    prev = pcb;
 8016a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a0e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a12:	68db      	ldr	r3, [r3, #12]
 8016a14:	627b      	str	r3, [r7, #36]	; 0x24
 8016a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a18:	2b00      	cmp	r3, #0
 8016a1a:	d1a7      	bne.n	801696c <udp_input+0x90>
 8016a1c:	e000      	b.n	8016a20 <udp_input+0x144>
        break;
 8016a1e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8016a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a22:	2b00      	cmp	r3, #0
 8016a24:	d101      	bne.n	8016a2a <udp_input+0x14e>
    pcb = uncon_pcb;
 8016a26:	69fb      	ldr	r3, [r7, #28]
 8016a28:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8016a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d002      	beq.n	8016a36 <udp_input+0x15a>
    for_us = 1;
 8016a30:	2301      	movs	r3, #1
 8016a32:	76fb      	strb	r3, [r7, #27]
 8016a34:	e00a      	b.n	8016a4c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8016a36:	683b      	ldr	r3, [r7, #0]
 8016a38:	3304      	adds	r3, #4
 8016a3a:	681a      	ldr	r2, [r3, #0]
 8016a3c:	4b2d      	ldr	r3, [pc, #180]	; (8016af4 <udp_input+0x218>)
 8016a3e:	695b      	ldr	r3, [r3, #20]
 8016a40:	429a      	cmp	r2, r3
 8016a42:	bf0c      	ite	eq
 8016a44:	2301      	moveq	r3, #1
 8016a46:	2300      	movne	r3, #0
 8016a48:	b2db      	uxtb	r3, r3
 8016a4a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8016a4c:	7efb      	ldrb	r3, [r7, #27]
 8016a4e:	2b00      	cmp	r3, #0
 8016a50:	d041      	beq.n	8016ad6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8016a52:	2108      	movs	r1, #8
 8016a54:	6878      	ldr	r0, [r7, #4]
 8016a56:	f7f9 fe41 	bl	80106dc <pbuf_remove_header>
 8016a5a:	4603      	mov	r3, r0
 8016a5c:	2b00      	cmp	r3, #0
 8016a5e:	d00a      	beq.n	8016a76 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8016a60:	4b20      	ldr	r3, [pc, #128]	; (8016ae4 <udp_input+0x208>)
 8016a62:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8016a66:	4925      	ldr	r1, [pc, #148]	; (8016afc <udp_input+0x220>)
 8016a68:	4820      	ldr	r0, [pc, #128]	; (8016aec <udp_input+0x210>)
 8016a6a:	f000 fa53 	bl	8016f14 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8016a6e:	6878      	ldr	r0, [r7, #4]
 8016a70:	f7f9 feba 	bl	80107e8 <pbuf_free>
      goto end;
 8016a74:	e032      	b.n	8016adc <udp_input+0x200>
    }

    if (pcb != NULL) {
 8016a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a78:	2b00      	cmp	r3, #0
 8016a7a:	d012      	beq.n	8016aa2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8016a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a7e:	699b      	ldr	r3, [r3, #24]
 8016a80:	2b00      	cmp	r3, #0
 8016a82:	d00a      	beq.n	8016a9a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8016a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a86:	699c      	ldr	r4, [r3, #24]
 8016a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a8a:	69d8      	ldr	r0, [r3, #28]
 8016a8c:	8a3b      	ldrh	r3, [r7, #16]
 8016a8e:	9300      	str	r3, [sp, #0]
 8016a90:	4b1b      	ldr	r3, [pc, #108]	; (8016b00 <udp_input+0x224>)
 8016a92:	687a      	ldr	r2, [r7, #4]
 8016a94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016a96:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8016a98:	e021      	b.n	8016ade <udp_input+0x202>
        pbuf_free(p);
 8016a9a:	6878      	ldr	r0, [r7, #4]
 8016a9c:	f7f9 fea4 	bl	80107e8 <pbuf_free>
        goto end;
 8016aa0:	e01c      	b.n	8016adc <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8016aa2:	7cfb      	ldrb	r3, [r7, #19]
 8016aa4:	2b00      	cmp	r3, #0
 8016aa6:	d112      	bne.n	8016ace <udp_input+0x1f2>
 8016aa8:	4b12      	ldr	r3, [pc, #72]	; (8016af4 <udp_input+0x218>)
 8016aaa:	695b      	ldr	r3, [r3, #20]
 8016aac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016ab0:	2be0      	cmp	r3, #224	; 0xe0
 8016ab2:	d00c      	beq.n	8016ace <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8016ab4:	4b0f      	ldr	r3, [pc, #60]	; (8016af4 <udp_input+0x218>)
 8016ab6:	899b      	ldrh	r3, [r3, #12]
 8016ab8:	3308      	adds	r3, #8
 8016aba:	b29b      	uxth	r3, r3
 8016abc:	b21b      	sxth	r3, r3
 8016abe:	4619      	mov	r1, r3
 8016ac0:	6878      	ldr	r0, [r7, #4]
 8016ac2:	f7f9 fe7e 	bl	80107c2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8016ac6:	2103      	movs	r1, #3
 8016ac8:	6878      	ldr	r0, [r7, #4]
 8016aca:	f7f7 f867 	bl	800db9c <icmp_dest_unreach>
      pbuf_free(p);
 8016ace:	6878      	ldr	r0, [r7, #4]
 8016ad0:	f7f9 fe8a 	bl	80107e8 <pbuf_free>
  return;
 8016ad4:	e003      	b.n	8016ade <udp_input+0x202>
    pbuf_free(p);
 8016ad6:	6878      	ldr	r0, [r7, #4]
 8016ad8:	f7f9 fe86 	bl	80107e8 <pbuf_free>
  return;
 8016adc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8016ade:	372c      	adds	r7, #44	; 0x2c
 8016ae0:	46bd      	mov	sp, r7
 8016ae2:	bd90      	pop	{r4, r7, pc}
 8016ae4:	0801a8c4 	.word	0x0801a8c4
 8016ae8:	0801a9a8 	.word	0x0801a9a8
 8016aec:	0801a958 	.word	0x0801a958
 8016af0:	0801a9c0 	.word	0x0801a9c0
 8016af4:	2401241c 	.word	0x2401241c
 8016af8:	24015598 	.word	0x24015598
 8016afc:	0801a9dc 	.word	0x0801a9dc
 8016b00:	2401242c 	.word	0x2401242c

08016b04 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016b04:	b480      	push	{r7}
 8016b06:	b085      	sub	sp, #20
 8016b08:	af00      	add	r7, sp, #0
 8016b0a:	6078      	str	r0, [r7, #4]
 8016b0c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	2b00      	cmp	r3, #0
 8016b12:	d01e      	beq.n	8016b52 <udp_netif_ip_addr_changed+0x4e>
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	681b      	ldr	r3, [r3, #0]
 8016b18:	2b00      	cmp	r3, #0
 8016b1a:	d01a      	beq.n	8016b52 <udp_netif_ip_addr_changed+0x4e>
 8016b1c:	683b      	ldr	r3, [r7, #0]
 8016b1e:	2b00      	cmp	r3, #0
 8016b20:	d017      	beq.n	8016b52 <udp_netif_ip_addr_changed+0x4e>
 8016b22:	683b      	ldr	r3, [r7, #0]
 8016b24:	681b      	ldr	r3, [r3, #0]
 8016b26:	2b00      	cmp	r3, #0
 8016b28:	d013      	beq.n	8016b52 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016b2a:	4b0d      	ldr	r3, [pc, #52]	; (8016b60 <udp_netif_ip_addr_changed+0x5c>)
 8016b2c:	681b      	ldr	r3, [r3, #0]
 8016b2e:	60fb      	str	r3, [r7, #12]
 8016b30:	e00c      	b.n	8016b4c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8016b32:	68fb      	ldr	r3, [r7, #12]
 8016b34:	681a      	ldr	r2, [r3, #0]
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	681b      	ldr	r3, [r3, #0]
 8016b3a:	429a      	cmp	r2, r3
 8016b3c:	d103      	bne.n	8016b46 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8016b3e:	683b      	ldr	r3, [r7, #0]
 8016b40:	681a      	ldr	r2, [r3, #0]
 8016b42:	68fb      	ldr	r3, [r7, #12]
 8016b44:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016b46:	68fb      	ldr	r3, [r7, #12]
 8016b48:	68db      	ldr	r3, [r3, #12]
 8016b4a:	60fb      	str	r3, [r7, #12]
 8016b4c:	68fb      	ldr	r3, [r7, #12]
 8016b4e:	2b00      	cmp	r3, #0
 8016b50:	d1ef      	bne.n	8016b32 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8016b52:	bf00      	nop
 8016b54:	3714      	adds	r7, #20
 8016b56:	46bd      	mov	sp, r7
 8016b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b5c:	4770      	bx	lr
 8016b5e:	bf00      	nop
 8016b60:	24015598 	.word	0x24015598

08016b64 <std>:
 8016b64:	2300      	movs	r3, #0
 8016b66:	b510      	push	{r4, lr}
 8016b68:	4604      	mov	r4, r0
 8016b6a:	e9c0 3300 	strd	r3, r3, [r0]
 8016b6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016b72:	6083      	str	r3, [r0, #8]
 8016b74:	8181      	strh	r1, [r0, #12]
 8016b76:	6643      	str	r3, [r0, #100]	; 0x64
 8016b78:	81c2      	strh	r2, [r0, #14]
 8016b7a:	6183      	str	r3, [r0, #24]
 8016b7c:	4619      	mov	r1, r3
 8016b7e:	2208      	movs	r2, #8
 8016b80:	305c      	adds	r0, #92	; 0x5c
 8016b82:	f000 f92a 	bl	8016dda <memset>
 8016b86:	4b05      	ldr	r3, [pc, #20]	; (8016b9c <std+0x38>)
 8016b88:	6263      	str	r3, [r4, #36]	; 0x24
 8016b8a:	4b05      	ldr	r3, [pc, #20]	; (8016ba0 <std+0x3c>)
 8016b8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8016b8e:	4b05      	ldr	r3, [pc, #20]	; (8016ba4 <std+0x40>)
 8016b90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016b92:	4b05      	ldr	r3, [pc, #20]	; (8016ba8 <std+0x44>)
 8016b94:	6224      	str	r4, [r4, #32]
 8016b96:	6323      	str	r3, [r4, #48]	; 0x30
 8016b98:	bd10      	pop	{r4, pc}
 8016b9a:	bf00      	nop
 8016b9c:	080170b5 	.word	0x080170b5
 8016ba0:	080170d7 	.word	0x080170d7
 8016ba4:	0801710f 	.word	0x0801710f
 8016ba8:	08017133 	.word	0x08017133

08016bac <_cleanup_r>:
 8016bac:	4901      	ldr	r1, [pc, #4]	; (8016bb4 <_cleanup_r+0x8>)
 8016bae:	f000 b8af 	b.w	8016d10 <_fwalk_reent>
 8016bb2:	bf00      	nop
 8016bb4:	080172c9 	.word	0x080172c9

08016bb8 <__sfmoreglue>:
 8016bb8:	b570      	push	{r4, r5, r6, lr}
 8016bba:	2268      	movs	r2, #104	; 0x68
 8016bbc:	1e4d      	subs	r5, r1, #1
 8016bbe:	4355      	muls	r5, r2
 8016bc0:	460e      	mov	r6, r1
 8016bc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016bc6:	f000 f931 	bl	8016e2c <_malloc_r>
 8016bca:	4604      	mov	r4, r0
 8016bcc:	b140      	cbz	r0, 8016be0 <__sfmoreglue+0x28>
 8016bce:	2100      	movs	r1, #0
 8016bd0:	e9c0 1600 	strd	r1, r6, [r0]
 8016bd4:	300c      	adds	r0, #12
 8016bd6:	60a0      	str	r0, [r4, #8]
 8016bd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016bdc:	f000 f8fd 	bl	8016dda <memset>
 8016be0:	4620      	mov	r0, r4
 8016be2:	bd70      	pop	{r4, r5, r6, pc}

08016be4 <__sfp_lock_acquire>:
 8016be4:	4801      	ldr	r0, [pc, #4]	; (8016bec <__sfp_lock_acquire+0x8>)
 8016be6:	f000 b8d8 	b.w	8016d9a <__retarget_lock_acquire_recursive>
 8016bea:	bf00      	nop
 8016bec:	2401559d 	.word	0x2401559d

08016bf0 <__sfp_lock_release>:
 8016bf0:	4801      	ldr	r0, [pc, #4]	; (8016bf8 <__sfp_lock_release+0x8>)
 8016bf2:	f000 b8d3 	b.w	8016d9c <__retarget_lock_release_recursive>
 8016bf6:	bf00      	nop
 8016bf8:	2401559d 	.word	0x2401559d

08016bfc <__sinit_lock_acquire>:
 8016bfc:	4801      	ldr	r0, [pc, #4]	; (8016c04 <__sinit_lock_acquire+0x8>)
 8016bfe:	f000 b8cc 	b.w	8016d9a <__retarget_lock_acquire_recursive>
 8016c02:	bf00      	nop
 8016c04:	2401559e 	.word	0x2401559e

08016c08 <__sinit_lock_release>:
 8016c08:	4801      	ldr	r0, [pc, #4]	; (8016c10 <__sinit_lock_release+0x8>)
 8016c0a:	f000 b8c7 	b.w	8016d9c <__retarget_lock_release_recursive>
 8016c0e:	bf00      	nop
 8016c10:	2401559e 	.word	0x2401559e

08016c14 <__sinit>:
 8016c14:	b510      	push	{r4, lr}
 8016c16:	4604      	mov	r4, r0
 8016c18:	f7ff fff0 	bl	8016bfc <__sinit_lock_acquire>
 8016c1c:	69a3      	ldr	r3, [r4, #24]
 8016c1e:	b11b      	cbz	r3, 8016c28 <__sinit+0x14>
 8016c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016c24:	f7ff bff0 	b.w	8016c08 <__sinit_lock_release>
 8016c28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016c2c:	6523      	str	r3, [r4, #80]	; 0x50
 8016c2e:	4b13      	ldr	r3, [pc, #76]	; (8016c7c <__sinit+0x68>)
 8016c30:	4a13      	ldr	r2, [pc, #76]	; (8016c80 <__sinit+0x6c>)
 8016c32:	681b      	ldr	r3, [r3, #0]
 8016c34:	62a2      	str	r2, [r4, #40]	; 0x28
 8016c36:	42a3      	cmp	r3, r4
 8016c38:	bf04      	itt	eq
 8016c3a:	2301      	moveq	r3, #1
 8016c3c:	61a3      	streq	r3, [r4, #24]
 8016c3e:	4620      	mov	r0, r4
 8016c40:	f000 f820 	bl	8016c84 <__sfp>
 8016c44:	6060      	str	r0, [r4, #4]
 8016c46:	4620      	mov	r0, r4
 8016c48:	f000 f81c 	bl	8016c84 <__sfp>
 8016c4c:	60a0      	str	r0, [r4, #8]
 8016c4e:	4620      	mov	r0, r4
 8016c50:	f000 f818 	bl	8016c84 <__sfp>
 8016c54:	2200      	movs	r2, #0
 8016c56:	60e0      	str	r0, [r4, #12]
 8016c58:	2104      	movs	r1, #4
 8016c5a:	6860      	ldr	r0, [r4, #4]
 8016c5c:	f7ff ff82 	bl	8016b64 <std>
 8016c60:	68a0      	ldr	r0, [r4, #8]
 8016c62:	2201      	movs	r2, #1
 8016c64:	2109      	movs	r1, #9
 8016c66:	f7ff ff7d 	bl	8016b64 <std>
 8016c6a:	68e0      	ldr	r0, [r4, #12]
 8016c6c:	2202      	movs	r2, #2
 8016c6e:	2112      	movs	r1, #18
 8016c70:	f7ff ff78 	bl	8016b64 <std>
 8016c74:	2301      	movs	r3, #1
 8016c76:	61a3      	str	r3, [r4, #24]
 8016c78:	e7d2      	b.n	8016c20 <__sinit+0xc>
 8016c7a:	bf00      	nop
 8016c7c:	0801ae54 	.word	0x0801ae54
 8016c80:	08016bad 	.word	0x08016bad

08016c84 <__sfp>:
 8016c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c86:	4607      	mov	r7, r0
 8016c88:	f7ff ffac 	bl	8016be4 <__sfp_lock_acquire>
 8016c8c:	4b1e      	ldr	r3, [pc, #120]	; (8016d08 <__sfp+0x84>)
 8016c8e:	681e      	ldr	r6, [r3, #0]
 8016c90:	69b3      	ldr	r3, [r6, #24]
 8016c92:	b913      	cbnz	r3, 8016c9a <__sfp+0x16>
 8016c94:	4630      	mov	r0, r6
 8016c96:	f7ff ffbd 	bl	8016c14 <__sinit>
 8016c9a:	3648      	adds	r6, #72	; 0x48
 8016c9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016ca0:	3b01      	subs	r3, #1
 8016ca2:	d503      	bpl.n	8016cac <__sfp+0x28>
 8016ca4:	6833      	ldr	r3, [r6, #0]
 8016ca6:	b30b      	cbz	r3, 8016cec <__sfp+0x68>
 8016ca8:	6836      	ldr	r6, [r6, #0]
 8016caa:	e7f7      	b.n	8016c9c <__sfp+0x18>
 8016cac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016cb0:	b9d5      	cbnz	r5, 8016ce8 <__sfp+0x64>
 8016cb2:	4b16      	ldr	r3, [pc, #88]	; (8016d0c <__sfp+0x88>)
 8016cb4:	60e3      	str	r3, [r4, #12]
 8016cb6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016cba:	6665      	str	r5, [r4, #100]	; 0x64
 8016cbc:	f000 f86c 	bl	8016d98 <__retarget_lock_init_recursive>
 8016cc0:	f7ff ff96 	bl	8016bf0 <__sfp_lock_release>
 8016cc4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016cc8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016ccc:	6025      	str	r5, [r4, #0]
 8016cce:	61a5      	str	r5, [r4, #24]
 8016cd0:	2208      	movs	r2, #8
 8016cd2:	4629      	mov	r1, r5
 8016cd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016cd8:	f000 f87f 	bl	8016dda <memset>
 8016cdc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016ce0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016ce4:	4620      	mov	r0, r4
 8016ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ce8:	3468      	adds	r4, #104	; 0x68
 8016cea:	e7d9      	b.n	8016ca0 <__sfp+0x1c>
 8016cec:	2104      	movs	r1, #4
 8016cee:	4638      	mov	r0, r7
 8016cf0:	f7ff ff62 	bl	8016bb8 <__sfmoreglue>
 8016cf4:	4604      	mov	r4, r0
 8016cf6:	6030      	str	r0, [r6, #0]
 8016cf8:	2800      	cmp	r0, #0
 8016cfa:	d1d5      	bne.n	8016ca8 <__sfp+0x24>
 8016cfc:	f7ff ff78 	bl	8016bf0 <__sfp_lock_release>
 8016d00:	230c      	movs	r3, #12
 8016d02:	603b      	str	r3, [r7, #0]
 8016d04:	e7ee      	b.n	8016ce4 <__sfp+0x60>
 8016d06:	bf00      	nop
 8016d08:	0801ae54 	.word	0x0801ae54
 8016d0c:	ffff0001 	.word	0xffff0001

08016d10 <_fwalk_reent>:
 8016d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016d14:	4606      	mov	r6, r0
 8016d16:	4688      	mov	r8, r1
 8016d18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016d1c:	2700      	movs	r7, #0
 8016d1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016d22:	f1b9 0901 	subs.w	r9, r9, #1
 8016d26:	d505      	bpl.n	8016d34 <_fwalk_reent+0x24>
 8016d28:	6824      	ldr	r4, [r4, #0]
 8016d2a:	2c00      	cmp	r4, #0
 8016d2c:	d1f7      	bne.n	8016d1e <_fwalk_reent+0xe>
 8016d2e:	4638      	mov	r0, r7
 8016d30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016d34:	89ab      	ldrh	r3, [r5, #12]
 8016d36:	2b01      	cmp	r3, #1
 8016d38:	d907      	bls.n	8016d4a <_fwalk_reent+0x3a>
 8016d3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016d3e:	3301      	adds	r3, #1
 8016d40:	d003      	beq.n	8016d4a <_fwalk_reent+0x3a>
 8016d42:	4629      	mov	r1, r5
 8016d44:	4630      	mov	r0, r6
 8016d46:	47c0      	blx	r8
 8016d48:	4307      	orrs	r7, r0
 8016d4a:	3568      	adds	r5, #104	; 0x68
 8016d4c:	e7e9      	b.n	8016d22 <_fwalk_reent+0x12>
	...

08016d50 <__libc_init_array>:
 8016d50:	b570      	push	{r4, r5, r6, lr}
 8016d52:	4d0d      	ldr	r5, [pc, #52]	; (8016d88 <__libc_init_array+0x38>)
 8016d54:	4c0d      	ldr	r4, [pc, #52]	; (8016d8c <__libc_init_array+0x3c>)
 8016d56:	1b64      	subs	r4, r4, r5
 8016d58:	10a4      	asrs	r4, r4, #2
 8016d5a:	2600      	movs	r6, #0
 8016d5c:	42a6      	cmp	r6, r4
 8016d5e:	d109      	bne.n	8016d74 <__libc_init_array+0x24>
 8016d60:	4d0b      	ldr	r5, [pc, #44]	; (8016d90 <__libc_init_array+0x40>)
 8016d62:	4c0c      	ldr	r4, [pc, #48]	; (8016d94 <__libc_init_array+0x44>)
 8016d64:	f001 f802 	bl	8017d6c <_init>
 8016d68:	1b64      	subs	r4, r4, r5
 8016d6a:	10a4      	asrs	r4, r4, #2
 8016d6c:	2600      	movs	r6, #0
 8016d6e:	42a6      	cmp	r6, r4
 8016d70:	d105      	bne.n	8016d7e <__libc_init_array+0x2e>
 8016d72:	bd70      	pop	{r4, r5, r6, pc}
 8016d74:	f855 3b04 	ldr.w	r3, [r5], #4
 8016d78:	4798      	blx	r3
 8016d7a:	3601      	adds	r6, #1
 8016d7c:	e7ee      	b.n	8016d5c <__libc_init_array+0xc>
 8016d7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8016d82:	4798      	blx	r3
 8016d84:	3601      	adds	r6, #1
 8016d86:	e7f2      	b.n	8016d6e <__libc_init_array+0x1e>
 8016d88:	0801af44 	.word	0x0801af44
 8016d8c:	0801af44 	.word	0x0801af44
 8016d90:	0801af44 	.word	0x0801af44
 8016d94:	0801af48 	.word	0x0801af48

08016d98 <__retarget_lock_init_recursive>:
 8016d98:	4770      	bx	lr

08016d9a <__retarget_lock_acquire_recursive>:
 8016d9a:	4770      	bx	lr

08016d9c <__retarget_lock_release_recursive>:
 8016d9c:	4770      	bx	lr

08016d9e <memcmp>:
 8016d9e:	b510      	push	{r4, lr}
 8016da0:	3901      	subs	r1, #1
 8016da2:	4402      	add	r2, r0
 8016da4:	4290      	cmp	r0, r2
 8016da6:	d101      	bne.n	8016dac <memcmp+0xe>
 8016da8:	2000      	movs	r0, #0
 8016daa:	e005      	b.n	8016db8 <memcmp+0x1a>
 8016dac:	7803      	ldrb	r3, [r0, #0]
 8016dae:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016db2:	42a3      	cmp	r3, r4
 8016db4:	d001      	beq.n	8016dba <memcmp+0x1c>
 8016db6:	1b18      	subs	r0, r3, r4
 8016db8:	bd10      	pop	{r4, pc}
 8016dba:	3001      	adds	r0, #1
 8016dbc:	e7f2      	b.n	8016da4 <memcmp+0x6>

08016dbe <memcpy>:
 8016dbe:	440a      	add	r2, r1
 8016dc0:	4291      	cmp	r1, r2
 8016dc2:	f100 33ff 	add.w	r3, r0, #4294967295
 8016dc6:	d100      	bne.n	8016dca <memcpy+0xc>
 8016dc8:	4770      	bx	lr
 8016dca:	b510      	push	{r4, lr}
 8016dcc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016dd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016dd4:	4291      	cmp	r1, r2
 8016dd6:	d1f9      	bne.n	8016dcc <memcpy+0xe>
 8016dd8:	bd10      	pop	{r4, pc}

08016dda <memset>:
 8016dda:	4402      	add	r2, r0
 8016ddc:	4603      	mov	r3, r0
 8016dde:	4293      	cmp	r3, r2
 8016de0:	d100      	bne.n	8016de4 <memset+0xa>
 8016de2:	4770      	bx	lr
 8016de4:	f803 1b01 	strb.w	r1, [r3], #1
 8016de8:	e7f9      	b.n	8016dde <memset+0x4>
	...

08016dec <sbrk_aligned>:
 8016dec:	b570      	push	{r4, r5, r6, lr}
 8016dee:	4e0e      	ldr	r6, [pc, #56]	; (8016e28 <sbrk_aligned+0x3c>)
 8016df0:	460c      	mov	r4, r1
 8016df2:	6831      	ldr	r1, [r6, #0]
 8016df4:	4605      	mov	r5, r0
 8016df6:	b911      	cbnz	r1, 8016dfe <sbrk_aligned+0x12>
 8016df8:	f000 f94c 	bl	8017094 <_sbrk_r>
 8016dfc:	6030      	str	r0, [r6, #0]
 8016dfe:	4621      	mov	r1, r4
 8016e00:	4628      	mov	r0, r5
 8016e02:	f000 f947 	bl	8017094 <_sbrk_r>
 8016e06:	1c43      	adds	r3, r0, #1
 8016e08:	d00a      	beq.n	8016e20 <sbrk_aligned+0x34>
 8016e0a:	1cc4      	adds	r4, r0, #3
 8016e0c:	f024 0403 	bic.w	r4, r4, #3
 8016e10:	42a0      	cmp	r0, r4
 8016e12:	d007      	beq.n	8016e24 <sbrk_aligned+0x38>
 8016e14:	1a21      	subs	r1, r4, r0
 8016e16:	4628      	mov	r0, r5
 8016e18:	f000 f93c 	bl	8017094 <_sbrk_r>
 8016e1c:	3001      	adds	r0, #1
 8016e1e:	d101      	bne.n	8016e24 <sbrk_aligned+0x38>
 8016e20:	f04f 34ff 	mov.w	r4, #4294967295
 8016e24:	4620      	mov	r0, r4
 8016e26:	bd70      	pop	{r4, r5, r6, pc}
 8016e28:	240155a4 	.word	0x240155a4

08016e2c <_malloc_r>:
 8016e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e30:	1ccd      	adds	r5, r1, #3
 8016e32:	f025 0503 	bic.w	r5, r5, #3
 8016e36:	3508      	adds	r5, #8
 8016e38:	2d0c      	cmp	r5, #12
 8016e3a:	bf38      	it	cc
 8016e3c:	250c      	movcc	r5, #12
 8016e3e:	2d00      	cmp	r5, #0
 8016e40:	4607      	mov	r7, r0
 8016e42:	db01      	blt.n	8016e48 <_malloc_r+0x1c>
 8016e44:	42a9      	cmp	r1, r5
 8016e46:	d905      	bls.n	8016e54 <_malloc_r+0x28>
 8016e48:	230c      	movs	r3, #12
 8016e4a:	603b      	str	r3, [r7, #0]
 8016e4c:	2600      	movs	r6, #0
 8016e4e:	4630      	mov	r0, r6
 8016e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e54:	4e2e      	ldr	r6, [pc, #184]	; (8016f10 <_malloc_r+0xe4>)
 8016e56:	f000 fa9f 	bl	8017398 <__malloc_lock>
 8016e5a:	6833      	ldr	r3, [r6, #0]
 8016e5c:	461c      	mov	r4, r3
 8016e5e:	bb34      	cbnz	r4, 8016eae <_malloc_r+0x82>
 8016e60:	4629      	mov	r1, r5
 8016e62:	4638      	mov	r0, r7
 8016e64:	f7ff ffc2 	bl	8016dec <sbrk_aligned>
 8016e68:	1c43      	adds	r3, r0, #1
 8016e6a:	4604      	mov	r4, r0
 8016e6c:	d14d      	bne.n	8016f0a <_malloc_r+0xde>
 8016e6e:	6834      	ldr	r4, [r6, #0]
 8016e70:	4626      	mov	r6, r4
 8016e72:	2e00      	cmp	r6, #0
 8016e74:	d140      	bne.n	8016ef8 <_malloc_r+0xcc>
 8016e76:	6823      	ldr	r3, [r4, #0]
 8016e78:	4631      	mov	r1, r6
 8016e7a:	4638      	mov	r0, r7
 8016e7c:	eb04 0803 	add.w	r8, r4, r3
 8016e80:	f000 f908 	bl	8017094 <_sbrk_r>
 8016e84:	4580      	cmp	r8, r0
 8016e86:	d13a      	bne.n	8016efe <_malloc_r+0xd2>
 8016e88:	6821      	ldr	r1, [r4, #0]
 8016e8a:	3503      	adds	r5, #3
 8016e8c:	1a6d      	subs	r5, r5, r1
 8016e8e:	f025 0503 	bic.w	r5, r5, #3
 8016e92:	3508      	adds	r5, #8
 8016e94:	2d0c      	cmp	r5, #12
 8016e96:	bf38      	it	cc
 8016e98:	250c      	movcc	r5, #12
 8016e9a:	4629      	mov	r1, r5
 8016e9c:	4638      	mov	r0, r7
 8016e9e:	f7ff ffa5 	bl	8016dec <sbrk_aligned>
 8016ea2:	3001      	adds	r0, #1
 8016ea4:	d02b      	beq.n	8016efe <_malloc_r+0xd2>
 8016ea6:	6823      	ldr	r3, [r4, #0]
 8016ea8:	442b      	add	r3, r5
 8016eaa:	6023      	str	r3, [r4, #0]
 8016eac:	e00e      	b.n	8016ecc <_malloc_r+0xa0>
 8016eae:	6822      	ldr	r2, [r4, #0]
 8016eb0:	1b52      	subs	r2, r2, r5
 8016eb2:	d41e      	bmi.n	8016ef2 <_malloc_r+0xc6>
 8016eb4:	2a0b      	cmp	r2, #11
 8016eb6:	d916      	bls.n	8016ee6 <_malloc_r+0xba>
 8016eb8:	1961      	adds	r1, r4, r5
 8016eba:	42a3      	cmp	r3, r4
 8016ebc:	6025      	str	r5, [r4, #0]
 8016ebe:	bf18      	it	ne
 8016ec0:	6059      	strne	r1, [r3, #4]
 8016ec2:	6863      	ldr	r3, [r4, #4]
 8016ec4:	bf08      	it	eq
 8016ec6:	6031      	streq	r1, [r6, #0]
 8016ec8:	5162      	str	r2, [r4, r5]
 8016eca:	604b      	str	r3, [r1, #4]
 8016ecc:	4638      	mov	r0, r7
 8016ece:	f104 060b 	add.w	r6, r4, #11
 8016ed2:	f000 fa67 	bl	80173a4 <__malloc_unlock>
 8016ed6:	f026 0607 	bic.w	r6, r6, #7
 8016eda:	1d23      	adds	r3, r4, #4
 8016edc:	1af2      	subs	r2, r6, r3
 8016ede:	d0b6      	beq.n	8016e4e <_malloc_r+0x22>
 8016ee0:	1b9b      	subs	r3, r3, r6
 8016ee2:	50a3      	str	r3, [r4, r2]
 8016ee4:	e7b3      	b.n	8016e4e <_malloc_r+0x22>
 8016ee6:	6862      	ldr	r2, [r4, #4]
 8016ee8:	42a3      	cmp	r3, r4
 8016eea:	bf0c      	ite	eq
 8016eec:	6032      	streq	r2, [r6, #0]
 8016eee:	605a      	strne	r2, [r3, #4]
 8016ef0:	e7ec      	b.n	8016ecc <_malloc_r+0xa0>
 8016ef2:	4623      	mov	r3, r4
 8016ef4:	6864      	ldr	r4, [r4, #4]
 8016ef6:	e7b2      	b.n	8016e5e <_malloc_r+0x32>
 8016ef8:	4634      	mov	r4, r6
 8016efa:	6876      	ldr	r6, [r6, #4]
 8016efc:	e7b9      	b.n	8016e72 <_malloc_r+0x46>
 8016efe:	230c      	movs	r3, #12
 8016f00:	603b      	str	r3, [r7, #0]
 8016f02:	4638      	mov	r0, r7
 8016f04:	f000 fa4e 	bl	80173a4 <__malloc_unlock>
 8016f08:	e7a1      	b.n	8016e4e <_malloc_r+0x22>
 8016f0a:	6025      	str	r5, [r4, #0]
 8016f0c:	e7de      	b.n	8016ecc <_malloc_r+0xa0>
 8016f0e:	bf00      	nop
 8016f10:	240155a0 	.word	0x240155a0

08016f14 <iprintf>:
 8016f14:	b40f      	push	{r0, r1, r2, r3}
 8016f16:	4b0a      	ldr	r3, [pc, #40]	; (8016f40 <iprintf+0x2c>)
 8016f18:	b513      	push	{r0, r1, r4, lr}
 8016f1a:	681c      	ldr	r4, [r3, #0]
 8016f1c:	b124      	cbz	r4, 8016f28 <iprintf+0x14>
 8016f1e:	69a3      	ldr	r3, [r4, #24]
 8016f20:	b913      	cbnz	r3, 8016f28 <iprintf+0x14>
 8016f22:	4620      	mov	r0, r4
 8016f24:	f7ff fe76 	bl	8016c14 <__sinit>
 8016f28:	ab05      	add	r3, sp, #20
 8016f2a:	9a04      	ldr	r2, [sp, #16]
 8016f2c:	68a1      	ldr	r1, [r4, #8]
 8016f2e:	9301      	str	r3, [sp, #4]
 8016f30:	4620      	mov	r0, r4
 8016f32:	f000 fab3 	bl	801749c <_vfiprintf_r>
 8016f36:	b002      	add	sp, #8
 8016f38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016f3c:	b004      	add	sp, #16
 8016f3e:	4770      	bx	lr
 8016f40:	24000034 	.word	0x24000034

08016f44 <rand>:
 8016f44:	4b16      	ldr	r3, [pc, #88]	; (8016fa0 <rand+0x5c>)
 8016f46:	b510      	push	{r4, lr}
 8016f48:	681c      	ldr	r4, [r3, #0]
 8016f4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016f4c:	b9b3      	cbnz	r3, 8016f7c <rand+0x38>
 8016f4e:	2018      	movs	r0, #24
 8016f50:	f000 fa1a 	bl	8017388 <malloc>
 8016f54:	63a0      	str	r0, [r4, #56]	; 0x38
 8016f56:	b928      	cbnz	r0, 8016f64 <rand+0x20>
 8016f58:	4602      	mov	r2, r0
 8016f5a:	4b12      	ldr	r3, [pc, #72]	; (8016fa4 <rand+0x60>)
 8016f5c:	4812      	ldr	r0, [pc, #72]	; (8016fa8 <rand+0x64>)
 8016f5e:	214e      	movs	r1, #78	; 0x4e
 8016f60:	f000 f8fe 	bl	8017160 <__assert_func>
 8016f64:	4a11      	ldr	r2, [pc, #68]	; (8016fac <rand+0x68>)
 8016f66:	4b12      	ldr	r3, [pc, #72]	; (8016fb0 <rand+0x6c>)
 8016f68:	e9c0 2300 	strd	r2, r3, [r0]
 8016f6c:	4b11      	ldr	r3, [pc, #68]	; (8016fb4 <rand+0x70>)
 8016f6e:	6083      	str	r3, [r0, #8]
 8016f70:	230b      	movs	r3, #11
 8016f72:	8183      	strh	r3, [r0, #12]
 8016f74:	2201      	movs	r2, #1
 8016f76:	2300      	movs	r3, #0
 8016f78:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8016f7c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8016f7e:	4a0e      	ldr	r2, [pc, #56]	; (8016fb8 <rand+0x74>)
 8016f80:	6920      	ldr	r0, [r4, #16]
 8016f82:	6963      	ldr	r3, [r4, #20]
 8016f84:	490d      	ldr	r1, [pc, #52]	; (8016fbc <rand+0x78>)
 8016f86:	4342      	muls	r2, r0
 8016f88:	fb01 2203 	mla	r2, r1, r3, r2
 8016f8c:	fba0 0101 	umull	r0, r1, r0, r1
 8016f90:	1c43      	adds	r3, r0, #1
 8016f92:	eb42 0001 	adc.w	r0, r2, r1
 8016f96:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8016f9a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8016f9e:	bd10      	pop	{r4, pc}
 8016fa0:	24000034 	.word	0x24000034
 8016fa4:	0801ae58 	.word	0x0801ae58
 8016fa8:	0801ae6f 	.word	0x0801ae6f
 8016fac:	abcd330e 	.word	0xabcd330e
 8016fb0:	e66d1234 	.word	0xe66d1234
 8016fb4:	0005deec 	.word	0x0005deec
 8016fb8:	5851f42d 	.word	0x5851f42d
 8016fbc:	4c957f2d 	.word	0x4c957f2d

08016fc0 <cleanup_glue>:
 8016fc0:	b538      	push	{r3, r4, r5, lr}
 8016fc2:	460c      	mov	r4, r1
 8016fc4:	6809      	ldr	r1, [r1, #0]
 8016fc6:	4605      	mov	r5, r0
 8016fc8:	b109      	cbz	r1, 8016fce <cleanup_glue+0xe>
 8016fca:	f7ff fff9 	bl	8016fc0 <cleanup_glue>
 8016fce:	4621      	mov	r1, r4
 8016fd0:	4628      	mov	r0, r5
 8016fd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016fd6:	f000 b9eb 	b.w	80173b0 <_free_r>
	...

08016fdc <_reclaim_reent>:
 8016fdc:	4b2c      	ldr	r3, [pc, #176]	; (8017090 <_reclaim_reent+0xb4>)
 8016fde:	681b      	ldr	r3, [r3, #0]
 8016fe0:	4283      	cmp	r3, r0
 8016fe2:	b570      	push	{r4, r5, r6, lr}
 8016fe4:	4604      	mov	r4, r0
 8016fe6:	d051      	beq.n	801708c <_reclaim_reent+0xb0>
 8016fe8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8016fea:	b143      	cbz	r3, 8016ffe <_reclaim_reent+0x22>
 8016fec:	68db      	ldr	r3, [r3, #12]
 8016fee:	2b00      	cmp	r3, #0
 8016ff0:	d14a      	bne.n	8017088 <_reclaim_reent+0xac>
 8016ff2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016ff4:	6819      	ldr	r1, [r3, #0]
 8016ff6:	b111      	cbz	r1, 8016ffe <_reclaim_reent+0x22>
 8016ff8:	4620      	mov	r0, r4
 8016ffa:	f000 f9d9 	bl	80173b0 <_free_r>
 8016ffe:	6961      	ldr	r1, [r4, #20]
 8017000:	b111      	cbz	r1, 8017008 <_reclaim_reent+0x2c>
 8017002:	4620      	mov	r0, r4
 8017004:	f000 f9d4 	bl	80173b0 <_free_r>
 8017008:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801700a:	b111      	cbz	r1, 8017012 <_reclaim_reent+0x36>
 801700c:	4620      	mov	r0, r4
 801700e:	f000 f9cf 	bl	80173b0 <_free_r>
 8017012:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017014:	b111      	cbz	r1, 801701c <_reclaim_reent+0x40>
 8017016:	4620      	mov	r0, r4
 8017018:	f000 f9ca 	bl	80173b0 <_free_r>
 801701c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801701e:	b111      	cbz	r1, 8017026 <_reclaim_reent+0x4a>
 8017020:	4620      	mov	r0, r4
 8017022:	f000 f9c5 	bl	80173b0 <_free_r>
 8017026:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8017028:	b111      	cbz	r1, 8017030 <_reclaim_reent+0x54>
 801702a:	4620      	mov	r0, r4
 801702c:	f000 f9c0 	bl	80173b0 <_free_r>
 8017030:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8017032:	b111      	cbz	r1, 801703a <_reclaim_reent+0x5e>
 8017034:	4620      	mov	r0, r4
 8017036:	f000 f9bb 	bl	80173b0 <_free_r>
 801703a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801703c:	b111      	cbz	r1, 8017044 <_reclaim_reent+0x68>
 801703e:	4620      	mov	r0, r4
 8017040:	f000 f9b6 	bl	80173b0 <_free_r>
 8017044:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017046:	b111      	cbz	r1, 801704e <_reclaim_reent+0x72>
 8017048:	4620      	mov	r0, r4
 801704a:	f000 f9b1 	bl	80173b0 <_free_r>
 801704e:	69a3      	ldr	r3, [r4, #24]
 8017050:	b1e3      	cbz	r3, 801708c <_reclaim_reent+0xb0>
 8017052:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017054:	4620      	mov	r0, r4
 8017056:	4798      	blx	r3
 8017058:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801705a:	b1b9      	cbz	r1, 801708c <_reclaim_reent+0xb0>
 801705c:	4620      	mov	r0, r4
 801705e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017062:	f7ff bfad 	b.w	8016fc0 <cleanup_glue>
 8017066:	5949      	ldr	r1, [r1, r5]
 8017068:	b941      	cbnz	r1, 801707c <_reclaim_reent+0xa0>
 801706a:	3504      	adds	r5, #4
 801706c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801706e:	2d80      	cmp	r5, #128	; 0x80
 8017070:	68d9      	ldr	r1, [r3, #12]
 8017072:	d1f8      	bne.n	8017066 <_reclaim_reent+0x8a>
 8017074:	4620      	mov	r0, r4
 8017076:	f000 f99b 	bl	80173b0 <_free_r>
 801707a:	e7ba      	b.n	8016ff2 <_reclaim_reent+0x16>
 801707c:	680e      	ldr	r6, [r1, #0]
 801707e:	4620      	mov	r0, r4
 8017080:	f000 f996 	bl	80173b0 <_free_r>
 8017084:	4631      	mov	r1, r6
 8017086:	e7ef      	b.n	8017068 <_reclaim_reent+0x8c>
 8017088:	2500      	movs	r5, #0
 801708a:	e7ef      	b.n	801706c <_reclaim_reent+0x90>
 801708c:	bd70      	pop	{r4, r5, r6, pc}
 801708e:	bf00      	nop
 8017090:	24000034 	.word	0x24000034

08017094 <_sbrk_r>:
 8017094:	b538      	push	{r3, r4, r5, lr}
 8017096:	4d06      	ldr	r5, [pc, #24]	; (80170b0 <_sbrk_r+0x1c>)
 8017098:	2300      	movs	r3, #0
 801709a:	4604      	mov	r4, r0
 801709c:	4608      	mov	r0, r1
 801709e:	602b      	str	r3, [r5, #0]
 80170a0:	f7e9 ffd0 	bl	8001044 <_sbrk>
 80170a4:	1c43      	adds	r3, r0, #1
 80170a6:	d102      	bne.n	80170ae <_sbrk_r+0x1a>
 80170a8:	682b      	ldr	r3, [r5, #0]
 80170aa:	b103      	cbz	r3, 80170ae <_sbrk_r+0x1a>
 80170ac:	6023      	str	r3, [r4, #0]
 80170ae:	bd38      	pop	{r3, r4, r5, pc}
 80170b0:	240155a8 	.word	0x240155a8

080170b4 <__sread>:
 80170b4:	b510      	push	{r4, lr}
 80170b6:	460c      	mov	r4, r1
 80170b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80170bc:	f000 fcb2 	bl	8017a24 <_read_r>
 80170c0:	2800      	cmp	r0, #0
 80170c2:	bfab      	itete	ge
 80170c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80170c6:	89a3      	ldrhlt	r3, [r4, #12]
 80170c8:	181b      	addge	r3, r3, r0
 80170ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80170ce:	bfac      	ite	ge
 80170d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80170d2:	81a3      	strhlt	r3, [r4, #12]
 80170d4:	bd10      	pop	{r4, pc}

080170d6 <__swrite>:
 80170d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80170da:	461f      	mov	r7, r3
 80170dc:	898b      	ldrh	r3, [r1, #12]
 80170de:	05db      	lsls	r3, r3, #23
 80170e0:	4605      	mov	r5, r0
 80170e2:	460c      	mov	r4, r1
 80170e4:	4616      	mov	r6, r2
 80170e6:	d505      	bpl.n	80170f4 <__swrite+0x1e>
 80170e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80170ec:	2302      	movs	r3, #2
 80170ee:	2200      	movs	r2, #0
 80170f0:	f000 f938 	bl	8017364 <_lseek_r>
 80170f4:	89a3      	ldrh	r3, [r4, #12]
 80170f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80170fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80170fe:	81a3      	strh	r3, [r4, #12]
 8017100:	4632      	mov	r2, r6
 8017102:	463b      	mov	r3, r7
 8017104:	4628      	mov	r0, r5
 8017106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801710a:	f000 b817 	b.w	801713c <_write_r>

0801710e <__sseek>:
 801710e:	b510      	push	{r4, lr}
 8017110:	460c      	mov	r4, r1
 8017112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017116:	f000 f925 	bl	8017364 <_lseek_r>
 801711a:	1c43      	adds	r3, r0, #1
 801711c:	89a3      	ldrh	r3, [r4, #12]
 801711e:	bf15      	itete	ne
 8017120:	6560      	strne	r0, [r4, #84]	; 0x54
 8017122:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017126:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801712a:	81a3      	strheq	r3, [r4, #12]
 801712c:	bf18      	it	ne
 801712e:	81a3      	strhne	r3, [r4, #12]
 8017130:	bd10      	pop	{r4, pc}

08017132 <__sclose>:
 8017132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017136:	f000 b831 	b.w	801719c <_close_r>
	...

0801713c <_write_r>:
 801713c:	b538      	push	{r3, r4, r5, lr}
 801713e:	4d07      	ldr	r5, [pc, #28]	; (801715c <_write_r+0x20>)
 8017140:	4604      	mov	r4, r0
 8017142:	4608      	mov	r0, r1
 8017144:	4611      	mov	r1, r2
 8017146:	2200      	movs	r2, #0
 8017148:	602a      	str	r2, [r5, #0]
 801714a:	461a      	mov	r2, r3
 801714c:	f7e9 ff29 	bl	8000fa2 <_write>
 8017150:	1c43      	adds	r3, r0, #1
 8017152:	d102      	bne.n	801715a <_write_r+0x1e>
 8017154:	682b      	ldr	r3, [r5, #0]
 8017156:	b103      	cbz	r3, 801715a <_write_r+0x1e>
 8017158:	6023      	str	r3, [r4, #0]
 801715a:	bd38      	pop	{r3, r4, r5, pc}
 801715c:	240155a8 	.word	0x240155a8

08017160 <__assert_func>:
 8017160:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017162:	4614      	mov	r4, r2
 8017164:	461a      	mov	r2, r3
 8017166:	4b09      	ldr	r3, [pc, #36]	; (801718c <__assert_func+0x2c>)
 8017168:	681b      	ldr	r3, [r3, #0]
 801716a:	4605      	mov	r5, r0
 801716c:	68d8      	ldr	r0, [r3, #12]
 801716e:	b14c      	cbz	r4, 8017184 <__assert_func+0x24>
 8017170:	4b07      	ldr	r3, [pc, #28]	; (8017190 <__assert_func+0x30>)
 8017172:	9100      	str	r1, [sp, #0]
 8017174:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017178:	4906      	ldr	r1, [pc, #24]	; (8017194 <__assert_func+0x34>)
 801717a:	462b      	mov	r3, r5
 801717c:	f000 f8e0 	bl	8017340 <fiprintf>
 8017180:	f000 fd22 	bl	8017bc8 <abort>
 8017184:	4b04      	ldr	r3, [pc, #16]	; (8017198 <__assert_func+0x38>)
 8017186:	461c      	mov	r4, r3
 8017188:	e7f3      	b.n	8017172 <__assert_func+0x12>
 801718a:	bf00      	nop
 801718c:	24000034 	.word	0x24000034
 8017190:	0801aeca 	.word	0x0801aeca
 8017194:	0801aed7 	.word	0x0801aed7
 8017198:	0801af05 	.word	0x0801af05

0801719c <_close_r>:
 801719c:	b538      	push	{r3, r4, r5, lr}
 801719e:	4d06      	ldr	r5, [pc, #24]	; (80171b8 <_close_r+0x1c>)
 80171a0:	2300      	movs	r3, #0
 80171a2:	4604      	mov	r4, r0
 80171a4:	4608      	mov	r0, r1
 80171a6:	602b      	str	r3, [r5, #0]
 80171a8:	f7e9 ff17 	bl	8000fda <_close>
 80171ac:	1c43      	adds	r3, r0, #1
 80171ae:	d102      	bne.n	80171b6 <_close_r+0x1a>
 80171b0:	682b      	ldr	r3, [r5, #0]
 80171b2:	b103      	cbz	r3, 80171b6 <_close_r+0x1a>
 80171b4:	6023      	str	r3, [r4, #0]
 80171b6:	bd38      	pop	{r3, r4, r5, pc}
 80171b8:	240155a8 	.word	0x240155a8

080171bc <__sflush_r>:
 80171bc:	898a      	ldrh	r2, [r1, #12]
 80171be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80171c2:	4605      	mov	r5, r0
 80171c4:	0710      	lsls	r0, r2, #28
 80171c6:	460c      	mov	r4, r1
 80171c8:	d458      	bmi.n	801727c <__sflush_r+0xc0>
 80171ca:	684b      	ldr	r3, [r1, #4]
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	dc05      	bgt.n	80171dc <__sflush_r+0x20>
 80171d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80171d2:	2b00      	cmp	r3, #0
 80171d4:	dc02      	bgt.n	80171dc <__sflush_r+0x20>
 80171d6:	2000      	movs	r0, #0
 80171d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80171dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80171de:	2e00      	cmp	r6, #0
 80171e0:	d0f9      	beq.n	80171d6 <__sflush_r+0x1a>
 80171e2:	2300      	movs	r3, #0
 80171e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80171e8:	682f      	ldr	r7, [r5, #0]
 80171ea:	602b      	str	r3, [r5, #0]
 80171ec:	d032      	beq.n	8017254 <__sflush_r+0x98>
 80171ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80171f0:	89a3      	ldrh	r3, [r4, #12]
 80171f2:	075a      	lsls	r2, r3, #29
 80171f4:	d505      	bpl.n	8017202 <__sflush_r+0x46>
 80171f6:	6863      	ldr	r3, [r4, #4]
 80171f8:	1ac0      	subs	r0, r0, r3
 80171fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80171fc:	b10b      	cbz	r3, 8017202 <__sflush_r+0x46>
 80171fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017200:	1ac0      	subs	r0, r0, r3
 8017202:	2300      	movs	r3, #0
 8017204:	4602      	mov	r2, r0
 8017206:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017208:	6a21      	ldr	r1, [r4, #32]
 801720a:	4628      	mov	r0, r5
 801720c:	47b0      	blx	r6
 801720e:	1c43      	adds	r3, r0, #1
 8017210:	89a3      	ldrh	r3, [r4, #12]
 8017212:	d106      	bne.n	8017222 <__sflush_r+0x66>
 8017214:	6829      	ldr	r1, [r5, #0]
 8017216:	291d      	cmp	r1, #29
 8017218:	d82c      	bhi.n	8017274 <__sflush_r+0xb8>
 801721a:	4a2a      	ldr	r2, [pc, #168]	; (80172c4 <__sflush_r+0x108>)
 801721c:	40ca      	lsrs	r2, r1
 801721e:	07d6      	lsls	r6, r2, #31
 8017220:	d528      	bpl.n	8017274 <__sflush_r+0xb8>
 8017222:	2200      	movs	r2, #0
 8017224:	6062      	str	r2, [r4, #4]
 8017226:	04d9      	lsls	r1, r3, #19
 8017228:	6922      	ldr	r2, [r4, #16]
 801722a:	6022      	str	r2, [r4, #0]
 801722c:	d504      	bpl.n	8017238 <__sflush_r+0x7c>
 801722e:	1c42      	adds	r2, r0, #1
 8017230:	d101      	bne.n	8017236 <__sflush_r+0x7a>
 8017232:	682b      	ldr	r3, [r5, #0]
 8017234:	b903      	cbnz	r3, 8017238 <__sflush_r+0x7c>
 8017236:	6560      	str	r0, [r4, #84]	; 0x54
 8017238:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801723a:	602f      	str	r7, [r5, #0]
 801723c:	2900      	cmp	r1, #0
 801723e:	d0ca      	beq.n	80171d6 <__sflush_r+0x1a>
 8017240:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017244:	4299      	cmp	r1, r3
 8017246:	d002      	beq.n	801724e <__sflush_r+0x92>
 8017248:	4628      	mov	r0, r5
 801724a:	f000 f8b1 	bl	80173b0 <_free_r>
 801724e:	2000      	movs	r0, #0
 8017250:	6360      	str	r0, [r4, #52]	; 0x34
 8017252:	e7c1      	b.n	80171d8 <__sflush_r+0x1c>
 8017254:	6a21      	ldr	r1, [r4, #32]
 8017256:	2301      	movs	r3, #1
 8017258:	4628      	mov	r0, r5
 801725a:	47b0      	blx	r6
 801725c:	1c41      	adds	r1, r0, #1
 801725e:	d1c7      	bne.n	80171f0 <__sflush_r+0x34>
 8017260:	682b      	ldr	r3, [r5, #0]
 8017262:	2b00      	cmp	r3, #0
 8017264:	d0c4      	beq.n	80171f0 <__sflush_r+0x34>
 8017266:	2b1d      	cmp	r3, #29
 8017268:	d001      	beq.n	801726e <__sflush_r+0xb2>
 801726a:	2b16      	cmp	r3, #22
 801726c:	d101      	bne.n	8017272 <__sflush_r+0xb6>
 801726e:	602f      	str	r7, [r5, #0]
 8017270:	e7b1      	b.n	80171d6 <__sflush_r+0x1a>
 8017272:	89a3      	ldrh	r3, [r4, #12]
 8017274:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017278:	81a3      	strh	r3, [r4, #12]
 801727a:	e7ad      	b.n	80171d8 <__sflush_r+0x1c>
 801727c:	690f      	ldr	r7, [r1, #16]
 801727e:	2f00      	cmp	r7, #0
 8017280:	d0a9      	beq.n	80171d6 <__sflush_r+0x1a>
 8017282:	0793      	lsls	r3, r2, #30
 8017284:	680e      	ldr	r6, [r1, #0]
 8017286:	bf08      	it	eq
 8017288:	694b      	ldreq	r3, [r1, #20]
 801728a:	600f      	str	r7, [r1, #0]
 801728c:	bf18      	it	ne
 801728e:	2300      	movne	r3, #0
 8017290:	eba6 0807 	sub.w	r8, r6, r7
 8017294:	608b      	str	r3, [r1, #8]
 8017296:	f1b8 0f00 	cmp.w	r8, #0
 801729a:	dd9c      	ble.n	80171d6 <__sflush_r+0x1a>
 801729c:	6a21      	ldr	r1, [r4, #32]
 801729e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80172a0:	4643      	mov	r3, r8
 80172a2:	463a      	mov	r2, r7
 80172a4:	4628      	mov	r0, r5
 80172a6:	47b0      	blx	r6
 80172a8:	2800      	cmp	r0, #0
 80172aa:	dc06      	bgt.n	80172ba <__sflush_r+0xfe>
 80172ac:	89a3      	ldrh	r3, [r4, #12]
 80172ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80172b2:	81a3      	strh	r3, [r4, #12]
 80172b4:	f04f 30ff 	mov.w	r0, #4294967295
 80172b8:	e78e      	b.n	80171d8 <__sflush_r+0x1c>
 80172ba:	4407      	add	r7, r0
 80172bc:	eba8 0800 	sub.w	r8, r8, r0
 80172c0:	e7e9      	b.n	8017296 <__sflush_r+0xda>
 80172c2:	bf00      	nop
 80172c4:	20400001 	.word	0x20400001

080172c8 <_fflush_r>:
 80172c8:	b538      	push	{r3, r4, r5, lr}
 80172ca:	690b      	ldr	r3, [r1, #16]
 80172cc:	4605      	mov	r5, r0
 80172ce:	460c      	mov	r4, r1
 80172d0:	b913      	cbnz	r3, 80172d8 <_fflush_r+0x10>
 80172d2:	2500      	movs	r5, #0
 80172d4:	4628      	mov	r0, r5
 80172d6:	bd38      	pop	{r3, r4, r5, pc}
 80172d8:	b118      	cbz	r0, 80172e2 <_fflush_r+0x1a>
 80172da:	6983      	ldr	r3, [r0, #24]
 80172dc:	b90b      	cbnz	r3, 80172e2 <_fflush_r+0x1a>
 80172de:	f7ff fc99 	bl	8016c14 <__sinit>
 80172e2:	4b14      	ldr	r3, [pc, #80]	; (8017334 <_fflush_r+0x6c>)
 80172e4:	429c      	cmp	r4, r3
 80172e6:	d11b      	bne.n	8017320 <_fflush_r+0x58>
 80172e8:	686c      	ldr	r4, [r5, #4]
 80172ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80172ee:	2b00      	cmp	r3, #0
 80172f0:	d0ef      	beq.n	80172d2 <_fflush_r+0xa>
 80172f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80172f4:	07d0      	lsls	r0, r2, #31
 80172f6:	d404      	bmi.n	8017302 <_fflush_r+0x3a>
 80172f8:	0599      	lsls	r1, r3, #22
 80172fa:	d402      	bmi.n	8017302 <_fflush_r+0x3a>
 80172fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80172fe:	f7ff fd4c 	bl	8016d9a <__retarget_lock_acquire_recursive>
 8017302:	4628      	mov	r0, r5
 8017304:	4621      	mov	r1, r4
 8017306:	f7ff ff59 	bl	80171bc <__sflush_r>
 801730a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801730c:	07da      	lsls	r2, r3, #31
 801730e:	4605      	mov	r5, r0
 8017310:	d4e0      	bmi.n	80172d4 <_fflush_r+0xc>
 8017312:	89a3      	ldrh	r3, [r4, #12]
 8017314:	059b      	lsls	r3, r3, #22
 8017316:	d4dd      	bmi.n	80172d4 <_fflush_r+0xc>
 8017318:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801731a:	f7ff fd3f 	bl	8016d9c <__retarget_lock_release_recursive>
 801731e:	e7d9      	b.n	80172d4 <_fflush_r+0xc>
 8017320:	4b05      	ldr	r3, [pc, #20]	; (8017338 <_fflush_r+0x70>)
 8017322:	429c      	cmp	r4, r3
 8017324:	d101      	bne.n	801732a <_fflush_r+0x62>
 8017326:	68ac      	ldr	r4, [r5, #8]
 8017328:	e7df      	b.n	80172ea <_fflush_r+0x22>
 801732a:	4b04      	ldr	r3, [pc, #16]	; (801733c <_fflush_r+0x74>)
 801732c:	429c      	cmp	r4, r3
 801732e:	bf08      	it	eq
 8017330:	68ec      	ldreq	r4, [r5, #12]
 8017332:	e7da      	b.n	80172ea <_fflush_r+0x22>
 8017334:	0801ae14 	.word	0x0801ae14
 8017338:	0801ae34 	.word	0x0801ae34
 801733c:	0801adf4 	.word	0x0801adf4

08017340 <fiprintf>:
 8017340:	b40e      	push	{r1, r2, r3}
 8017342:	b503      	push	{r0, r1, lr}
 8017344:	4601      	mov	r1, r0
 8017346:	ab03      	add	r3, sp, #12
 8017348:	4805      	ldr	r0, [pc, #20]	; (8017360 <fiprintf+0x20>)
 801734a:	f853 2b04 	ldr.w	r2, [r3], #4
 801734e:	6800      	ldr	r0, [r0, #0]
 8017350:	9301      	str	r3, [sp, #4]
 8017352:	f000 f8a3 	bl	801749c <_vfiprintf_r>
 8017356:	b002      	add	sp, #8
 8017358:	f85d eb04 	ldr.w	lr, [sp], #4
 801735c:	b003      	add	sp, #12
 801735e:	4770      	bx	lr
 8017360:	24000034 	.word	0x24000034

08017364 <_lseek_r>:
 8017364:	b538      	push	{r3, r4, r5, lr}
 8017366:	4d07      	ldr	r5, [pc, #28]	; (8017384 <_lseek_r+0x20>)
 8017368:	4604      	mov	r4, r0
 801736a:	4608      	mov	r0, r1
 801736c:	4611      	mov	r1, r2
 801736e:	2200      	movs	r2, #0
 8017370:	602a      	str	r2, [r5, #0]
 8017372:	461a      	mov	r2, r3
 8017374:	f7e9 fe58 	bl	8001028 <_lseek>
 8017378:	1c43      	adds	r3, r0, #1
 801737a:	d102      	bne.n	8017382 <_lseek_r+0x1e>
 801737c:	682b      	ldr	r3, [r5, #0]
 801737e:	b103      	cbz	r3, 8017382 <_lseek_r+0x1e>
 8017380:	6023      	str	r3, [r4, #0]
 8017382:	bd38      	pop	{r3, r4, r5, pc}
 8017384:	240155a8 	.word	0x240155a8

08017388 <malloc>:
 8017388:	4b02      	ldr	r3, [pc, #8]	; (8017394 <malloc+0xc>)
 801738a:	4601      	mov	r1, r0
 801738c:	6818      	ldr	r0, [r3, #0]
 801738e:	f7ff bd4d 	b.w	8016e2c <_malloc_r>
 8017392:	bf00      	nop
 8017394:	24000034 	.word	0x24000034

08017398 <__malloc_lock>:
 8017398:	4801      	ldr	r0, [pc, #4]	; (80173a0 <__malloc_lock+0x8>)
 801739a:	f7ff bcfe 	b.w	8016d9a <__retarget_lock_acquire_recursive>
 801739e:	bf00      	nop
 80173a0:	2401559c 	.word	0x2401559c

080173a4 <__malloc_unlock>:
 80173a4:	4801      	ldr	r0, [pc, #4]	; (80173ac <__malloc_unlock+0x8>)
 80173a6:	f7ff bcf9 	b.w	8016d9c <__retarget_lock_release_recursive>
 80173aa:	bf00      	nop
 80173ac:	2401559c 	.word	0x2401559c

080173b0 <_free_r>:
 80173b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80173b2:	2900      	cmp	r1, #0
 80173b4:	d044      	beq.n	8017440 <_free_r+0x90>
 80173b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80173ba:	9001      	str	r0, [sp, #4]
 80173bc:	2b00      	cmp	r3, #0
 80173be:	f1a1 0404 	sub.w	r4, r1, #4
 80173c2:	bfb8      	it	lt
 80173c4:	18e4      	addlt	r4, r4, r3
 80173c6:	f7ff ffe7 	bl	8017398 <__malloc_lock>
 80173ca:	4a1e      	ldr	r2, [pc, #120]	; (8017444 <_free_r+0x94>)
 80173cc:	9801      	ldr	r0, [sp, #4]
 80173ce:	6813      	ldr	r3, [r2, #0]
 80173d0:	b933      	cbnz	r3, 80173e0 <_free_r+0x30>
 80173d2:	6063      	str	r3, [r4, #4]
 80173d4:	6014      	str	r4, [r2, #0]
 80173d6:	b003      	add	sp, #12
 80173d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80173dc:	f7ff bfe2 	b.w	80173a4 <__malloc_unlock>
 80173e0:	42a3      	cmp	r3, r4
 80173e2:	d908      	bls.n	80173f6 <_free_r+0x46>
 80173e4:	6825      	ldr	r5, [r4, #0]
 80173e6:	1961      	adds	r1, r4, r5
 80173e8:	428b      	cmp	r3, r1
 80173ea:	bf01      	itttt	eq
 80173ec:	6819      	ldreq	r1, [r3, #0]
 80173ee:	685b      	ldreq	r3, [r3, #4]
 80173f0:	1949      	addeq	r1, r1, r5
 80173f2:	6021      	streq	r1, [r4, #0]
 80173f4:	e7ed      	b.n	80173d2 <_free_r+0x22>
 80173f6:	461a      	mov	r2, r3
 80173f8:	685b      	ldr	r3, [r3, #4]
 80173fa:	b10b      	cbz	r3, 8017400 <_free_r+0x50>
 80173fc:	42a3      	cmp	r3, r4
 80173fe:	d9fa      	bls.n	80173f6 <_free_r+0x46>
 8017400:	6811      	ldr	r1, [r2, #0]
 8017402:	1855      	adds	r5, r2, r1
 8017404:	42a5      	cmp	r5, r4
 8017406:	d10b      	bne.n	8017420 <_free_r+0x70>
 8017408:	6824      	ldr	r4, [r4, #0]
 801740a:	4421      	add	r1, r4
 801740c:	1854      	adds	r4, r2, r1
 801740e:	42a3      	cmp	r3, r4
 8017410:	6011      	str	r1, [r2, #0]
 8017412:	d1e0      	bne.n	80173d6 <_free_r+0x26>
 8017414:	681c      	ldr	r4, [r3, #0]
 8017416:	685b      	ldr	r3, [r3, #4]
 8017418:	6053      	str	r3, [r2, #4]
 801741a:	4421      	add	r1, r4
 801741c:	6011      	str	r1, [r2, #0]
 801741e:	e7da      	b.n	80173d6 <_free_r+0x26>
 8017420:	d902      	bls.n	8017428 <_free_r+0x78>
 8017422:	230c      	movs	r3, #12
 8017424:	6003      	str	r3, [r0, #0]
 8017426:	e7d6      	b.n	80173d6 <_free_r+0x26>
 8017428:	6825      	ldr	r5, [r4, #0]
 801742a:	1961      	adds	r1, r4, r5
 801742c:	428b      	cmp	r3, r1
 801742e:	bf04      	itt	eq
 8017430:	6819      	ldreq	r1, [r3, #0]
 8017432:	685b      	ldreq	r3, [r3, #4]
 8017434:	6063      	str	r3, [r4, #4]
 8017436:	bf04      	itt	eq
 8017438:	1949      	addeq	r1, r1, r5
 801743a:	6021      	streq	r1, [r4, #0]
 801743c:	6054      	str	r4, [r2, #4]
 801743e:	e7ca      	b.n	80173d6 <_free_r+0x26>
 8017440:	b003      	add	sp, #12
 8017442:	bd30      	pop	{r4, r5, pc}
 8017444:	240155a0 	.word	0x240155a0

08017448 <__sfputc_r>:
 8017448:	6893      	ldr	r3, [r2, #8]
 801744a:	3b01      	subs	r3, #1
 801744c:	2b00      	cmp	r3, #0
 801744e:	b410      	push	{r4}
 8017450:	6093      	str	r3, [r2, #8]
 8017452:	da08      	bge.n	8017466 <__sfputc_r+0x1e>
 8017454:	6994      	ldr	r4, [r2, #24]
 8017456:	42a3      	cmp	r3, r4
 8017458:	db01      	blt.n	801745e <__sfputc_r+0x16>
 801745a:	290a      	cmp	r1, #10
 801745c:	d103      	bne.n	8017466 <__sfputc_r+0x1e>
 801745e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017462:	f000 baf1 	b.w	8017a48 <__swbuf_r>
 8017466:	6813      	ldr	r3, [r2, #0]
 8017468:	1c58      	adds	r0, r3, #1
 801746a:	6010      	str	r0, [r2, #0]
 801746c:	7019      	strb	r1, [r3, #0]
 801746e:	4608      	mov	r0, r1
 8017470:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017474:	4770      	bx	lr

08017476 <__sfputs_r>:
 8017476:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017478:	4606      	mov	r6, r0
 801747a:	460f      	mov	r7, r1
 801747c:	4614      	mov	r4, r2
 801747e:	18d5      	adds	r5, r2, r3
 8017480:	42ac      	cmp	r4, r5
 8017482:	d101      	bne.n	8017488 <__sfputs_r+0x12>
 8017484:	2000      	movs	r0, #0
 8017486:	e007      	b.n	8017498 <__sfputs_r+0x22>
 8017488:	f814 1b01 	ldrb.w	r1, [r4], #1
 801748c:	463a      	mov	r2, r7
 801748e:	4630      	mov	r0, r6
 8017490:	f7ff ffda 	bl	8017448 <__sfputc_r>
 8017494:	1c43      	adds	r3, r0, #1
 8017496:	d1f3      	bne.n	8017480 <__sfputs_r+0xa>
 8017498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801749c <_vfiprintf_r>:
 801749c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174a0:	460d      	mov	r5, r1
 80174a2:	b09d      	sub	sp, #116	; 0x74
 80174a4:	4614      	mov	r4, r2
 80174a6:	4698      	mov	r8, r3
 80174a8:	4606      	mov	r6, r0
 80174aa:	b118      	cbz	r0, 80174b4 <_vfiprintf_r+0x18>
 80174ac:	6983      	ldr	r3, [r0, #24]
 80174ae:	b90b      	cbnz	r3, 80174b4 <_vfiprintf_r+0x18>
 80174b0:	f7ff fbb0 	bl	8016c14 <__sinit>
 80174b4:	4b89      	ldr	r3, [pc, #548]	; (80176dc <_vfiprintf_r+0x240>)
 80174b6:	429d      	cmp	r5, r3
 80174b8:	d11b      	bne.n	80174f2 <_vfiprintf_r+0x56>
 80174ba:	6875      	ldr	r5, [r6, #4]
 80174bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80174be:	07d9      	lsls	r1, r3, #31
 80174c0:	d405      	bmi.n	80174ce <_vfiprintf_r+0x32>
 80174c2:	89ab      	ldrh	r3, [r5, #12]
 80174c4:	059a      	lsls	r2, r3, #22
 80174c6:	d402      	bmi.n	80174ce <_vfiprintf_r+0x32>
 80174c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80174ca:	f7ff fc66 	bl	8016d9a <__retarget_lock_acquire_recursive>
 80174ce:	89ab      	ldrh	r3, [r5, #12]
 80174d0:	071b      	lsls	r3, r3, #28
 80174d2:	d501      	bpl.n	80174d8 <_vfiprintf_r+0x3c>
 80174d4:	692b      	ldr	r3, [r5, #16]
 80174d6:	b9eb      	cbnz	r3, 8017514 <_vfiprintf_r+0x78>
 80174d8:	4629      	mov	r1, r5
 80174da:	4630      	mov	r0, r6
 80174dc:	f000 fb06 	bl	8017aec <__swsetup_r>
 80174e0:	b1c0      	cbz	r0, 8017514 <_vfiprintf_r+0x78>
 80174e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80174e4:	07dc      	lsls	r4, r3, #31
 80174e6:	d50e      	bpl.n	8017506 <_vfiprintf_r+0x6a>
 80174e8:	f04f 30ff 	mov.w	r0, #4294967295
 80174ec:	b01d      	add	sp, #116	; 0x74
 80174ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174f2:	4b7b      	ldr	r3, [pc, #492]	; (80176e0 <_vfiprintf_r+0x244>)
 80174f4:	429d      	cmp	r5, r3
 80174f6:	d101      	bne.n	80174fc <_vfiprintf_r+0x60>
 80174f8:	68b5      	ldr	r5, [r6, #8]
 80174fa:	e7df      	b.n	80174bc <_vfiprintf_r+0x20>
 80174fc:	4b79      	ldr	r3, [pc, #484]	; (80176e4 <_vfiprintf_r+0x248>)
 80174fe:	429d      	cmp	r5, r3
 8017500:	bf08      	it	eq
 8017502:	68f5      	ldreq	r5, [r6, #12]
 8017504:	e7da      	b.n	80174bc <_vfiprintf_r+0x20>
 8017506:	89ab      	ldrh	r3, [r5, #12]
 8017508:	0598      	lsls	r0, r3, #22
 801750a:	d4ed      	bmi.n	80174e8 <_vfiprintf_r+0x4c>
 801750c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801750e:	f7ff fc45 	bl	8016d9c <__retarget_lock_release_recursive>
 8017512:	e7e9      	b.n	80174e8 <_vfiprintf_r+0x4c>
 8017514:	2300      	movs	r3, #0
 8017516:	9309      	str	r3, [sp, #36]	; 0x24
 8017518:	2320      	movs	r3, #32
 801751a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801751e:	f8cd 800c 	str.w	r8, [sp, #12]
 8017522:	2330      	movs	r3, #48	; 0x30
 8017524:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80176e8 <_vfiprintf_r+0x24c>
 8017528:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801752c:	f04f 0901 	mov.w	r9, #1
 8017530:	4623      	mov	r3, r4
 8017532:	469a      	mov	sl, r3
 8017534:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017538:	b10a      	cbz	r2, 801753e <_vfiprintf_r+0xa2>
 801753a:	2a25      	cmp	r2, #37	; 0x25
 801753c:	d1f9      	bne.n	8017532 <_vfiprintf_r+0x96>
 801753e:	ebba 0b04 	subs.w	fp, sl, r4
 8017542:	d00b      	beq.n	801755c <_vfiprintf_r+0xc0>
 8017544:	465b      	mov	r3, fp
 8017546:	4622      	mov	r2, r4
 8017548:	4629      	mov	r1, r5
 801754a:	4630      	mov	r0, r6
 801754c:	f7ff ff93 	bl	8017476 <__sfputs_r>
 8017550:	3001      	adds	r0, #1
 8017552:	f000 80aa 	beq.w	80176aa <_vfiprintf_r+0x20e>
 8017556:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017558:	445a      	add	r2, fp
 801755a:	9209      	str	r2, [sp, #36]	; 0x24
 801755c:	f89a 3000 	ldrb.w	r3, [sl]
 8017560:	2b00      	cmp	r3, #0
 8017562:	f000 80a2 	beq.w	80176aa <_vfiprintf_r+0x20e>
 8017566:	2300      	movs	r3, #0
 8017568:	f04f 32ff 	mov.w	r2, #4294967295
 801756c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017570:	f10a 0a01 	add.w	sl, sl, #1
 8017574:	9304      	str	r3, [sp, #16]
 8017576:	9307      	str	r3, [sp, #28]
 8017578:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801757c:	931a      	str	r3, [sp, #104]	; 0x68
 801757e:	4654      	mov	r4, sl
 8017580:	2205      	movs	r2, #5
 8017582:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017586:	4858      	ldr	r0, [pc, #352]	; (80176e8 <_vfiprintf_r+0x24c>)
 8017588:	f7e8 feaa 	bl	80002e0 <memchr>
 801758c:	9a04      	ldr	r2, [sp, #16]
 801758e:	b9d8      	cbnz	r0, 80175c8 <_vfiprintf_r+0x12c>
 8017590:	06d1      	lsls	r1, r2, #27
 8017592:	bf44      	itt	mi
 8017594:	2320      	movmi	r3, #32
 8017596:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801759a:	0713      	lsls	r3, r2, #28
 801759c:	bf44      	itt	mi
 801759e:	232b      	movmi	r3, #43	; 0x2b
 80175a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80175a4:	f89a 3000 	ldrb.w	r3, [sl]
 80175a8:	2b2a      	cmp	r3, #42	; 0x2a
 80175aa:	d015      	beq.n	80175d8 <_vfiprintf_r+0x13c>
 80175ac:	9a07      	ldr	r2, [sp, #28]
 80175ae:	4654      	mov	r4, sl
 80175b0:	2000      	movs	r0, #0
 80175b2:	f04f 0c0a 	mov.w	ip, #10
 80175b6:	4621      	mov	r1, r4
 80175b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80175bc:	3b30      	subs	r3, #48	; 0x30
 80175be:	2b09      	cmp	r3, #9
 80175c0:	d94e      	bls.n	8017660 <_vfiprintf_r+0x1c4>
 80175c2:	b1b0      	cbz	r0, 80175f2 <_vfiprintf_r+0x156>
 80175c4:	9207      	str	r2, [sp, #28]
 80175c6:	e014      	b.n	80175f2 <_vfiprintf_r+0x156>
 80175c8:	eba0 0308 	sub.w	r3, r0, r8
 80175cc:	fa09 f303 	lsl.w	r3, r9, r3
 80175d0:	4313      	orrs	r3, r2
 80175d2:	9304      	str	r3, [sp, #16]
 80175d4:	46a2      	mov	sl, r4
 80175d6:	e7d2      	b.n	801757e <_vfiprintf_r+0xe2>
 80175d8:	9b03      	ldr	r3, [sp, #12]
 80175da:	1d19      	adds	r1, r3, #4
 80175dc:	681b      	ldr	r3, [r3, #0]
 80175de:	9103      	str	r1, [sp, #12]
 80175e0:	2b00      	cmp	r3, #0
 80175e2:	bfbb      	ittet	lt
 80175e4:	425b      	neglt	r3, r3
 80175e6:	f042 0202 	orrlt.w	r2, r2, #2
 80175ea:	9307      	strge	r3, [sp, #28]
 80175ec:	9307      	strlt	r3, [sp, #28]
 80175ee:	bfb8      	it	lt
 80175f0:	9204      	strlt	r2, [sp, #16]
 80175f2:	7823      	ldrb	r3, [r4, #0]
 80175f4:	2b2e      	cmp	r3, #46	; 0x2e
 80175f6:	d10c      	bne.n	8017612 <_vfiprintf_r+0x176>
 80175f8:	7863      	ldrb	r3, [r4, #1]
 80175fa:	2b2a      	cmp	r3, #42	; 0x2a
 80175fc:	d135      	bne.n	801766a <_vfiprintf_r+0x1ce>
 80175fe:	9b03      	ldr	r3, [sp, #12]
 8017600:	1d1a      	adds	r2, r3, #4
 8017602:	681b      	ldr	r3, [r3, #0]
 8017604:	9203      	str	r2, [sp, #12]
 8017606:	2b00      	cmp	r3, #0
 8017608:	bfb8      	it	lt
 801760a:	f04f 33ff 	movlt.w	r3, #4294967295
 801760e:	3402      	adds	r4, #2
 8017610:	9305      	str	r3, [sp, #20]
 8017612:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80176f8 <_vfiprintf_r+0x25c>
 8017616:	7821      	ldrb	r1, [r4, #0]
 8017618:	2203      	movs	r2, #3
 801761a:	4650      	mov	r0, sl
 801761c:	f7e8 fe60 	bl	80002e0 <memchr>
 8017620:	b140      	cbz	r0, 8017634 <_vfiprintf_r+0x198>
 8017622:	2340      	movs	r3, #64	; 0x40
 8017624:	eba0 000a 	sub.w	r0, r0, sl
 8017628:	fa03 f000 	lsl.w	r0, r3, r0
 801762c:	9b04      	ldr	r3, [sp, #16]
 801762e:	4303      	orrs	r3, r0
 8017630:	3401      	adds	r4, #1
 8017632:	9304      	str	r3, [sp, #16]
 8017634:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017638:	482c      	ldr	r0, [pc, #176]	; (80176ec <_vfiprintf_r+0x250>)
 801763a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801763e:	2206      	movs	r2, #6
 8017640:	f7e8 fe4e 	bl	80002e0 <memchr>
 8017644:	2800      	cmp	r0, #0
 8017646:	d03f      	beq.n	80176c8 <_vfiprintf_r+0x22c>
 8017648:	4b29      	ldr	r3, [pc, #164]	; (80176f0 <_vfiprintf_r+0x254>)
 801764a:	bb1b      	cbnz	r3, 8017694 <_vfiprintf_r+0x1f8>
 801764c:	9b03      	ldr	r3, [sp, #12]
 801764e:	3307      	adds	r3, #7
 8017650:	f023 0307 	bic.w	r3, r3, #7
 8017654:	3308      	adds	r3, #8
 8017656:	9303      	str	r3, [sp, #12]
 8017658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801765a:	443b      	add	r3, r7
 801765c:	9309      	str	r3, [sp, #36]	; 0x24
 801765e:	e767      	b.n	8017530 <_vfiprintf_r+0x94>
 8017660:	fb0c 3202 	mla	r2, ip, r2, r3
 8017664:	460c      	mov	r4, r1
 8017666:	2001      	movs	r0, #1
 8017668:	e7a5      	b.n	80175b6 <_vfiprintf_r+0x11a>
 801766a:	2300      	movs	r3, #0
 801766c:	3401      	adds	r4, #1
 801766e:	9305      	str	r3, [sp, #20]
 8017670:	4619      	mov	r1, r3
 8017672:	f04f 0c0a 	mov.w	ip, #10
 8017676:	4620      	mov	r0, r4
 8017678:	f810 2b01 	ldrb.w	r2, [r0], #1
 801767c:	3a30      	subs	r2, #48	; 0x30
 801767e:	2a09      	cmp	r2, #9
 8017680:	d903      	bls.n	801768a <_vfiprintf_r+0x1ee>
 8017682:	2b00      	cmp	r3, #0
 8017684:	d0c5      	beq.n	8017612 <_vfiprintf_r+0x176>
 8017686:	9105      	str	r1, [sp, #20]
 8017688:	e7c3      	b.n	8017612 <_vfiprintf_r+0x176>
 801768a:	fb0c 2101 	mla	r1, ip, r1, r2
 801768e:	4604      	mov	r4, r0
 8017690:	2301      	movs	r3, #1
 8017692:	e7f0      	b.n	8017676 <_vfiprintf_r+0x1da>
 8017694:	ab03      	add	r3, sp, #12
 8017696:	9300      	str	r3, [sp, #0]
 8017698:	462a      	mov	r2, r5
 801769a:	4b16      	ldr	r3, [pc, #88]	; (80176f4 <_vfiprintf_r+0x258>)
 801769c:	a904      	add	r1, sp, #16
 801769e:	4630      	mov	r0, r6
 80176a0:	f3af 8000 	nop.w
 80176a4:	4607      	mov	r7, r0
 80176a6:	1c78      	adds	r0, r7, #1
 80176a8:	d1d6      	bne.n	8017658 <_vfiprintf_r+0x1bc>
 80176aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80176ac:	07d9      	lsls	r1, r3, #31
 80176ae:	d405      	bmi.n	80176bc <_vfiprintf_r+0x220>
 80176b0:	89ab      	ldrh	r3, [r5, #12]
 80176b2:	059a      	lsls	r2, r3, #22
 80176b4:	d402      	bmi.n	80176bc <_vfiprintf_r+0x220>
 80176b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80176b8:	f7ff fb70 	bl	8016d9c <__retarget_lock_release_recursive>
 80176bc:	89ab      	ldrh	r3, [r5, #12]
 80176be:	065b      	lsls	r3, r3, #25
 80176c0:	f53f af12 	bmi.w	80174e8 <_vfiprintf_r+0x4c>
 80176c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80176c6:	e711      	b.n	80174ec <_vfiprintf_r+0x50>
 80176c8:	ab03      	add	r3, sp, #12
 80176ca:	9300      	str	r3, [sp, #0]
 80176cc:	462a      	mov	r2, r5
 80176ce:	4b09      	ldr	r3, [pc, #36]	; (80176f4 <_vfiprintf_r+0x258>)
 80176d0:	a904      	add	r1, sp, #16
 80176d2:	4630      	mov	r0, r6
 80176d4:	f000 f880 	bl	80177d8 <_printf_i>
 80176d8:	e7e4      	b.n	80176a4 <_vfiprintf_r+0x208>
 80176da:	bf00      	nop
 80176dc:	0801ae14 	.word	0x0801ae14
 80176e0:	0801ae34 	.word	0x0801ae34
 80176e4:	0801adf4 	.word	0x0801adf4
 80176e8:	0801af06 	.word	0x0801af06
 80176ec:	0801af10 	.word	0x0801af10
 80176f0:	00000000 	.word	0x00000000
 80176f4:	08017477 	.word	0x08017477
 80176f8:	0801af0c 	.word	0x0801af0c

080176fc <_printf_common>:
 80176fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017700:	4616      	mov	r6, r2
 8017702:	4699      	mov	r9, r3
 8017704:	688a      	ldr	r2, [r1, #8]
 8017706:	690b      	ldr	r3, [r1, #16]
 8017708:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801770c:	4293      	cmp	r3, r2
 801770e:	bfb8      	it	lt
 8017710:	4613      	movlt	r3, r2
 8017712:	6033      	str	r3, [r6, #0]
 8017714:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017718:	4607      	mov	r7, r0
 801771a:	460c      	mov	r4, r1
 801771c:	b10a      	cbz	r2, 8017722 <_printf_common+0x26>
 801771e:	3301      	adds	r3, #1
 8017720:	6033      	str	r3, [r6, #0]
 8017722:	6823      	ldr	r3, [r4, #0]
 8017724:	0699      	lsls	r1, r3, #26
 8017726:	bf42      	ittt	mi
 8017728:	6833      	ldrmi	r3, [r6, #0]
 801772a:	3302      	addmi	r3, #2
 801772c:	6033      	strmi	r3, [r6, #0]
 801772e:	6825      	ldr	r5, [r4, #0]
 8017730:	f015 0506 	ands.w	r5, r5, #6
 8017734:	d106      	bne.n	8017744 <_printf_common+0x48>
 8017736:	f104 0a19 	add.w	sl, r4, #25
 801773a:	68e3      	ldr	r3, [r4, #12]
 801773c:	6832      	ldr	r2, [r6, #0]
 801773e:	1a9b      	subs	r3, r3, r2
 8017740:	42ab      	cmp	r3, r5
 8017742:	dc26      	bgt.n	8017792 <_printf_common+0x96>
 8017744:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017748:	1e13      	subs	r3, r2, #0
 801774a:	6822      	ldr	r2, [r4, #0]
 801774c:	bf18      	it	ne
 801774e:	2301      	movne	r3, #1
 8017750:	0692      	lsls	r2, r2, #26
 8017752:	d42b      	bmi.n	80177ac <_printf_common+0xb0>
 8017754:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017758:	4649      	mov	r1, r9
 801775a:	4638      	mov	r0, r7
 801775c:	47c0      	blx	r8
 801775e:	3001      	adds	r0, #1
 8017760:	d01e      	beq.n	80177a0 <_printf_common+0xa4>
 8017762:	6823      	ldr	r3, [r4, #0]
 8017764:	68e5      	ldr	r5, [r4, #12]
 8017766:	6832      	ldr	r2, [r6, #0]
 8017768:	f003 0306 	and.w	r3, r3, #6
 801776c:	2b04      	cmp	r3, #4
 801776e:	bf08      	it	eq
 8017770:	1aad      	subeq	r5, r5, r2
 8017772:	68a3      	ldr	r3, [r4, #8]
 8017774:	6922      	ldr	r2, [r4, #16]
 8017776:	bf0c      	ite	eq
 8017778:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801777c:	2500      	movne	r5, #0
 801777e:	4293      	cmp	r3, r2
 8017780:	bfc4      	itt	gt
 8017782:	1a9b      	subgt	r3, r3, r2
 8017784:	18ed      	addgt	r5, r5, r3
 8017786:	2600      	movs	r6, #0
 8017788:	341a      	adds	r4, #26
 801778a:	42b5      	cmp	r5, r6
 801778c:	d11a      	bne.n	80177c4 <_printf_common+0xc8>
 801778e:	2000      	movs	r0, #0
 8017790:	e008      	b.n	80177a4 <_printf_common+0xa8>
 8017792:	2301      	movs	r3, #1
 8017794:	4652      	mov	r2, sl
 8017796:	4649      	mov	r1, r9
 8017798:	4638      	mov	r0, r7
 801779a:	47c0      	blx	r8
 801779c:	3001      	adds	r0, #1
 801779e:	d103      	bne.n	80177a8 <_printf_common+0xac>
 80177a0:	f04f 30ff 	mov.w	r0, #4294967295
 80177a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80177a8:	3501      	adds	r5, #1
 80177aa:	e7c6      	b.n	801773a <_printf_common+0x3e>
 80177ac:	18e1      	adds	r1, r4, r3
 80177ae:	1c5a      	adds	r2, r3, #1
 80177b0:	2030      	movs	r0, #48	; 0x30
 80177b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80177b6:	4422      	add	r2, r4
 80177b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80177bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80177c0:	3302      	adds	r3, #2
 80177c2:	e7c7      	b.n	8017754 <_printf_common+0x58>
 80177c4:	2301      	movs	r3, #1
 80177c6:	4622      	mov	r2, r4
 80177c8:	4649      	mov	r1, r9
 80177ca:	4638      	mov	r0, r7
 80177cc:	47c0      	blx	r8
 80177ce:	3001      	adds	r0, #1
 80177d0:	d0e6      	beq.n	80177a0 <_printf_common+0xa4>
 80177d2:	3601      	adds	r6, #1
 80177d4:	e7d9      	b.n	801778a <_printf_common+0x8e>
	...

080177d8 <_printf_i>:
 80177d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80177dc:	7e0f      	ldrb	r7, [r1, #24]
 80177de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80177e0:	2f78      	cmp	r7, #120	; 0x78
 80177e2:	4691      	mov	r9, r2
 80177e4:	4680      	mov	r8, r0
 80177e6:	460c      	mov	r4, r1
 80177e8:	469a      	mov	sl, r3
 80177ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80177ee:	d807      	bhi.n	8017800 <_printf_i+0x28>
 80177f0:	2f62      	cmp	r7, #98	; 0x62
 80177f2:	d80a      	bhi.n	801780a <_printf_i+0x32>
 80177f4:	2f00      	cmp	r7, #0
 80177f6:	f000 80d8 	beq.w	80179aa <_printf_i+0x1d2>
 80177fa:	2f58      	cmp	r7, #88	; 0x58
 80177fc:	f000 80a3 	beq.w	8017946 <_printf_i+0x16e>
 8017800:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017804:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017808:	e03a      	b.n	8017880 <_printf_i+0xa8>
 801780a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801780e:	2b15      	cmp	r3, #21
 8017810:	d8f6      	bhi.n	8017800 <_printf_i+0x28>
 8017812:	a101      	add	r1, pc, #4	; (adr r1, 8017818 <_printf_i+0x40>)
 8017814:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017818:	08017871 	.word	0x08017871
 801781c:	08017885 	.word	0x08017885
 8017820:	08017801 	.word	0x08017801
 8017824:	08017801 	.word	0x08017801
 8017828:	08017801 	.word	0x08017801
 801782c:	08017801 	.word	0x08017801
 8017830:	08017885 	.word	0x08017885
 8017834:	08017801 	.word	0x08017801
 8017838:	08017801 	.word	0x08017801
 801783c:	08017801 	.word	0x08017801
 8017840:	08017801 	.word	0x08017801
 8017844:	08017991 	.word	0x08017991
 8017848:	080178b5 	.word	0x080178b5
 801784c:	08017973 	.word	0x08017973
 8017850:	08017801 	.word	0x08017801
 8017854:	08017801 	.word	0x08017801
 8017858:	080179b3 	.word	0x080179b3
 801785c:	08017801 	.word	0x08017801
 8017860:	080178b5 	.word	0x080178b5
 8017864:	08017801 	.word	0x08017801
 8017868:	08017801 	.word	0x08017801
 801786c:	0801797b 	.word	0x0801797b
 8017870:	682b      	ldr	r3, [r5, #0]
 8017872:	1d1a      	adds	r2, r3, #4
 8017874:	681b      	ldr	r3, [r3, #0]
 8017876:	602a      	str	r2, [r5, #0]
 8017878:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801787c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017880:	2301      	movs	r3, #1
 8017882:	e0a3      	b.n	80179cc <_printf_i+0x1f4>
 8017884:	6820      	ldr	r0, [r4, #0]
 8017886:	6829      	ldr	r1, [r5, #0]
 8017888:	0606      	lsls	r6, r0, #24
 801788a:	f101 0304 	add.w	r3, r1, #4
 801788e:	d50a      	bpl.n	80178a6 <_printf_i+0xce>
 8017890:	680e      	ldr	r6, [r1, #0]
 8017892:	602b      	str	r3, [r5, #0]
 8017894:	2e00      	cmp	r6, #0
 8017896:	da03      	bge.n	80178a0 <_printf_i+0xc8>
 8017898:	232d      	movs	r3, #45	; 0x2d
 801789a:	4276      	negs	r6, r6
 801789c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80178a0:	485e      	ldr	r0, [pc, #376]	; (8017a1c <_printf_i+0x244>)
 80178a2:	230a      	movs	r3, #10
 80178a4:	e019      	b.n	80178da <_printf_i+0x102>
 80178a6:	680e      	ldr	r6, [r1, #0]
 80178a8:	602b      	str	r3, [r5, #0]
 80178aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80178ae:	bf18      	it	ne
 80178b0:	b236      	sxthne	r6, r6
 80178b2:	e7ef      	b.n	8017894 <_printf_i+0xbc>
 80178b4:	682b      	ldr	r3, [r5, #0]
 80178b6:	6820      	ldr	r0, [r4, #0]
 80178b8:	1d19      	adds	r1, r3, #4
 80178ba:	6029      	str	r1, [r5, #0]
 80178bc:	0601      	lsls	r1, r0, #24
 80178be:	d501      	bpl.n	80178c4 <_printf_i+0xec>
 80178c0:	681e      	ldr	r6, [r3, #0]
 80178c2:	e002      	b.n	80178ca <_printf_i+0xf2>
 80178c4:	0646      	lsls	r6, r0, #25
 80178c6:	d5fb      	bpl.n	80178c0 <_printf_i+0xe8>
 80178c8:	881e      	ldrh	r6, [r3, #0]
 80178ca:	4854      	ldr	r0, [pc, #336]	; (8017a1c <_printf_i+0x244>)
 80178cc:	2f6f      	cmp	r7, #111	; 0x6f
 80178ce:	bf0c      	ite	eq
 80178d0:	2308      	moveq	r3, #8
 80178d2:	230a      	movne	r3, #10
 80178d4:	2100      	movs	r1, #0
 80178d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80178da:	6865      	ldr	r5, [r4, #4]
 80178dc:	60a5      	str	r5, [r4, #8]
 80178de:	2d00      	cmp	r5, #0
 80178e0:	bfa2      	ittt	ge
 80178e2:	6821      	ldrge	r1, [r4, #0]
 80178e4:	f021 0104 	bicge.w	r1, r1, #4
 80178e8:	6021      	strge	r1, [r4, #0]
 80178ea:	b90e      	cbnz	r6, 80178f0 <_printf_i+0x118>
 80178ec:	2d00      	cmp	r5, #0
 80178ee:	d04d      	beq.n	801798c <_printf_i+0x1b4>
 80178f0:	4615      	mov	r5, r2
 80178f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80178f6:	fb03 6711 	mls	r7, r3, r1, r6
 80178fa:	5dc7      	ldrb	r7, [r0, r7]
 80178fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017900:	4637      	mov	r7, r6
 8017902:	42bb      	cmp	r3, r7
 8017904:	460e      	mov	r6, r1
 8017906:	d9f4      	bls.n	80178f2 <_printf_i+0x11a>
 8017908:	2b08      	cmp	r3, #8
 801790a:	d10b      	bne.n	8017924 <_printf_i+0x14c>
 801790c:	6823      	ldr	r3, [r4, #0]
 801790e:	07de      	lsls	r6, r3, #31
 8017910:	d508      	bpl.n	8017924 <_printf_i+0x14c>
 8017912:	6923      	ldr	r3, [r4, #16]
 8017914:	6861      	ldr	r1, [r4, #4]
 8017916:	4299      	cmp	r1, r3
 8017918:	bfde      	ittt	le
 801791a:	2330      	movle	r3, #48	; 0x30
 801791c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017920:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017924:	1b52      	subs	r2, r2, r5
 8017926:	6122      	str	r2, [r4, #16]
 8017928:	f8cd a000 	str.w	sl, [sp]
 801792c:	464b      	mov	r3, r9
 801792e:	aa03      	add	r2, sp, #12
 8017930:	4621      	mov	r1, r4
 8017932:	4640      	mov	r0, r8
 8017934:	f7ff fee2 	bl	80176fc <_printf_common>
 8017938:	3001      	adds	r0, #1
 801793a:	d14c      	bne.n	80179d6 <_printf_i+0x1fe>
 801793c:	f04f 30ff 	mov.w	r0, #4294967295
 8017940:	b004      	add	sp, #16
 8017942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017946:	4835      	ldr	r0, [pc, #212]	; (8017a1c <_printf_i+0x244>)
 8017948:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801794c:	6829      	ldr	r1, [r5, #0]
 801794e:	6823      	ldr	r3, [r4, #0]
 8017950:	f851 6b04 	ldr.w	r6, [r1], #4
 8017954:	6029      	str	r1, [r5, #0]
 8017956:	061d      	lsls	r5, r3, #24
 8017958:	d514      	bpl.n	8017984 <_printf_i+0x1ac>
 801795a:	07df      	lsls	r7, r3, #31
 801795c:	bf44      	itt	mi
 801795e:	f043 0320 	orrmi.w	r3, r3, #32
 8017962:	6023      	strmi	r3, [r4, #0]
 8017964:	b91e      	cbnz	r6, 801796e <_printf_i+0x196>
 8017966:	6823      	ldr	r3, [r4, #0]
 8017968:	f023 0320 	bic.w	r3, r3, #32
 801796c:	6023      	str	r3, [r4, #0]
 801796e:	2310      	movs	r3, #16
 8017970:	e7b0      	b.n	80178d4 <_printf_i+0xfc>
 8017972:	6823      	ldr	r3, [r4, #0]
 8017974:	f043 0320 	orr.w	r3, r3, #32
 8017978:	6023      	str	r3, [r4, #0]
 801797a:	2378      	movs	r3, #120	; 0x78
 801797c:	4828      	ldr	r0, [pc, #160]	; (8017a20 <_printf_i+0x248>)
 801797e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017982:	e7e3      	b.n	801794c <_printf_i+0x174>
 8017984:	0659      	lsls	r1, r3, #25
 8017986:	bf48      	it	mi
 8017988:	b2b6      	uxthmi	r6, r6
 801798a:	e7e6      	b.n	801795a <_printf_i+0x182>
 801798c:	4615      	mov	r5, r2
 801798e:	e7bb      	b.n	8017908 <_printf_i+0x130>
 8017990:	682b      	ldr	r3, [r5, #0]
 8017992:	6826      	ldr	r6, [r4, #0]
 8017994:	6961      	ldr	r1, [r4, #20]
 8017996:	1d18      	adds	r0, r3, #4
 8017998:	6028      	str	r0, [r5, #0]
 801799a:	0635      	lsls	r5, r6, #24
 801799c:	681b      	ldr	r3, [r3, #0]
 801799e:	d501      	bpl.n	80179a4 <_printf_i+0x1cc>
 80179a0:	6019      	str	r1, [r3, #0]
 80179a2:	e002      	b.n	80179aa <_printf_i+0x1d2>
 80179a4:	0670      	lsls	r0, r6, #25
 80179a6:	d5fb      	bpl.n	80179a0 <_printf_i+0x1c8>
 80179a8:	8019      	strh	r1, [r3, #0]
 80179aa:	2300      	movs	r3, #0
 80179ac:	6123      	str	r3, [r4, #16]
 80179ae:	4615      	mov	r5, r2
 80179b0:	e7ba      	b.n	8017928 <_printf_i+0x150>
 80179b2:	682b      	ldr	r3, [r5, #0]
 80179b4:	1d1a      	adds	r2, r3, #4
 80179b6:	602a      	str	r2, [r5, #0]
 80179b8:	681d      	ldr	r5, [r3, #0]
 80179ba:	6862      	ldr	r2, [r4, #4]
 80179bc:	2100      	movs	r1, #0
 80179be:	4628      	mov	r0, r5
 80179c0:	f7e8 fc8e 	bl	80002e0 <memchr>
 80179c4:	b108      	cbz	r0, 80179ca <_printf_i+0x1f2>
 80179c6:	1b40      	subs	r0, r0, r5
 80179c8:	6060      	str	r0, [r4, #4]
 80179ca:	6863      	ldr	r3, [r4, #4]
 80179cc:	6123      	str	r3, [r4, #16]
 80179ce:	2300      	movs	r3, #0
 80179d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80179d4:	e7a8      	b.n	8017928 <_printf_i+0x150>
 80179d6:	6923      	ldr	r3, [r4, #16]
 80179d8:	462a      	mov	r2, r5
 80179da:	4649      	mov	r1, r9
 80179dc:	4640      	mov	r0, r8
 80179de:	47d0      	blx	sl
 80179e0:	3001      	adds	r0, #1
 80179e2:	d0ab      	beq.n	801793c <_printf_i+0x164>
 80179e4:	6823      	ldr	r3, [r4, #0]
 80179e6:	079b      	lsls	r3, r3, #30
 80179e8:	d413      	bmi.n	8017a12 <_printf_i+0x23a>
 80179ea:	68e0      	ldr	r0, [r4, #12]
 80179ec:	9b03      	ldr	r3, [sp, #12]
 80179ee:	4298      	cmp	r0, r3
 80179f0:	bfb8      	it	lt
 80179f2:	4618      	movlt	r0, r3
 80179f4:	e7a4      	b.n	8017940 <_printf_i+0x168>
 80179f6:	2301      	movs	r3, #1
 80179f8:	4632      	mov	r2, r6
 80179fa:	4649      	mov	r1, r9
 80179fc:	4640      	mov	r0, r8
 80179fe:	47d0      	blx	sl
 8017a00:	3001      	adds	r0, #1
 8017a02:	d09b      	beq.n	801793c <_printf_i+0x164>
 8017a04:	3501      	adds	r5, #1
 8017a06:	68e3      	ldr	r3, [r4, #12]
 8017a08:	9903      	ldr	r1, [sp, #12]
 8017a0a:	1a5b      	subs	r3, r3, r1
 8017a0c:	42ab      	cmp	r3, r5
 8017a0e:	dcf2      	bgt.n	80179f6 <_printf_i+0x21e>
 8017a10:	e7eb      	b.n	80179ea <_printf_i+0x212>
 8017a12:	2500      	movs	r5, #0
 8017a14:	f104 0619 	add.w	r6, r4, #25
 8017a18:	e7f5      	b.n	8017a06 <_printf_i+0x22e>
 8017a1a:	bf00      	nop
 8017a1c:	0801af17 	.word	0x0801af17
 8017a20:	0801af28 	.word	0x0801af28

08017a24 <_read_r>:
 8017a24:	b538      	push	{r3, r4, r5, lr}
 8017a26:	4d07      	ldr	r5, [pc, #28]	; (8017a44 <_read_r+0x20>)
 8017a28:	4604      	mov	r4, r0
 8017a2a:	4608      	mov	r0, r1
 8017a2c:	4611      	mov	r1, r2
 8017a2e:	2200      	movs	r2, #0
 8017a30:	602a      	str	r2, [r5, #0]
 8017a32:	461a      	mov	r2, r3
 8017a34:	f7e9 fa98 	bl	8000f68 <_read>
 8017a38:	1c43      	adds	r3, r0, #1
 8017a3a:	d102      	bne.n	8017a42 <_read_r+0x1e>
 8017a3c:	682b      	ldr	r3, [r5, #0]
 8017a3e:	b103      	cbz	r3, 8017a42 <_read_r+0x1e>
 8017a40:	6023      	str	r3, [r4, #0]
 8017a42:	bd38      	pop	{r3, r4, r5, pc}
 8017a44:	240155a8 	.word	0x240155a8

08017a48 <__swbuf_r>:
 8017a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a4a:	460e      	mov	r6, r1
 8017a4c:	4614      	mov	r4, r2
 8017a4e:	4605      	mov	r5, r0
 8017a50:	b118      	cbz	r0, 8017a5a <__swbuf_r+0x12>
 8017a52:	6983      	ldr	r3, [r0, #24]
 8017a54:	b90b      	cbnz	r3, 8017a5a <__swbuf_r+0x12>
 8017a56:	f7ff f8dd 	bl	8016c14 <__sinit>
 8017a5a:	4b21      	ldr	r3, [pc, #132]	; (8017ae0 <__swbuf_r+0x98>)
 8017a5c:	429c      	cmp	r4, r3
 8017a5e:	d12b      	bne.n	8017ab8 <__swbuf_r+0x70>
 8017a60:	686c      	ldr	r4, [r5, #4]
 8017a62:	69a3      	ldr	r3, [r4, #24]
 8017a64:	60a3      	str	r3, [r4, #8]
 8017a66:	89a3      	ldrh	r3, [r4, #12]
 8017a68:	071a      	lsls	r2, r3, #28
 8017a6a:	d52f      	bpl.n	8017acc <__swbuf_r+0x84>
 8017a6c:	6923      	ldr	r3, [r4, #16]
 8017a6e:	b36b      	cbz	r3, 8017acc <__swbuf_r+0x84>
 8017a70:	6923      	ldr	r3, [r4, #16]
 8017a72:	6820      	ldr	r0, [r4, #0]
 8017a74:	1ac0      	subs	r0, r0, r3
 8017a76:	6963      	ldr	r3, [r4, #20]
 8017a78:	b2f6      	uxtb	r6, r6
 8017a7a:	4283      	cmp	r3, r0
 8017a7c:	4637      	mov	r7, r6
 8017a7e:	dc04      	bgt.n	8017a8a <__swbuf_r+0x42>
 8017a80:	4621      	mov	r1, r4
 8017a82:	4628      	mov	r0, r5
 8017a84:	f7ff fc20 	bl	80172c8 <_fflush_r>
 8017a88:	bb30      	cbnz	r0, 8017ad8 <__swbuf_r+0x90>
 8017a8a:	68a3      	ldr	r3, [r4, #8]
 8017a8c:	3b01      	subs	r3, #1
 8017a8e:	60a3      	str	r3, [r4, #8]
 8017a90:	6823      	ldr	r3, [r4, #0]
 8017a92:	1c5a      	adds	r2, r3, #1
 8017a94:	6022      	str	r2, [r4, #0]
 8017a96:	701e      	strb	r6, [r3, #0]
 8017a98:	6963      	ldr	r3, [r4, #20]
 8017a9a:	3001      	adds	r0, #1
 8017a9c:	4283      	cmp	r3, r0
 8017a9e:	d004      	beq.n	8017aaa <__swbuf_r+0x62>
 8017aa0:	89a3      	ldrh	r3, [r4, #12]
 8017aa2:	07db      	lsls	r3, r3, #31
 8017aa4:	d506      	bpl.n	8017ab4 <__swbuf_r+0x6c>
 8017aa6:	2e0a      	cmp	r6, #10
 8017aa8:	d104      	bne.n	8017ab4 <__swbuf_r+0x6c>
 8017aaa:	4621      	mov	r1, r4
 8017aac:	4628      	mov	r0, r5
 8017aae:	f7ff fc0b 	bl	80172c8 <_fflush_r>
 8017ab2:	b988      	cbnz	r0, 8017ad8 <__swbuf_r+0x90>
 8017ab4:	4638      	mov	r0, r7
 8017ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017ab8:	4b0a      	ldr	r3, [pc, #40]	; (8017ae4 <__swbuf_r+0x9c>)
 8017aba:	429c      	cmp	r4, r3
 8017abc:	d101      	bne.n	8017ac2 <__swbuf_r+0x7a>
 8017abe:	68ac      	ldr	r4, [r5, #8]
 8017ac0:	e7cf      	b.n	8017a62 <__swbuf_r+0x1a>
 8017ac2:	4b09      	ldr	r3, [pc, #36]	; (8017ae8 <__swbuf_r+0xa0>)
 8017ac4:	429c      	cmp	r4, r3
 8017ac6:	bf08      	it	eq
 8017ac8:	68ec      	ldreq	r4, [r5, #12]
 8017aca:	e7ca      	b.n	8017a62 <__swbuf_r+0x1a>
 8017acc:	4621      	mov	r1, r4
 8017ace:	4628      	mov	r0, r5
 8017ad0:	f000 f80c 	bl	8017aec <__swsetup_r>
 8017ad4:	2800      	cmp	r0, #0
 8017ad6:	d0cb      	beq.n	8017a70 <__swbuf_r+0x28>
 8017ad8:	f04f 37ff 	mov.w	r7, #4294967295
 8017adc:	e7ea      	b.n	8017ab4 <__swbuf_r+0x6c>
 8017ade:	bf00      	nop
 8017ae0:	0801ae14 	.word	0x0801ae14
 8017ae4:	0801ae34 	.word	0x0801ae34
 8017ae8:	0801adf4 	.word	0x0801adf4

08017aec <__swsetup_r>:
 8017aec:	4b32      	ldr	r3, [pc, #200]	; (8017bb8 <__swsetup_r+0xcc>)
 8017aee:	b570      	push	{r4, r5, r6, lr}
 8017af0:	681d      	ldr	r5, [r3, #0]
 8017af2:	4606      	mov	r6, r0
 8017af4:	460c      	mov	r4, r1
 8017af6:	b125      	cbz	r5, 8017b02 <__swsetup_r+0x16>
 8017af8:	69ab      	ldr	r3, [r5, #24]
 8017afa:	b913      	cbnz	r3, 8017b02 <__swsetup_r+0x16>
 8017afc:	4628      	mov	r0, r5
 8017afe:	f7ff f889 	bl	8016c14 <__sinit>
 8017b02:	4b2e      	ldr	r3, [pc, #184]	; (8017bbc <__swsetup_r+0xd0>)
 8017b04:	429c      	cmp	r4, r3
 8017b06:	d10f      	bne.n	8017b28 <__swsetup_r+0x3c>
 8017b08:	686c      	ldr	r4, [r5, #4]
 8017b0a:	89a3      	ldrh	r3, [r4, #12]
 8017b0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017b10:	0719      	lsls	r1, r3, #28
 8017b12:	d42c      	bmi.n	8017b6e <__swsetup_r+0x82>
 8017b14:	06dd      	lsls	r5, r3, #27
 8017b16:	d411      	bmi.n	8017b3c <__swsetup_r+0x50>
 8017b18:	2309      	movs	r3, #9
 8017b1a:	6033      	str	r3, [r6, #0]
 8017b1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017b20:	81a3      	strh	r3, [r4, #12]
 8017b22:	f04f 30ff 	mov.w	r0, #4294967295
 8017b26:	e03e      	b.n	8017ba6 <__swsetup_r+0xba>
 8017b28:	4b25      	ldr	r3, [pc, #148]	; (8017bc0 <__swsetup_r+0xd4>)
 8017b2a:	429c      	cmp	r4, r3
 8017b2c:	d101      	bne.n	8017b32 <__swsetup_r+0x46>
 8017b2e:	68ac      	ldr	r4, [r5, #8]
 8017b30:	e7eb      	b.n	8017b0a <__swsetup_r+0x1e>
 8017b32:	4b24      	ldr	r3, [pc, #144]	; (8017bc4 <__swsetup_r+0xd8>)
 8017b34:	429c      	cmp	r4, r3
 8017b36:	bf08      	it	eq
 8017b38:	68ec      	ldreq	r4, [r5, #12]
 8017b3a:	e7e6      	b.n	8017b0a <__swsetup_r+0x1e>
 8017b3c:	0758      	lsls	r0, r3, #29
 8017b3e:	d512      	bpl.n	8017b66 <__swsetup_r+0x7a>
 8017b40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017b42:	b141      	cbz	r1, 8017b56 <__swsetup_r+0x6a>
 8017b44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017b48:	4299      	cmp	r1, r3
 8017b4a:	d002      	beq.n	8017b52 <__swsetup_r+0x66>
 8017b4c:	4630      	mov	r0, r6
 8017b4e:	f7ff fc2f 	bl	80173b0 <_free_r>
 8017b52:	2300      	movs	r3, #0
 8017b54:	6363      	str	r3, [r4, #52]	; 0x34
 8017b56:	89a3      	ldrh	r3, [r4, #12]
 8017b58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017b5c:	81a3      	strh	r3, [r4, #12]
 8017b5e:	2300      	movs	r3, #0
 8017b60:	6063      	str	r3, [r4, #4]
 8017b62:	6923      	ldr	r3, [r4, #16]
 8017b64:	6023      	str	r3, [r4, #0]
 8017b66:	89a3      	ldrh	r3, [r4, #12]
 8017b68:	f043 0308 	orr.w	r3, r3, #8
 8017b6c:	81a3      	strh	r3, [r4, #12]
 8017b6e:	6923      	ldr	r3, [r4, #16]
 8017b70:	b94b      	cbnz	r3, 8017b86 <__swsetup_r+0x9a>
 8017b72:	89a3      	ldrh	r3, [r4, #12]
 8017b74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017b78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017b7c:	d003      	beq.n	8017b86 <__swsetup_r+0x9a>
 8017b7e:	4621      	mov	r1, r4
 8017b80:	4630      	mov	r0, r6
 8017b82:	f000 f84d 	bl	8017c20 <__smakebuf_r>
 8017b86:	89a0      	ldrh	r0, [r4, #12]
 8017b88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017b8c:	f010 0301 	ands.w	r3, r0, #1
 8017b90:	d00a      	beq.n	8017ba8 <__swsetup_r+0xbc>
 8017b92:	2300      	movs	r3, #0
 8017b94:	60a3      	str	r3, [r4, #8]
 8017b96:	6963      	ldr	r3, [r4, #20]
 8017b98:	425b      	negs	r3, r3
 8017b9a:	61a3      	str	r3, [r4, #24]
 8017b9c:	6923      	ldr	r3, [r4, #16]
 8017b9e:	b943      	cbnz	r3, 8017bb2 <__swsetup_r+0xc6>
 8017ba0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017ba4:	d1ba      	bne.n	8017b1c <__swsetup_r+0x30>
 8017ba6:	bd70      	pop	{r4, r5, r6, pc}
 8017ba8:	0781      	lsls	r1, r0, #30
 8017baa:	bf58      	it	pl
 8017bac:	6963      	ldrpl	r3, [r4, #20]
 8017bae:	60a3      	str	r3, [r4, #8]
 8017bb0:	e7f4      	b.n	8017b9c <__swsetup_r+0xb0>
 8017bb2:	2000      	movs	r0, #0
 8017bb4:	e7f7      	b.n	8017ba6 <__swsetup_r+0xba>
 8017bb6:	bf00      	nop
 8017bb8:	24000034 	.word	0x24000034
 8017bbc:	0801ae14 	.word	0x0801ae14
 8017bc0:	0801ae34 	.word	0x0801ae34
 8017bc4:	0801adf4 	.word	0x0801adf4

08017bc8 <abort>:
 8017bc8:	b508      	push	{r3, lr}
 8017bca:	2006      	movs	r0, #6
 8017bcc:	f000 f890 	bl	8017cf0 <raise>
 8017bd0:	2001      	movs	r0, #1
 8017bd2:	f7e9 f9bf 	bl	8000f54 <_exit>

08017bd6 <__swhatbuf_r>:
 8017bd6:	b570      	push	{r4, r5, r6, lr}
 8017bd8:	460e      	mov	r6, r1
 8017bda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017bde:	2900      	cmp	r1, #0
 8017be0:	b096      	sub	sp, #88	; 0x58
 8017be2:	4614      	mov	r4, r2
 8017be4:	461d      	mov	r5, r3
 8017be6:	da08      	bge.n	8017bfa <__swhatbuf_r+0x24>
 8017be8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8017bec:	2200      	movs	r2, #0
 8017bee:	602a      	str	r2, [r5, #0]
 8017bf0:	061a      	lsls	r2, r3, #24
 8017bf2:	d410      	bmi.n	8017c16 <__swhatbuf_r+0x40>
 8017bf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017bf8:	e00e      	b.n	8017c18 <__swhatbuf_r+0x42>
 8017bfa:	466a      	mov	r2, sp
 8017bfc:	f000 f894 	bl	8017d28 <_fstat_r>
 8017c00:	2800      	cmp	r0, #0
 8017c02:	dbf1      	blt.n	8017be8 <__swhatbuf_r+0x12>
 8017c04:	9a01      	ldr	r2, [sp, #4]
 8017c06:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017c0a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017c0e:	425a      	negs	r2, r3
 8017c10:	415a      	adcs	r2, r3
 8017c12:	602a      	str	r2, [r5, #0]
 8017c14:	e7ee      	b.n	8017bf4 <__swhatbuf_r+0x1e>
 8017c16:	2340      	movs	r3, #64	; 0x40
 8017c18:	2000      	movs	r0, #0
 8017c1a:	6023      	str	r3, [r4, #0]
 8017c1c:	b016      	add	sp, #88	; 0x58
 8017c1e:	bd70      	pop	{r4, r5, r6, pc}

08017c20 <__smakebuf_r>:
 8017c20:	898b      	ldrh	r3, [r1, #12]
 8017c22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017c24:	079d      	lsls	r5, r3, #30
 8017c26:	4606      	mov	r6, r0
 8017c28:	460c      	mov	r4, r1
 8017c2a:	d507      	bpl.n	8017c3c <__smakebuf_r+0x1c>
 8017c2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017c30:	6023      	str	r3, [r4, #0]
 8017c32:	6123      	str	r3, [r4, #16]
 8017c34:	2301      	movs	r3, #1
 8017c36:	6163      	str	r3, [r4, #20]
 8017c38:	b002      	add	sp, #8
 8017c3a:	bd70      	pop	{r4, r5, r6, pc}
 8017c3c:	ab01      	add	r3, sp, #4
 8017c3e:	466a      	mov	r2, sp
 8017c40:	f7ff ffc9 	bl	8017bd6 <__swhatbuf_r>
 8017c44:	9900      	ldr	r1, [sp, #0]
 8017c46:	4605      	mov	r5, r0
 8017c48:	4630      	mov	r0, r6
 8017c4a:	f7ff f8ef 	bl	8016e2c <_malloc_r>
 8017c4e:	b948      	cbnz	r0, 8017c64 <__smakebuf_r+0x44>
 8017c50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017c54:	059a      	lsls	r2, r3, #22
 8017c56:	d4ef      	bmi.n	8017c38 <__smakebuf_r+0x18>
 8017c58:	f023 0303 	bic.w	r3, r3, #3
 8017c5c:	f043 0302 	orr.w	r3, r3, #2
 8017c60:	81a3      	strh	r3, [r4, #12]
 8017c62:	e7e3      	b.n	8017c2c <__smakebuf_r+0xc>
 8017c64:	4b0d      	ldr	r3, [pc, #52]	; (8017c9c <__smakebuf_r+0x7c>)
 8017c66:	62b3      	str	r3, [r6, #40]	; 0x28
 8017c68:	89a3      	ldrh	r3, [r4, #12]
 8017c6a:	6020      	str	r0, [r4, #0]
 8017c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017c70:	81a3      	strh	r3, [r4, #12]
 8017c72:	9b00      	ldr	r3, [sp, #0]
 8017c74:	6163      	str	r3, [r4, #20]
 8017c76:	9b01      	ldr	r3, [sp, #4]
 8017c78:	6120      	str	r0, [r4, #16]
 8017c7a:	b15b      	cbz	r3, 8017c94 <__smakebuf_r+0x74>
 8017c7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017c80:	4630      	mov	r0, r6
 8017c82:	f000 f863 	bl	8017d4c <_isatty_r>
 8017c86:	b128      	cbz	r0, 8017c94 <__smakebuf_r+0x74>
 8017c88:	89a3      	ldrh	r3, [r4, #12]
 8017c8a:	f023 0303 	bic.w	r3, r3, #3
 8017c8e:	f043 0301 	orr.w	r3, r3, #1
 8017c92:	81a3      	strh	r3, [r4, #12]
 8017c94:	89a0      	ldrh	r0, [r4, #12]
 8017c96:	4305      	orrs	r5, r0
 8017c98:	81a5      	strh	r5, [r4, #12]
 8017c9a:	e7cd      	b.n	8017c38 <__smakebuf_r+0x18>
 8017c9c:	08016bad 	.word	0x08016bad

08017ca0 <_raise_r>:
 8017ca0:	291f      	cmp	r1, #31
 8017ca2:	b538      	push	{r3, r4, r5, lr}
 8017ca4:	4604      	mov	r4, r0
 8017ca6:	460d      	mov	r5, r1
 8017ca8:	d904      	bls.n	8017cb4 <_raise_r+0x14>
 8017caa:	2316      	movs	r3, #22
 8017cac:	6003      	str	r3, [r0, #0]
 8017cae:	f04f 30ff 	mov.w	r0, #4294967295
 8017cb2:	bd38      	pop	{r3, r4, r5, pc}
 8017cb4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017cb6:	b112      	cbz	r2, 8017cbe <_raise_r+0x1e>
 8017cb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017cbc:	b94b      	cbnz	r3, 8017cd2 <_raise_r+0x32>
 8017cbe:	4620      	mov	r0, r4
 8017cc0:	f000 f830 	bl	8017d24 <_getpid_r>
 8017cc4:	462a      	mov	r2, r5
 8017cc6:	4601      	mov	r1, r0
 8017cc8:	4620      	mov	r0, r4
 8017cca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017cce:	f000 b817 	b.w	8017d00 <_kill_r>
 8017cd2:	2b01      	cmp	r3, #1
 8017cd4:	d00a      	beq.n	8017cec <_raise_r+0x4c>
 8017cd6:	1c59      	adds	r1, r3, #1
 8017cd8:	d103      	bne.n	8017ce2 <_raise_r+0x42>
 8017cda:	2316      	movs	r3, #22
 8017cdc:	6003      	str	r3, [r0, #0]
 8017cde:	2001      	movs	r0, #1
 8017ce0:	e7e7      	b.n	8017cb2 <_raise_r+0x12>
 8017ce2:	2400      	movs	r4, #0
 8017ce4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017ce8:	4628      	mov	r0, r5
 8017cea:	4798      	blx	r3
 8017cec:	2000      	movs	r0, #0
 8017cee:	e7e0      	b.n	8017cb2 <_raise_r+0x12>

08017cf0 <raise>:
 8017cf0:	4b02      	ldr	r3, [pc, #8]	; (8017cfc <raise+0xc>)
 8017cf2:	4601      	mov	r1, r0
 8017cf4:	6818      	ldr	r0, [r3, #0]
 8017cf6:	f7ff bfd3 	b.w	8017ca0 <_raise_r>
 8017cfa:	bf00      	nop
 8017cfc:	24000034 	.word	0x24000034

08017d00 <_kill_r>:
 8017d00:	b538      	push	{r3, r4, r5, lr}
 8017d02:	4d07      	ldr	r5, [pc, #28]	; (8017d20 <_kill_r+0x20>)
 8017d04:	2300      	movs	r3, #0
 8017d06:	4604      	mov	r4, r0
 8017d08:	4608      	mov	r0, r1
 8017d0a:	4611      	mov	r1, r2
 8017d0c:	602b      	str	r3, [r5, #0]
 8017d0e:	f7e9 f90f 	bl	8000f30 <_kill>
 8017d12:	1c43      	adds	r3, r0, #1
 8017d14:	d102      	bne.n	8017d1c <_kill_r+0x1c>
 8017d16:	682b      	ldr	r3, [r5, #0]
 8017d18:	b103      	cbz	r3, 8017d1c <_kill_r+0x1c>
 8017d1a:	6023      	str	r3, [r4, #0]
 8017d1c:	bd38      	pop	{r3, r4, r5, pc}
 8017d1e:	bf00      	nop
 8017d20:	240155a8 	.word	0x240155a8

08017d24 <_getpid_r>:
 8017d24:	f7e9 b8fc 	b.w	8000f20 <_getpid>

08017d28 <_fstat_r>:
 8017d28:	b538      	push	{r3, r4, r5, lr}
 8017d2a:	4d07      	ldr	r5, [pc, #28]	; (8017d48 <_fstat_r+0x20>)
 8017d2c:	2300      	movs	r3, #0
 8017d2e:	4604      	mov	r4, r0
 8017d30:	4608      	mov	r0, r1
 8017d32:	4611      	mov	r1, r2
 8017d34:	602b      	str	r3, [r5, #0]
 8017d36:	f7e9 f95c 	bl	8000ff2 <_fstat>
 8017d3a:	1c43      	adds	r3, r0, #1
 8017d3c:	d102      	bne.n	8017d44 <_fstat_r+0x1c>
 8017d3e:	682b      	ldr	r3, [r5, #0]
 8017d40:	b103      	cbz	r3, 8017d44 <_fstat_r+0x1c>
 8017d42:	6023      	str	r3, [r4, #0]
 8017d44:	bd38      	pop	{r3, r4, r5, pc}
 8017d46:	bf00      	nop
 8017d48:	240155a8 	.word	0x240155a8

08017d4c <_isatty_r>:
 8017d4c:	b538      	push	{r3, r4, r5, lr}
 8017d4e:	4d06      	ldr	r5, [pc, #24]	; (8017d68 <_isatty_r+0x1c>)
 8017d50:	2300      	movs	r3, #0
 8017d52:	4604      	mov	r4, r0
 8017d54:	4608      	mov	r0, r1
 8017d56:	602b      	str	r3, [r5, #0]
 8017d58:	f7e9 f95b 	bl	8001012 <_isatty>
 8017d5c:	1c43      	adds	r3, r0, #1
 8017d5e:	d102      	bne.n	8017d66 <_isatty_r+0x1a>
 8017d60:	682b      	ldr	r3, [r5, #0]
 8017d62:	b103      	cbz	r3, 8017d66 <_isatty_r+0x1a>
 8017d64:	6023      	str	r3, [r4, #0]
 8017d66:	bd38      	pop	{r3, r4, r5, pc}
 8017d68:	240155a8 	.word	0x240155a8

08017d6c <_init>:
 8017d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d6e:	bf00      	nop
 8017d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017d72:	bc08      	pop	{r3}
 8017d74:	469e      	mov	lr, r3
 8017d76:	4770      	bx	lr

08017d78 <_fini>:
 8017d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d7a:	bf00      	nop
 8017d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017d7e:	bc08      	pop	{r3}
 8017d80:	469e      	mov	lr, r3
 8017d82:	4770      	bx	lr
