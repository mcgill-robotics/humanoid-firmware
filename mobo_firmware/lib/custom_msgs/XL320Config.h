// Generated by gencpp from file custom_msgs/XL320Config.msg
// DO NOT EDIT!


#ifndef CUSTOM_MSGS_MESSAGE_XL320CONFIG_H
#define CUSTOM_MSGS_MESSAGE_XL320CONFIG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace custom_msgs
{
template <class ContainerAllocator>
struct XL320Config_
{
  typedef XL320Config_<ContainerAllocator> Type;

  XL320Config_()
    : servo_names()
    , cw_angle_limits()
    , ccw_angle_limits()
    , max_torques()
    , d_gains()
    , i_gains()
    , p_gains()
    , control_loop_speed(0)  {
    }
  XL320Config_(const ContainerAllocator& _alloc)
    : servo_names(_alloc)
    , cw_angle_limits(_alloc)
    , ccw_angle_limits(_alloc)
    , max_torques(_alloc)
    , d_gains(_alloc)
    , i_gains(_alloc)
    , p_gains(_alloc)
    , control_loop_speed(0)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _servo_names_type;
  _servo_names_type servo_names;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _cw_angle_limits_type;
  _cw_angle_limits_type cw_angle_limits;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _ccw_angle_limits_type;
  _ccw_angle_limits_type ccw_angle_limits;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _max_torques_type;
  _max_torques_type max_torques;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _d_gains_type;
  _d_gains_type d_gains;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _i_gains_type;
  _i_gains_type i_gains;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _p_gains_type;
  _p_gains_type p_gains;

   typedef int32_t _control_loop_speed_type;
  _control_loop_speed_type control_loop_speed;





  typedef boost::shared_ptr< ::custom_msgs::XL320Config_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_msgs::XL320Config_<ContainerAllocator> const> ConstPtr;

}; // struct XL320Config_

typedef ::custom_msgs::XL320Config_<std::allocator<void> > XL320Config;

typedef boost::shared_ptr< ::custom_msgs::XL320Config > XL320ConfigPtr;
typedef boost::shared_ptr< ::custom_msgs::XL320Config const> XL320ConfigConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_msgs::XL320Config_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_msgs::XL320Config_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::custom_msgs::XL320Config_<ContainerAllocator1> & lhs, const ::custom_msgs::XL320Config_<ContainerAllocator2> & rhs)
{
  return lhs.servo_names == rhs.servo_names &&
    lhs.cw_angle_limits == rhs.cw_angle_limits &&
    lhs.ccw_angle_limits == rhs.ccw_angle_limits &&
    lhs.max_torques == rhs.max_torques &&
    lhs.d_gains == rhs.d_gains &&
    lhs.i_gains == rhs.i_gains &&
    lhs.p_gains == rhs.p_gains &&
    lhs.control_loop_speed == rhs.control_loop_speed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::custom_msgs::XL320Config_<ContainerAllocator1> & lhs, const ::custom_msgs::XL320Config_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace custom_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::custom_msgs::XL320Config_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msgs::XL320Config_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msgs::XL320Config_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msgs::XL320Config_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msgs::XL320Config_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msgs::XL320Config_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_msgs::XL320Config_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4a03959b9669f1f29baae3b58d9f4dc2";
  }

  static const char* value(const ::custom_msgs::XL320Config_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4a03959b9669f1f2ULL;
  static const uint64_t static_value2 = 0x9baae3b58d9f4dc2ULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_msgs::XL320Config_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_msgs/XL320Config";
  }

  static const char* value(const ::custom_msgs::XL320Config_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_msgs::XL320Config_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] servo_names\n"
"float32[] cw_angle_limits\n"
"float32[] ccw_angle_limits\n"
"float32[] max_torques\n"
"float32[] d_gains\n"
"float32[] i_gains\n"
"float32[] p_gains\n"
"int32 control_loop_speed\n"
;
  }

  static const char* value(const ::custom_msgs::XL320Config_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_msgs::XL320Config_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.servo_names);
      stream.next(m.cw_angle_limits);
      stream.next(m.ccw_angle_limits);
      stream.next(m.max_torques);
      stream.next(m.d_gains);
      stream.next(m.i_gains);
      stream.next(m.p_gains);
      stream.next(m.control_loop_speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct XL320Config_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_msgs::XL320Config_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_msgs::XL320Config_<ContainerAllocator>& v)
  {
    s << indent << "servo_names[]" << std::endl;
    for (size_t i = 0; i < v.servo_names.size(); ++i)
    {
      s << indent << "  servo_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.servo_names[i]);
    }
    s << indent << "cw_angle_limits[]" << std::endl;
    for (size_t i = 0; i < v.cw_angle_limits.size(); ++i)
    {
      s << indent << "  cw_angle_limits[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.cw_angle_limits[i]);
    }
    s << indent << "ccw_angle_limits[]" << std::endl;
    for (size_t i = 0; i < v.ccw_angle_limits.size(); ++i)
    {
      s << indent << "  ccw_angle_limits[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.ccw_angle_limits[i]);
    }
    s << indent << "max_torques[]" << std::endl;
    for (size_t i = 0; i < v.max_torques.size(); ++i)
    {
      s << indent << "  max_torques[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.max_torques[i]);
    }
    s << indent << "d_gains[]" << std::endl;
    for (size_t i = 0; i < v.d_gains.size(); ++i)
    {
      s << indent << "  d_gains[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.d_gains[i]);
    }
    s << indent << "i_gains[]" << std::endl;
    for (size_t i = 0; i < v.i_gains.size(); ++i)
    {
      s << indent << "  i_gains[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.i_gains[i]);
    }
    s << indent << "p_gains[]" << std::endl;
    for (size_t i = 0; i < v.p_gains.size(); ++i)
    {
      s << indent << "  p_gains[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.p_gains[i]);
    }
    s << indent << "control_loop_speed: ";
    Printer<int32_t>::stream(s, indent + "  ", v.control_loop_speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_MSGS_MESSAGE_XL320CONFIG_H
